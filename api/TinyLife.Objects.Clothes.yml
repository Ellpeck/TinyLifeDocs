### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Clothes
  commentId: T:TinyLife.Objects.Clothes
  id: Clothes
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  - TinyLife.Objects.Clothes.Ages
  - TinyLife.Objects.Clothes.Colors
  - TinyLife.Objects.Clothes.DepthFunction
  - TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  - TinyLife.Objects.Clothes.GetIntentionDescription
  - TinyLife.Objects.Clothes.GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}},TinyLife.Objects.ClothesIntention,System.Single)
  - TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  - TinyLife.Objects.Clothes.GetPrice
  - TinyLife.Objects.Clothes.Icon
  - TinyLife.Objects.Clothes.Intentions
  - TinyLife.Objects.Clothes.Layer
  - TinyLife.Objects.Clothes.Layers
  - TinyLife.Objects.Clothes.Name
  - TinyLife.Objects.Clothes.NonBuyable
  - TinyLife.Objects.Clothes.Price
  - TinyLife.Objects.Clothes.ReferencePrice
  - TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  - TinyLife.Objects.Clothes.TextureRegions
  - TinyLife.Objects.Clothes.Types
  langs:
  - csharp
  - vb
  name: Clothes
  nameWithType: Clothes
  fullName: TinyLife.Objects.Clothes
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Clothes
    path: Objects/Clothes.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of information and a registry for clothing items (and hair) that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can wear.\nCustom clothes can be registered using <xref href=\"TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<Clothes>), new object[]{typeof(Clothes), "PrivateTypes"})]

      public class Clothes : IPricedObject
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of Clothes)), New Object() {GetType(Clothes), "PrivateTypes"})>

      Public Class Clothes
          Implements IPricedObject
  inheritance:
  - System.Object
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Clothes.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Clothes.Layers
  commentId: F:TinyLife.Objects.Clothes.Layers
  id: Layers
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Layers
  nameWithType: Clothes.Layers
  fullName: TinyLife.Objects.Clothes.Layers
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Layers
    path: Objects/Clothes.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of all valid <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> values\n"
  example: []
  syntax:
    content: public static readonly ClothesLayer[] Layers
    return:
      type: TinyLife.Objects.ClothesLayer[]
    content.vb: Public Shared ReadOnly Layers As ClothesLayer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Types
  commentId: F:TinyLife.Objects.Clothes.Types
  id: Types
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: Clothes.Types
  fullName: TinyLife.Objects.Clothes.Types
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Types
    path: Objects/Clothes.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA registry that contains all <xref href=\"TinyLife.Objects.Clothes\" data-throw-if-not-resolved=\"false\"></xref> in the game and all mods\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, Clothes> Types
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.Objects.Clothes}
    content.vb: Public Shared ReadOnly Types As IDictionary(Of String, Clothes)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Clothes.ReferencePrice
  commentId: F:TinyLife.Objects.Clothes.ReferencePrice
  id: ReferencePrice
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: ReferencePrice
  nameWithType: Clothes.ReferencePrice
  fullName: TinyLife.Objects.Clothes.ReferencePrice
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ReferencePrice
    path: Objects/Clothes.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe reference price for a piece of clothing.\nWhen clothes items are randomly chosen for a new <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, the items chosen will be guaranteed to have a price equal to or below this value.\n"
  example: []
  syntax:
    content: public const int ReferencePrice = 50
    return:
      type: System.Int32
    content.vb: Public Const ReferencePrice As Integer = 50
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Objects.Clothes.Name
  commentId: F:TinyLife.Objects.Clothes.Name
  id: Name
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Clothes.Name
  fullName: TinyLife.Objects.Clothes.Name
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Name
    path: Objects/Clothes.cs
    startLine: 123
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe name of this clothes item.\nSince this is used for the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry, the name must be unique across mods.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Layer
  commentId: F:TinyLife.Objects.Clothes.Layer
  id: Layer
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Layer
  nameWithType: Clothes.Layer
  fullName: TinyLife.Objects.Clothes.Layer
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Layer
    path: Objects/Clothes.cs
    startLine: 127
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> that this clothes item should render on\n"
  example: []
  syntax:
    content: public readonly ClothesLayer Layer
    return:
      type: TinyLife.Objects.ClothesLayer
    content.vb: Public ReadOnly Layer As ClothesLayer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.TextureRegions
  commentId: F:TinyLife.Objects.Clothes.TextureRegions
  id: TextureRegions
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: TextureRegions
  nameWithType: Clothes.TextureRegions
  fullName: TinyLife.Objects.Clothes.TextureRegions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TextureRegions
    path: Objects/Clothes.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"MLEM.Textures.TextureRegion\" data-throw-if-not-resolved=\"false\"></xref> that this clothes item uses in the world.\nThe texture region specified in the constructor only needs to cover the top left animation frame of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, any remaining frames will automatically be gathered.\nMultiple layers will be gathered if <xref href=\"TinyLife.Objects.Clothes.Colors\" data-throw-if-not-resolved=\"false\"></xref> has multiple entries. Each new layer will be gathered to the right of the passed region&apos;s area. \n"
  example: []
  syntax:
    content: public readonly TextureRegion[] TextureRegions
    return:
      type: MLEM.Textures.TextureRegion[]
    content.vb: Public ReadOnly TextureRegions As TextureRegion()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Colors
  commentId: F:TinyLife.Objects.Clothes.Colors
  id: Colors
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Clothes.Colors
  fullName: TinyLife.Objects.Clothes.Colors
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Colors
    path: Objects/Clothes.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe set of <xref href=\"TinyLife.Utilities.ColorScheme\" data-throw-if-not-resolved=\"false\"></xref>s that this clothes item can have its colors selected from.\nThe color scheme at index i will be mapped to the <xref href=\"TinyLife.Objects.Clothes.TextureRegions\" data-throw-if-not-resolved=\"false\"></xref> entry at index i.\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] Colors
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly Colors As ColorScheme()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Price
  commentId: F:TinyLife.Objects.Clothes.Price
  id: Price
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Clothes.Price
  fullName: TinyLife.Objects.Clothes.Price
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Price
    path: Objects/Clothes.cs
    startLine: 143
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe price of this piece of clothing.\nUse <xref href=\"TinyLife.Objects.Clothes.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> to retrieve this value for consistency.\n"
  example: []
  syntax:
    content: public readonly float Price
    return:
      type: System.Single
    content.vb: Public ReadOnly Price As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Intentions
  commentId: F:TinyLife.Objects.Clothes.Intentions
  id: Intentions
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Intentions
  nameWithType: Clothes.Intentions
  fullName: TinyLife.Objects.Clothes.Intentions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Intentions
    path: Objects/Clothes.cs
    startLine: 148
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> flags that determine what this clothes item can be used for.\nThis value is used by <xref href=\"TinyLife.Objects.Person.GetMatchingOutfit(TinyLife.Objects.ClothesIntention%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly ClothesIntention Intentions
    return:
      type: TinyLife.Objects.ClothesIntention
    content.vb: Public ReadOnly Intentions As ClothesIntention
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Icon
  commentId: P:TinyLife.Objects.Clothes.Icon
  id: Icon
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Clothes.Icon
  fullName: TinyLife.Objects.Clothes.Icon
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Icon
    path: Objects/Clothes.cs
    startLine: 153
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe character creator icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the character creator button for this object.\n"
  example: []
  syntax:
    content: public TextureRegion Icon { get; set; }
    parameters: []
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Property Icon As TextureRegion
  overload: TinyLife.Objects.Clothes.Icon*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.NonBuyable
  commentId: P:TinyLife.Objects.Clothes.NonBuyable
  id: NonBuyable
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: NonBuyable
  nameWithType: Clothes.NonBuyable
  fullName: TinyLife.Objects.Clothes.NonBuyable
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NonBuyable
    path: Objects/Clothes.cs
    startLine: 158
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis value determines whether this clothes item can be bought in the character creator.\nIf this value is false, the only way for this clothes item to be visible in the character creator is by adding it to the <xref href=\"TinyLife.World.Household.ClothesStorage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool NonBuyable { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property NonBuyable As Boolean
  overload: TinyLife.Objects.Clothes.NonBuyable*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.Ages
  commentId: P:TinyLife.Objects.Clothes.Ages
  id: Ages
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Ages
  nameWithType: Clothes.Ages
  fullName: TinyLife.Objects.Clothes.Ages
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Ages
    path: Objects/Clothes.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe age groups that are allowed to wear these clothes.\nDefaults to <xref href=\"TinyLife.Objects.AgeGroup.Adult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AgeGroup Ages { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public Property Ages As AgeGroup
  overload: TinyLife.Objects.Clothes.Ages*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.DepthFunction
  commentId: P:TinyLife.Objects.Clothes.DepthFunction
  id: DepthFunction
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: DepthFunction
  nameWithType: Clothes.DepthFunction
  fullName: TinyLife.Objects.Clothes.DepthFunction
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: DepthFunction
    path: Objects/Clothes.cs
    startLine: 168
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that determines the depth with which this clothes item is rendered based on the given <xref href=\"TinyLife.Objects.Person.Pose\" data-throw-if-not-resolved=\"false\"></xref>.\nThis function defaults to returning <xref href=\"TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<Person.Pose, float> DepthFunction { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Person.Pose,System.Single}
    content.vb: Public Property DepthFunction As Func(Of Person.Pose, Single)
  overload: TinyLife.Objects.Clothes.DepthFunction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  commentId: M:TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  id: '#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])'
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme[])
  nameWithType: Clothes.Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme[])
  fullName: TinyLife.Objects.Clothes.Clothes(System.String, TinyLife.Objects.ClothesLayer, MLEM.Textures.TextureRegion, System.Single, TinyLife.Objects.ClothesIntention, TinyLife.Utilities.ColorScheme[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Objects/Clothes.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new clothes item with the given data\n"
  example: []
  syntax:
    content: public Clothes(string name, ClothesLayer layer, TextureRegion region, float price, ClothesIntention intentions, params ColorScheme[] colors)
    parameters:
    - id: name
      type: System.String
      description: The name of this clothes item
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The <xref href="TinyLife.Objects.ClothesLayer" data-throw-if-not-resolved="false"></xref> that this clothes item should render on
    - id: region
      type: MLEM.Textures.TextureRegion
      description: The top left (standing frame 1) <xref href="MLEM.Textures.TextureRegion" data-throw-if-not-resolved="false"></xref> that this clothes item uses in the world
    - id: price
      type: System.Single
      description: The price of this piece of clothing
    - id: intentions
      type: TinyLife.Objects.ClothesIntention
      description: A set of <xref href="TinyLife.Objects.ClothesIntention" data-throw-if-not-resolved="false"></xref> flags that determine what this clothes item can be used for
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The <xref href="TinyLife.Utilities.ColorScheme" data-throw-if-not-resolved="false"></xref> that this clothes item can have its colors selected from
    content.vb: Public Sub New(name As String, layer As ClothesLayer, region As TextureRegion, price As Single, intentions As ClothesIntention, ParamArray colors As ColorScheme())
  overload: TinyLife.Objects.Clothes.#ctor*
  nameWithType.vb: Clothes.Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Clothes.Clothes(System.String, TinyLife.Objects.ClothesLayer, MLEM.Textures.TextureRegion, System.Single, TinyLife.Objects.ClothesIntention, TinyLife.Utilities.ColorScheme())
  name.vb: Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme())
- uid: TinyLife.Objects.Clothes.GetPrice
  commentId: M:TinyLife.Objects.Clothes.GetPrice
  id: GetPrice
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Clothes.GetPrice()
  fullName: TinyLife.Objects.Clothes.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetPrice
    path: Objects/Clothes.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.Objects.Clothes.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.GetIntentionDescription
  commentId: M:TinyLife.Objects.Clothes.GetIntentionDescription
  id: GetIntentionDescription
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetIntentionDescription()
  nameWithType: Clothes.GetIntentionDescription()
  fullName: TinyLife.Objects.Clothes.GetIntentionDescription()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIntentionDescription
    path: Objects/Clothes.cs
    startLine: 200
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of strings (split into multiple lines) that describes this clothes item&apos;s <xref href=\"TinyLife.Objects.Clothes.Intentions\" data-throw-if-not-resolved=\"false\"></xref> in a localized fashion\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetIntentionDescription()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: This clothes item&apos;s intention description
    content.vb: Public Function GetIntentionDescription As IEnumerable(Of String)
  overload: TinyLife.Objects.Clothes.GetIntentionDescription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  commentId: M:TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  id: Register(TinyLife.Objects.Clothes)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Register(Clothes)
  nameWithType: Clothes.Register(Clothes)
  fullName: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Register
    path: Objects/Clothes.cs
    startLine: 211
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRegister the given clothes instance to the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static void Register(Clothes clothes)
    parameters:
    - id: clothes
      type: TinyLife.Objects.Clothes
      description: The clothes to register
    content.vb: Public Shared Sub Register(clothes As Clothes)
  overload: TinyLife.Objects.Clothes.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  id: GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetClothes(ClothesLayer, AgeGroup)
  nameWithType: Clothes.GetClothes(ClothesLayer, AgeGroup)
  fullName: TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer, TinyLife.Objects.AgeGroup)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetClothes
    path: Objects/Clothes.cs
    startLine: 222
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the clothes from the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry that match the given <xref href=\"TinyLife.Objects.Clothes.Layer\" data-throw-if-not-resolved=\"false\"></xref> and optionally match the required <xref href=\"TinyLife.Objects.Clothes.Ages\" data-throw-if-not-resolved=\"false\"></xref> \n"
  example: []
  syntax:
    content: public static IEnumerable<Clothes> GetClothes(ClothesLayer layer, AgeGroup age = (AgeGroup)0)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The layer
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The required ages, or 0 to allow all ages
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
      description: The clothes that match
    content.vb: Public Shared Function GetClothes(layer As ClothesLayer, age As AgeGroup = CType(0, AgeGroup)) As IEnumerable(Of Clothes)
  overload: TinyLife.Objects.Clothes.GetClothes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  id: GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetIntentionPercentage(IEnumerable<Clothes>, ClothesIntention)
  nameWithType: Clothes.GetIntentionPercentage(IEnumerable<Clothes>, ClothesIntention)
  fullName: TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable<TinyLife.Objects.Clothes>, TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIntentionPercentage
    path: Objects/Clothes.cs
    startLine: 236
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a value between 0 and 1 that represents how well the given set of clothes (<code data-dev-comment-type=\"paramref\" class=\"paramref\">outfit</code>) matches the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref>.\nFor a person, this method is used by <xref href=\"TinyLife.Objects.Person.GetMatchingOutfit(TinyLife.Objects.ClothesIntention%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static float GetIntentionPercentage(IEnumerable<Clothes> outfit, ClothesIntention intention)
    parameters:
    - id: outfit
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
      description: The outfit whose intention percentage to query
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to match the outfit to
    return:
      type: System.Single
      description: The intention match percentage, between 0 and 1
    content.vb: Public Shared Function GetIntentionPercentage(outfit As IEnumerable(Of Clothes), intention As ClothesIntention) As Single
  overload: TinyLife.Objects.Clothes.GetIntentionPercentage*
  nameWithType.vb: Clothes.GetIntentionPercentage(IEnumerable(Of Clothes), ClothesIntention)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Clothes), TinyLife.Objects.ClothesIntention)
  name.vb: GetIntentionPercentage(IEnumerable(Of Clothes), ClothesIntention)
- uid: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}},TinyLife.Objects.ClothesIntention,System.Single)
  commentId: M:TinyLife.Objects.Clothes.GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}},TinyLife.Objects.ClothesIntention,System.Single)
  id: GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}},TinyLife.Objects.ClothesIntention,System.Single)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetIntentionMatchingOutfit(IEnumerable<IEnumerable<Clothes>>, ClothesIntention, Single)
  nameWithType: Clothes.GetIntentionMatchingOutfit(IEnumerable<IEnumerable<Clothes>>, ClothesIntention, Single)
  fullName: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TinyLife.Objects.Clothes>>, TinyLife.Objects.ClothesIntention, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIntentionMatchingOutfit
    path: Objects/Clothes.cs
    startLine: 255
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the index for an outfit that best matches the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> out of all of the passed outfits.\nThis method is used by <xref href=\"TinyLife.Objects.Person.GetMatchingOutfit(TinyLife.Objects.ClothesIntention%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> and evaluates the best match by using <xref href=\"TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable%7bTinyLife.Objects.Clothes%7d%2cTinyLife.Objects.ClothesIntention)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static int GetIntentionMatchingOutfit(IEnumerable<IEnumerable<Clothes>> outfits, ClothesIntention intention, float requiredMatchPercentage = 0F)
    parameters:
    - id: outfits
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}}
      description: A set of outfits, each of which is a set of clothing items
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to match the best outfit to
    - id: requiredMatchPercentage
      type: System.Single
      description: An optional minimum percentage that the returned outfit needs to have. If this is greater than 0, this method can return -1, meaning no outfit is sufficiently matching.
    return:
      type: System.Int32
      description: The index in the <code data-dev-comment-type="paramref" class="paramref">outfits</code> collection that best matches the intention, or -1 if <code data-dev-comment-type="paramref" class="paramref">requiredMatchPercentage</code> is set and there is no sufficient match
    content.vb: Public Shared Function GetIntentionMatchingOutfit(outfits As IEnumerable(Of IEnumerable(Of Clothes)), intention As ClothesIntention, requiredMatchPercentage As Single = 0F) As Integer
  overload: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit*
  nameWithType.vb: Clothes.GetIntentionMatchingOutfit(IEnumerable(Of IEnumerable(Of Clothes)), ClothesIntention, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Clothes)), TinyLife.Objects.ClothesIntention, System.Single)
  name.vb: GetIntentionMatchingOutfit(IEnumerable(Of IEnumerable(Of Clothes)), ClothesIntention, Single)
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  commentId: M:TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Clothes>()
  nameWithType: Extensions.JsonCopy<Clothes>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Clothes>()
  nameWithType.vb: Extensions.JsonCopy(Of Clothes)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Clothes)()
  name.vb: JsonCopy(Of Clothes)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Clothes>
    nameWithType: Extensions.JsonCopy<Clothes>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Clothes>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Clothes)
    nameWithType: Extensions.JsonCopy(Of Clothes)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Clothes)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: TinyLife.Objects.ClothesLayer[]
  isExternal: true
  name: ClothesLayer[]
  nameWithType: ClothesLayer[]
  fullName: TinyLife.Objects.ClothesLayer[]
  nameWithType.vb: ClothesLayer()
  fullName.vb: TinyLife.Objects.ClothesLayer()
  name.vb: ClothesLayer()
  spec.csharp:
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Clothes
  commentId: T:TinyLife.Objects.Clothes
  parent: TinyLife.Objects
  name: Clothes
  nameWithType: Clothes
  fullName: TinyLife.Objects.Clothes
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.Objects.Clothes}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.Objects.Clothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Clothes>
  nameWithType: IDictionary<String, Clothes>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.Objects.Clothes>
  nameWithType.vb: IDictionary(Of String, Clothes)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.Objects.Clothes)
  name.vb: IDictionary(Of String, Clothes)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.Clothes.Types
  commentId: F:TinyLife.Objects.Clothes.Types
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Objects.Clothes.Colors
  commentId: F:TinyLife.Objects.Clothes.Colors
  isExternal: true
- uid: MLEM.Textures.TextureRegion[]
  isExternal: true
  name: TextureRegion[]
  nameWithType: TextureRegion[]
  fullName: MLEM.Textures.TextureRegion[]
  nameWithType.vb: TextureRegion()
  fullName.vb: MLEM.Textures.TextureRegion()
  name.vb: TextureRegion()
  spec.csharp:
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: TinyLife.Objects.Clothes.TextureRegions
  commentId: F:TinyLife.Objects.Clothes.TextureRegions
  isExternal: true
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Clothes.GetPrice
  commentId: M:TinyLife.Objects.Clothes.GetPrice
  isExternal: true
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.Person.GetMatchingOutfit(TinyLife.Objects.ClothesIntention,System.Single)
  commentId: M:TinyLife.Objects.Person.GetMatchingOutfit(TinyLife.Objects.ClothesIntention,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Clothes.Icon*
  commentId: Overload:TinyLife.Objects.Clothes.Icon
  name: Icon
  nameWithType: Clothes.Icon
  fullName: TinyLife.Objects.Clothes.Icon
- uid: TinyLife.World.Household.ClothesStorage
  commentId: F:TinyLife.World.Household.ClothesStorage
  isExternal: true
- uid: TinyLife.Objects.Clothes.NonBuyable*
  commentId: Overload:TinyLife.Objects.Clothes.NonBuyable
  name: NonBuyable
  nameWithType: Clothes.NonBuyable
  fullName: TinyLife.Objects.Clothes.NonBuyable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.AgeGroup.Adult
  commentId: F:TinyLife.Objects.AgeGroup.Adult
  isExternal: true
- uid: TinyLife.Objects.Clothes.Ages*
  commentId: Overload:TinyLife.Objects.Clothes.Ages
  name: Ages
  nameWithType: Clothes.Ages
  fullName: TinyLife.Objects.Clothes.Ages
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Objects.Person.Pose
  commentId: T:TinyLife.Objects.Person.Pose
  parent: TinyLife.Objects
  name: Person.Pose
  nameWithType: Person.Pose
  fullName: TinyLife.Objects.Person.Pose
- uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  name: GetDepth(ClothesLayer)
  nameWithType: Extensions.GetDepth(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
    name: GetDepth
    nameWithType: Extensions.GetDepth
    fullName: TinyLife.Utilities.Extensions.GetDepth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
    name: GetDepth
    nameWithType: Extensions.GetDepth
    fullName: TinyLife.Utilities.Extensions.GetDepth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.DepthFunction*
  commentId: Overload:TinyLife.Objects.Clothes.DepthFunction
  name: DepthFunction
  nameWithType: Clothes.DepthFunction
  fullName: TinyLife.Objects.Clothes.DepthFunction
- uid: System.Func{TinyLife.Objects.Person.Pose,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person.Pose,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<Person.Pose, Single>
  nameWithType: Func<Person.Pose, Single>
  fullName: System.Func<TinyLife.Objects.Person.Pose, System.Single>
  nameWithType.vb: Func(Of Person.Pose, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person.Pose, System.Single)
  name.vb: Func(Of Person.Pose, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person.Pose
    name: Person.Pose
    nameWithType: Person.Pose
    fullName: TinyLife.Objects.Person.Pose
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person.Pose
    name: Person.Pose
    nameWithType: Person.Pose
    fullName: TinyLife.Objects.Person.Pose
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.#ctor*
  commentId: Overload:TinyLife.Objects.Clothes.#ctor
  name: Clothes
  nameWithType: Clothes.Clothes
  fullName: TinyLife.Objects.Clothes.Clothes
- uid: TinyLife.Objects.Clothes.GetPrice*
  commentId: Overload:TinyLife.Objects.Clothes.GetPrice
  name: GetPrice
  nameWithType: Clothes.GetPrice
  fullName: TinyLife.Objects.Clothes.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.Intentions
  commentId: F:TinyLife.Objects.Clothes.Intentions
  isExternal: true
- uid: TinyLife.Objects.Clothes.GetIntentionDescription*
  commentId: Overload:TinyLife.Objects.Clothes.GetIntentionDescription
  name: GetIntentionDescription
  nameWithType: Clothes.GetIntentionDescription
  fullName: TinyLife.Objects.Clothes.GetIntentionDescription
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.Register*
  commentId: Overload:TinyLife.Objects.Clothes.Register
  name: Register
  nameWithType: Clothes.Register
  fullName: TinyLife.Objects.Clothes.Register
- uid: TinyLife.Objects.Clothes.Layer
  commentId: F:TinyLife.Objects.Clothes.Layer
  isExternal: true
- uid: TinyLife.Objects.Clothes.Ages
  commentId: P:TinyLife.Objects.Clothes.Ages
  isExternal: true
- uid: TinyLife.Objects.Clothes.GetClothes*
  commentId: Overload:TinyLife.Objects.Clothes.GetClothes
  name: GetClothes
  nameWithType: Clothes.GetClothes
  fullName: TinyLife.Objects.Clothes.GetClothes
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Clothes>
  nameWithType: IEnumerable<Clothes>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Clothes>
  nameWithType.vb: IEnumerable(Of Clothes)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Clothes)
  name.vb: IEnumerable(Of Clothes)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.GetIntentionPercentage*
  commentId: Overload:TinyLife.Objects.Clothes.GetIntentionPercentage
  name: GetIntentionPercentage
  nameWithType: Clothes.GetIntentionPercentage
  fullName: TinyLife.Objects.Clothes.GetIntentionPercentage
- uid: TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Clothes.GetIntentionPercentage(System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes},TinyLife.Objects.ClothesIntention)
  isExternal: true
- uid: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit*
  commentId: Overload:TinyLife.Objects.Clothes.GetIntentionMatchingOutfit
  name: GetIntentionMatchingOutfit
  nameWithType: Clothes.GetIntentionMatchingOutfit
  fullName: TinyLife.Objects.Clothes.GetIntentionMatchingOutfit
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<Clothes>>
  nameWithType: IEnumerable<IEnumerable<Clothes>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TinyLife.Objects.Clothes>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of Clothes))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Clothes))
  name.vb: IEnumerable(Of IEnumerable(Of Clothes))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )

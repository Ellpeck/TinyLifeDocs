### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  id: LotType
  parent: TinyLife.World
  children:
  - TinyLife.World.LotType.#ctor(System.String,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  - TinyLife.World.LotType.Employments
  - TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  - TinyLife.World.LotType.GetVisitPriority
  - TinyLife.World.LotType.Gym
  - TinyLife.World.LotType.IsResidential
  - TinyLife.World.LotType.Name
  - TinyLife.World.LotType.Park
  - TinyLife.World.LotType.Register(TinyLife.World.LotType)
  - TinyLife.World.LotType.RequiredFurniture
  - TinyLife.World.LotType.Residential
  - TinyLife.World.LotType.Types
  langs:
  - csharp
  - vb
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotType
    path: World/Lot.cs
    startLine: 357
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot type is data for a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that determines the required furniture on the lot as well as whether the lot is residential or not.\nAdditionally, custom lot types can define different reasons and interactions for <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects to visit lots of the type.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<LotType>), new object[]{typeof(LotType), "PrivateTypes"})]

      public class LotType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of LotType)), New Object() {GetType(LotType), "PrivateTypes"})>

      Public Class LotType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  id: Types
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: LotType.Types
  fullName: TinyLife.World.LotType.Types
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: World/Lot.cs
    startLine: 364
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA registry for all <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref> objects that the game and mods define\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, LotType> Types
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.World.LotType}
    content.vb: Public Shared ReadOnly Types As IDictionary(Of String, LotType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.LotType.Residential
  commentId: F:TinyLife.World.LotType.Residential
  id: Residential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Residential
  nameWithType: LotType.Residential
  fullName: TinyLife.World.LotType.Residential
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Residential
    path: World/Lot.cs
    startLine: 367
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Residential
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Residential As LotType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.LotType.Park
  commentId: F:TinyLife.World.LotType.Park
  id: Park
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Park
  nameWithType: LotType.Park
  fullName: TinyLife.World.LotType.Park
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Park
    path: World/Lot.cs
    startLine: 370
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Park
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Park As LotType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.LotType.Gym
  commentId: F:TinyLife.World.LotType.Gym
  id: Gym
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Gym
  nameWithType: LotType.Gym
  fullName: TinyLife.World.LotType.Gym
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Gym
    path: World/Lot.cs
    startLine: 373
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Gym
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Gym As LotType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.LotType.Name
  commentId: F:TinyLife.World.LotType.Name
  id: Name
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotType.Name
  fullName: TinyLife.World.LotType.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: World/Lot.cs
    startLine: 383
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  id: IsResidential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: IsResidential
  nameWithType: LotType.IsResidential
  fullName: TinyLife.World.LotType.IsResidential
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsResidential
    path: World/Lot.cs
    startLine: 388
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this lot is residential.\nA residential lot is one that <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>s can move into.\n"
  example: []
  syntax:
    content: public readonly bool IsResidential
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsResidential As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  id: RequiredFurniture
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: RequiredFurniture
  nameWithType: LotType.RequiredFurniture
  fullName: TinyLife.World.LotType.RequiredFurniture
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredFurniture
    path: World/Lot.cs
    startLine: 393
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of furniture that is required on the lot.\nEach entry determines the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> required, as well as the amount of that item that is required on the lot and an unlocalized display name for the requirement.\n"
  example: []
  syntax:
    content: public readonly (Predicate<Furniture>, int, string)[] RequiredFurniture
    return:
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
    content.vb: Public ReadOnly RequiredFurniture As(Predicate(Of Furniture), Integer, String)(Of Predicate(Of Furniture)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  id: GetVisitPriority
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetVisitPriority
  nameWithType: LotType.GetVisitPriority
  fullName: TinyLife.World.LotType.GetVisitPriority
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisitPriority
    path: World/Lot.cs
    startLine: 399
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA function that returns, for a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> with this lot type, and a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> trying ot visit the lot, how likely it is for the lot to be chosen.\nThe higher the return value is, the more likely it is for this lot to be chosen.\nFor reference, the &quot;Park&quot; lot type always returns 200.\n"
  example: []
  syntax:
    content: public readonly Func<Lot, Person, int> GetVisitPriority
    return:
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
    content.vb: Public ReadOnly GetVisitPriority As Func(Of Lot, Person, Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  id: Employments
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Employments
    path: World/Lot.cs
    startLine: 404
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> instances that this lot requires to keep running.\nPlayers have the ability to add people from their exported households to work in a lot employment position.\n"
  example: []
  syntax:
    content: public LotEmployment[] Employments { get; set; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment[]
    content.vb: Public Property Employments As LotEmployment()
  overload: TinyLife.World.LotType.Employments*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotType.#ctor(System.String,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  commentId: M:TinyLife.World.LotType.#ctor(System.String,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  id: '#ctor(System.String,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])'
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: LotType(String, Boolean, Func<Lot, Person, Int32>, (Predicate<Furniture>, Int32, String)[])
  nameWithType: LotType.LotType(String, Boolean, Func<Lot, Person, Int32>, (Predicate<Furniture>, Int32, String)[])
  fullName: TinyLife.World.LotType.LotType(System.String, System.Boolean, System.Func<TinyLife.World.Lot, TinyLife.Objects.Person, System.Int32>, System.ValueTuple<System.Predicate<TinyLife.Objects.Furniture>, System.Int32, System.String>[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: World/Lot.cs
    startLine: 413
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot type with the given settings\n"
  example: []
  syntax:
    content: public LotType(string name, bool isResidential, Func<Lot, Person, int> getVisitPriority, params (Predicate<Furniture>, int, string)[] requiredFurniture)
    parameters:
    - id: name
      type: System.String
      description: The name of this lot type
    - id: isResidential
      type: System.Boolean
      description: Whether lots of this type should be considered residential
    - id: getVisitPriority
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
      description: A function that returns this lot type&apos;s visitation priority
    - id: requiredFurniture
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
      description: A set of furniture and amounts that have to be present on lots of this type, as well as an unlocalized name for the requirement
    content.vb: Public Sub New(name As String, isResidential As Boolean, getVisitPriority As Func(Of Lot, Person, Integer), ParamArray requiredFurniture As(Predicate(Of Furniture), Integer, String)(Of Predicate(Of Furniture) , Integer, String)())
  overload: TinyLife.World.LotType.#ctor*
  nameWithType.vb: LotType.LotType(String, Boolean, Func(Of Lot, Person, Int32), (Predicate(Of Furniture), Int32, String)(Of Predicate(Of Furniture), Int32, String)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.LotType.LotType(System.String, System.Boolean, System.Func(Of TinyLife.World.Lot, TinyLife.Objects.Person, System.Int32), System.ValueTuple(Of System.Predicate(Of TinyLife.Objects.Furniture), System.Int32, System.String)())
  name.vb: LotType(String, Boolean, Func(Of Lot, Person, Int32), (Predicate(Of Furniture), Int32, String)(Of Predicate(Of Furniture), Int32, String)())
- uid: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  commentId: M:TinyLife.World.LotType.Register(TinyLife.World.LotType)
  id: Register(TinyLife.World.LotType)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Register(LotType)
  nameWithType: LotType.Register(LotType)
  fullName: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: World/Lot.cs
    startLine: 424
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new lot type to the <xref href=\"TinyLife.World.LotType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static LotType Register(LotType type)
    parameters:
    - id: type
      type: TinyLife.World.LotType
      description: The lot type to register
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared Function Register(type As LotType) As LotType
  overload: TinyLife.World.LotType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  commentId: M:TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  id: GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetGroupVisitPriority(Lot, Int32)
  nameWithType: LotType.GetGroupVisitPriority(Lot, Int32)
  fullName: TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGroupVisitPriority
    path: World/Lot.cs
    startLine: 437
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.World.LotType.GetVisitPriority\" data-throw-if-not-resolved=\"false\"></xref> that increases the passed visit priority if there are already other people on the lot.\nThis method should be used for public lots to increase the likelihood of additional people visiting if the player visits the lot.\n"
  example: []
  syntax:
    content: public static int GetGroupVisitPriority(Lot lot, int basePriority)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot whose visit priority to query
    - id: basePriority
      type: System.Int32
      description: The base visit priority that the lot should have if no one is there already
    return:
      type: System.Int32
      description: A visit priority affected by the amount of people on the lot
    content.vb: Public Shared Function GetGroupVisitPriority(lot As Lot, basePriority As Integer) As Integer
  overload: TinyLife.World.LotType.GetGroupVisitPriority*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LotType>()
  nameWithType: Extensions.JsonCopy<LotType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotType>()
  nameWithType.vb: Extensions.JsonCopy(Of LotType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotType)()
  name.vb: JsonCopy(Of LotType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<LotType>
    nameWithType: Extensions.JsonCopy<LotType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of LotType)
    nameWithType: Extensions.JsonCopy(Of LotType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.World.LotType}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.World.LotType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, LotType>
  nameWithType: IDictionary<String, LotType>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.World.LotType>
  nameWithType.vb: IDictionary(Of String, LotType)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.World.LotType)
  name.vb: IDictionary(Of String, LotType)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.LotType
    name: LotType
    nameWithType: LotType
    fullName: TinyLife.World.LotType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.LotType
    name: LotType
    nameWithType: LotType
    fullName: TinyLife.World.LotType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
  isExternal: true
  name: (T1, T2, T3)<Predicate<Furniture>, Int32, String>[]
  nameWithType: (T1, T2, T3)<Predicate<Furniture>, Int32, String>[]
  fullName: System.ValueTuple<System.Predicate<TinyLife.Objects.Furniture>, System.Int32, System.String>[]
  nameWithType.vb: (T1, T2, T3)(Of Predicate(Of Furniture), Int32, String)()
  fullName.vb: System.ValueTuple(Of System.Predicate(Of TinyLife.Objects.Furniture), System.Int32, System.String)()
  name.vb: (T1, T2, T3)(Of Predicate(Of Furniture), Int32, String)()
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
  commentId: T:System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
  parent: System
  definition: System.Func`3
  name: Func<Lot, Person, Int32>
  nameWithType: Func<Lot, Person, Int32>
  fullName: System.Func<TinyLife.World.Lot, TinyLife.Objects.Person, System.Int32>
  nameWithType.vb: Func(Of Lot, Person, Int32)
  fullName.vb: System.Func(Of TinyLife.World.Lot, TinyLife.Objects.Person, System.Int32)
  name.vb: Func(Of Lot, Person, Int32)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World.LotType.Employments*
  commentId: Overload:TinyLife.World.LotType.Employments
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
- uid: TinyLife.World.LotEmployment[]
  isExternal: true
  name: LotEmployment[]
  nameWithType: LotEmployment[]
  fullName: TinyLife.World.LotEmployment[]
  nameWithType.vb: LotEmployment()
  fullName.vb: TinyLife.World.LotEmployment()
  name.vb: LotEmployment()
  spec.csharp:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.LotType.#ctor*
  commentId: Overload:TinyLife.World.LotType.#ctor
  name: LotType
  nameWithType: LotType.LotType
  fullName: TinyLife.World.LotType.LotType
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  isExternal: true
- uid: TinyLife.World.LotType.Register*
  commentId: Overload:TinyLife.World.LotType.Register
  name: Register
  nameWithType: LotType.Register
  fullName: TinyLife.World.LotType.Register
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  isExternal: true
- uid: TinyLife.World.LotType.GetGroupVisitPriority*
  commentId: Overload:TinyLife.World.LotType.GetGroupVisitPriority
  name: GetGroupVisitPriority
  nameWithType: LotType.GetGroupVisitPriority
  fullName: TinyLife.World.LotType.GetGroupVisitPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

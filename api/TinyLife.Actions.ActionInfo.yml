### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  id: ActionInfo
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionInfo.ActionLocation
  - TinyLife.Actions.ActionInfo.ActionSpot
  - TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.Person,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.Person,TinyLife.Objects.MapObject)
  - TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  - TinyLife.Actions.ActionInfo.GetActionObject``1
  - TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  - TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Actions.ActionInfo.Map
  - TinyLife.Actions.ActionInfo.OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.Actions.ActionInfo.Person
  - TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  - TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
  type: Class
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionInfo
    path: Actions/ActionInfo.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action info is a set of information that is required to execute an action\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class ActionInfo : GenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class ActionInfo
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.ActionInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.ActionInfo.Person
  commentId: P:TinyLife.Actions.ActionInfo.Person
  id: Person
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: ActionInfo.Person
  fullName: TinyLife.Actions.ActionInfo.Person
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: Actions/ActionInfo.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionInfo.Person\" data-throw-if-not-resolved=\"false\"></xref> that is currently executing the action\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Actions.ActionInfo.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionInfo.ActionLocation
  commentId: F:TinyLife.Actions.ActionInfo.ActionLocation
  id: ActionLocation
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ActionLocation
  nameWithType: ActionInfo.ActionLocation
  fullName: TinyLife.Actions.ActionInfo.ActionLocation
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionLocation
    path: Actions/ActionInfo.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe location that this action should be executed in.\nNote that, for manually executed actions, this is always the world position that the mouse was in.\nFor automatically executed actions, this is often the <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601\" data-throw-if-not-resolved=\"false\"></xref>&apos;s location or an offset based on the <xref href=\"TinyLife.Actions.ActionInfo.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 ActionLocation
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly ActionLocation As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionInfo.ActionSpot
  commentId: P:TinyLife.Actions.ActionInfo.ActionSpot
  id: ActionSpot
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ActionSpot
  nameWithType: ActionInfo.ActionSpot
  fullName: TinyLife.Actions.ActionInfo.ActionSpot
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionSpot
    path: Actions/ActionInfo.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: >
    c

    The <xref href="TinyLife.Actions.ActionInfo.ActionSpot" data-throw-if-not-resolved="false"></xref> that this action is related to. Can be null, even if the <xref href="TinyLife.Actions.ActionInfo.actionObject" data-throw-if-not-resolved="false"></xref> exists.
  example: []
  syntax:
    content: public ActionSpot ActionSpot { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.ActionSpot
    content.vb: Public Property ActionSpot As ActionSpot
  overload: TinyLife.Actions.ActionInfo.ActionSpot*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionInfo.Map
  commentId: P:TinyLife.Actions.ActionInfo.Map
  id: Map
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: ActionInfo.Map
  fullName: TinyLife.Actions.ActionInfo.Map
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: Actions/ActionInfo.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionInfo.Map\" data-throw-if-not-resolved=\"false\"></xref> that the action is executed on\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.Actions.ActionInfo.Map*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1
  id: GetActionObject``1
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetActionObject<T>()
  nameWithType: ActionInfo.GetActionObject<T>()
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetActionObject
    path: Actions/ActionInfo.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the object that this action is related to, or null if there is none or the object isn&apos;t of the given type.\nIf this action is related to a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> and <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> is <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, the wall is returned. Otherwise, the involved <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> is returned, if it matches <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public T GetActionObject<T>()
    typeParameters:
    - id: T
      description: The type that the action object is expected to be of
    return:
      type: '{T}'
      description: The action object, or null if there is none or the type does not match
    content.vb: Public Function GetActionObject(Of T) As T
  overload: TinyLife.Actions.ActionInfo.GetActionObject*
  nameWithType.vb: ActionInfo.GetActionObject(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)()
  name.vb: GetActionObject(Of T)()
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  id: AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: AddAuxiliaryObject(MapObject, ActionSpot)
  nameWithType: ActionInfo.AddAuxiliaryObject(MapObject, ActionSpot)
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddAuxiliaryObject
    path: Actions/ActionInfo.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAdds an additional object that, along with the <xref href=\"TinyLife.Actions.ActionInfo.actionObject\" data-throw-if-not-resolved=\"false\"></xref>, is involved in this action.\nAdding an auxiliary object causes <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to consider it, as well as <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to be called for it.\n"
  example: []
  syntax:
    content: public void AddAuxiliaryObject(MapObject o, ActionSpot spot = null)
    parameters:
    - id: o
      type: TinyLife.Objects.MapObject
      description: The object to add
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: An optional action spot to store with the object which can be retrieved later using <xref href="TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub AddAuxiliaryObject(o As MapObject, spot As ActionSpot = Nothing)
  overload: TinyLife.Actions.ActionInfo.AddAuxiliaryObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  id: GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedObjects<T>(ObjectCategory, Boolean)
  nameWithType: ActionInfo.GetInvolvedObjects<T>(ObjectCategory, Boolean)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects<T>(TinyLife.Objects.ObjectCategory, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetInvolvedObjects
    path: Actions/ActionInfo.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a set of objects of the given type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> that match the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">category</code>.\nThe objects considered are the <xref href=\"TinyLife.Actions.ActionInfo.actionObject\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.Furniture.GetChildren%60%601\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.ActionInfo.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.Person.GetHeldObject%60%601\" data-throw-if-not-resolved=\"false\"></xref> and the auxiliary objects added using <xref href=\"TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject%2cTinyLife.Objects.ActionSpot)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerable<T> GetInvolvedObjects<T>(ObjectCategory category = null, bool includeIndirectly = true)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The category that the objects should have. Defaults to Nothing, meaning all categories are considered.
    - id: includeIndirectly
      type: System.Boolean
      description: Whether indirectly involved objects, like the <xref href="TinyLife.Objects.Furniture.ParentFurniture" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.Furniture.GetChildren%60%601" data-throw-if-not-resolved="false"></xref> of furniture should be included
    typeParameters:
    - id: T
      description: The type that the objects returned should have
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of objects that match the above criteria
    content.vb: Public Function GetInvolvedObjects(Of T)(category As ObjectCategory = Nothing, includeIndirectly As Boolean = True) As IEnumerable(Of T)
  overload: TinyLife.Actions.ActionInfo.GetInvolvedObjects*
  nameWithType.vb: ActionInfo.GetInvolvedObjects(Of T)(ObjectCategory, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObjects(Of T)(TinyLife.Objects.ObjectCategory, System.Boolean)
  name.vb: GetInvolvedObjects(Of T)(ObjectCategory, Boolean)
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  id: GetInvolvedObject``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedObject<T>(ObjectCategory, Boolean)
  nameWithType: ActionInfo.GetInvolvedObject<T>(ObjectCategory, Boolean)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObject<T>(TinyLife.Objects.ObjectCategory, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetInvolvedObject
    path: Actions/ActionInfo.cs
    startLine: 148
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns the first available entry from <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or null if there is none\n"
  example: []
  syntax:
    content: >-
      public T GetInvolvedObject<T>(ObjectCategory category = null, bool includeIndirectly = true)
          where T : MapObject
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The category that the objects should have. Defaults to Nothing, meaning all categories are considered.
    - id: includeIndirectly
      type: System.Boolean
      description: Whether indirectly involved objects, like the <xref href="TinyLife.Objects.Furniture.ParentFurniture" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.Furniture.GetChildren%60%601" data-throw-if-not-resolved="false"></xref> of furniture should be included
    typeParameters:
    - id: T
      description: The type that the objects returned should have
    return:
      type: '{T}'
      description: The first object that matches the criteria described in <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function GetInvolvedObject(Of T As MapObject)(category As ObjectCategory = Nothing, includeIndirectly As Boolean = True) As T
  overload: TinyLife.Actions.ActionInfo.GetInvolvedObject*
  nameWithType.vb: ActionInfo.GetInvolvedObject(Of T)(ObjectCategory, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObject(Of T)(TinyLife.Objects.ObjectCategory, System.Boolean)
  name.vb: GetInvolvedObject(Of T)(ObjectCategory, Boolean)
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  id: GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: GetInvolvedActionSpot(Furniture)
  nameWithType: ActionInfo.GetInvolvedActionSpot(Furniture)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetInvolvedActionSpot
    path: Actions/ActionInfo.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the involved action spot for the given involved <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the furniture passed is the <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.ActionInfo.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> will be returned.\nOtherwise, the action spot of the involved furniture stored using <xref href=\"TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject%2cTinyLife.Objects.ActionSpot)\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public ActionSpot GetInvolvedActionSpot(Furniture involved)
    parameters:
    - id: involved
      type: TinyLife.Objects.Furniture
      description: The involved object whose action spot to return
    return:
      type: TinyLife.Objects.ActionSpot
      description: The involved action spot, or null if there is none
    content.vb: Public Function GetInvolvedActionSpot(involved As Furniture) As ActionSpot
  overload: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  id: ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: ToFreeActionSpot(ObjectCategory)
  nameWithType: ActionInfo.ToFreeActionSpot(ObjectCategory)
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToFreeActionSpot
    path: Actions/ActionInfo.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the first free action spot that matches the given <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flag for this action&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this action has no action object and <code data-dev-comment-type=\"paramref\" class=\"paramref\">context</code> contains <xref href=\"TinyLife.Objects.ObjectCategory.Ground\" data-throw-if-not-resolved=\"false\"></xref>, <pre><code>this</code></pre> is returned.\n"
  example: []
  syntax:
    content: public ActionInfo ToFreeActionSpot(ObjectCategory context = null)
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The category that the action spot should have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The corresponding action info, or null if there is none
    content.vb: Public Function ToFreeActionSpot(context As ObjectCategory = Nothing) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.ToFreeActionSpot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Actions.ActionInfo.OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: OccupyFreeActionSpot(ObjectCategory, Boolean, Nullable<Direction2>)
  nameWithType: ActionInfo.OccupyFreeActionSpot(ObjectCategory, Boolean, Nullable<Direction2>)
  fullName: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OccupyFreeActionSpot
    path: Actions/ActionInfo.cs
    startLine: 191
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis is a shorthand method for <xref href=\"TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method needs to be called every update frame for the person to keep occupying the action spot.\n"
  example: []
  syntax:
    content: public bool OccupyFreeActionSpot(ObjectCategory context = null, bool enter = false, Direction2? rotation = default(Direction2? ))
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The category that the action spot should have
    - id: enter
      type: System.Boolean
      description: Whether or not the action spot should be entered
    - id: rotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: The rotation that the person should have, or the action spot&apos;s rotation by default
    return:
      type: System.Boolean
      description: Whether or not we were able to occupy a free action spot
    content.vb: Public Function OccupyFreeActionSpot(context As ObjectCategory = Nothing, enter As Boolean = False, rotation As Direction2? = Nothing) As Boolean
  overload: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot*
  nameWithType.vb: ActionInfo.OccupyFreeActionSpot(ObjectCategory, Boolean, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot(TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: OccupyFreeActionSpot(ObjectCategory, Boolean, Nullable(Of Direction2))
- uid: TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: ActionInfo.Validate(Person)
  fullName: TinyLife.Actions.ActionInfo.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: Actions/ActionInfo.cs
    startLine: 201
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nValidates this action info.\nThis method should only be called when this action info is read from disk.\n"
  example: []
  syntax:
    content: public void Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action info belongs to
    content.vb: Public Sub Validate(person As Person)
  overload: TinyLife.Actions.ActionInfo.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.Person,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.Person,Microsoft.Xna.Framework.Vector2)
  id: FromLocation(TinyLife.Objects.Person,Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromLocation(Person, Vector2)
  nameWithType: ActionInfo.FromLocation(Person, Vector2)
  fullName: TinyLife.Actions.ActionInfo.FromLocation(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FromLocation
    path: Actions/ActionInfo.cs
    startLine: 211
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a new <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> based on the given location (and no objects)\n"
  example: []
  syntax:
    content: public static ActionInfo FromLocation(Person person, Vector2 location)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action info should be related to
    - id: location
      type: Microsoft.Xna.Framework.Vector2
      description: The location that this action info should have
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data
    content.vb: Public Shared Function FromLocation(person As Person, location As Vector2) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromLocation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.Person,TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.Person,TinyLife.Objects.MapObject)
  id: FromObjectGeneric(TinyLife.Objects.Person,TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromObjectGeneric(Person, MapObject)
  nameWithType: ActionInfo.FromObjectGeneric(Person, MapObject)
  fullName: TinyLife.Actions.ActionInfo.FromObjectGeneric(TinyLife.Objects.Person, TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FromObjectGeneric
    path: Actions/ActionInfo.cs
    startLine: 221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a new <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> basd on the given object, but no object spot\n"
  example: []
  syntax:
    content: public static ActionInfo FromObjectGeneric(Person person, MapObject obj)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action info should be related to
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object that this action info should have
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given data
    content.vb: Public Shared Function FromObjectGeneric(person As Person, obj As MapObject) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromObjectGeneric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  id: FromSelf(TinyLife.Objects.Person)
  parent: TinyLife.Actions.ActionInfo
  langs:
  - csharp
  - vb
  name: FromSelf(Person)
  nameWithType: ActionInfo.FromSelf(Person)
  fullName: TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FromSelf
    path: Actions/ActionInfo.cs
    startLine: 230
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a new <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> based on the given person, with the action object also being the person\n"
  example: []
  syntax:
    content: public static ActionInfo FromSelf(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to create an action info from
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info based on the person
    content.vb: Public Shared Function FromSelf(person As Person) As ActionInfo
  overload: TinyLife.Actions.ActionInfo.FromSelf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionInfo>()
  nameWithType: Extensions.JsonCopy<ActionInfo>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionInfo>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionInfo)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionInfo)()
  name.vb: JsonCopy(Of ActionInfo)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionInfo>
    nameWithType: Extensions.JsonCopy<ActionInfo>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionInfo)
    nameWithType: Extensions.JsonCopy(Of ActionInfo)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.ActionInfo.Person
  commentId: P:TinyLife.Actions.ActionInfo.Person
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.Person*
  commentId: Overload:TinyLife.Actions.ActionInfo.Person
  name: Person
  nameWithType: ActionInfo.Person
  fullName: TinyLife.Actions.ActionInfo.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.ActionSpot
  commentId: P:TinyLife.Actions.ActionInfo.ActionSpot
  isExternal: true
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Actions.ActionInfo.actionObject
  commentId: F:TinyLife.Actions.ActionInfo.actionObject
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.ActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.ActionSpot
  name: ActionSpot
  nameWithType: ActionInfo.ActionSpot
  fullName: TinyLife.Actions.ActionInfo.ActionSpot
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Actions.ActionInfo.Map
  commentId: P:TinyLife.Actions.ActionInfo.Map
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.Map*
  commentId: Overload:TinyLife.Actions.ActionInfo.Map
  name: Map
  nameWithType: ActionInfo.Map
  fullName: TinyLife.Actions.ActionInfo.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.ActionInfo.GetActionObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetActionObject
  name: GetActionObject
  nameWithType: ActionInfo.GetActionObject
  fullName: TinyLife.Actions.ActionInfo.GetActionObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot(TinyLife.Objects.Furniture)
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.AddAuxiliaryObject
  name: AddAuxiliaryObject
  nameWithType: ActionInfo.AddAuxiliaryObject
  fullName: TinyLife.Actions.ActionInfo.AddAuxiliaryObject
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  parent: TinyLife.Objects.Furniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  parent: TinyLife.Objects.Furniture
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren<T>
    nameWithType: Furniture.GetChildren<T>
    fullName: TinyLife.Objects.Furniture.GetChildren<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren(Of T)
    nameWithType: Furniture.GetChildren(Of T)
    fullName: TinyLife.Objects.Furniture.GetChildren(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetHeldObject``1
  commentId: M:TinyLife.Objects.Person.GetHeldObject``1
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.ActionInfo.AddAuxiliaryObject(TinyLife.Objects.MapObject,TinyLife.Objects.ActionSpot)
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedObjects
  name: GetInvolvedObjects
  nameWithType: ActionInfo.GetInvolvedObjects
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObject*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedObject
  name: GetInvolvedObject
  nameWithType: ActionInfo.GetInvolvedObject
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObject
- uid: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.GetInvolvedActionSpot
  name: GetInvolvedActionSpot
  nameWithType: ActionInfo.GetInvolvedActionSpot
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedActionSpot
- uid: TinyLife.Objects.ObjectCategory.Ground
  commentId: F:TinyLife.Objects.ObjectCategory.Ground
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.ToFreeActionSpot
  name: ToFreeActionSpot
  nameWithType: ActionInfo.ToFreeActionSpot
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpot
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot*
  commentId: Overload:TinyLife.Actions.ActionInfo.OccupyFreeActionSpot
  name: OccupyFreeActionSpot
  nameWithType: ActionInfo.OccupyFreeActionSpot
  fullName: TinyLife.Actions.ActionInfo.OccupyFreeActionSpot
- uid: System.Nullable{MLEM.Misc.Direction2}
  commentId: T:System.Nullable{MLEM.Misc.Direction2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Direction2>
  nameWithType: Nullable<Direction2>
  fullName: System.Nullable<MLEM.Misc.Direction2>
  nameWithType.vb: Nullable(Of Direction2)
  fullName.vb: System.Nullable(Of MLEM.Misc.Direction2)
  name.vb: Nullable(Of Direction2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionInfo.Validate*
  commentId: Overload:TinyLife.Actions.ActionInfo.Validate
  name: Validate
  nameWithType: ActionInfo.Validate
  fullName: TinyLife.Actions.ActionInfo.Validate
- uid: TinyLife.Actions.ActionInfo.FromLocation*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromLocation
  name: FromLocation
  nameWithType: ActionInfo.FromLocation
  fullName: TinyLife.Actions.ActionInfo.FromLocation
- uid: TinyLife.Actions.ActionInfo.FromObjectGeneric*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromObjectGeneric
  name: FromObjectGeneric
  nameWithType: ActionInfo.FromObjectGeneric
  fullName: TinyLife.Actions.ActionInfo.FromObjectGeneric
- uid: TinyLife.Actions.ActionInfo.FromSelf*
  commentId: Overload:TinyLife.Actions.ActionInfo.FromSelf
  name: FromSelf
  nameWithType: ActionInfo.FromSelf
  fullName: TinyLife.Actions.ActionInfo.FromSelf

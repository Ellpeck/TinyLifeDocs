### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.TalkAction.TalkSettings
  commentId: T:TinyLife.Actions.TalkAction.TalkSettings
  id: TalkAction.TalkSettings
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.TalkAction.TalkSettings.CanExecute
  - TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  - TinyLife.Actions.TalkAction.TalkSettings.Evaluate(TinyLife.Actions.SocialAction)
  - TinyLife.Actions.TalkAction.TalkSettings.FailEmotion
  - TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  - TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  - TinyLife.Actions.TalkAction.TalkSettings.GainRomancePercentage
  - TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  - TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  - TinyLife.Actions.TalkAction.TalkSettings.LoweredEmotion
  - TinyLife.Actions.TalkAction.TalkSettings.OnFailure
  - TinyLife.Actions.TalkAction.TalkSettings.OnSuccess
  - TinyLife.Actions.TalkAction.TalkSettings.PartnerEmoteCategory
  - TinyLife.Actions.TalkAction.TalkSettings.PartnerSpeakStyle
  - TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  - TinyLife.Actions.TalkAction.TalkSettings.RequiredPersonality
  - TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  - TinyLife.Actions.TalkAction.TalkSettings.RestoredNeed
  - TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  - TinyLife.Actions.TalkAction.TalkSettings.TalkMinutes
  langs:
  - csharp
  - vb
  name: TalkAction.TalkSettings
  nameWithType: TalkAction.TalkSettings
  fullName: TinyLife.Actions.TalkAction.TalkSettings
  type: Class
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TalkSettings
    path: Actions/TalkAction.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAdditional settings for <xref href=\"TinyLife.Actions.TalkAction\" data-throw-if-not-resolved=\"false\"></xref>, used by <xref href=\"TinyLife.Actions.TalkAction.Create(System.String%2cSystem.Func%7bTinyLife.Objects.Person%2cSystem.Single%7d%2cTinyLife.Actions.TalkAction.TalkSettings)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class TalkSettings : GenericDataHolder, IGenericDataHolder'
    content.vb: >-
      Public Class TalkSettings
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.TalkAction.TalkSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  id: FriendshipGain
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: FriendshipGain
  nameWithType: TalkAction.TalkSettings.FriendshipGain
  fullName: TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendshipGain
    path: Actions/TalkAction.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of friendship that can be gained at max.\nIf friendship should primiarily be lost through this action (because it is a mean action, for example), set <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance\" data-throw-if-not-resolved=\"false\"></xref> to greater than or equal to 1.\n"
  example: []
  syntax:
    content: public Func<ActionInfo, uint> FriendshipGain
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.UInt32}
    content.vb: Public FriendshipGain As Func(Of ActionInfo, UInteger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  id: GoBadlyChance
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: GoBadlyChance
  nameWithType: TalkAction.TalkSettings.GoBadlyChance
  fullName: TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoBadlyChance
    path: Actions/TalkAction.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe chance (should be 0 or greater) that this action goes badly and friendship is reduced instead.\nNote that, for very good relationships, this value is multiplied with a value greater than or equal to 0.25. This means that, if an action should go badly with a very high chance, a value greater than 1 should be returned here.\n"
  example: []
  syntax:
    content: public Func<ActionInfo, float> GoBadlyChance
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Single}
    content.vb: Public GoBadlyChance As Func(Of ActionInfo, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.TalkMinutes
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.TalkMinutes
  id: TalkMinutes
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: TalkMinutes
  nameWithType: TalkAction.TalkSettings.TalkMinutes
  fullName: TinyLife.Actions.TalkAction.TalkSettings.TalkMinutes
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TalkMinutes
    path: Actions/TalkAction.cs
    startLine: 118
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of in-game minutes that this action should last\n"
  example: []
  syntax:
    content: public float TalkMinutes
    return:
      type: System.Single
    content.vb: Public TalkMinutes As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  id: EmoteCategory
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: EmoteCategory
  nameWithType: TalkAction.TalkSettings.EmoteCategory
  fullName: TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EmoteCategory
    path: Actions/TalkAction.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe category of emotes that should be displayed as part of this conversation\n"
  example: []
  syntax:
    content: public EmoteCategory EmoteCategory
    return:
      type: TinyLife.Actions.EmoteCategory
    content.vb: Public EmoteCategory As EmoteCategory
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  id: SpeakStyle
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: SpeakStyle
  nameWithType: TalkAction.TalkSettings.SpeakStyle
  fullName: TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakStyle
    path: Actions/TalkAction.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe speak styles to use when talking, can be a combined flag\n"
  example: []
  syntax:
    content: public SpeakStyle SpeakStyle
    return:
      type: TinyLife.Objects.SpeakStyle
    content.vb: Public SpeakStyle As SpeakStyle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.PartnerEmoteCategory
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.PartnerEmoteCategory
  id: PartnerEmoteCategory
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: PartnerEmoteCategory
  nameWithType: TalkAction.TalkSettings.PartnerEmoteCategory
  fullName: TinyLife.Actions.TalkAction.TalkSettings.PartnerEmoteCategory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PartnerEmoteCategory
    path: Actions/TalkAction.cs
    startLine: 131
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe emote categories for the interaction partner to use.\nIf this is not set, <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory\" data-throw-if-not-resolved=\"false\"></xref> is used for the partner as well.\n"
  example: []
  syntax:
    content: public EmoteCategory? PartnerEmoteCategory
    return:
      type: System.Nullable{TinyLife.Actions.EmoteCategory}
    content.vb: Public PartnerEmoteCategory As EmoteCategory?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.PartnerSpeakStyle
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.PartnerSpeakStyle
  id: PartnerSpeakStyle
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: PartnerSpeakStyle
  nameWithType: TalkAction.TalkSettings.PartnerSpeakStyle
  fullName: TinyLife.Actions.TalkAction.TalkSettings.PartnerSpeakStyle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PartnerSpeakStyle
    path: Actions/TalkAction.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe speak styles for the interaction partner to use.\nIf this is not set, <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle\" data-throw-if-not-resolved=\"false\"></xref> is used for the partner as well.\n"
  example: []
  syntax:
    content: public SpeakStyle? PartnerSpeakStyle
    return:
      type: System.Nullable{TinyLife.Objects.SpeakStyle}
    content.vb: Public PartnerSpeakStyle As SpeakStyle?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  id: GainedSkill
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: GainedSkill
  nameWithType: TalkAction.TalkSettings.GainedSkill
  fullName: TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GainedSkill
    path: Actions/TalkAction.cs
    startLine: 140
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe skill that is gained if this conversation goes well. Higher levels in this skill also reduce the chance of the conversation going badly.\n"
  example: []
  syntax:
    content: public (SkillType Type, int Amount) GainedSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public GainedSkill As(Type As SkillType, Amount As Integer)(Of SkillType , Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  id: GainSkillOnFailure
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: GainSkillOnFailure
  nameWithType: TalkAction.TalkSettings.GainSkillOnFailure
  fullName: TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GainSkillOnFailure
    path: Actions/TalkAction.cs
    startLine: 145
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nWhether the <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure\" data-throw-if-not-resolved=\"false\"></xref> should be gained on failure rather than success.\nThis is useful for skills that are considered &quot;mean&quot;, where the gained skill is mischievious etc.\n"
  example: []
  syntax:
    content: public bool GainSkillOnFailure
    return:
      type: System.Boolean
    content.vb: Public GainSkillOnFailure As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.RestoredNeed
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RestoredNeed
  id: RestoredNeed
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: RestoredNeed
  nameWithType: TalkAction.TalkSettings.RestoredNeed
  fullName: TinyLife.Actions.TalkAction.TalkSettings.RestoredNeed
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RestoredNeed
    path: Actions/TalkAction.cs
    startLine: 149
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe need (alongside <xref href=\"TinyLife.NeedType.Social\" data-throw-if-not-resolved=\"false\"></xref>) that is restored during the conversation\n"
  example: []
  syntax:
    content: public (NeedType Type, int Amount) RestoredNeed
    return:
      type: System.ValueTuple{TinyLife.NeedType,System.Int32}
    content.vb: Public RestoredNeed As(Type As NeedType, Amount As Integer)(Of NeedType , Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  id: RequiredEmotion
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: RequiredEmotion
  nameWithType: TalkAction.TalkSettings.RequiredEmotion
  fullName: TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredEmotion
    path: Actions/TalkAction.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Emotions.EmotionType\" data-throw-if-not-resolved=\"false\"></xref> that is required for this action to be available.\nInternally, this is passed into <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public EmotionType RequiredEmotion
    return:
      type: TinyLife.Emotions.EmotionType
    content.vb: Public RequiredEmotion As EmotionType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RequiredPersonality
  id: RequiredPersonality
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: RequiredPersonality
  nameWithType: TalkAction.TalkSettings.RequiredPersonality
  fullName: TinyLife.Actions.TalkAction.TalkSettings.RequiredPersonality
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredPersonality
    path: Actions/TalkAction.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> that is required for this action to be available.\nInternally, this is passed into <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public PersonalityType RequiredPersonality
    return:
      type: TinyLife.PersonalityType
    content.vb: Public RequiredPersonality As PersonalityType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: TalkAction.TalkSettings.RequiredSkill
  fullName: TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredSkill
    path: Actions/TalkAction.cs
    startLine: 165
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> and level of the skill that is required for this action to become available.\nWhen the required skill is leveled up, this action will also be displayed in the list of now-available actions.\nInternally, this is passed into <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredSkill\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (SkillType Type, int Level) RequiredSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public RequiredSkill As(Type As SkillType, Level As Integer)(Of SkillType , Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.CanExecute
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.CanExecute
  id: CanExecute
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: TalkAction.TalkSettings.CanExecute
  fullName: TinyLife.Actions.TalkAction.TalkSettings.CanExecute
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecute
    path: Actions/TalkAction.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that returns whether this action can currently be executed.\nSee <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> for more information on execution requirements.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.FailEmotion
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.FailEmotion
  id: FailEmotion
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: FailEmotion
  nameWithType: TalkAction.TalkSettings.FailEmotion
  fullName: TinyLife.Actions.TalkAction.TalkSettings.FailEmotion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FailEmotion
    path: Actions/TalkAction.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> that is added to the person if this talk action fails.\nThe talk actions fails if the <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance\" data-throw-if-not-resolved=\"false\"></xref> has been randomly reached.\n"
  example: []
  syntax:
    content: public EmotionModifier FailEmotion
    return:
      type: TinyLife.Emotions.EmotionModifier
    content.vb: Public FailEmotion As EmotionModifier
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.GainRomancePercentage
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GainRomancePercentage
  id: GainRomancePercentage
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: GainRomancePercentage
  nameWithType: TalkAction.TalkSettings.GainRomancePercentage
  fullName: TinyLife.Actions.TalkAction.TalkSettings.GainRomancePercentage
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GainRomancePercentage
    path: Actions/TalkAction.cs
    startLine: 181
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that returns what percentage (between 0 and 1) of <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain\" data-throw-if-not-resolved=\"false\"></xref> is added to the relationship as <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> rather than <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref>.\nIf an interaction is romantic in nature, this function should return a value greater than 0.\nIf this function is null, 0% of the friendship gain will be romantic.\n"
  example: []
  syntax:
    content: public Func<ActionInfo, float> GainRomancePercentage
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Single}
    content.vb: Public GainRomancePercentage As Func(Of ActionInfo, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.LoweredEmotion
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.LoweredEmotion
  id: LoweredEmotion
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: LoweredEmotion
  nameWithType: TalkAction.TalkSettings.LoweredEmotion
  fullName: TinyLife.Actions.TalkAction.TalkSettings.LoweredEmotion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LoweredEmotion
    path: Actions/TalkAction.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn <xref href=\"TinyLife.Emotions.EmotionType\" data-throw-if-not-resolved=\"false\"></xref> that is lowered when this action is successful for both conversation partners.\nThis uses <xref href=\"TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType%2cSystem.Single%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref> internally.\n"
  example: []
  syntax:
    content: public (EmotionType Type, float Amount) LoweredEmotion
    return:
      type: System.ValueTuple{TinyLife.Emotions.EmotionType,System.Single}
    content.vb: Public LoweredEmotion As(Type As EmotionType, Amount As Single)(Of EmotionType , Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.OnSuccess
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.OnSuccess
  id: OnSuccess
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: OnSuccess
  nameWithType: TalkAction.TalkSettings.OnSuccess
  fullName: TinyLife.Actions.TalkAction.TalkSettings.OnSuccess
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnSuccess
    path: Actions/TalkAction.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action that is invoked when this talk action succeeds. Note that this is only invoked for the main partner (<xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public Action<SocialAction> OnSuccess
    return:
      type: System.Action{TinyLife.Actions.SocialAction}
    content.vb: Public OnSuccess As Action(Of SocialAction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.OnFailure
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.OnFailure
  id: OnFailure
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: OnFailure
  nameWithType: TalkAction.TalkSettings.OnFailure
  fullName: TinyLife.Actions.TalkAction.TalkSettings.OnFailure
  type: Field
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnFailure
    path: Actions/TalkAction.cs
    startLine: 194
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action that is invoked when this talk action fails. Note that this is only invoked for the main partner (<xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public Action<SocialAction> OnFailure
    return:
      type: System.Action{TinyLife.Actions.SocialAction}
    content.vb: Public OnFailure As Action(Of SocialAction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: CheckCanExecute(ActionInfo, Boolean)
  nameWithType: TalkAction.TalkSettings.CheckCanExecute(ActionInfo, Boolean)
  fullName: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CheckCanExecute
    path: Actions/TalkAction.cs
    startLine: 203
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nChecks whether this <xref href=\"TinyLife.Actions.TalkAction.TalkSettings\" data-throw-if-not-resolved=\"false\"></xref> instance is currently able to be executed.\nNote that this does not take into account the <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion\" data-throw-if-not-resolved=\"false\"></xref>, which can be validated using <xref href=\"TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteResult CheckCanExecute(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: The execution validity result
    content.vb: Public Function CheckCanExecute(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.TalkAction.TalkSettings.Evaluate(TinyLife.Actions.SocialAction)
  commentId: M:TinyLife.Actions.TalkAction.TalkSettings.Evaluate(TinyLife.Actions.SocialAction)
  id: Evaluate(TinyLife.Actions.SocialAction)
  parent: TinyLife.Actions.TalkAction.TalkSettings
  langs:
  - csharp
  - vb
  name: Evaluate(SocialAction)
  nameWithType: TalkAction.TalkSettings.Evaluate(SocialAction)
  fullName: TinyLife.Actions.TalkAction.TalkSettings.Evaluate(TinyLife.Actions.SocialAction)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/TalkAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Evaluate
    path: Actions/TalkAction.cs
    startLine: 213
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nEvaluates these <xref href=\"TinyLife.Actions.TalkAction.TalkSettings\" data-throw-if-not-resolved=\"false\"></xref> after a <xref href=\"TinyLife.Actions.TalkAction\" data-throw-if-not-resolved=\"false\"></xref> has completed.\nThis method causes friendship and romance to be added to the involved people&apos;s <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref>, adds the <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.GainedSkill\" data-throw-if-not-resolved=\"false\"></xref> etc.\nThis method is automatically called by the main conversation partner (<xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref>) in <xref href=\"TinyLife.Actions.TalkAction\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Evaluate(SocialAction action)
    parameters:
    - id: action
      type: TinyLife.Actions.SocialAction
      description: The action
    content.vb: Public Overridable Sub Evaluate(action As SocialAction)
  overload: TinyLife.Actions.TalkAction.TalkSettings.Evaluate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Actions.TalkAction
  commentId: T:TinyLife.Actions.TalkAction
  name: TalkAction
  nameWithType: TalkAction
  fullName: TinyLife.Actions.TalkAction
- uid: TinyLife.Actions.TalkAction.Create(System.String,System.Func{TinyLife.Objects.Person,System.Single},TinyLife.Actions.TalkAction.TalkSettings)
  commentId: M:TinyLife.Actions.TalkAction.Create(System.String,System.Func{TinyLife.Objects.Person,System.Single},TinyLife.Actions.TalkAction.TalkSettings)
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.TalkAction.TalkSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<TalkAction.TalkSettings>()
  nameWithType: Extensions.JsonCopy<TalkAction.TalkSettings>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.TalkAction.TalkSettings>()
  nameWithType.vb: Extensions.JsonCopy(Of TalkAction.TalkSettings)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.TalkAction.TalkSettings)()
  name.vb: JsonCopy(Of TalkAction.TalkSettings)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<TalkAction.TalkSettings>
    nameWithType: Extensions.JsonCopy<TalkAction.TalkSettings>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.TalkAction.TalkSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of TalkAction.TalkSettings)
    nameWithType: Extensions.JsonCopy(Of TalkAction.TalkSettings)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.TalkAction.TalkSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GoBadlyChance
  isExternal: true
- uid: System.Func{TinyLife.Actions.ActionInfo,System.UInt32}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.UInt32}
  parent: System
  definition: System.Func`2
  name: Func<ActionInfo, UInt32>
  nameWithType: Func<ActionInfo, UInt32>
  fullName: System.Func<TinyLife.Actions.ActionInfo, System.UInt32>
  nameWithType.vb: Func(Of ActionInfo, UInt32)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, System.UInt32)
  name.vb: Func(Of ActionInfo, UInt32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Actions.ActionInfo,System.Single}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<ActionInfo, Single>
  nameWithType: Func<ActionInfo, Single>
  fullName: System.Func<TinyLife.Actions.ActionInfo, System.Single>
  nameWithType.vb: Func(Of ActionInfo, Single)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, System.Single)
  name.vb: Func(Of ActionInfo, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.EmoteCategory
  isExternal: true
- uid: System.Nullable{TinyLife.Actions.EmoteCategory}
  commentId: T:System.Nullable{TinyLife.Actions.EmoteCategory}
  parent: System
  definition: System.Nullable`1
  name: Nullable<EmoteCategory>
  nameWithType: Nullable<EmoteCategory>
  fullName: System.Nullable<TinyLife.Actions.EmoteCategory>
  nameWithType.vb: Nullable(Of EmoteCategory)
  fullName.vb: System.Nullable(Of TinyLife.Actions.EmoteCategory)
  name.vb: Nullable(Of EmoteCategory)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.SpeakStyle
  isExternal: true
- uid: System.Nullable{TinyLife.Objects.SpeakStyle}
  commentId: T:System.Nullable{TinyLife.Objects.SpeakStyle}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SpeakStyle>
  nameWithType: Nullable<SpeakStyle>
  fullName: System.Nullable<TinyLife.Objects.SpeakStyle>
  nameWithType.vb: Nullable(Of SpeakStyle)
  fullName.vb: System.Nullable(Of TinyLife.Objects.SpeakStyle)
  name.vb: Nullable(Of SpeakStyle)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<SkillType, Int32>
  nameWithType: (T1, T2)<SkillType, Int32>
  fullName: System.ValueTuple<TinyLife.Skills.SkillType, System.Int32>
  nameWithType.vb: (T1, T2)(Of SkillType, Int32)
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillType, System.Int32)
  name.vb: (T1, T2)(Of SkillType, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GainSkillOnFailure
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.NeedType.Social
  commentId: F:TinyLife.NeedType.Social
  isExternal: true
- uid: System.ValueTuple{TinyLife.NeedType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.NeedType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<NeedType, Int32>
  nameWithType: (T1, T2)<NeedType, Int32>
  fullName: System.ValueTuple<TinyLife.NeedType, System.Int32>
  nameWithType.vb: (T1, T2)(Of NeedType, Int32)
  fullName.vb: System.ValueTuple(Of TinyLife.NeedType, System.Int32)
  name.vb: (T1, T2)(Of NeedType, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Emotions.EmotionType
  commentId: T:TinyLife.Emotions.EmotionType
  parent: TinyLife.Emotions
  name: EmotionType
  nameWithType: EmotionType
  fullName: TinyLife.Emotions.EmotionType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  isExternal: true
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  isExternal: true
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  isExternal: true
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Emotions.EmotionModifier
  commentId: T:TinyLife.Emotions.EmotionModifier
  parent: TinyLife.Emotions
  name: EmotionModifier
  nameWithType: EmotionModifier
  fullName: TinyLife.Emotions.EmotionModifier
- uid: TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.FriendshipGain
  isExternal: true
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  isExternal: true
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  isExternal: true
- uid: TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,TinyLife.GameSpeed)
  commentId: M:TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,TinyLife.GameSpeed)
  isExternal: true
- uid: System.ValueTuple{TinyLife.Emotions.EmotionType,System.Single}
  commentId: T:System.ValueTuple{TinyLife.Emotions.EmotionType,System.Single}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<EmotionType, Single>
  nameWithType: (T1, T2)<EmotionType, Single>
  fullName: System.ValueTuple<TinyLife.Emotions.EmotionType, System.Single>
  nameWithType.vb: (T1, T2)(Of EmotionType, Single)
  fullName.vb: System.ValueTuple(Of TinyLife.Emotions.EmotionType, System.Single)
  name.vb: (T1, T2)(Of EmotionType, Single)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    nameWithType: EmotionType
    fullName: TinyLife.Emotions.EmotionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    nameWithType: EmotionType
    fullName: TinyLife.Emotions.EmotionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  parent: TinyLife.Actions.SocialAction
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: System.Action{TinyLife.Actions.SocialAction}
  commentId: T:System.Action{TinyLife.Actions.SocialAction}
  parent: System
  definition: System.Action`1
  name: Action<SocialAction>
  nameWithType: Action<SocialAction>
  fullName: System.Action<TinyLife.Actions.SocialAction>
  nameWithType.vb: Action(Of SocialAction)
  fullName.vb: System.Action(Of TinyLife.Actions.SocialAction)
  name.vb: Action(Of SocialAction)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.SocialAction
    name: SocialAction
    nameWithType: SocialAction
    fullName: TinyLife.Actions.SocialAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.SocialAction
    name: SocialAction
    nameWithType: SocialAction
    fullName: TinyLife.Actions.SocialAction
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.TalkAction.TalkSettings
  commentId: T:TinyLife.Actions.TalkAction.TalkSettings
  parent: TinyLife.Actions
  name: TalkAction.TalkSettings
  nameWithType: TalkAction.TalkSettings
  fullName: TinyLife.Actions.TalkAction.TalkSettings
- uid: TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RequiredSkill
  isExternal: true
- uid: TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.RequiredEmotion
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute*
  commentId: Overload:TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute
  name: CheckCanExecute
  nameWithType: TalkAction.TalkSettings.CheckCanExecute
  fullName: TinyLife.Actions.TalkAction.TalkSettings.CheckCanExecute
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  parent: TinyLife
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
- uid: TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  commentId: F:TinyLife.Actions.TalkAction.TalkSettings.GainedSkill
  isExternal: true
- uid: TinyLife.Actions.TalkAction.TalkSettings.Evaluate*
  commentId: Overload:TinyLife.Actions.TalkAction.TalkSettings.Evaluate
  name: Evaluate
  nameWithType: TalkAction.TalkSettings.Evaluate
  fullName: TinyLife.Actions.TalkAction.TalkSettings.Evaluate

### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionType.TypeSettings
  commentId: T:TinyLife.Actions.ActionType.TypeSettings
  id: ActionType.TypeSettings
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  - TinyLife.Actions.ActionType.TypeSettings.Ai
  - TinyLife.Actions.ActionType.TypeSettings.CanExecute
  - TinyLife.Actions.ActionType.TypeSettings.Categories
  - TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  - TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  - TinyLife.Actions.ActionType.TypeSettings.Context
  - TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  - TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  - TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  - TinyLife.Actions.ActionType.TypeSettings.IconName
  - TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  - TinyLife.Actions.ActionType.TypeSettings.Name
  - TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  - TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  - TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  - TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  - TinyLife.Actions.ActionType.TypeSettings.SetData(System.String,System.Object)
  - TinyLife.Actions.ActionType.TypeSettings.Texture
  - TinyLife.Actions.ActionType.TypeSettings.Varieties
  langs:
  - csharp
  - vb
  name: ActionType.TypeSettings
  nameWithType: ActionType.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings
  type: Struct
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TypeSettings
    path: Actions/ActionType.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA struct that contains information about an <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public struct TypeSettings : IGenericDataHolder'
    content.vb: >-
      Public Structure TypeSettings
          Implements IGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Actions.ActionType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Actions.ActionType.TypeSettings.Name
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Name
  id: Name
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ActionType.TypeSettings.Name
  fullName: TinyLife.Actions.ActionType.TypeSettings.Name
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Name
    path: Actions/ActionType.cs
    startLine: 184
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe name of this action type\n"
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  commentId: P:TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  id: NameWithoutCategory
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: NameWithoutCategory
  nameWithType: ActionType.TypeSettings.NameWithoutCategory
  fullName: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NameWithoutCategory
    path: Actions/ActionType.cs
    startLine: 189
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Name\" data-throw-if-not-resolved=\"false\"></xref> of this action type, but without a possible category prefix.\nThis property automatically returns a substring of <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly string NameWithoutCategory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property NameWithoutCategory As String
  overload: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TypeSettings.Categories
  commentId: P:TinyLife.Actions.ActionType.TypeSettings.Categories
  id: Categories
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: ActionType.TypeSettings.Categories
  fullName: TinyLife.Actions.ActionType.TypeSettings.Categories
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Categories
    path: Actions/ActionType.cs
    startLine: 194
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe categories of this action type. The categories are strings at the start of this action type&apos;s <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Name\" data-throw-if-not-resolved=\"false\"></xref> delimited with a slash (/) character.\nThis property automatically returns a substring of <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Name\" data-throw-if-not-resolved=\"false\"></xref>, converted to an array.\n"
  example: []
  syntax:
    content: public readonly string[] Categories { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Categories As String()
  overload: TinyLife.Actions.ActionType.TypeSettings.Categories*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TypeSettings.Texture
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Texture
  id: Texture
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: ActionType.TypeSettings.Texture
  fullName: TinyLife.Actions.ActionType.TypeSettings.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Texture
    path: Actions/ActionType.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe texture region used in the top left action queue display in-game.\nIf this value is null, <xref href=\"TinyLife.Actions.Action.GetIconObject\" data-throw-if-not-resolved=\"false\"></xref> is used for the icon instead.\n"
  example: []
  syntax:
    content: public TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Texture As TextureRegion
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.Context
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Context
  id: Context
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ActionType.TypeSettings.Context
  fullName: TinyLife.Actions.ActionType.TypeSettings.Context
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Context
    path: Actions/ActionType.cs
    startLine: 204
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA combined <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flag that represents all of the objects that this action can be executed on.\nSetting the context to <xref href=\"TinyLife.Objects.ObjectCategory.Nothing\" data-throw-if-not-resolved=\"false\"></xref> and giving the action <xref href=\"TinyLife.Actions.ActionType.AiSettings\" data-throw-if-not-resolved=\"false\"></xref> causes it to be invoked from the AI as if it had the <xref href=\"TinyLife.Objects.ObjectCategory.Self\" data-throw-if-not-resolved=\"false\"></xref> category instead.\n"
  example: []
  syntax:
    content: public ObjectCategory Context
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Context As ObjectCategory
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  id: CanExecute
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: ActionType.TypeSettings.CanExecute
  fullName: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanExecute
    path: Actions/ActionType.cs
    startLine: 210
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA delegate that returns a <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> based on whether the given situation allows this action to be executed.\nThis value is initialized always return <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref>.\nTo query this delegate effectively, use <xref href=\"TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, which also validates the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredSkill\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  id: ConstructedType
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: ActionType.TypeSettings.ConstructedType
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ConstructedType
    path: Actions/ActionType.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe type that is constructed in <xref href=\"TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo%2cSystem.Nullable%7bTinyLife.Actions.ActionVariety%7d)\" data-throw-if-not-resolved=\"false\"></xref> to create a new action instance.\nIf additional arguments are required, use <xref href=\"TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ConstructedType As Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  id: ConstructorArguments
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: ConstructorArguments
  nameWithType: ActionType.TypeSettings.ConstructorArguments
  fullName: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ConstructorArguments
    path: Actions/ActionType.cs
    startLine: 220
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that can, optionally, return a set of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> instances that should be passed to this action type&apos;s <xref href=\"TinyLife.Actions.ActionType.TypeSettings.ConstructedType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s constructor.\nIf this function is null, which is its default value, the two arguments it receives (the <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>) are passed directly to the constructor.\n"
  example: []
  syntax:
    content: public Func<ActionType, ActionInfo, IEnumerable<object>> ConstructorArguments
    return:
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
    content.vb: Public ConstructorArguments As Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.Varieties
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Varieties
  id: Varieties
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Varieties
  nameWithType: ActionType.TypeSettings.Varieties
  fullName: TinyLife.Actions.ActionType.TypeSettings.Varieties
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Varieties
    path: Actions/ActionType.cs
    startLine: 228
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA set of <xref href=\"TinyLife.Actions.ActionVariety\" data-throw-if-not-resolved=\"false\"></xref> instances that represent different versions of this action.\nIf this is set, and a non-null collection is returned, a menu pops up (like when cooking food) that displays all of the varieties as options to the user.\nIf the returned collection is empty, the action is treated the same as if its <xref href=\"TinyLife.Actions.ActionType.TypeSettings.CanExecute\" data-throw-if-not-resolved=\"false\"></xref> function returned <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Hidden\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> invokes an action with a variety, it chooses a variety randomly based on its <xref href=\"TinyLife.Actions.ActionVariety.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref>.\nTo query this function and do all of the appropriate error handling, use <xref href=\"TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<ActionInfo, IEnumerable<ActionVariety>> Varieties
    return:
      type: System.Func{TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}}
    content.vb: Public Varieties As Func(Of ActionInfo, IEnumerable(Of ActionVariety))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.Ai
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Ai
  id: Ai
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: Ai
  nameWithType: ActionType.TypeSettings.Ai
  fullName: TinyLife.Actions.ActionType.TypeSettings.Ai
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Ai
    path: Actions/ActionType.cs
    startLine: 233
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA set of settings for <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> invocation of this action.\nThis value defaults to default.\n"
  example: []
  syntax:
    content: public ActionType.AiSettings Ai
    return:
      type: TinyLife.Actions.ActionType.AiSettings
    content.vb: Public Ai As ActionType.AiSettings
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  id: IsInappropriateElsewhere
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: IsInappropriateElsewhere
  nameWithType: ActionType.TypeSettings.IsInappropriateElsewhere
  fullName: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsInappropriateElsewhere
    path: Actions/ActionType.cs
    startLine: 238
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nIf this value is true, this action will not automatically be invoked by <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> on lots that the person does not own.\nAdditionally, when the player invokes an action with this value set to true, the lot&apos;s owner will come up to them and tell them to stop.\n"
  example: []
  syntax:
    content: public bool IsInappropriateElsewhere
    return:
      type: System.Boolean
    content.vb: Public IsInappropriateElsewhere As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.IconName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IconName
  id: IconName
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: IconName
  nameWithType: ActionType.TypeSettings.IconName
  fullName: TinyLife.Actions.ActionType.TypeSettings.IconName
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IconName
    path: Actions/ActionType.cs
    startLine: 244
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe name of the icon that this action type should display in front of its name.\nTo make the icon work, its name needs to be added to the <xref href=\"MLEM.Ui.UiSystem\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"MLEM.Formatting.TextFormatter\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter%2cSystem.String%2cMLEM.Textures.TextureRegion%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nTo access an action&apos;s icon name, including automatically set icon names, use <xref href=\"TinyLife.Actions.ActionType.GetIconName\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public string IconName
    return:
      type: System.String
    content.vb: Public IconName As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDisplayName
  nameWithType: ActionType.TypeSettings.GetDisplayName
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDisplayName
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetDisplayName
    path: Actions/ActionType.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that determines this action&apos;s actual display name.\nThe function is given the default display name (<xref href=\"TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>) and an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the current situation.\nIf this value is null (which it is by default), the default display name will be displayed.\n"
  example: []
  syntax:
    content: public Func<string, ActionInfo, string> GetDisplayName
    return:
      type: System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
    content.vb: Public GetDisplayName As Func(Of String, ActionInfo, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: ActionType.TypeSettings.RequiredSkill
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RequiredSkill
    path: Actions/ActionType.cs
    startLine: 256
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> and level of the skill that is required for this action to become available, where otherwise it will be <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Hidden\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen the required skill is leveled up, this action will also be displayed in the list of now-available actions.\nIf the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.IconName\" data-throw-if-not-resolved=\"false\"></xref> is not set, the required skill&apos;s icon will automatically be used.\n"
  example: []
  syntax:
    content: public (SkillType Type, int Level) RequiredSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public RequiredSkill As(Type As SkillType, Level As Integer)(Of SkillType , Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  id: RequiredEmotion
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredEmotion
  nameWithType: ActionType.TypeSettings.RequiredEmotion
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RequiredEmotion
    path: Actions/ActionType.cs
    startLine: 261
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Emotions.EmotionType\" data-throw-if-not-resolved=\"false\"></xref> that is required for this action to be available.\nIf the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.IconName\" data-throw-if-not-resolved=\"false\"></xref> is not set, the requird emotion&apos;s icon will automatically be used.\n"
  example: []
  syntax:
    content: public EmotionType RequiredEmotion
    return:
      type: TinyLife.Emotions.EmotionType
    content.vb: Public RequiredEmotion As EmotionType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  id: RequiredPersonality
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: RequiredPersonality
  nameWithType: ActionType.TypeSettings.RequiredPersonality
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RequiredPersonality
    path: Actions/ActionType.cs
    startLine: 266
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> that is required for this action to be available.\nIf the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.IconName\" data-throw-if-not-resolved=\"false\"></xref> is not set, the required personality type&apos;s icon will automatically be used.\n"
  example: []
  syntax:
    content: public PersonalityType RequiredPersonality
    return:
      type: TinyLife.PersonalityType
    content.vb: Public RequiredPersonality As PersonalityType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)
  id: '#ctor(System.String,TinyLife.Objects.ObjectCategory,System.Type)'
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: TypeSettings(String, ObjectCategory, Type)
  nameWithType: ActionType.TypeSettings.TypeSettings(String, ObjectCategory, Type)
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings(System.String, TinyLife.Objects.ObjectCategory, System.Type)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Actions/ActionType.cs
    startLine: 276
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new type settings instance with the given values\n"
  example: []
  syntax:
    content: public TypeSettings(string name, ObjectCategory context, Type constructedType)
    parameters:
    - id: name
      type: System.String
      description: The name of this action type
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: A combined <xref href="TinyLife.Objects.ObjectCategory" data-throw-if-not-resolved="false"></xref> flag that represents all of the objects that this action can be executed on. Setting the context to <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref> and giving the action <xref href="TinyLife.Actions.ActionType.AiSettings" data-throw-if-not-resolved="false"></xref> causes it to be invoked from the AI as if it had the <xref href="TinyLife.Objects.ObjectCategory.Self" data-throw-if-not-resolved="false"></xref> category instead.
    - id: constructedType
      type: System.Type
      description: The type that is constructed in <xref href="TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo%2cSystem.Nullable%7bTinyLife.Actions.ActionVariety%7d)" data-throw-if-not-resolved="false"></xref> to create a new action instance. If additional arguments are required, use <xref href="TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(name As String, context As ObjectCategory, constructedType As Type)
  overload: TinyLife.Actions.ActionType.TypeSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.SetData(System.String,System.Object)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: SetData(String, Object)
  nameWithType: ActionType.TypeSettings.SetData(String, Object)
  fullName: TinyLife.Actions.ActionType.TypeSettings.SetData(System.String, System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SetData
    path: Actions/ActionType.cs
    startLine: 287
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  example: []
  syntax:
    content: public void SetData(string key, object data)
    parameters:
    - id: key
      type: System.String
    - id: data
      type: System.Object
    content.vb: Public Sub SetData(key As String, data As Object)
  overload: TinyLife.Actions.ActionType.TypeSettings.SetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.GetData``1(System.String)
  id: GetData``1(System.String)
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetData<T>(String)
  nameWithType: ActionType.TypeSettings.GetData<T>(String)
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetData<T>(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetData
    path: Actions/ActionType.cs
    startLine: 293
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  example: []
  syntax:
    content: public T GetData<T>(string key)
    parameters:
    - id: key
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetData(Of T)(key As String) As T
  overload: TinyLife.Actions.ActionType.TypeSettings.GetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  nameWithType.vb: ActionType.TypeSettings.GetData(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionType.TypeSettings.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  commentId: M:TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  id: GetDataKeys
  parent: TinyLife.Actions.ActionType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDataKeys()
  nameWithType: ActionType.TypeSettings.GetDataKeys()
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetDataKeys
    path: Actions/ActionType.cs
    startLine: 298
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  example: []
  syntax:
    content: public IReadOnlyCollection<string> GetDataKeys()
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.String}
    content.vb: Public Function GetDataKeys As IReadOnlyCollection(Of String)
  overload: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetDataKeys
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionType.TypeSettings>()
  nameWithType: Extensions.JsonCopy<ActionType.TypeSettings>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.TypeSettings>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionType.TypeSettings)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.TypeSettings)()
  name.vb: JsonCopy(Of ActionType.TypeSettings)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionType.TypeSettings>
    nameWithType: Extensions.JsonCopy<ActionType.TypeSettings>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.TypeSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionType.TypeSettings)
    nameWithType: Extensions.JsonCopy(Of ActionType.TypeSettings)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.TypeSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.ActionType.TypeSettings.Name
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Name
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
  name: NameWithoutCategory
  nameWithType: ActionType.TypeSettings.NameWithoutCategory
  fullName: TinyLife.Actions.ActionType.TypeSettings.NameWithoutCategory
- uid: TinyLife.Actions.ActionType.TypeSettings.Categories*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.Categories
  name: Categories
  nameWithType: ActionType.TypeSettings.Categories
  fullName: TinyLife.Actions.ActionType.TypeSettings.Categories
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  isExternal: true
- uid: TinyLife.Actions.ActionType.AiSettings
  commentId: T:TinyLife.Actions.ActionType.AiSettings
  parent: TinyLife.Actions
  name: ActionType.AiSettings
  nameWithType: ActionType.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Valid
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  commentId: M:TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructorArguments
  isExternal: true
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  isExternal: true
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  commentId: T:System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  parent: System
  definition: System.Func`3
  name: Func<ActionType, ActionInfo, IEnumerable<Object>>
  nameWithType: Func<ActionType, ActionInfo, IEnumerable<Object>>
  fullName: System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable<System.Object>>
  nameWithType.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  parent: TinyLife.Actions
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  isExternal: true
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.ActionVariety.PassivePriority
  commentId: F:TinyLife.Actions.ActionVariety.PassivePriority
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  isExternal: true
- uid: System.Func{TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}}
  commentId: T:System.Func{TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}}
  parent: System
  definition: System.Func`2
  name: Func<ActionInfo, IEnumerable<ActionVariety>>
  nameWithType: Func<ActionInfo, IEnumerable<ActionVariety>>
  fullName: System.Func<TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>>
  nameWithType.vb: Func(Of ActionInfo, IEnumerable(Of ActionVariety))
  fullName.vb: System.Func(Of TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety))
  name.vb: Func(Of ActionInfo, IEnumerable(Of ActionVariety))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MLEM.Ui.UiSystem
  commentId: T:MLEM.Ui.UiSystem
  isExternal: true
- uid: MLEM.Formatting.TextFormatter
  commentId: T:MLEM.Formatting.TextFormatter
  isExternal: true
- uid: MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
  commentId: M:MLEM.Formatting.Codes.ImageCodeExtensions.AddImage(MLEM.Formatting.TextFormatter,System.String,MLEM.Textures.TextureRegion,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetIconName
  commentId: M:TinyLife.Actions.ActionType.GetIconName
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
  commentId: T:System.Func{System.String,TinyLife.Actions.ActionInfo,System.String}
  parent: System
  definition: System.Func`3
  name: Func<String, ActionInfo, String>
  nameWithType: Func<String, ActionInfo, String>
  fullName: System.Func<System.String, TinyLife.Actions.ActionInfo, System.String>
  nameWithType.vb: Func(Of String, ActionInfo, String)
  fullName.vb: System.Func(Of System.String, TinyLife.Actions.ActionInfo, System.String)
  name.vb: Func(Of String, ActionInfo, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions.ActionType.TypeSettings.IconName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IconName
  isExternal: true
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<SkillType, Int32>
  nameWithType: (T1, T2)<SkillType, Int32>
  fullName: System.ValueTuple<TinyLife.Skills.SkillType, System.Int32>
  nameWithType.vb: (T1, T2)(Of SkillType, Int32)
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillType, System.Int32)
  name.vb: (T1, T2)(Of SkillType, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Emotions.EmotionType
  commentId: T:TinyLife.Emotions.EmotionType
  parent: TinyLife.Emotions
  name: EmotionType
  nameWithType: EmotionType
  fullName: TinyLife.Emotions.EmotionType
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Actions.ActionType.TypeSettings.#ctor*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.#ctor
  name: TypeSettings
  nameWithType: ActionType.TypeSettings.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings.TypeSettings
- uid: TinyLife.Actions.ActionType.TypeSettings.SetData*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.SetData
  name: SetData
  nameWithType: ActionType.TypeSettings.SetData
  fullName: TinyLife.Actions.ActionType.TypeSettings.SetData
- uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: IGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.IGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: IGenericDataHolder.SetData
    fullName: MLEM.Misc.IGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: IGenericDataHolder.SetData
    fullName: MLEM.Misc.IGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.TypeSettings.GetData*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.GetData
  name: GetData
  nameWithType: ActionType.TypeSettings.GetData
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetData
- uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: IGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.IGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: IGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.IGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: IGenericDataHolder.GetData<T>
    fullName: MLEM.Misc.IGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: IGenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.IGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys*
  commentId: Overload:TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
  name: GetDataKeys
  nameWithType: ActionType.TypeSettings.GetDataKeys
  fullName: TinyLife.Actions.ActionType.TypeSettings.GetDataKeys
- uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.IGenericDataHolder.GetDataKeys
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: IGenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: IGenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: IGenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

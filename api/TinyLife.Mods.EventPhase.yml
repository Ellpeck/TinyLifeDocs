### YamlMime:ManagedReference
items:
- uid: TinyLife.Mods.EventPhase
  commentId: T:TinyLife.Mods.EventPhase
  id: EventPhase
  parent: TinyLife.Mods
  children:
  - TinyLife.Mods.EventPhase.Post
  - TinyLife.Mods.EventPhase.Pre
  langs:
  - csharp
  - vb
  name: EventPhase
  nameWithType: EventPhase
  fullName: TinyLife.Mods.EventPhase
  type: Enum
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EventPhase
    path: Mods/EventPhase.cs
    startLine: 4
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nAn enumeration that represents the phases that a time-sensitive event can be invoked in\n"
  example: []
  syntax:
    content: public enum EventPhase
    content.vb: Public Enum EventPhase
  extensionMethods:
  - TinyLife.Mods.EventPhase.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: TinyLife.Mods.EventPhase.Pre
  commentId: F:TinyLife.Mods.EventPhase.Pre
  id: Pre
  parent: TinyLife.Mods.EventPhase
  langs:
  - csharp
  - vb
  name: Pre
  nameWithType: EventPhase.Pre
  fullName: TinyLife.Mods.EventPhase.Pre
  type: Field
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Pre
    path: Mods/EventPhase.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA phase that represents an event that is invoked *before* something happens\n"
  example: []
  syntax:
    content: Pre = 0
    return:
      type: TinyLife.Mods.EventPhase
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Mods.EventPhase.Post
  commentId: F:TinyLife.Mods.EventPhase.Post
  id: Post
  parent: TinyLife.Mods.EventPhase
  langs:
  - csharp
  - vb
  name: Post
  nameWithType: EventPhase.Post
  fullName: TinyLife.Mods.EventPhase.Post
  type: Field
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Post
    path: Mods/EventPhase.cs
    startLine: 13
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA phase that represents an event that is invoked *after* something happens\n"
  example: []
  syntax:
    content: Post = 1
    return:
      type: TinyLife.Mods.EventPhase
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: TinyLife.Mods
  commentId: N:TinyLife.Mods
  name: TinyLife.Mods
  nameWithType: TinyLife.Mods
  fullName: TinyLife.Mods
- uid: TinyLife.Mods.EventPhase.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<EventPhase>()
  nameWithType: Extensions.JsonCopy<EventPhase>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.EventPhase>()
  nameWithType.vb: Extensions.JsonCopy(Of EventPhase)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.EventPhase)()
  name.vb: JsonCopy(Of EventPhase)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<EventPhase>
    nameWithType: Extensions.JsonCopy<EventPhase>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.EventPhase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of EventPhase)
    nameWithType: Extensions.JsonCopy(Of EventPhase)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.EventPhase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Mods.EventPhase
  commentId: T:TinyLife.Mods.EventPhase
  parent: TinyLife.Mods
  name: EventPhase
  nameWithType: EventPhase
  fullName: TinyLife.Mods.EventPhase

### YamlMime:ManagedReference
items:
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  id: Need
  parent: TinyLife
  children:
  - TinyLife.Need.#ctor(TinyLife.NeedType)
  - TinyLife.Need.Max
  - TinyLife.Need.Percentage
  - TinyLife.Need.Type
  - TinyLife.Need.Value
  langs:
  - csharp
  - vb
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
  type: Class
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Need
    path: Need.cs
    startLine: 19
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA need is a desire that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have to a given extent, defined by <xref href=\"TinyLife.Need.Value\" data-throw-if-not-resolved=\"false\"></xref>.\nEach need is instantiated through its associated <xref href=\"TinyLife.NeedType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Need
    content.vb: >-
      <DataContract>

      Public Class Need
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Need.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  id: Max
  parent: TinyLife.Need
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Need.Max
  fullName: TinyLife.Need.Max
  type: Field
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Max
    path: Need.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe maximum value that the <xref href=\"TinyLife.Need.Value\" data-throw-if-not-resolved=\"false\"></xref> can have\n"
  example: []
  syntax:
    content: public const float Max = 100000F
    return:
      type: System.Single
    content.vb: Public Const Max As Single = 100000F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Need.Type
  commentId: F:TinyLife.Need.Type
  id: Type
  parent: TinyLife.Need
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Need.Type
  fullName: TinyLife.Need.Type
  type: Field
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Type
    path: Need.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.NeedType\" data-throw-if-not-resolved=\"false\"></xref> that this need instance originates from\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly NeedType Type
    return:
      type: TinyLife.NeedType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As NeedType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Need.Value
  commentId: P:TinyLife.Need.Value
  id: Value
  parent: TinyLife.Need
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Need.Value
  fullName: TinyLife.Need.Value
  type: Property
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Value
    path: Need.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe current value of this need.\nAutomatically gets clamped to a number between 0 and <xref href=\"TinyLife.Need.Max\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Value { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Property Value As Single
  overload: TinyLife.Need.Value*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Need.Percentage
  commentId: P:TinyLife.Need.Percentage
  id: Percentage
  parent: TinyLife.Need
  langs:
  - csharp
  - vb
  name: Percentage
  nameWithType: Need.Percentage
  fullName: TinyLife.Need.Percentage
  type: Property
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Percentage
    path: Need.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Need.Value\" data-throw-if-not-resolved=\"false\"></xref> divided by <xref href=\"TinyLife.Need.Max\" data-throw-if-not-resolved=\"false\"></xref>, yielding a floating point number between 0 and 1, representing the percentage fullness of this need\n"
  example: []
  syntax:
    content: public float Percentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Percentage As Single
  overload: TinyLife.Need.Percentage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Need.#ctor(TinyLife.NeedType)
  commentId: M:TinyLife.Need.#ctor(TinyLife.NeedType)
  id: '#ctor(TinyLife.NeedType)'
  parent: TinyLife.Need
  langs:
  - csharp
  - vb
  name: Need(NeedType)
  nameWithType: Need.Need(NeedType)
  fullName: TinyLife.Need.Need(TinyLife.NeedType)
  type: Constructor
  source:
    remote:
      path: TinyLife/Need.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Need.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nInstantiate a new need from the given <xref href=\"TinyLife.NeedType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Need(NeedType type)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type to instantiate the need from
    content.vb: Public Sub New(type As NeedType)
  overload: TinyLife.Need.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Need.Value
  commentId: P:TinyLife.Need.Value
  isExternal: true
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Need.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Need>()
  nameWithType: Extensions.JsonCopy<Need>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Need>()
  nameWithType.vb: Extensions.JsonCopy(Of Need)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Need)()
  name.vb: JsonCopy(Of Need)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Need>
    nameWithType: Extensions.JsonCopy<Need>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Need>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Need)
    nameWithType: Extensions.JsonCopy(Of Need)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Need)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  isExternal: true
- uid: TinyLife.Need.Value*
  commentId: Overload:TinyLife.Need.Value
  name: Value
  nameWithType: Need.Value
  fullName: TinyLife.Need.Value
- uid: TinyLife.Need.Percentage*
  commentId: Overload:TinyLife.Need.Percentage
  name: Percentage
  nameWithType: Need.Percentage
  fullName: TinyLife.Need.Percentage
- uid: TinyLife.Need.#ctor*
  commentId: Overload:TinyLife.Need.#ctor
  name: Need
  nameWithType: Need.Need
  fullName: TinyLife.Need.Need

### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  id: ActionBehavior
  parent: TinyLife.Actions.Behaviors
  children:
  - TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ActionBehavior.Action
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  - TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  - TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  langs:
  - csharp
  - vb
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ActionBehavior
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 11
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nAn action behavior is a generic, non-serialized set of things that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> does throughout an action.\nTo use an action behavior efficiently, see <xref href=\"TinyLife.Actions.Behaviors.MultiActionBehavior\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref>, as well as their subclasses.\n"
  example: []
  syntax:
    content: public abstract class ActionBehavior
    content.vb: Public MustInherit Class ActionBehavior
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.Actions.Behaviors.MultiActionBehavior
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Behaviors.ActionBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Action
  commentId: F:TinyLife.Actions.Behaviors.ActionBehavior.Action
  id: Action
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: ActionBehavior.Action
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Action
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Action
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nThe action that this behavior is acting upon\n"
  example: []
  syntax:
    content: protected readonly Action Action
    return:
      type: TinyLife.Actions.Action
    content.vb: Protected ReadOnly Action As Action
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  id: '#ctor(TinyLife.Actions.Action)'
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: ActionBehavior(Action)
  nameWithType: ActionBehavior.ActionBehavior(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.ActionBehavior(TinyLife.Actions.Action)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a new action behavior with the given underlying action.\nTo create an action behavior of a given type automatically, use <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance%60%601(TinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ActionBehavior(Action action)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action that this behavior is acting upon
    content.vb: Protected Sub New(action As Action)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  id: Initialize
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: ActionBehavior.Initialize()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Initialize
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nInitializes this action behavior.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.MultiAction.AndThenInitialize\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize
  overload: TinyLife.Actions.Behaviors.ActionBehavior.Initialize*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, GameSpeed)
  nameWithType: ActionBehavior.Update(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Update
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nUpdates this action behavior every update frame.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, GameSpeed speed)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed since the last update frame
    - id: speed
      type: TinyLife.GameSpeed
      description: The game speed
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speed As GameSpeed)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  id: GetIconObject
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: GetIconObject()
  nameWithType: ActionBehavior.GetIconObject()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIconObject
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns this action behavior&apos;s icon object.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Action.GetIconObject\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns the underlying <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual MapObject GetIconObject()
    return:
      type: TinyLife.Objects.MapObject
      description: The icon object
    content.vb: Public Overridable Function GetIconObject As MapObject
  overload: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: ActionBehavior.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OnCompleted
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCauses any activities that this action behavior executes to be marked as completed.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void OnCompleted(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: ''
    content.vb: Public Overridable Sub OnCompleted(completion As CompletionType)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  id: GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: GetNextAction(CompletionType)
  nameWithType: ActionBehavior.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetNextAction
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns the action that should be executed after this action behavior&apos;s underlying <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref> completes.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorMultiAction%601\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual Action GetNextAction(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: The underlying action&apos;s completion type
    return:
      type: TinyLife.Actions.Action
      description: The action that should be executed next, or null
    content.vb: Public Overridable Function GetNextAction(completion As CompletionType) As Action
  overload: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
  id: CreateDefaultInstance``1(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: CreateDefaultInstance<T>(Action)
  nameWithType: ActionBehavior.CreateDefaultInstance<T>(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance<T>(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CreateDefaultInstance
    path: Actions/Behaviors/ActionBehavior.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a default instance of the type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>, using the default constructor <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.%23ctor(TinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the type used doesn&apos;t have a default constructor, this method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static T CreateDefaultInstance<T>(Action action)
          where T : ActionBehavior
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action that is constructing this behavior
    typeParameters:
    - id: T
      description: The type of the behavior to construct
    return:
      type: '{T}'
      description: The behavior instance constructed
    content.vb: Public Shared Function CreateDefaultInstance(Of T As ActionBehavior)(action As Action) As T
  overload: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the type <code data-dev-comment-type="typeparamref" class="typeparamref">T</code> does not have a default constructor
  nameWithType.vb: ActionBehavior.CreateDefaultInstance(Of T)(Action)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(Of T)(TinyLife.Actions.Action)
  name.vb: CreateDefaultInstance(Of T)(Action)
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.Behaviors.MultiActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.MultiActionBehavior
  parent: TinyLife.Actions.Behaviors
  name: MultiActionBehavior
  nameWithType: MultiActionBehavior
  fullName: TinyLife.Actions.Behaviors.MultiActionBehavior
- uid: TinyLife.Actions.BehaviorMultiAction`1
  commentId: T:TinyLife.Actions.BehaviorMultiAction`1
  name: BehaviorMultiAction<T>
  nameWithType: BehaviorMultiAction<T>
  fullName: TinyLife.Actions.BehaviorMultiAction<T>
  nameWithType.vb: BehaviorMultiAction(Of T)
  fullName.vb: TinyLife.Actions.BehaviorMultiAction(Of T)
  name.vb: BehaviorMultiAction(Of T)
  spec.csharp:
  - uid: TinyLife.Actions.BehaviorMultiAction`1
    name: BehaviorMultiAction
    nameWithType: BehaviorMultiAction
    fullName: TinyLife.Actions.BehaviorMultiAction
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TinyLife.Actions.BehaviorMultiAction`1
    name: BehaviorMultiAction
    nameWithType: BehaviorMultiAction
    fullName: TinyLife.Actions.BehaviorMultiAction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors
  commentId: N:TinyLife.Actions.Behaviors
  name: TinyLife.Actions.Behaviors
  nameWithType: TinyLife.Actions.Behaviors
  fullName: TinyLife.Actions.Behaviors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionBehavior>()
  nameWithType: Extensions.JsonCopy<ActionBehavior>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Behaviors.ActionBehavior>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionBehavior)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Behaviors.ActionBehavior)()
  name.vb: JsonCopy(Of ActionBehavior)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionBehavior>
    nameWithType: Extensions.JsonCopy<ActionBehavior>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Behaviors.ActionBehavior>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionBehavior)
    nameWithType: Extensions.JsonCopy(Of ActionBehavior)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Behaviors.ActionBehavior)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: CreateDefaultInstance<T>(Action)
  nameWithType: ActionBehavior.CreateDefaultInstance<T>(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance<T>(TinyLife.Actions.Action)
  nameWithType.vb: ActionBehavior.CreateDefaultInstance(Of T)(Action)
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(Of T)(TinyLife.Actions.Action)
  name.vb: CreateDefaultInstance(Of T)(Action)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
    name: CreateDefaultInstance<T>
    nameWithType: ActionBehavior.CreateDefaultInstance<T>
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance``1(TinyLife.Actions.Action)
    name: CreateDefaultInstance(Of T)
    nameWithType: ActionBehavior.CreateDefaultInstance(Of T)
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.#ctor
  name: ActionBehavior
  nameWithType: ActionBehavior.ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.ActionBehavior
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  parent: TinyLife.Actions.Behaviors
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
- uid: TinyLife.Actions.MultiAction.AndThenInitialize
  commentId: M:TinyLife.Actions.MultiAction.AndThenInitialize
  parent: TinyLife.Actions.MultiAction
  name: AndThenInitialize()
  nameWithType: MultiAction.AndThenInitialize()
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
    nameWithType: MultiAction.AndThenInitialize
    fullName: TinyLife.Actions.MultiAction.AndThenInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
    nameWithType: MultiAction.AndThenInitialize
    fullName: TinyLife.Actions.MultiAction.AndThenInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  name: Initialize
  nameWithType: ActionBehavior.Initialize
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.MultiAction
  isExternal: true
  name: AndThenUpdate(GameTime, TimeSpan, GameSpeed)
  nameWithType: MultiAction.AndThenUpdate(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: AndThenUpdate
    nameWithType: MultiAction.AndThenUpdate
    fullName: TinyLife.Actions.MultiAction.AndThenUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: AndThenUpdate
    nameWithType: MultiAction.AndThenUpdate
    fullName: TinyLife.Actions.MultiAction.AndThenUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Update*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.Update
  name: Update
  nameWithType: ActionBehavior.Update
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.GameSpeed
  commentId: T:TinyLife.GameSpeed
  parent: TinyLife
  name: GameSpeed
  nameWithType: GameSpeed
  fullName: TinyLife.GameSpeed
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1
  isExternal: true
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  name: GetIconObject
  nameWithType: ActionBehavior.GetIconObject
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: OnCompleted(CompletionType)
  nameWithType: TypelessAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: TypelessAction.OnCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: TypelessAction.OnCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
  name: OnCompleted
  nameWithType: ActionBehavior.OnCompleted
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Action
  commentId: F:TinyLife.Actions.Behaviors.ActionBehavior.Action
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: Action
  nameWithType: ActionBehavior.Action
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Action
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction
  name: GetNextAction
  nameWithType: ActionBehavior.GetNextAction
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
  name: CreateDefaultInstance
  nameWithType: ActionBehavior.CreateDefaultInstance
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T

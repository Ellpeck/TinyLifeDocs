### YamlMime:ManagedReference
items:
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  id: PersonalityType
  parent: TinyLife
  children:
  - TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.PersonalityType[])
  - TinyLife.PersonalityType.Ambitious
  - TinyLife.PersonalityType.AmountPerPerson
  - TinyLife.PersonalityType.BoostedSkills
  - TinyLife.PersonalityType.BoostedSkillsModifier
  - TinyLife.PersonalityType.Creative
  - TinyLife.PersonalityType.DisallowedOthers
  - TinyLife.PersonalityType.Energetic
  - TinyLife.PersonalityType.Extroverted
  - TinyLife.PersonalityType.Introverted
  - TinyLife.PersonalityType.Lazy
  - TinyLife.PersonalityType.Likeable
  - TinyLife.PersonalityType.Mean
  - TinyLife.PersonalityType.Name
  - TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  - TinyLife.PersonalityType.Texture
  - TinyLife.PersonalityType.Thinker
  - TinyLife.PersonalityType.Types
  langs:
  - csharp
  - vb
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
  type: Class
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonalityType
    path: PersonalityType.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA personality type is a trait that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have.\nEach personality type is meant to influence the person&apos;s behavior and abilities slightly in a certain way.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<PersonalityType>), new object[]{typeof(PersonalityType), "PrivateTypes"})]

      public class PersonalityType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of PersonalityType)), New Object() {GetType(PersonalityType), "PrivateTypes"})>

      Public Class PersonalityType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.PersonalityType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.PersonalityType.Types
  commentId: F:TinyLife.PersonalityType.Types
  id: Types
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: PersonalityType.Types
  fullName: TinyLife.PersonalityType.Types
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: PersonalityType.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA registry of all of the personality types in the game.\nUse <xref href=\"TinyLife.PersonalityType.Register(TinyLife.PersonalityType)\" data-throw-if-not-resolved=\"false\"></xref> to register custom personality types.\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, PersonalityType> Types
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.PersonalityType}
    content.vb: Public Shared ReadOnly Types As IDictionary(Of String, PersonalityType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.AmountPerPerson
  commentId: F:TinyLife.PersonalityType.AmountPerPerson
  id: AmountPerPerson
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: AmountPerPerson
  nameWithType: PersonalityType.AmountPerPerson
  fullName: TinyLife.PersonalityType.AmountPerPerson
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AmountPerPerson
    path: PersonalityType.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of personality types that each <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have\n"
  example: []
  syntax:
    content: public const int AmountPerPerson = 2
    return:
      type: System.Int32
    content.vb: Public Const AmountPerPerson As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.PersonalityType.Lazy
  commentId: F:TinyLife.PersonalityType.Lazy
  id: Lazy
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Lazy
  nameWithType: PersonalityType.Lazy
  fullName: TinyLife.PersonalityType.Lazy
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lazy
    path: PersonalityType.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Lazy
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Lazy As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Energetic
  commentId: F:TinyLife.PersonalityType.Energetic
  id: Energetic
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Energetic
  nameWithType: PersonalityType.Energetic
  fullName: TinyLife.PersonalityType.Energetic
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Energetic
    path: PersonalityType.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Energetic
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Energetic As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Creative
  commentId: F:TinyLife.PersonalityType.Creative
  id: Creative
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Creative
  nameWithType: PersonalityType.Creative
  fullName: TinyLife.PersonalityType.Creative
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Creative
    path: PersonalityType.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Creative
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Creative As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Likeable
  commentId: F:TinyLife.PersonalityType.Likeable
  id: Likeable
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Likeable
  nameWithType: PersonalityType.Likeable
  fullName: TinyLife.PersonalityType.Likeable
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Likeable
    path: PersonalityType.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Likeable
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Likeable As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Mean
  commentId: F:TinyLife.PersonalityType.Mean
  id: Mean
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Mean
  nameWithType: PersonalityType.Mean
  fullName: TinyLife.PersonalityType.Mean
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Mean
    path: PersonalityType.cs
    startLine: 47
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Mean
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Mean As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Ambitious
  commentId: F:TinyLife.PersonalityType.Ambitious
  id: Ambitious
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Ambitious
  nameWithType: PersonalityType.Ambitious
  fullName: TinyLife.PersonalityType.Ambitious
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Ambitious
    path: PersonalityType.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Ambitious
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Ambitious As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Thinker
  commentId: F:TinyLife.PersonalityType.Thinker
  id: Thinker
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Thinker
  nameWithType: PersonalityType.Thinker
  fullName: TinyLife.PersonalityType.Thinker
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Thinker
    path: PersonalityType.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Thinker
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Thinker As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Introverted
  commentId: F:TinyLife.PersonalityType.Introverted
  id: Introverted
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Introverted
  nameWithType: PersonalityType.Introverted
  fullName: TinyLife.PersonalityType.Introverted
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Introverted
    path: PersonalityType.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Introverted
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Introverted As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Extroverted
  commentId: F:TinyLife.PersonalityType.Extroverted
  id: Extroverted
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Extroverted
  nameWithType: PersonalityType.Extroverted
  fullName: TinyLife.PersonalityType.Extroverted
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Extroverted
    path: PersonalityType.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Extroverted
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Extroverted As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Name
  commentId: F:TinyLife.PersonalityType.Name
  id: Name
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PersonalityType.Name
  fullName: TinyLife.PersonalityType.Name
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: PersonalityType.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe name of this personality type.\nAs this is used for <xref href=\"TinyLife.PersonalityType.Types\" data-throw-if-not-resolved=\"false\"></xref>, this name needs to be unique across all installed mods.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.Texture
  commentId: F:TinyLife.PersonalityType.Texture
  id: Texture
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: PersonalityType.Texture
  fullName: TinyLife.PersonalityType.Texture
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: PersonalityType.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe icon texture for this personality type\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.DisallowedOthers
  commentId: F:TinyLife.PersonalityType.DisallowedOthers
  id: DisallowedOthers
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: DisallowedOthers
  nameWithType: PersonalityType.DisallowedOthers
  fullName: TinyLife.PersonalityType.DisallowedOthers
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisallowedOthers
    path: PersonalityType.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of personality types that cannot be applied together with this one\n"
  example: []
  syntax:
    content: public readonly PersonalityType[] DisallowedOthers
    return:
      type: TinyLife.PersonalityType[]
    content.vb: Public ReadOnly DisallowedOthers As PersonalityType()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.BoostedSkills
  commentId: P:TinyLife.PersonalityType.BoostedSkills
  id: BoostedSkills
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: BoostedSkills
  nameWithType: PersonalityType.BoostedSkills
  fullName: TinyLife.PersonalityType.BoostedSkills
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BoostedSkills
    path: PersonalityType.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA flag of <xref href=\"TinyLife.Skills.SkillCategory\" data-throw-if-not-resolved=\"false\"></xref> values that represent the skills that are boosted by this personality type.\nThis value only has an effect if <xref href=\"TinyLife.PersonalityType.BoostedSkillsModifier\" data-throw-if-not-resolved=\"false\"></xref> is set as well.\n"
  example: []
  syntax:
    content: public SkillCategory BoostedSkills { get; set; }
    parameters: []
    return:
      type: TinyLife.Skills.SkillCategory
    content.vb: Public Property BoostedSkills As SkillCategory
  overload: TinyLife.PersonalityType.BoostedSkills*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.BoostedSkillsModifier
  commentId: P:TinyLife.PersonalityType.BoostedSkillsModifier
  id: BoostedSkillsModifier
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: BoostedSkillsModifier
  nameWithType: PersonalityType.BoostedSkillsModifier
  fullName: TinyLife.PersonalityType.BoostedSkillsModifier
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BoostedSkillsModifier
    path: PersonalityType.cs
    startLine: 85
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount that the <xref href=\"TinyLife.PersonalityType.BoostedSkills\" data-throw-if-not-resolved=\"false\"></xref> are boosted by.\nIf this value is set to 0.1, for example, any skill gain will be multiplied by 1 + 0.1 (= 1.1).\n"
  example: []
  syntax:
    content: public float BoostedSkillsModifier { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property BoostedSkillsModifier As Single
  overload: TinyLife.PersonalityType.BoostedSkillsModifier*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.PersonalityType[])
  commentId: M:TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.PersonalityType[])
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.PersonalityType[])'
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: PersonalityType(String, TextureRegion, PersonalityType[])
  nameWithType: PersonalityType.PersonalityType(String, TextureRegion, PersonalityType[])
  fullName: TinyLife.PersonalityType.PersonalityType(System.String, MLEM.Textures.TextureRegion, TinyLife.PersonalityType[])
  type: Constructor
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: PersonalityType.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new personality type with the given name\n"
  example: []
  syntax:
    content: public PersonalityType(string name, TextureRegion texture, params PersonalityType[] disallowedOthers)
    parameters:
    - id: name
      type: System.String
      description: The name of this personality type
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The icon texture for this personality type
    - id: disallowedOthers
      type: TinyLife.PersonalityType[]
      description: A set of personality types that cannot be applied together with this one
    content.vb: Public Sub New(name As String, texture As TextureRegion, ParamArray disallowedOthers As PersonalityType())
  overload: TinyLife.PersonalityType.#ctor*
  nameWithType.vb: PersonalityType.PersonalityType(String, TextureRegion, PersonalityType())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.PersonalityType.PersonalityType(System.String, MLEM.Textures.TextureRegion, TinyLife.PersonalityType())
  name.vb: PersonalityType(String, TextureRegion, PersonalityType())
- uid: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  id: Register(TinyLife.PersonalityType)
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Register(PersonalityType)
  nameWithType: PersonalityType.Register(PersonalityType)
  fullName: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  type: Method
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: PersonalityType.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nRegisters this personality type to the <xref href=\"TinyLife.PersonalityType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static PersonalityType Register(PersonalityType type)
    parameters:
    - id: type
      type: TinyLife.PersonalityType
      description: The personality type to register
    return:
      type: TinyLife.PersonalityType
      description: The personality type, for chaining
    content.vb: Public Shared Function Register(type As PersonalityType) As PersonalityType
  overload: TinyLife.PersonalityType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.PersonalityType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<PersonalityType>()
  nameWithType: Extensions.JsonCopy<PersonalityType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.PersonalityType>()
  nameWithType.vb: Extensions.JsonCopy(Of PersonalityType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.PersonalityType)()
  name.vb: JsonCopy(Of PersonalityType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<PersonalityType>
    nameWithType: Extensions.JsonCopy<PersonalityType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.PersonalityType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of PersonalityType)
    nameWithType: Extensions.JsonCopy(Of PersonalityType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.PersonalityType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  isExternal: true
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.PersonalityType}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.PersonalityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, PersonalityType>
  nameWithType: IDictionary<String, PersonalityType>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.PersonalityType>
  nameWithType.vb: IDictionary(Of String, PersonalityType)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.PersonalityType)
  name.vb: IDictionary(Of String, PersonalityType)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.PersonalityType.Types
  commentId: F:TinyLife.PersonalityType.Types
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.PersonalityType[]
  isExternal: true
  name: PersonalityType[]
  nameWithType: PersonalityType[]
  fullName: TinyLife.PersonalityType[]
  nameWithType.vb: PersonalityType()
  fullName.vb: TinyLife.PersonalityType()
  name.vb: PersonalityType()
  spec.csharp:
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Skills.SkillCategory
  commentId: T:TinyLife.Skills.SkillCategory
  parent: TinyLife.Skills
  name: SkillCategory
  nameWithType: SkillCategory
  fullName: TinyLife.Skills.SkillCategory
- uid: TinyLife.PersonalityType.BoostedSkillsModifier
  commentId: P:TinyLife.PersonalityType.BoostedSkillsModifier
  isExternal: true
- uid: TinyLife.PersonalityType.BoostedSkills*
  commentId: Overload:TinyLife.PersonalityType.BoostedSkills
  name: BoostedSkills
  nameWithType: PersonalityType.BoostedSkills
  fullName: TinyLife.PersonalityType.BoostedSkills
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.PersonalityType.BoostedSkills
  commentId: P:TinyLife.PersonalityType.BoostedSkills
  isExternal: true
- uid: TinyLife.PersonalityType.BoostedSkillsModifier*
  commentId: Overload:TinyLife.PersonalityType.BoostedSkillsModifier
  name: BoostedSkillsModifier
  nameWithType: PersonalityType.BoostedSkillsModifier
  fullName: TinyLife.PersonalityType.BoostedSkillsModifier
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.PersonalityType.#ctor*
  commentId: Overload:TinyLife.PersonalityType.#ctor
  name: PersonalityType
  nameWithType: PersonalityType.PersonalityType
  fullName: TinyLife.PersonalityType.PersonalityType
- uid: TinyLife.PersonalityType.Register*
  commentId: Overload:TinyLife.PersonalityType.Register
  name: Register
  nameWithType: PersonalityType.Register
  fullName: TinyLife.PersonalityType.Register

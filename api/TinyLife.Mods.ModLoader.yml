### YamlMime:ManagedReference
items:
- uid: TinyLife.Mods.ModLoader
  commentId: T:TinyLife.Mods.ModLoader
  id: ModLoader
  parent: TinyLife.Mods
  children:
  - TinyLife.Mods.ModLoader.GetModsFolder
  - TinyLife.Mods.ModLoader.TryGetModInfo(System.String,TinyLife.Mods.ModInfo@)
  langs:
  - csharp
  - vb
  name: ModLoader
  nameWithType: ModLoader
  fullName: TinyLife.Mods.ModLoader
  type: Class
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ModLoader
    path: Mods/ModLoader.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe mod loader loads <xref href=\"TinyLife.Mods.Mod\" data-throw-if-not-resolved=\"false\"></xref> instances from the <xref href=\"TinyLife.Mods.ModLoader.GetModsFolder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class ModLoader
    content.vb: Public Module ModLoader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.Mods.ModLoader.TryGetModInfo(System.String,TinyLife.Mods.ModInfo@)
  commentId: M:TinyLife.Mods.ModLoader.TryGetModInfo(System.String,TinyLife.Mods.ModInfo@)
  id: TryGetModInfo(System.String,TinyLife.Mods.ModInfo@)
  parent: TinyLife.Mods.ModLoader
  langs:
  - csharp
  - vb
  name: TryGetModInfo(String, out ModInfo)
  nameWithType: ModLoader.TryGetModInfo(String, out ModInfo)
  fullName: TinyLife.Mods.ModLoader.TryGetModInfo(System.String, out TinyLife.Mods.ModInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TryGetModInfo
    path: Mods/ModLoader.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThis method can be used to gather a <xref href=\"TinyLife.Mods.ModInfo\" data-throw-if-not-resolved=\"false\"></xref> for a mod that is currently loaded with the given id.\nIf no mod with that id is currently loaded, this method returns false and assigns null to <xref href=\"TinyLife.Mods.ModInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool TryGetModInfo(string id, out ModInfo info)
    parameters:
    - id: id
      type: System.String
      description: The id of the mod to get
    - id: info
      type: TinyLife.Mods.ModInfo
      description: The info that will be returned about the mod
    return:
      type: System.Boolean
      description: Whether or not the mod was found to be loaded
    content.vb: Public Shared Function TryGetModInfo(id As String, ByRef info As ModInfo) As Boolean
  overload: TinyLife.Mods.ModLoader.TryGetModInfo*
  nameWithType.vb: ModLoader.TryGetModInfo(String, ByRef ModInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Mods.ModLoader.TryGetModInfo(System.String, ByRef TinyLife.Mods.ModInfo)
  name.vb: TryGetModInfo(String, ByRef ModInfo)
- uid: TinyLife.Mods.ModLoader.GetModsFolder
  commentId: M:TinyLife.Mods.ModLoader.GetModsFolder
  id: GetModsFolder
  parent: TinyLife.Mods.ModLoader
  langs:
  - csharp
  - vb
  name: GetModsFolder()
  nameWithType: ModLoader.GetModsFolder()
  fullName: TinyLife.Mods.ModLoader.GetModsFolder()
  type: Method
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetModsFolder
    path: Mods/ModLoader.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nReturns a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> pointing to the directory that mods should be put into and loaded from\n"
  example: []
  syntax:
    content: public static DirectoryInfo GetModsFolder()
    return:
      type: System.IO.DirectoryInfo
      description: The mod directory
    content.vb: Public Shared Function GetModsFolder As DirectoryInfo
  overload: TinyLife.Mods.ModLoader.GetModsFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Mods.Mod
  commentId: T:TinyLife.Mods.Mod
  parent: TinyLife.Mods
  name: Mod
  nameWithType: Mod
  fullName: TinyLife.Mods.Mod
- uid: TinyLife.Mods.ModLoader.GetModsFolder
  commentId: M:TinyLife.Mods.ModLoader.GetModsFolder
  isExternal: true
- uid: TinyLife.Mods
  commentId: N:TinyLife.Mods
  name: TinyLife.Mods
  nameWithType: TinyLife.Mods
  fullName: TinyLife.Mods
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Mods.ModInfo
  commentId: T:TinyLife.Mods.ModInfo
  parent: TinyLife.Mods
  name: ModInfo
  nameWithType: ModInfo
  fullName: TinyLife.Mods.ModInfo
- uid: TinyLife.Mods.ModLoader.TryGetModInfo*
  commentId: Overload:TinyLife.Mods.ModLoader.TryGetModInfo
  name: TryGetModInfo
  nameWithType: ModLoader.TryGetModInfo
  fullName: TinyLife.Mods.ModLoader.TryGetModInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: TinyLife.Mods.ModLoader.GetModsFolder*
  commentId: Overload:TinyLife.Mods.ModLoader.GetModsFolder
  name: GetModsFolder
  nameWithType: ModLoader.GetModsFolder
  fullName: TinyLife.Mods.ModLoader.GetModsFolder
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO

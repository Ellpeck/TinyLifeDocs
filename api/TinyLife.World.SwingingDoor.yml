### YamlMime:ManagedReference
items:
- uid: TinyLife.World.SwingingDoor
  commentId: T:TinyLife.World.SwingingDoor
  id: SwingingDoor
  parent: TinyLife.World
  children:
  - TinyLife.World.SwingingDoor.#ctor(TinyLife.World.OpeningType,System.Int32)
  - TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  - TinyLife.World.SwingingDoor.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.SwingingDoor.IsOpen(TinyLife.World.Map,TinyLife.World.Wall)
  - TinyLife.World.SwingingDoor.Lock
  langs:
  - csharp
  - vb
  name: SwingingDoor
  nameWithType: SwingingDoor
  fullName: TinyLife.World.SwingingDoor
  type: Class
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SwingingDoor
    path: World/Opening.cs
    startLine: 97
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn opening is some sort of extrusion in a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, like a window or a door.\nOpenings are created from their underlying <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class SwingingDoor : Door, IPricedObject'
    content.vb: >-
      Public Class SwingingDoor
          Inherits Door
          Implements IPricedObject
  inheritance:
  - System.Object
  - TinyLife.World.Opening
  - TinyLife.World.Door
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  - TinyLife.World.Opening.Type
  - TinyLife.World.Opening.Color
  - TinyLife.World.Opening.GetPrice
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.SwingingDoor.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.SwingingDoor.Lock
  commentId: F:TinyLife.World.SwingingDoor.Lock
  id: Lock
  parent: TinyLife.World.SwingingDoor
  langs:
  - csharp
  - vb
  name: Lock
  nameWithType: SwingingDoor.Lock
  fullName: TinyLife.World.SwingingDoor.Lock
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lock
    path: World/Opening.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe lock type that this door is locked with, or 0 if the door is not locked\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public LockType Lock
    return:
      type: TinyLife.World.LockType
    content.vb: >-
      <DataMember>

      Public Lock As LockType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.SwingingDoor.#ctor(TinyLife.World.OpeningType,System.Int32)
  commentId: M:TinyLife.World.SwingingDoor.#ctor(TinyLife.World.OpeningType,System.Int32)
  id: '#ctor(TinyLife.World.OpeningType,System.Int32)'
  parent: TinyLife.World.SwingingDoor
  langs:
  - csharp
  - vb
  name: SwingingDoor(OpeningType, Int32)
  nameWithType: SwingingDoor.SwingingDoor(OpeningType, Int32)
  fullName: TinyLife.World.SwingingDoor.SwingingDoor(TinyLife.World.OpeningType, System.Int32)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: World/Opening.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new opening from the given opening type and color\n"
  example: []
  syntax:
    content: public SwingingDoor(OpeningType type, int color)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The opening type
    - id: color
      type: System.Int32
      description: The index of the color
    content.vb: Public Sub New(type As OpeningType, color As Integer)
  overload: TinyLife.World.SwingingDoor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.SwingingDoor.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.SwingingDoor.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.SwingingDoor
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  nameWithType: SwingingDoor.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  fullName: TinyLife.World.SwingingDoor.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: World/Opening.cs
    startLine: 110
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this opening in the world with the given settings\n"
  example: []
  syntax:
    content: public override void Draw(GameTime time, SpriteBatch batch, Map map, Wall wall, Vector2 drawPos, bool vertical, float scale, float depth, Color? overrideColor)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: map
      type: TinyLife.World.Map
      description: The map that the opening is on
    - id: wall
      type: TinyLife.World.Wall
      description: The wall that the opening is in
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw the opening on
    - id: vertical
      type: System.Boolean
      description: Whether the wall that the opening is on is vertical
    - id: scale
      type: System.Single
      description: The scale to draw the opening with
    - id: depth
      type: System.Single
      description: The depth to use for drawing the opening
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that should be used instead of this opening&apos;s default color, or null to use the opening&apos;s default color
    content.vb: Public Overrides Sub Draw(time As GameTime, batch As SpriteBatch, map As Map, wall As Wall, drawPos As Vector2, vertical As Boolean, scale As Single, depth As Single, overrideColor As Color?)
  overridden: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  overload: TinyLife.World.SwingingDoor.Draw*
  nameWithType.vb: SwingingDoor.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: TinyLife.World.SwingingDoor.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
- uid: TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  id: CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  parent: TinyLife.World.SwingingDoor
  langs:
  - csharp
  - vb
  name: CanWalkThrough(Wall, Person)
  nameWithType: SwingingDoor.CanWalkThrough(Wall, Person)
  fullName: TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanWalkThrough
    path: World/Opening.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is able to walk through a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that has this opening.\nThis returns true for <xref href=\"TinyLife.World.Door\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.SwingingDoor\" data-throw-if-not-resolved=\"false\"></xref> and false for <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool CanWalkThrough(Wall wall, Person person)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function CanWalkThrough(wall As Wall, person As Person) As Boolean
  overridden: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  overload: TinyLife.World.SwingingDoor.CanWalkThrough*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.World.SwingingDoor.IsOpen(TinyLife.World.Map,TinyLife.World.Wall)
  commentId: M:TinyLife.World.SwingingDoor.IsOpen(TinyLife.World.Map,TinyLife.World.Wall)
  id: IsOpen(TinyLife.World.Map,TinyLife.World.Wall)
  parent: TinyLife.World.SwingingDoor
  langs:
  - csharp
  - vb
  name: IsOpen(Map, Wall)
  nameWithType: SwingingDoor.IsOpen(Map, Wall)
  fullName: TinyLife.World.SwingingDoor.IsOpen(TinyLife.World.Map, TinyLife.World.Wall)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsOpen
    path: World/Opening.cs
    startLine: 132
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCalculates and returns whether this opening is currently open.\nThis method returns true if any people that <xref href=\"TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall%2cTinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> this door are close enough for it to display as opened.\n"
  example: []
  syntax:
    content: public bool IsOpen(Map map, Wall wall)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the opening is on
    - id: wall
      type: TinyLife.World.Wall
      description: The wall that the opening is in
    return:
      type: System.Boolean
      description: Whether this opening is currently open
    content.vb: Public Function IsOpen(map As Map, wall As Wall) As Boolean
  overload: TinyLife.World.SwingingDoor.IsOpen*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.Door
  commentId: T:TinyLife.World.Door
  parent: TinyLife.World
  name: Door
  nameWithType: Door
  fullName: TinyLife.World.Door
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  parent: TinyLife.World.Door
  name: CanPlaceOn(FurnitureType)
  nameWithType: Door.CanPlaceOn(FurnitureType)
  fullName: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  spec.csharp:
  - uid: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
    name: CanPlaceOn
    nameWithType: Door.CanPlaceOn
    fullName: TinyLife.World.Door.CanPlaceOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
    name: CanPlaceOn
    nameWithType: Door.CanPlaceOn
    fullName: TinyLife.World.Door.CanPlaceOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Opening.Type
  commentId: F:TinyLife.World.Opening.Type
  parent: TinyLife.World.Opening
  name: Type
  nameWithType: Opening.Type
  fullName: TinyLife.World.Opening.Type
- uid: TinyLife.World.Opening.Color
  commentId: F:TinyLife.World.Opening.Color
  parent: TinyLife.World.Opening
  name: Color
  nameWithType: Opening.Color
  fullName: TinyLife.World.Opening.Color
- uid: TinyLife.World.Opening.GetPrice
  commentId: M:TinyLife.World.Opening.GetPrice
  parent: TinyLife.World.Opening
  name: GetPrice()
  nameWithType: Opening.GetPrice()
  fullName: TinyLife.World.Opening.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.Opening.GetPrice
    name: GetPrice
    nameWithType: Opening.GetPrice
    fullName: TinyLife.World.Opening.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.GetPrice
    name: GetPrice
    nameWithType: Opening.GetPrice
    fullName: TinyLife.World.Opening.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.SwingingDoor.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<SwingingDoor>()
  nameWithType: Extensions.JsonCopy<SwingingDoor>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.SwingingDoor>()
  nameWithType.vb: Extensions.JsonCopy(Of SwingingDoor)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.SwingingDoor)()
  name.vb: JsonCopy(Of SwingingDoor)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<SwingingDoor>
    nameWithType: Extensions.JsonCopy<SwingingDoor>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.SwingingDoor>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of SwingingDoor)
    nameWithType: Extensions.JsonCopy(Of SwingingDoor)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.SwingingDoor)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.LockType
  commentId: T:TinyLife.World.LockType
  parent: TinyLife.World
  name: LockType
  nameWithType: LockType
  fullName: TinyLife.World.LockType
- uid: TinyLife.World.SwingingDoor.#ctor*
  commentId: Overload:TinyLife.World.SwingingDoor.#ctor
  name: SwingingDoor
  nameWithType: SwingingDoor.SwingingDoor
  fullName: TinyLife.World.SwingingDoor.SwingingDoor
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Opening
  isExternal: true
  name: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  nameWithType: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  fullName: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable<Microsoft.Xna.Framework.Color>)
  nameWithType.vb: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  fullName.vb: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  spec.csharp:
  - uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Opening.Draw
    fullName: TinyLife.World.Opening.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Opening.Draw
    fullName: TinyLife.World.Opening.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.SwingingDoor.Draw*
  commentId: Overload:TinyLife.World.SwingingDoor.Draw
  name: Draw
  nameWithType: SwingingDoor.Draw
  fullName: TinyLife.World.SwingingDoor.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  parent: TinyLife.World.Door
  name: CanWalkThrough(Wall, Person)
  nameWithType: Door.CanWalkThrough(Wall, Person)
  fullName: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall, TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
    name: CanWalkThrough
    nameWithType: Door.CanWalkThrough
    fullName: TinyLife.World.Door.CanWalkThrough
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
    name: CanWalkThrough
    nameWithType: Door.CanWalkThrough
    fullName: TinyLife.World.Door.CanWalkThrough
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.SwingingDoor.CanWalkThrough*
  commentId: Overload:TinyLife.World.SwingingDoor.CanWalkThrough
  name: CanWalkThrough
  nameWithType: SwingingDoor.CanWalkThrough
  fullName: TinyLife.World.SwingingDoor.CanWalkThrough
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.SwingingDoor.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.World.SwingingDoor.IsOpen*
  commentId: Overload:TinyLife.World.SwingingDoor.IsOpen
  name: IsOpen
  nameWithType: SwingingDoor.IsOpen
  fullName: TinyLife.World.SwingingDoor.IsOpen

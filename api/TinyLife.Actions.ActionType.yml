### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  id: ActionType
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionType.AdmireLgbtFlag
  - TinyLife.Actions.ActionType.AreDating(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.AskAboutComputerSpecs
  - TinyLife.Actions.ActionType.AskAboutDay
  - TinyLife.Actions.ActionType.AskAboutGamingRig
  - TinyLife.Actions.ActionType.AskAboutPersonality
  - TinyLife.Actions.ActionType.AskToLeave
  - TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  - TinyLife.Actions.ActionType.BoastAboutPagesWritten
  - TinyLife.Actions.ActionType.BreakUp
  - TinyLife.Actions.ActionType.CallOver
  - TinyLife.Actions.ActionType.CallToMeal
  - TinyLife.Actions.ActionType.CanBeSexual(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.CanDoImportantAction(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.CanExecuteAll(TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionType.CanExecuteDelegate[])
  - TinyLife.Actions.ActionType.CanPlaceHeldItem(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.CanWorkAtDeskObject(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.ChangeOutfit
  - TinyLife.Actions.ActionType.Chat
  - TinyLife.Actions.ActionType.ChatWith
  - TinyLife.Actions.ActionType.Clean
  - TinyLife.Actions.ActionType.CleanDish
  - TinyLife.Actions.ActionType.CleanEverything
  - TinyLife.Actions.ActionType.CollectTrash
  - TinyLife.Actions.ActionType.CompareMuscleSize
  - TinyLife.Actions.ActionType.ComplainAboutLife
  - TinyLife.Actions.ActionType.ComplainAboutRelationship
  - TinyLife.Actions.ActionType.ComplimentLooks
  - TinyLife.Actions.ActionType.ConfideIn
  - TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  - TinyLife.Actions.ActionType.CookFood
  - TinyLife.Actions.ActionType.DeliverMail
  - TinyLife.Actions.ActionType.Die
  - TinyLife.Actions.ActionType.DiscussWorkoutRegimen
  - TinyLife.Actions.ActionType.Drive
  - TinyLife.Actions.ActionType.Eat
  - TinyLife.Actions.ActionType.EditOutfits
  - TinyLife.Actions.ActionType.ExpressFearOfCrowds
  - TinyLife.Actions.ActionType.Flirt
  - TinyLife.Actions.ActionType.FoolAround
  - TinyLife.Actions.ActionType.GaugeRelationship
  - TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.GetIconName
  - TinyLife.Actions.ActionType.GetIngredientsFamily
  - TinyLife.Actions.ActionType.GetIngredientsSingle
  - TinyLife.Actions.ActionType.GetJob
  - TinyLife.Actions.ActionType.GetSkillPriorityMod(TinyLife.Objects.Person,TinyLife.Skills.SkillType)
  - TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.ActionType.GetWater
  - TinyLife.Actions.ActionType.GoHere
  - TinyLife.Actions.ActionType.GoHome
  - TinyLife.Actions.ActionType.GoJogging
  - TinyLife.Actions.ActionType.GrabServing
  - TinyLife.Actions.ActionType.GrillFood
  - TinyLife.Actions.ActionType.GushAboutPartner
  - TinyLife.Actions.ActionType.HackSomeone
  - TinyLife.Actions.ActionType.HasChairOrIsStandingDesk(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.HaveBookPublished
  - TinyLife.Actions.ActionType.ImplyMotherIsCamel
  - TinyLife.Actions.ActionType.Insult
  - TinyLife.Actions.ActionType.InviteToHousehold
  - TinyLife.Actions.ActionType.IsActionType(System.Type)
  - TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsDislikedOrMean(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsFunctional(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  - TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  - TinyLife.Actions.ActionType.IsNotEmbarrassed(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsNotExpired(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.IsReadyForRomance(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionType.JoinAdvancedTournament
  - TinyLife.Actions.ActionType.JoinEasyTournament
  - TinyLife.Actions.ActionType.JokeAboutAromance
  - TinyLife.Actions.ActionType.JokeAboutAsexuality
  - TinyLife.Actions.ActionType.JokeAboutOwnUnemployment
  - TinyLife.Actions.ActionType.JokeAboutTreadmillAccidents
  - TinyLife.Actions.ActionType.JokeAboutWork
  - TinyLife.Actions.ActionType.JokeAboutWritingStyle
  - TinyLife.Actions.ActionType.LiftWeights
  - TinyLife.Actions.ActionType.LightFireplace
  - TinyLife.Actions.ActionType.LockDoor
  - TinyLife.Actions.ActionType.MakeFunOfIntroversion
  - TinyLife.Actions.ActionType.MakeFunOfLaziness
  - TinyLife.Actions.ActionType.MakeFunOfNiceness
  - TinyLife.Actions.ActionType.MakeFunOfPoorFitness
  - TinyLife.Actions.ActionType.MakeFunOfUnemployment
  - TinyLife.Actions.ActionType.MakeRisqueRemark
  - TinyLife.Actions.ActionType.MixProteinShake
  - TinyLife.Actions.ActionType.ModGame
  - TinyLife.Actions.ActionType.MopPuddle
  - TinyLife.Actions.ActionType.Paint
  - TinyLife.Actions.ActionType.PassOut
  - TinyLife.Actions.ActionType.PayBills
  - TinyLife.Actions.ActionType.PeeSelf
  - TinyLife.Actions.ActionType.PickUp
  - TinyLife.Actions.ActionType.PlayOnlineGames
  - TinyLife.Actions.ActionType.PlaySingleplayerGames
  - TinyLife.Actions.ActionType.PlayTrick
  - TinyLife.Actions.ActionType.PoseMathPuzzle
  - TinyLife.Actions.ActionType.PracticeJokes
  - TinyLife.Actions.ActionType.PracticeProgramming
  - TinyLife.Actions.ActionType.PracticeSpeech
  - TinyLife.Actions.ActionType.PracticeWriting
  - TinyLife.Actions.ActionType.PrepareFood
  - TinyLife.Actions.ActionType.PsychSelfUp
  - TinyLife.Actions.ActionType.PutAway
  - TinyLife.Actions.ActionType.PutDown
  - TinyLife.Actions.ActionType.QuitJob
  - TinyLife.Actions.ActionType.Read
  - TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  - TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  - TinyLife.Actions.ActionType.Repair
  - TinyLife.Actions.ActionType.RunOnTreadmill
  - TinyLife.Actions.ActionType.Scrap
  - TinyLife.Actions.ActionType.SelfPublishBook
  - TinyLife.Actions.ActionType.SellPainting
  - TinyLife.Actions.ActionType.Settings
  - TinyLife.Actions.ActionType.ShakeTree
  - TinyLife.Actions.ActionType.ShareIdeas
  - TinyLife.Actions.ActionType.Sit
  - TinyLife.Actions.ActionType.SitToilet
  - TinyLife.Actions.ActionType.Sleep
  - TinyLife.Actions.ActionType.SourceString
  - TinyLife.Actions.ActionType.StartDating
  - TinyLife.Actions.ActionType.Starve
  - TinyLife.Actions.ActionType.TakeShower
  - TinyLife.Actions.ActionType.Talk
  - TinyLife.Actions.ActionType.TalkAboutFeelings
  - TinyLife.Actions.ActionType.TalkAboutFood
  - TinyLife.Actions.ActionType.TalkAboutNaps
  - TinyLife.Actions.ActionType.TalkAboutNeighborhood
  - TinyLife.Actions.ActionType.TalkAboutOutdoors
  - TinyLife.Actions.ActionType.TalkAboutWatchingTv
  - TinyLife.Actions.ActionType.TalkAboutWork
  - TinyLife.Actions.ActionType.TellComplexJoke
  - TinyLife.Actions.ActionType.TellEngagingStory
  - TinyLife.Actions.ActionType.TellFunnyStory
  - TinyLife.Actions.ActionType.TellJoke
  - TinyLife.Actions.ActionType.TellJokeAboutSomething
  - TinyLife.Actions.ActionType.TellRidiculousStory
  - TinyLife.Actions.ActionType.TellStory
  - TinyLife.Actions.ActionType.ThisIsInappropriate
  - TinyLife.Actions.ActionType.ThrowAway
  - TinyLife.Actions.ActionType.ToggleAllLights
  - TinyLife.Actions.ActionType.ToggleLight
  - TinyLife.Actions.ActionType.Types
  - TinyLife.Actions.ActionType.VisitLot
  - TinyLife.Actions.ActionType.VisitorGoHome
  - TinyLife.Actions.ActionType.WakeUp
  - TinyLife.Actions.ActionType.Walk
  - TinyLife.Actions.ActionType.WashHands
  - TinyLife.Actions.ActionType.WatchTv
  - TinyLife.Actions.ActionType.WatchWalkthroughs
  - TinyLife.Actions.ActionType.Woodworking
  - TinyLife.Actions.ActionType.Work
  - TinyLife.Actions.ActionType.WriteBook
  langs:
  - csharp
  - vb
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
  type: Class
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ActionType
    path: Actions/ActionType.Utilities.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAction types are blueprints for <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> instances which can be registered using <xref href=\"TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref>.\nAn action type contains information about its action and can create an instance using <xref href=\"TinyLife.Actions.ActionType.TypeSettings.ConstructedType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<ActionType>), new object[]{typeof(ActionType), "PrivateTypes"})]

      public class ActionType : IEmotionSource
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of ActionType)), New Object() {GetType(ActionType), "PrivateTypes"})>

      Public Class ActionType
          Implements IEmotionSource
  inheritance:
  - System.Object
  implements:
  - TinyLife.Emotions.IEmotionSource
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.ActionType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.ActionType.Types
  commentId: F:TinyLife.Actions.ActionType.Types
  id: Types
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: ActionType.Types
  fullName: TinyLife.Actions.ActionType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Types
    path: Actions/ActionType.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA list of all available action types.\nTo register your own action types, use the <xref href=\"TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, ActionType> Types
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.Actions.ActionType}
    content.vb: Public Shared ReadOnly Types As IDictionary(Of String, ActionType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Settings
  commentId: P:TinyLife.Actions.ActionType.Settings
  id: Settings
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: ActionType.Settings
  fullName: TinyLife.Actions.ActionType.Settings
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Settings
    path: Actions/ActionType.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionType.TypeSettings\" data-throw-if-not-resolved=\"false\"></xref> for this action type, which actually contain this type&apos;s properties.\n"
  example: []
  syntax:
    content: public ActionType.TypeSettings Settings { get; }
    parameters: []
    return:
      type: TinyLife.Actions.ActionType.TypeSettings
    content.vb: Public ReadOnly Property Settings As ActionType.TypeSettings
  overload: TinyLife.Actions.ActionType.Settings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionType.SourceString
  commentId: P:TinyLife.Actions.ActionType.SourceString
  id: SourceString
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: SourceString
  nameWithType: ActionType.SourceString
  fullName: TinyLife.Actions.ActionType.SourceString
  type: Property
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SourceString
    path: Actions/ActionType.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA (localized) string that is displayed when hovering over an <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> that has this source\n"
  example: []
  syntax:
    content: public string SourceString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SourceString As String
  overload: TinyLife.Actions.ActionType.SourceString*
  implements:
  - TinyLife.Emotions.IEmotionSource.SourceString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  commentId: M:TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  id: Construct(TinyLife.Actions.ActionInfo,System.Nullable{TinyLife.Actions.ActionVariety})
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Construct(ActionInfo, Nullable<ActionVariety>)
  nameWithType: ActionType.Construct(ActionInfo, Nullable<ActionVariety>)
  fullName: TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo, System.Nullable<TinyLife.Actions.ActionVariety>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Construct
    path: Actions/ActionType.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> instance of this <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Action Construct(ActionInfo info, ActionVariety? variety = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The info that this action should be constructed with
    - id: variety
      type: System.Nullable{TinyLife.Actions.ActionVariety}
      description: The variety, or null if this action has no varieties
    return:
      type: TinyLife.Actions.Action
      description: A new action instance with the given information
    content.vb: Public Function Construct(info As ActionInfo, variety As ActionVariety? = Nothing) As Action
  overload: TinyLife.Actions.ActionType.Construct*
  nameWithType.vb: ActionType.Construct(ActionInfo, Nullable(Of ActionVariety))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo, System.Nullable(Of TinyLife.Actions.ActionVariety))
  name.vb: Construct(ActionInfo, Nullable(Of ActionVariety))
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  id: GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetDisplayName(ActionInfo, Boolean)
  nameWithType: ActionType.GetDisplayName(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetDisplayName
    path: Actions/ActionType.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a localized string that explains this action type in short.\nNote that, for instantiated actions, <xref href=\"TinyLife.Actions.Action.GetDisplayName\" data-throw-if-not-resolved=\"false\"></xref> should be used.\n"
  example: []
  syntax:
    content: public string GetDisplayName(ActionInfo info, bool includeIcon = true)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info, can be null if no action info is present
    - id: includeIcon
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Actions.ActionType.GetIconName" data-throw-if-not-resolved="false"></xref> texture should be included at the start of the name
    return:
      type: System.String
      description: This action type&apos;s display name
    content.vb: Public Function GetDisplayName(info As ActionInfo, includeIcon As Boolean = True) As String
  overload: TinyLife.Actions.ActionType.GetDisplayName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.IsActionType(System.Type)
  commentId: M:TinyLife.Actions.ActionType.IsActionType(System.Type)
  id: IsActionType(System.Type)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsActionType(Type)
  nameWithType: ActionType.IsActionType(Type)
  fullName: TinyLife.Actions.ActionType.IsActionType(System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsActionType
    path: Actions/ActionType.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether this action type&apos;s <xref href=\"TinyLife.Actions.ActionType.TypeSettings.ConstructedType\" data-throw-if-not-resolved=\"false\"></xref> is or extends the passed type <code data-dev-comment-type=\"paramref\" class=\"paramref\">t</code>.\nThis method is equivalent to <code>Settings.ConstructedType.IsAssignableTo(t)</code>.\n"
  example: []
  syntax:
    content: public bool IsActionType(Type t)
    parameters:
    - id: t
      type: System.Type
      description: The type to compare this action&apos;s constructed type to
    return:
      type: System.Boolean
      description: true if the passed type is a supertype of, or the same type as, this action&apos;s constructed type
    content.vb: Public Function IsActionType(t As Type) As Boolean
  overload: TinyLife.Actions.ActionType.IsActionType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanExecute(ActionInfo, Boolean)
  nameWithType: ActionType.CanExecute(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanExecute
    path: Actions/ActionType.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns this action&apos;s <xref href=\"TinyLife.Actions.ActionType.TypeSettings.CanExecute\" data-throw-if-not-resolved=\"false\"></xref> delegate&apos;s result.\nThis method additionally catches and handles any exceptions by printing them out as a <xref href=\"TinyLife.Uis.Notifications\" data-throw-if-not-resolved=\"false\"></xref> notification to the player.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteResult CanExecute(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether the action is automatically executed
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: A <xref href="TinyLife.Actions.ActionType.CanExecuteResult" data-throw-if-not-resolved="false"></xref> that represents whether the action can be executed right now
    content.vb: Public Function CanExecute(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanExecute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.GetIconName
  commentId: M:TinyLife.Actions.ActionType.GetIconName
  id: GetIconName
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetIconName()
  nameWithType: ActionType.GetIconName()
  fullName: TinyLife.Actions.ActionType.GetIconName()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIconName
    path: Actions/ActionType.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the name of this action type&apos;s icon, which is either the manually assigned icon (<xref href=\"TinyLife.Actions.ActionType.TypeSettings.IconName\" data-throw-if-not-resolved=\"false\"></xref>), or an automatically assigned icon based on this action type&apos;s requirements, including <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredSkill\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality\" data-throw-if-not-resolved=\"false\"></xref>.\nThe icon name can be used in a <xref href=\"MLEM.Ui.Elements.Paragraph\" data-throw-if-not-resolved=\"false\"></xref> as a <xref href=\"MLEM.Formatting.Codes.ImageCode\" data-throw-if-not-resolved=\"false\"></xref> as follows: <code>&lt;c IconName></code> \n"
  example: []
  syntax:
    content: public string GetIconName()
    return:
      type: System.String
      description: The name of this action type&apos;s icon
    content.vb: Public Function GetIconName As String
  overload: TinyLife.Actions.ActionType.GetIconName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  id: GetVarieties(TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetVarieties(ActionInfo)
  nameWithType: ActionType.GetVarieties(ActionInfo)
  fullName: TinyLife.Actions.ActionType.GetVarieties(TinyLife.Actions.ActionInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetVarieties
    path: Actions/ActionType.cs
    startLine: 125
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nConstructs and returns a set of <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Varieties\" data-throw-if-not-resolved=\"false\"></xref> for this action.\nNote that the information specified in the <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Varieties\" data-throw-if-not-resolved=\"false\"></xref> documentation applies.\nThis method also handles the appropriate error detection, so that the game does not crash when varities cause an exception.\n"
  example: []
  syntax:
    content: public IEnumerable<ActionVariety> GetVarieties(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info to create the varieties for
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: The varieties for the given action info
    content.vb: Public Function GetVarieties(info As ActionInfo) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Actions.ActionType.GetVarieties*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  commentId: M:TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  id: Register(TinyLife.Actions.ActionType.TypeSettings)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Register(ActionType.TypeSettings)
  nameWithType: ActionType.Register(ActionType.TypeSettings)
  fullName: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Register
    path: Actions/ActionType.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nRegisters a new action type with the given <xref href=\"TinyLife.Actions.ActionType.TypeSettings\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static ActionType Register(ActionType.TypeSettings settings)
    parameters:
    - id: settings
      type: TinyLife.Actions.ActionType.TypeSettings
      description: The settings that the action type should have
    return:
      type: TinyLife.Actions.ActionType
      description: The resulting action type instance
    content.vb: Public Shared Function Register(settings As ActionType.TypeSettings) As ActionType
  overload: TinyLife.Actions.ActionType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  commentId: M:TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  id: RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: RegisterAll(IEnumerable<ActionType.TypeSettings>)
  nameWithType: ActionType.RegisterAll(IEnumerable<ActionType.TypeSettings>)
  fullName: TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType.TypeSettings>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RegisterAll
    path: Actions/ActionType.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that is a mass registering version of <xref href=\"TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static ActionType[] RegisterAll(IEnumerable<ActionType.TypeSettings> settings)
    parameters:
    - id: settings
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
      description: The settings that the action types should have
    return:
      type: TinyLife.Actions.ActionType[]
      description: The registered action type instances
    content.vb: Public Shared Function RegisterAll(settings As IEnumerable(Of ActionType.TypeSettings)) As ActionType()
  overload: TinyLife.Actions.ActionType.RegisterAll*
  nameWithType.vb: ActionType.RegisterAll(IEnumerable(Of ActionType.TypeSettings))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType.TypeSettings))
  name.vb: RegisterAll(IEnumerable(Of ActionType.TypeSettings))
- uid: TinyLife.Actions.ActionType.Walk
  commentId: F:TinyLife.Actions.ActionType.Walk
  id: Walk
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Walk
  nameWithType: ActionType.Walk
  fullName: TinyLife.Actions.ActionType.Walk
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Walk
    path: Actions/ActionType.Internal.cs
    startLine: 8
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Walk
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Walk As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Drive
  commentId: F:TinyLife.Actions.ActionType.Drive
  id: Drive
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Drive
  nameWithType: ActionType.Drive
  fullName: TinyLife.Actions.ActionType.Drive
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Drive
    path: Actions/ActionType.Internal.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Drive
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Drive As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PassOut
  commentId: F:TinyLife.Actions.ActionType.PassOut
  id: PassOut
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PassOut
  nameWithType: ActionType.PassOut
  fullName: TinyLife.Actions.ActionType.PassOut
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PassOut
    path: Actions/ActionType.Internal.cs
    startLine: 10
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PassOut
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PassOut As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PeeSelf
  commentId: F:TinyLife.Actions.ActionType.PeeSelf
  id: PeeSelf
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PeeSelf
  nameWithType: ActionType.PeeSelf
  fullName: TinyLife.Actions.ActionType.PeeSelf
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PeeSelf
    path: Actions/ActionType.Internal.cs
    startLine: 11
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PeeSelf
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PeeSelf As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Starve
  commentId: F:TinyLife.Actions.ActionType.Starve
  id: Starve
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Starve
  nameWithType: ActionType.Starve
  fullName: TinyLife.Actions.ActionType.Starve
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Starve
    path: Actions/ActionType.Internal.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Starve
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Starve As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  commentId: F:TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  id: BeAwayFromLotEmployment
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: BeAwayFromLotEmployment
  nameWithType: ActionType.BeAwayFromLotEmployment
  fullName: TinyLife.Actions.ActionType.BeAwayFromLotEmployment
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: BeAwayFromLotEmployment
    path: Actions/ActionType.Internal.cs
    startLine: 13
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType BeAwayFromLotEmployment
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly BeAwayFromLotEmployment As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.DeliverMail
  commentId: F:TinyLife.Actions.ActionType.DeliverMail
  id: DeliverMail
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: DeliverMail
  nameWithType: ActionType.DeliverMail
  fullName: TinyLife.Actions.ActionType.DeliverMail
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: DeliverMail
    path: Actions/ActionType.Internal.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType DeliverMail
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly DeliverMail As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Die
  commentId: F:TinyLife.Actions.ActionType.Die
  id: Die
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Die
  nameWithType: ActionType.Die
  fullName: TinyLife.Actions.ActionType.Die
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Die
    path: Actions/ActionType.Internal.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Die
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Die As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CollectTrash
  commentId: F:TinyLife.Actions.ActionType.CollectTrash
  id: CollectTrash
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CollectTrash
  nameWithType: ActionType.CollectTrash
  fullName: TinyLife.Actions.ActionType.CollectTrash
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CollectTrash
    path: Actions/ActionType.Internal.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CollectTrash
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CollectTrash As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.VisitorGoHome
  commentId: F:TinyLife.Actions.ActionType.VisitorGoHome
  id: VisitorGoHome
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: VisitorGoHome
  nameWithType: ActionType.VisitorGoHome
  fullName: TinyLife.Actions.ActionType.VisitorGoHome
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Internal.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: VisitorGoHome
    path: Actions/ActionType.Internal.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType VisitorGoHome
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly VisitorGoHome As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GoHere
  commentId: F:TinyLife.Actions.ActionType.GoHere
  id: GoHere
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GoHere
  nameWithType: ActionType.GoHere
  fullName: TinyLife.Actions.ActionType.GoHere
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GoHere
    path: Actions/ActionType.Misc.cs
    startLine: 19
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GoHere
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GoHere As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Sit
  commentId: F:TinyLife.Actions.ActionType.Sit
  id: Sit
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Sit
  nameWithType: ActionType.Sit
  fullName: TinyLife.Actions.ActionType.Sit
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Sit
    path: Actions/ActionType.Misc.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Sit
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Sit As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.SitToilet
  commentId: F:TinyLife.Actions.ActionType.SitToilet
  id: SitToilet
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: SitToilet
  nameWithType: ActionType.SitToilet
  fullName: TinyLife.Actions.ActionType.SitToilet
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SitToilet
    path: Actions/ActionType.Misc.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType SitToilet
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly SitToilet As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Sleep
  commentId: F:TinyLife.Actions.ActionType.Sleep
  id: Sleep
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Sleep
  nameWithType: ActionType.Sleep
  fullName: TinyLife.Actions.ActionType.Sleep
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Sleep
    path: Actions/ActionType.Misc.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Sleep
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Sleep As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TakeShower
  commentId: F:TinyLife.Actions.ActionType.TakeShower
  id: TakeShower
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TakeShower
  nameWithType: ActionType.TakeShower
  fullName: TinyLife.Actions.ActionType.TakeShower
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TakeShower
    path: Actions/ActionType.Misc.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TakeShower
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TakeShower As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GetIngredientsSingle
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsSingle
  id: GetIngredientsSingle
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetIngredientsSingle
  nameWithType: ActionType.GetIngredientsSingle
  fullName: TinyLife.Actions.ActionType.GetIngredientsSingle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIngredientsSingle
    path: Actions/ActionType.Misc.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GetIngredientsSingle
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GetIngredientsSingle As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GetIngredientsFamily
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsFamily
  id: GetIngredientsFamily
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetIngredientsFamily
  nameWithType: ActionType.GetIngredientsFamily
  fullName: TinyLife.Actions.ActionType.GetIngredientsFamily
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIngredientsFamily
    path: Actions/ActionType.Misc.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GetIngredientsFamily
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GetIngredientsFamily As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PutDown
  commentId: F:TinyLife.Actions.ActionType.PutDown
  id: PutDown
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PutDown
  nameWithType: ActionType.PutDown
  fullName: TinyLife.Actions.ActionType.PutDown
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PutDown
    path: Actions/ActionType.Misc.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PutDown
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PutDown As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PrepareFood
  commentId: F:TinyLife.Actions.ActionType.PrepareFood
  id: PrepareFood
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PrepareFood
  nameWithType: ActionType.PrepareFood
  fullName: TinyLife.Actions.ActionType.PrepareFood
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PrepareFood
    path: Actions/ActionType.Misc.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PrepareFood
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PrepareFood As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CookFood
  commentId: F:TinyLife.Actions.ActionType.CookFood
  id: CookFood
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CookFood
  nameWithType: ActionType.CookFood
  fullName: TinyLife.Actions.ActionType.CookFood
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CookFood
    path: Actions/ActionType.Misc.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CookFood
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CookFood As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PickUp
  commentId: F:TinyLife.Actions.ActionType.PickUp
  id: PickUp
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PickUp
  nameWithType: ActionType.PickUp
  fullName: TinyLife.Actions.ActionType.PickUp
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PickUp
    path: Actions/ActionType.Misc.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PickUp
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PickUp As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Eat
  commentId: F:TinyLife.Actions.ActionType.Eat
  id: Eat
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Eat
  nameWithType: ActionType.Eat
  fullName: TinyLife.Actions.ActionType.Eat
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Eat
    path: Actions/ActionType.Misc.cs
    startLine: 81
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Eat
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Eat As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GrabServing
  commentId: F:TinyLife.Actions.ActionType.GrabServing
  id: GrabServing
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GrabServing
  nameWithType: ActionType.GrabServing
  fullName: TinyLife.Actions.ActionType.GrabServing
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GrabServing
    path: Actions/ActionType.Misc.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GrabServing
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GrabServing As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CallToMeal
  commentId: F:TinyLife.Actions.ActionType.CallToMeal
  id: CallToMeal
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CallToMeal
  nameWithType: ActionType.CallToMeal
  fullName: TinyLife.Actions.ActionType.CallToMeal
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CallToMeal
    path: Actions/ActionType.Misc.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CallToMeal
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CallToMeal As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PlaySingleplayerGames
  commentId: F:TinyLife.Actions.ActionType.PlaySingleplayerGames
  id: PlaySingleplayerGames
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PlaySingleplayerGames
  nameWithType: ActionType.PlaySingleplayerGames
  fullName: TinyLife.Actions.ActionType.PlaySingleplayerGames
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PlaySingleplayerGames
    path: Actions/ActionType.Misc.cs
    startLine: 110
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PlaySingleplayerGames
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PlaySingleplayerGames As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PlayOnlineGames
  commentId: F:TinyLife.Actions.ActionType.PlayOnlineGames
  id: PlayOnlineGames
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PlayOnlineGames
  nameWithType: ActionType.PlayOnlineGames
  fullName: TinyLife.Actions.ActionType.PlayOnlineGames
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PlayOnlineGames
    path: Actions/ActionType.Misc.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PlayOnlineGames
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PlayOnlineGames As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.WatchWalkthroughs
  commentId: F:TinyLife.Actions.ActionType.WatchWalkthroughs
  id: WatchWalkthroughs
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: WatchWalkthroughs
  nameWithType: ActionType.WatchWalkthroughs
  fullName: TinyLife.Actions.ActionType.WatchWalkthroughs
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WatchWalkthroughs
    path: Actions/ActionType.Misc.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType WatchWalkthroughs
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly WatchWalkthroughs As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JoinEasyTournament
  commentId: F:TinyLife.Actions.ActionType.JoinEasyTournament
  id: JoinEasyTournament
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JoinEasyTournament
  nameWithType: ActionType.JoinEasyTournament
  fullName: TinyLife.Actions.ActionType.JoinEasyTournament
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JoinEasyTournament
    path: Actions/ActionType.Misc.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JoinEasyTournament
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JoinEasyTournament As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JoinAdvancedTournament
  commentId: F:TinyLife.Actions.ActionType.JoinAdvancedTournament
  id: JoinAdvancedTournament
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JoinAdvancedTournament
  nameWithType: ActionType.JoinAdvancedTournament
  fullName: TinyLife.Actions.ActionType.JoinAdvancedTournament
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JoinAdvancedTournament
    path: Actions/ActionType.Misc.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JoinAdvancedTournament
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JoinAdvancedTournament As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Chat
  commentId: F:TinyLife.Actions.ActionType.Chat
  id: Chat
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Chat
  nameWithType: ActionType.Chat
  fullName: TinyLife.Actions.ActionType.Chat
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Chat
    path: Actions/ActionType.Misc.cs
    startLine: 115
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Chat
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Chat As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ChatWith
  commentId: F:TinyLife.Actions.ActionType.ChatWith
  id: ChatWith
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ChatWith
  nameWithType: ActionType.ChatWith
  fullName: TinyLife.Actions.ActionType.ChatWith
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ChatWith
    path: Actions/ActionType.Misc.cs
    startLine: 123
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ChatWith
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ChatWith As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CleanDish
  commentId: F:TinyLife.Actions.ActionType.CleanDish
  id: CleanDish
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CleanDish
  nameWithType: ActionType.CleanDish
  fullName: TinyLife.Actions.ActionType.CleanDish
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CleanDish
    path: Actions/ActionType.Misc.cs
    startLine: 127
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CleanDish
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CleanDish As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ChangeOutfit
  commentId: F:TinyLife.Actions.ActionType.ChangeOutfit
  id: ChangeOutfit
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ChangeOutfit
  nameWithType: ActionType.ChangeOutfit
  fullName: TinyLife.Actions.ActionType.ChangeOutfit
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ChangeOutfit
    path: Actions/ActionType.Misc.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ChangeOutfit
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ChangeOutfit As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.EditOutfits
  commentId: F:TinyLife.Actions.ActionType.EditOutfits
  id: EditOutfits
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: EditOutfits
  nameWithType: ActionType.EditOutfits
  fullName: TinyLife.Actions.ActionType.EditOutfits
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: EditOutfits
    path: Actions/ActionType.Misc.cs
    startLine: 150
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType EditOutfits
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly EditOutfits As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GoHome
  commentId: F:TinyLife.Actions.ActionType.GoHome
  id: GoHome
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GoHome
  nameWithType: ActionType.GoHome
  fullName: TinyLife.Actions.ActionType.GoHome
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GoHome
    path: Actions/ActionType.Misc.cs
    startLine: 153
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GoHome
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GoHome As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.VisitLot
  commentId: F:TinyLife.Actions.ActionType.VisitLot
  id: VisitLot
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: VisitLot
  nameWithType: ActionType.VisitLot
  fullName: TinyLife.Actions.ActionType.VisitLot
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: VisitLot
    path: Actions/ActionType.Misc.cs
    startLine: 166
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType VisitLot
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly VisitLot As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Paint
  commentId: F:TinyLife.Actions.ActionType.Paint
  id: Paint
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Paint
  nameWithType: ActionType.Paint
  fullName: TinyLife.Actions.ActionType.Paint
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Paint
    path: Actions/ActionType.Misc.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Paint
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Paint As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.SellPainting
  commentId: F:TinyLife.Actions.ActionType.SellPainting
  id: SellPainting
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: SellPainting
  nameWithType: ActionType.SellPainting
  fullName: TinyLife.Actions.ActionType.SellPainting
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SellPainting
    path: Actions/ActionType.Misc.cs
    startLine: 195
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType SellPainting
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly SellPainting As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PracticeSpeech
  commentId: F:TinyLife.Actions.ActionType.PracticeSpeech
  id: PracticeSpeech
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PracticeSpeech
  nameWithType: ActionType.PracticeSpeech
  fullName: TinyLife.Actions.ActionType.PracticeSpeech
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PracticeSpeech
    path: Actions/ActionType.Misc.cs
    startLine: 213
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PracticeSpeech
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PracticeSpeech As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Read
  commentId: F:TinyLife.Actions.ActionType.Read
  id: Read
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Read
  nameWithType: ActionType.Read
  fullName: TinyLife.Actions.ActionType.Read
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Read
    path: Actions/ActionType.Misc.cs
    startLine: 221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Read
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Read As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PutAway
  commentId: F:TinyLife.Actions.ActionType.PutAway
  id: PutAway
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PutAway
  nameWithType: ActionType.PutAway
  fullName: TinyLife.Actions.ActionType.PutAway
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PutAway
    path: Actions/ActionType.Misc.cs
    startLine: 234
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PutAway
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PutAway As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PracticeJokes
  commentId: F:TinyLife.Actions.ActionType.PracticeJokes
  id: PracticeJokes
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PracticeJokes
  nameWithType: ActionType.PracticeJokes
  fullName: TinyLife.Actions.ActionType.PracticeJokes
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PracticeJokes
    path: Actions/ActionType.Misc.cs
    startLine: 243
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PracticeJokes
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PracticeJokes As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Work
  commentId: F:TinyLife.Actions.ActionType.Work
  id: Work
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Work
  nameWithType: ActionType.Work
  fullName: TinyLife.Actions.ActionType.Work
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Work
    path: Actions/ActionType.Misc.cs
    startLine: 251
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Work
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Work As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GetJob
  commentId: F:TinyLife.Actions.ActionType.GetJob
  id: GetJob
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetJob
  nameWithType: ActionType.GetJob
  fullName: TinyLife.Actions.ActionType.GetJob
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetJob
    path: Actions/ActionType.Misc.cs
    startLine: 259
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GetJob
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GetJob As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.QuitJob
  commentId: F:TinyLife.Actions.ActionType.QuitJob
  id: QuitJob
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: QuitJob
  nameWithType: ActionType.QuitJob
  fullName: TinyLife.Actions.ActionType.QuitJob
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: QuitJob
    path: Actions/ActionType.Misc.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType QuitJob
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly QuitJob As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MopPuddle
  commentId: F:TinyLife.Actions.ActionType.MopPuddle
  id: MopPuddle
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MopPuddle
  nameWithType: ActionType.MopPuddle
  fullName: TinyLife.Actions.ActionType.MopPuddle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MopPuddle
    path: Actions/ActionType.Misc.cs
    startLine: 266
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MopPuddle
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MopPuddle As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PracticeProgramming
  commentId: F:TinyLife.Actions.ActionType.PracticeProgramming
  id: PracticeProgramming
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PracticeProgramming
  nameWithType: ActionType.PracticeProgramming
  fullName: TinyLife.Actions.ActionType.PracticeProgramming
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PracticeProgramming
    path: Actions/ActionType.Misc.cs
    startLine: 276
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PracticeProgramming
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PracticeProgramming As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ModGame
  commentId: F:TinyLife.Actions.ActionType.ModGame
  id: ModGame
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ModGame
  nameWithType: ActionType.ModGame
  fullName: TinyLife.Actions.ActionType.ModGame
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ModGame
    path: Actions/ActionType.Misc.cs
    startLine: 284
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ModGame
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ModGame As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.HackSomeone
  commentId: F:TinyLife.Actions.ActionType.HackSomeone
  id: HackSomeone
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: HackSomeone
  nameWithType: ActionType.HackSomeone
  fullName: TinyLife.Actions.ActionType.HackSomeone
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: HackSomeone
    path: Actions/ActionType.Misc.cs
    startLine: 293
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType HackSomeone
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly HackSomeone As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.WatchTv
  commentId: F:TinyLife.Actions.ActionType.WatchTv
  id: WatchTv
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: WatchTv
  nameWithType: ActionType.WatchTv
  fullName: TinyLife.Actions.ActionType.WatchTv
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WatchTv
    path: Actions/ActionType.Misc.cs
    startLine: 298
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType[] WatchTv
    return:
      type: TinyLife.Actions.ActionType[]
    content.vb: Public Shared ReadOnly WatchTv As ActionType()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Repair
  commentId: F:TinyLife.Actions.ActionType.Repair
  id: Repair
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Repair
  nameWithType: ActionType.Repair
  fullName: TinyLife.Actions.ActionType.Repair
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Repair
    path: Actions/ActionType.Misc.cs
    startLine: 309
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Repair
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Repair As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PayBills
  commentId: F:TinyLife.Actions.ActionType.PayBills
  id: PayBills
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PayBills
  nameWithType: ActionType.PayBills
  fullName: TinyLife.Actions.ActionType.PayBills
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PayBills
    path: Actions/ActionType.Misc.cs
    startLine: 322
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PayBills
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PayBills As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PracticeWriting
  commentId: F:TinyLife.Actions.ActionType.PracticeWriting
  id: PracticeWriting
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PracticeWriting
  nameWithType: ActionType.PracticeWriting
  fullName: TinyLife.Actions.ActionType.PracticeWriting
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PracticeWriting
    path: Actions/ActionType.Misc.cs
    startLine: 336
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PracticeWriting
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PracticeWriting As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.WriteBook
  commentId: F:TinyLife.Actions.ActionType.WriteBook
  id: WriteBook
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: WriteBook
  nameWithType: ActionType.WriteBook
  fullName: TinyLife.Actions.ActionType.WriteBook
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WriteBook
    path: Actions/ActionType.Misc.cs
    startLine: 344
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType[] WriteBook
    return:
      type: TinyLife.Actions.ActionType[]
    content.vb: Public Shared ReadOnly WriteBook As ActionType()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.SelfPublishBook
  commentId: F:TinyLife.Actions.ActionType.SelfPublishBook
  id: SelfPublishBook
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: SelfPublishBook
  nameWithType: ActionType.SelfPublishBook
  fullName: TinyLife.Actions.ActionType.SelfPublishBook
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SelfPublishBook
    path: Actions/ActionType.Misc.cs
    startLine: 357
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType SelfPublishBook
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly SelfPublishBook As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.HaveBookPublished
  commentId: F:TinyLife.Actions.ActionType.HaveBookPublished
  id: HaveBookPublished
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: HaveBookPublished
  nameWithType: ActionType.HaveBookPublished
  fullName: TinyLife.Actions.ActionType.HaveBookPublished
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: HaveBookPublished
    path: Actions/ActionType.Misc.cs
    startLine: 358
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType HaveBookPublished
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly HaveBookPublished As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.LockDoor
  commentId: F:TinyLife.Actions.ActionType.LockDoor
  id: LockDoor
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: LockDoor
  nameWithType: ActionType.LockDoor
  fullName: TinyLife.Actions.ActionType.LockDoor
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: LockDoor
    path: Actions/ActionType.Misc.cs
    startLine: 359
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType LockDoor
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly LockDoor As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AdmireLgbtFlag
  commentId: F:TinyLife.Actions.ActionType.AdmireLgbtFlag
  id: AdmireLgbtFlag
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AdmireLgbtFlag
  nameWithType: ActionType.AdmireLgbtFlag
  fullName: TinyLife.Actions.ActionType.AdmireLgbtFlag
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AdmireLgbtFlag
    path: Actions/ActionType.Misc.cs
    startLine: 367
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AdmireLgbtFlag
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AdmireLgbtFlag As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ShakeTree
  commentId: F:TinyLife.Actions.ActionType.ShakeTree
  id: ShakeTree
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ShakeTree
  nameWithType: ActionType.ShakeTree
  fullName: TinyLife.Actions.ActionType.ShakeTree
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ShakeTree
    path: Actions/ActionType.Misc.cs
    startLine: 370
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ShakeTree
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ShakeTree As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.RunOnTreadmill
  commentId: F:TinyLife.Actions.ActionType.RunOnTreadmill
  id: RunOnTreadmill
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: RunOnTreadmill
  nameWithType: ActionType.RunOnTreadmill
  fullName: TinyLife.Actions.ActionType.RunOnTreadmill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RunOnTreadmill
    path: Actions/ActionType.Misc.cs
    startLine: 373
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType RunOnTreadmill
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly RunOnTreadmill As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GoJogging
  commentId: F:TinyLife.Actions.ActionType.GoJogging
  id: GoJogging
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GoJogging
  nameWithType: ActionType.GoJogging
  fullName: TinyLife.Actions.ActionType.GoJogging
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GoJogging
    path: Actions/ActionType.Misc.cs
    startLine: 381
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GoJogging
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GoJogging As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.LiftWeights
  commentId: F:TinyLife.Actions.ActionType.LiftWeights
  id: LiftWeights
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: LiftWeights
  nameWithType: ActionType.LiftWeights
  fullName: TinyLife.Actions.ActionType.LiftWeights
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: LiftWeights
    path: Actions/ActionType.Misc.cs
    startLine: 389
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType LiftWeights
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly LiftWeights As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MixProteinShake
  commentId: F:TinyLife.Actions.ActionType.MixProteinShake
  id: MixProteinShake
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MixProteinShake
  nameWithType: ActionType.MixProteinShake
  fullName: TinyLife.Actions.ActionType.MixProteinShake
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MixProteinShake
    path: Actions/ActionType.Misc.cs
    startLine: 397
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MixProteinShake
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MixProteinShake As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GetWater
  commentId: F:TinyLife.Actions.ActionType.GetWater
  id: GetWater
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetWater
  nameWithType: ActionType.GetWater
  fullName: TinyLife.Actions.ActionType.GetWater
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetWater
    path: Actions/ActionType.Misc.cs
    startLine: 406
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GetWater
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GetWater As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.WashHands
  commentId: F:TinyLife.Actions.ActionType.WashHands
  id: WashHands
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: WashHands
  nameWithType: ActionType.WashHands
  fullName: TinyLife.Actions.ActionType.WashHands
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WashHands
    path: Actions/ActionType.Misc.cs
    startLine: 414
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType WashHands
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly WashHands As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ToggleLight
  commentId: F:TinyLife.Actions.ActionType.ToggleLight
  id: ToggleLight
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ToggleLight
  nameWithType: ActionType.ToggleLight
  fullName: TinyLife.Actions.ActionType.ToggleLight
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ToggleLight
    path: Actions/ActionType.Misc.cs
    startLine: 421
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ToggleLight
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ToggleLight As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ToggleAllLights
  commentId: F:TinyLife.Actions.ActionType.ToggleAllLights
  id: ToggleAllLights
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ToggleAllLights
  nameWithType: ActionType.ToggleAllLights
  fullName: TinyLife.Actions.ActionType.ToggleAllLights
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ToggleAllLights
    path: Actions/ActionType.Misc.cs
    startLine: 424
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ToggleAllLights
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ToggleAllLights As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GrillFood
  commentId: F:TinyLife.Actions.ActionType.GrillFood
  id: GrillFood
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GrillFood
  nameWithType: ActionType.GrillFood
  fullName: TinyLife.Actions.ActionType.GrillFood
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GrillFood
    path: Actions/ActionType.Misc.cs
    startLine: 435
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GrillFood
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GrillFood As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ThrowAway
  commentId: F:TinyLife.Actions.ActionType.ThrowAway
  id: ThrowAway
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ThrowAway
  nameWithType: ActionType.ThrowAway
  fullName: TinyLife.Actions.ActionType.ThrowAway
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ThrowAway
    path: Actions/ActionType.Misc.cs
    startLine: 445
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ThrowAway
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ThrowAway As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Scrap
  commentId: F:TinyLife.Actions.ActionType.Scrap
  id: Scrap
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Scrap
  nameWithType: ActionType.Scrap
  fullName: TinyLife.Actions.ActionType.Scrap
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Scrap
    path: Actions/ActionType.Misc.cs
    startLine: 453
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Scrap
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Scrap As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CleanEverything
  commentId: F:TinyLife.Actions.ActionType.CleanEverything
  id: CleanEverything
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CleanEverything
  nameWithType: ActionType.CleanEverything
  fullName: TinyLife.Actions.ActionType.CleanEverything
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CleanEverything
    path: Actions/ActionType.Misc.cs
    startLine: 459
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CleanEverything
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CleanEverything As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Clean
  commentId: F:TinyLife.Actions.ActionType.Clean
  id: Clean
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Clean
  nameWithType: ActionType.Clean
  fullName: TinyLife.Actions.ActionType.Clean
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Clean
    path: Actions/ActionType.Misc.cs
    startLine: 465
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Clean
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Clean As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Woodworking
  commentId: F:TinyLife.Actions.ActionType.Woodworking
  id: Woodworking
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Woodworking
  nameWithType: ActionType.Woodworking
  fullName: TinyLife.Actions.ActionType.Woodworking
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Woodworking
    path: Actions/ActionType.Misc.cs
    startLine: 473
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Woodworking
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Woodworking As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.LightFireplace
  commentId: F:TinyLife.Actions.ActionType.LightFireplace
  id: LightFireplace
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: LightFireplace
  nameWithType: ActionType.LightFireplace
  fullName: TinyLife.Actions.ActionType.LightFireplace
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: LightFireplace
    path: Actions/ActionType.Misc.cs
    startLine: 495
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType LightFireplace
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly LightFireplace As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PsychSelfUp
  commentId: F:TinyLife.Actions.ActionType.PsychSelfUp
  id: PsychSelfUp
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PsychSelfUp
  nameWithType: ActionType.PsychSelfUp
  fullName: TinyLife.Actions.ActionType.PsychSelfUp
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Misc.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PsychSelfUp
    path: Actions/ActionType.Misc.cs
    startLine: 531
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PsychSelfUp
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PsychSelfUp As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ConfideIn
  commentId: F:TinyLife.Actions.ActionType.ConfideIn
  id: ConfideIn
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ConfideIn
  nameWithType: ActionType.ConfideIn
  fullName: TinyLife.Actions.ActionType.ConfideIn
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ConfideIn
    path: Actions/ActionType.Social.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ConfideIn
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ConfideIn As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ComplainAboutLife
  commentId: F:TinyLife.Actions.ActionType.ComplainAboutLife
  id: ComplainAboutLife
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ComplainAboutLife
  nameWithType: ActionType.ComplainAboutLife
  fullName: TinyLife.Actions.ActionType.ComplainAboutLife
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ComplainAboutLife
    path: Actions/ActionType.Social.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ComplainAboutLife
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ComplainAboutLife As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutFeelings
  commentId: F:TinyLife.Actions.ActionType.TalkAboutFeelings
  id: TalkAboutFeelings
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutFeelings
  nameWithType: ActionType.TalkAboutFeelings
  fullName: TinyLife.Actions.ActionType.TalkAboutFeelings
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutFeelings
    path: Actions/ActionType.Social.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutFeelings
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutFeelings As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ShareIdeas
  commentId: F:TinyLife.Actions.ActionType.ShareIdeas
  id: ShareIdeas
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ShareIdeas
  nameWithType: ActionType.ShareIdeas
  fullName: TinyLife.Actions.ActionType.ShareIdeas
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ShareIdeas
    path: Actions/ActionType.Social.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ShareIdeas
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ShareIdeas As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GaugeRelationship
  commentId: F:TinyLife.Actions.ActionType.GaugeRelationship
  id: GaugeRelationship
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GaugeRelationship
  nameWithType: ActionType.GaugeRelationship
  fullName: TinyLife.Actions.ActionType.GaugeRelationship
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GaugeRelationship
    path: Actions/ActionType.Social.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GaugeRelationship
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GaugeRelationship As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AskToLeave
  commentId: F:TinyLife.Actions.ActionType.AskToLeave
  id: AskToLeave
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AskToLeave
  nameWithType: ActionType.AskToLeave
  fullName: TinyLife.Actions.ActionType.AskToLeave
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AskToLeave
    path: Actions/ActionType.Social.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AskToLeave
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AskToLeave As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CallOver
  commentId: F:TinyLife.Actions.ActionType.CallOver
  id: CallOver
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CallOver
  nameWithType: ActionType.CallOver
  fullName: TinyLife.Actions.ActionType.CallOver
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CallOver
    path: Actions/ActionType.Social.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CallOver
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CallOver As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ThisIsInappropriate
  commentId: F:TinyLife.Actions.ActionType.ThisIsInappropriate
  id: ThisIsInappropriate
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ThisIsInappropriate
  nameWithType: ActionType.ThisIsInappropriate
  fullName: TinyLife.Actions.ActionType.ThisIsInappropriate
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ThisIsInappropriate
    path: Actions/ActionType.Social.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ThisIsInappropriate
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ThisIsInappropriate As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.WakeUp
  commentId: F:TinyLife.Actions.ActionType.WakeUp
  id: WakeUp
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: WakeUp
  nameWithType: ActionType.WakeUp
  fullName: TinyLife.Actions.ActionType.WakeUp
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WakeUp
    path: Actions/ActionType.Social.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType WakeUp
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly WakeUp As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AskAboutPersonality
  commentId: F:TinyLife.Actions.ActionType.AskAboutPersonality
  id: AskAboutPersonality
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AskAboutPersonality
  nameWithType: ActionType.AskAboutPersonality
  fullName: TinyLife.Actions.ActionType.AskAboutPersonality
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AskAboutPersonality
    path: Actions/ActionType.Social.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AskAboutPersonality
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AskAboutPersonality As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Talk
  commentId: F:TinyLife.Actions.ActionType.Talk
  id: Talk
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Talk
  nameWithType: ActionType.Talk
  fullName: TinyLife.Actions.ActionType.Talk
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Talk
    path: Actions/ActionType.Social.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Talk
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Talk As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AskAboutDay
  commentId: F:TinyLife.Actions.ActionType.AskAboutDay
  id: AskAboutDay
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AskAboutDay
  nameWithType: ActionType.AskAboutDay
  fullName: TinyLife.Actions.ActionType.AskAboutDay
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AskAboutDay
    path: Actions/ActionType.Social.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AskAboutDay
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AskAboutDay As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellEngagingStory
  commentId: F:TinyLife.Actions.ActionType.TellEngagingStory
  id: TellEngagingStory
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellEngagingStory
  nameWithType: ActionType.TellEngagingStory
  fullName: TinyLife.Actions.ActionType.TellEngagingStory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellEngagingStory
    path: Actions/ActionType.Social.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellEngagingStory
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellEngagingStory As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellStory
  commentId: F:TinyLife.Actions.ActionType.TellStory
  id: TellStory
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellStory
  nameWithType: ActionType.TellStory
  fullName: TinyLife.Actions.ActionType.TellStory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellStory
    path: Actions/ActionType.Social.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellStory
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellStory As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutWork
  commentId: F:TinyLife.Actions.ActionType.TalkAboutWork
  id: TalkAboutWork
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutWork
  nameWithType: ActionType.TalkAboutWork
  fullName: TinyLife.Actions.ActionType.TalkAboutWork
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutWork
    path: Actions/ActionType.Social.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutWork
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutWork As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutNeighborhood
  commentId: F:TinyLife.Actions.ActionType.TalkAboutNeighborhood
  id: TalkAboutNeighborhood
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutNeighborhood
  nameWithType: ActionType.TalkAboutNeighborhood
  fullName: TinyLife.Actions.ActionType.TalkAboutNeighborhood
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutNeighborhood
    path: Actions/ActionType.Social.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutNeighborhood
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutNeighborhood As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutOutdoors
  commentId: F:TinyLife.Actions.ActionType.TalkAboutOutdoors
  id: TalkAboutOutdoors
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutOutdoors
  nameWithType: ActionType.TalkAboutOutdoors
  fullName: TinyLife.Actions.ActionType.TalkAboutOutdoors
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutOutdoors
    path: Actions/ActionType.Social.cs
    startLine: 141
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutOutdoors
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutOutdoors As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutFood
  commentId: F:TinyLife.Actions.ActionType.TalkAboutFood
  id: TalkAboutFood
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutFood
  nameWithType: ActionType.TalkAboutFood
  fullName: TinyLife.Actions.ActionType.TalkAboutFood
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutFood
    path: Actions/ActionType.Social.cs
    startLine: 145
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutFood
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutFood As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.DiscussWorkoutRegimen
  commentId: F:TinyLife.Actions.ActionType.DiscussWorkoutRegimen
  id: DiscussWorkoutRegimen
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: DiscussWorkoutRegimen
  nameWithType: ActionType.DiscussWorkoutRegimen
  fullName: TinyLife.Actions.ActionType.DiscussWorkoutRegimen
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: DiscussWorkoutRegimen
    path: Actions/ActionType.Social.cs
    startLine: 149
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType DiscussWorkoutRegimen
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly DiscussWorkoutRegimen As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.CompareMuscleSize
  commentId: F:TinyLife.Actions.ActionType.CompareMuscleSize
  id: CompareMuscleSize
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CompareMuscleSize
  nameWithType: ActionType.CompareMuscleSize
  fullName: TinyLife.Actions.ActionType.CompareMuscleSize
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CompareMuscleSize
    path: Actions/ActionType.Social.cs
    startLine: 156
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType CompareMuscleSize
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly CompareMuscleSize As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.GushAboutPartner
  commentId: F:TinyLife.Actions.ActionType.GushAboutPartner
  id: GushAboutPartner
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GushAboutPartner
  nameWithType: ActionType.GushAboutPartner
  fullName: TinyLife.Actions.ActionType.GushAboutPartner
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GushAboutPartner
    path: Actions/ActionType.Social.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType GushAboutPartner
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly GushAboutPartner As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AskAboutGamingRig
  commentId: F:TinyLife.Actions.ActionType.AskAboutGamingRig
  id: AskAboutGamingRig
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AskAboutGamingRig
  nameWithType: ActionType.AskAboutGamingRig
  fullName: TinyLife.Actions.ActionType.AskAboutGamingRig
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AskAboutGamingRig
    path: Actions/ActionType.Social.cs
    startLine: 169
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AskAboutGamingRig
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AskAboutGamingRig As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.AskAboutComputerSpecs
  commentId: F:TinyLife.Actions.ActionType.AskAboutComputerSpecs
  id: AskAboutComputerSpecs
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AskAboutComputerSpecs
  nameWithType: ActionType.AskAboutComputerSpecs
  fullName: TinyLife.Actions.ActionType.AskAboutComputerSpecs
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AskAboutComputerSpecs
    path: Actions/ActionType.Social.cs
    startLine: 174
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType AskAboutComputerSpecs
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly AskAboutComputerSpecs As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.BoastAboutPagesWritten
  commentId: F:TinyLife.Actions.ActionType.BoastAboutPagesWritten
  id: BoastAboutPagesWritten
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: BoastAboutPagesWritten
  nameWithType: ActionType.BoastAboutPagesWritten
  fullName: TinyLife.Actions.ActionType.BoastAboutPagesWritten
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: BoastAboutPagesWritten
    path: Actions/ActionType.Social.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType BoastAboutPagesWritten
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly BoastAboutPagesWritten As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PoseMathPuzzle
  commentId: F:TinyLife.Actions.ActionType.PoseMathPuzzle
  id: PoseMathPuzzle
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PoseMathPuzzle
  nameWithType: ActionType.PoseMathPuzzle
  fullName: TinyLife.Actions.ActionType.PoseMathPuzzle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PoseMathPuzzle
    path: Actions/ActionType.Social.cs
    startLine: 185
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PoseMathPuzzle
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PoseMathPuzzle As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ExpressFearOfCrowds
  commentId: F:TinyLife.Actions.ActionType.ExpressFearOfCrowds
  id: ExpressFearOfCrowds
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ExpressFearOfCrowds
  nameWithType: ActionType.ExpressFearOfCrowds
  fullName: TinyLife.Actions.ActionType.ExpressFearOfCrowds
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ExpressFearOfCrowds
    path: Actions/ActionType.Social.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ExpressFearOfCrowds
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ExpressFearOfCrowds As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutNaps
  commentId: F:TinyLife.Actions.ActionType.TalkAboutNaps
  id: TalkAboutNaps
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutNaps
  nameWithType: ActionType.TalkAboutNaps
  fullName: TinyLife.Actions.ActionType.TalkAboutNaps
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutNaps
    path: Actions/ActionType.Social.cs
    startLine: 195
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutNaps
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutNaps As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TalkAboutWatchingTv
  commentId: F:TinyLife.Actions.ActionType.TalkAboutWatchingTv
  id: TalkAboutWatchingTv
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TalkAboutWatchingTv
  nameWithType: ActionType.TalkAboutWatchingTv
  fullName: TinyLife.Actions.ActionType.TalkAboutWatchingTv
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TalkAboutWatchingTv
    path: Actions/ActionType.Social.cs
    startLine: 201
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TalkAboutWatchingTv
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TalkAboutWatchingTv As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.InviteToHousehold
  commentId: F:TinyLife.Actions.ActionType.InviteToHousehold
  id: InviteToHousehold
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: InviteToHousehold
  nameWithType: ActionType.InviteToHousehold
  fullName: TinyLife.Actions.ActionType.InviteToHousehold
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: InviteToHousehold
    path: Actions/ActionType.Social.cs
    startLine: 206
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType InviteToHousehold
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly InviteToHousehold As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellJoke
  commentId: F:TinyLife.Actions.ActionType.TellJoke
  id: TellJoke
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellJoke
  nameWithType: ActionType.TellJoke
  fullName: TinyLife.Actions.ActionType.TellJoke
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellJoke
    path: Actions/ActionType.Social.cs
    startLine: 253
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellJoke
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellJoke As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellFunnyStory
  commentId: F:TinyLife.Actions.ActionType.TellFunnyStory
  id: TellFunnyStory
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellFunnyStory
  nameWithType: ActionType.TellFunnyStory
  fullName: TinyLife.Actions.ActionType.TellFunnyStory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellFunnyStory
    path: Actions/ActionType.Social.cs
    startLine: 259
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellFunnyStory
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellFunnyStory As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellRidiculousStory
  commentId: F:TinyLife.Actions.ActionType.TellRidiculousStory
  id: TellRidiculousStory
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellRidiculousStory
  nameWithType: ActionType.TellRidiculousStory
  fullName: TinyLife.Actions.ActionType.TellRidiculousStory
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellRidiculousStory
    path: Actions/ActionType.Social.cs
    startLine: 264
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellRidiculousStory
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellRidiculousStory As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellComplexJoke
  commentId: F:TinyLife.Actions.ActionType.TellComplexJoke
  id: TellComplexJoke
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellComplexJoke
  nameWithType: ActionType.TellComplexJoke
  fullName: TinyLife.Actions.ActionType.TellComplexJoke
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellComplexJoke
    path: Actions/ActionType.Social.cs
    startLine: 269
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType TellComplexJoke
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly TellComplexJoke As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.PlayTrick
  commentId: F:TinyLife.Actions.ActionType.PlayTrick
  id: PlayTrick
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: PlayTrick
  nameWithType: ActionType.PlayTrick
  fullName: TinyLife.Actions.ActionType.PlayTrick
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PlayTrick
    path: Actions/ActionType.Social.cs
    startLine: 275
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType PlayTrick
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly PlayTrick As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutWork
  commentId: F:TinyLife.Actions.ActionType.JokeAboutWork
  id: JokeAboutWork
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutWork
  nameWithType: ActionType.JokeAboutWork
  fullName: TinyLife.Actions.ActionType.JokeAboutWork
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutWork
    path: Actions/ActionType.Social.cs
    startLine: 281
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutWork
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutWork As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutOwnUnemployment
  commentId: F:TinyLife.Actions.ActionType.JokeAboutOwnUnemployment
  id: JokeAboutOwnUnemployment
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutOwnUnemployment
  nameWithType: ActionType.JokeAboutOwnUnemployment
  fullName: TinyLife.Actions.ActionType.JokeAboutOwnUnemployment
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutOwnUnemployment
    path: Actions/ActionType.Social.cs
    startLine: 288
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutOwnUnemployment
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutOwnUnemployment As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutTreadmillAccidents
  commentId: F:TinyLife.Actions.ActionType.JokeAboutTreadmillAccidents
  id: JokeAboutTreadmillAccidents
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutTreadmillAccidents
  nameWithType: ActionType.JokeAboutTreadmillAccidents
  fullName: TinyLife.Actions.ActionType.JokeAboutTreadmillAccidents
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutTreadmillAccidents
    path: Actions/ActionType.Social.cs
    startLine: 295
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutTreadmillAccidents
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutTreadmillAccidents As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutWritingStyle
  commentId: F:TinyLife.Actions.ActionType.JokeAboutWritingStyle
  id: JokeAboutWritingStyle
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutWritingStyle
  nameWithType: ActionType.JokeAboutWritingStyle
  fullName: TinyLife.Actions.ActionType.JokeAboutWritingStyle
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutWritingStyle
    path: Actions/ActionType.Social.cs
    startLine: 302
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutWritingStyle
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutWritingStyle As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutAromance
  commentId: F:TinyLife.Actions.ActionType.JokeAboutAromance
  id: JokeAboutAromance
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutAromance
  nameWithType: ActionType.JokeAboutAromance
  fullName: TinyLife.Actions.ActionType.JokeAboutAromance
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutAromance
    path: Actions/ActionType.Social.cs
    startLine: 309
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutAromance
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutAromance As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.JokeAboutAsexuality
  commentId: F:TinyLife.Actions.ActionType.JokeAboutAsexuality
  id: JokeAboutAsexuality
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: JokeAboutAsexuality
  nameWithType: ActionType.JokeAboutAsexuality
  fullName: TinyLife.Actions.ActionType.JokeAboutAsexuality
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: JokeAboutAsexuality
    path: Actions/ActionType.Social.cs
    startLine: 316
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType JokeAboutAsexuality
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly JokeAboutAsexuality As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.TellJokeAboutSomething
  commentId: F:TinyLife.Actions.ActionType.TellJokeAboutSomething
  id: TellJokeAboutSomething
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: TellJokeAboutSomething
  nameWithType: ActionType.TellJokeAboutSomething
  fullName: TinyLife.Actions.ActionType.TellJokeAboutSomething
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TellJokeAboutSomething
    path: Actions/ActionType.Social.cs
    startLine: 323
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType[] TellJokeAboutSomething
    return:
      type: TinyLife.Actions.ActionType[]
    content.vb: Public Shared ReadOnly TellJokeAboutSomething As ActionType()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Insult
  commentId: F:TinyLife.Actions.ActionType.Insult
  id: Insult
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Insult
  nameWithType: ActionType.Insult
  fullName: TinyLife.Actions.ActionType.Insult
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Insult
    path: Actions/ActionType.Social.cs
    startLine: 337
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Insult
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Insult As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ImplyMotherIsCamel
  commentId: F:TinyLife.Actions.ActionType.ImplyMotherIsCamel
  id: ImplyMotherIsCamel
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ImplyMotherIsCamel
  nameWithType: ActionType.ImplyMotherIsCamel
  fullName: TinyLife.Actions.ActionType.ImplyMotherIsCamel
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ImplyMotherIsCamel
    path: Actions/ActionType.Social.cs
    startLine: 342
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ImplyMotherIsCamel
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ImplyMotherIsCamel As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeFunOfUnemployment
  commentId: F:TinyLife.Actions.ActionType.MakeFunOfUnemployment
  id: MakeFunOfUnemployment
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeFunOfUnemployment
  nameWithType: ActionType.MakeFunOfUnemployment
  fullName: TinyLife.Actions.ActionType.MakeFunOfUnemployment
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeFunOfUnemployment
    path: Actions/ActionType.Social.cs
    startLine: 347
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeFunOfUnemployment
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeFunOfUnemployment As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeFunOfLaziness
  commentId: F:TinyLife.Actions.ActionType.MakeFunOfLaziness
  id: MakeFunOfLaziness
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeFunOfLaziness
  nameWithType: ActionType.MakeFunOfLaziness
  fullName: TinyLife.Actions.ActionType.MakeFunOfLaziness
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeFunOfLaziness
    path: Actions/ActionType.Social.cs
    startLine: 353
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeFunOfLaziness
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeFunOfLaziness As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeFunOfIntroversion
  commentId: F:TinyLife.Actions.ActionType.MakeFunOfIntroversion
  id: MakeFunOfIntroversion
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeFunOfIntroversion
  nameWithType: ActionType.MakeFunOfIntroversion
  fullName: TinyLife.Actions.ActionType.MakeFunOfIntroversion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeFunOfIntroversion
    path: Actions/ActionType.Social.cs
    startLine: 358
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeFunOfIntroversion
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeFunOfIntroversion As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeFunOfNiceness
  commentId: F:TinyLife.Actions.ActionType.MakeFunOfNiceness
  id: MakeFunOfNiceness
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeFunOfNiceness
  nameWithType: ActionType.MakeFunOfNiceness
  fullName: TinyLife.Actions.ActionType.MakeFunOfNiceness
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeFunOfNiceness
    path: Actions/ActionType.Social.cs
    startLine: 364
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeFunOfNiceness
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeFunOfNiceness As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ComplainAboutRelationship
  commentId: F:TinyLife.Actions.ActionType.ComplainAboutRelationship
  id: ComplainAboutRelationship
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ComplainAboutRelationship
  nameWithType: ActionType.ComplainAboutRelationship
  fullName: TinyLife.Actions.ActionType.ComplainAboutRelationship
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ComplainAboutRelationship
    path: Actions/ActionType.Social.cs
    startLine: 369
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ComplainAboutRelationship
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ComplainAboutRelationship As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeFunOfPoorFitness
  commentId: F:TinyLife.Actions.ActionType.MakeFunOfPoorFitness
  id: MakeFunOfPoorFitness
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeFunOfPoorFitness
  nameWithType: ActionType.MakeFunOfPoorFitness
  fullName: TinyLife.Actions.ActionType.MakeFunOfPoorFitness
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeFunOfPoorFitness
    path: Actions/ActionType.Social.cs
    startLine: 375
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeFunOfPoorFitness
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeFunOfPoorFitness As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.BreakUp
  commentId: F:TinyLife.Actions.ActionType.BreakUp
  id: BreakUp
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: BreakUp
  nameWithType: ActionType.BreakUp
  fullName: TinyLife.Actions.ActionType.BreakUp
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: BreakUp
    path: Actions/ActionType.Social.cs
    startLine: 382
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType BreakUp
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly BreakUp As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.Flirt
  commentId: F:TinyLife.Actions.ActionType.Flirt
  id: Flirt
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: Flirt
  nameWithType: ActionType.Flirt
  fullName: TinyLife.Actions.ActionType.Flirt
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Flirt
    path: Actions/ActionType.Social.cs
    startLine: 411
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType Flirt
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly Flirt As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.ComplimentLooks
  commentId: F:TinyLife.Actions.ActionType.ComplimentLooks
  id: ComplimentLooks
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: ComplimentLooks
  nameWithType: ActionType.ComplimentLooks
  fullName: TinyLife.Actions.ActionType.ComplimentLooks
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ComplimentLooks
    path: Actions/ActionType.Social.cs
    startLine: 416
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType ComplimentLooks
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly ComplimentLooks As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.MakeRisqueRemark
  commentId: F:TinyLife.Actions.ActionType.MakeRisqueRemark
  id: MakeRisqueRemark
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: MakeRisqueRemark
  nameWithType: ActionType.MakeRisqueRemark
  fullName: TinyLife.Actions.ActionType.MakeRisqueRemark
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: MakeRisqueRemark
    path: Actions/ActionType.Social.cs
    startLine: 421
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType MakeRisqueRemark
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly MakeRisqueRemark As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.StartDating
  commentId: F:TinyLife.Actions.ActionType.StartDating
  id: StartDating
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: StartDating
  nameWithType: ActionType.StartDating
  fullName: TinyLife.Actions.ActionType.StartDating
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: StartDating
    path: Actions/ActionType.Social.cs
    startLine: 428
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType StartDating
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly StartDating As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.FoolAround
  commentId: F:TinyLife.Actions.ActionType.FoolAround
  id: FoolAround
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: FoolAround
  nameWithType: ActionType.FoolAround
  fullName: TinyLife.Actions.ActionType.FoolAround
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.Social.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FoolAround
    path: Actions/ActionType.Social.cs
    startLine: 443
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly ActionType FoolAround
    return:
      type: TinyLife.Actions.ActionType
    content.vb: Public Shared ReadOnly FoolAround As ActionType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  id: IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsHoldingOrValidParent(ActionInfo, ObjectCategory, Func<Furniture, Boolean>, Boolean, Boolean)
  nameWithType: ActionType.IsHoldingOrValidParent(ActionInfo, ObjectCategory, Func<Furniture, Boolean>, Boolean, Boolean)
  fullName: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func<TinyLife.Objects.Furniture, System.Boolean>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsHoldingOrValidParent
    path: Actions/ActionType.Utilities.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> in the following cases:\n<ul><li></li><li></li></ul>\nThis helper method is useful in cases like <xref href=\"TinyLife.Actions.ActionType.Eat\" data-throw-if-not-resolved=\"false\"></xref>, where the action should be allowed if the person is holding a food plate and clicking a chair, or if a person is clicking the food plate itself.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsHoldingOrValidParent(ActionInfo info, ObjectCategory goalParent, Func<Furniture, bool> isAllowed, bool parentHasToExist = false, bool allowAnyInvolved = false)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: goalParent
      type: TinyLife.Objects.ObjectCategory
      description: The object that the required item should be a child of
    - id: isAllowed
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that checks if the given item is the one searched for
    - id: parentHasToExist
      type: System.Boolean
      description: Whether the parent furniture has to be visible somewhere, even if the action object is being held. This is checked using <xref href="TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
    - id: allowAnyInvolved
      type: System.Boolean
      description: Whether any <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> should be passed to <code data-dev-comment-type="paramref" class="paramref">isAllowed</code>, instead of just the action object
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: A result that represents the validity of the action
    content.vb: Public Shared Function IsHoldingOrValidParent(info As ActionInfo, goalParent As ObjectCategory, isAllowed As Func(Of Furniture, Boolean), parentHasToExist As Boolean = False, allowAnyInvolved As Boolean = False) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsHoldingOrValidParent*
  nameWithType.vb: ActionType.IsHoldingOrValidParent(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func(Of TinyLife.Objects.Furniture, System.Boolean), System.Boolean, System.Boolean)
  name.vb: IsHoldingOrValidParent(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), Boolean, Boolean)
- uid: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  id: IsHoldingOrValidParent(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsHoldingOrValidParent(ActionInfo, Func<(Furniture Parent, Furniture Item), Boolean>, Func<Furniture, Boolean>, Boolean, Boolean)
  nameWithType: ActionType.IsHoldingOrValidParent(ActionInfo, Func<(Furniture Parent, Furniture Item), Boolean>, Func<Furniture, Boolean>, Boolean, Boolean)
  fullName: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo, System.Func<System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.Furniture>, System.Boolean>, System.Func<TinyLife.Objects.Furniture, System.Boolean>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsHoldingOrValidParent
    path: Actions/ActionType.Utilities.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> in the following cases:\n<ul><li></li><li></li></ul>\nThis helper method is useful in cases like <xref href=\"TinyLife.Actions.ActionType.Eat\" data-throw-if-not-resolved=\"false\"></xref>, where the action should be allowed if the person is holding a food plate and clicking a chair, or if a person is clicking the food plate itself.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsHoldingOrValidParent(ActionInfo info, Func<(Furniture Parent, Furniture Item), bool> isParentAllowed, Func<Furniture, bool> isAllowed, bool parentHasToExist = false, bool allowAnyInvolved = false)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: isParentAllowed
      type: System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean}
      description: Whether the object that the required item should be a child of, or placed onto, is correct
    - id: isAllowed
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that checks if the given item is the one searched for
    - id: parentHasToExist
      type: System.Boolean
      description: Whether the parent furniture has to be visible somewhere, even if the action object is being held. This is checked using <xref href="TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
    - id: allowAnyInvolved
      type: System.Boolean
      description: Whether any <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> should be passed to <code data-dev-comment-type="paramref" class="paramref">isAllowed</code>, instead of just the action object
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: A result that represents the validity of the action
    content.vb: Public Shared Function IsHoldingOrValidParent(info As ActionInfo, isParentAllowed As Func(Of(Parent As Furniture, Item As Furniture)(Of Furniture , Furniture), Boolean), isAllowed As Func(Of Furniture, Boolean), parentHasToExist As Boolean = False, allowAnyInvolved As Boolean = False) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsHoldingOrValidParent*
  nameWithType.vb: ActionType.IsHoldingOrValidParent(ActionInfo, Func(Of (Parent As Furniture, Item As Furniture)(Of Furniture, Furniture), Boolean), Func(Of Furniture, Boolean), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionType.IsHoldingOrValidParent(TinyLife.Actions.ActionInfo, System.Func(Of System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.Furniture), System.Boolean), System.Func(Of TinyLife.Objects.Furniture, System.Boolean), System.Boolean, System.Boolean)
  name.vb: IsHoldingOrValidParent(ActionInfo, Func(Of (Parent As Furniture, Item As Furniture)(Of Furniture, Furniture), Boolean), Func(Of Furniture, Boolean), Boolean, Boolean)
- uid: TinyLife.Actions.ActionType.CanPlaceHeldItem(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanPlaceHeldItem(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanPlaceHeldItem(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanPlaceHeldItem(ActionInfo, Boolean)
  nameWithType: ActionType.CanPlaceHeldItem(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.CanPlaceHeldItem(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanPlaceHeldItem
    path: Actions/ActionType.Utilities.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether or not the item that is currently held by the given person can be placed in an object spot on the given object.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult CanPlaceHeldItem(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether or not this action is started automatically. This property is unused, but present for ease of use with <xref href="TinyLife.Actions.ActionType.TypeSettings.CanExecute" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the object has a free object spot, otherwise <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function CanPlaceHeldItem(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanPlaceHeldItem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.HasChairOrIsStandingDesk(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.HasChairOrIsStandingDesk(TinyLife.Actions.ActionInfo,System.Boolean)
  id: HasChairOrIsStandingDesk(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: HasChairOrIsStandingDesk(ActionInfo, Boolean)
  nameWithType: ActionType.HasChairOrIsStandingDesk(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.HasChairOrIsStandingDesk(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: HasChairOrIsStandingDesk
    path: Actions/ActionType.Utilities.cs
    startLine: 96
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the given object is sat on a table or desk that has a chair or sat on a standing desk that doesn&apos;t need a chair\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult HasChairOrIsStandingDesk(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether or not this action is started automatically. This property is unused, but present for ease of use with <xref href="TinyLife.Actions.ActionType.TypeSettings.CanExecute" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if there is a chair, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.NoChair" data-throw-if-not-resolved="false"></xref> if there is no valid chair
    content.vb: Public Shared Function HasChairOrIsStandingDesk(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.HasChairOrIsStandingDesk*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsDislikedOrMean(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsDislikedOrMean(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsDislikedOrMean(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsDislikedOrMean(ActionInfo, Boolean)
  nameWithType: ActionType.IsDislikedOrMean(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsDislikedOrMean(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsDislikedOrMean
    path: Actions/ActionType.Utilities.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the action is executed manually, the given <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s person has the <xref href=\"TinyLife.PersonalityType.Mean\" data-throw-if-not-resolved=\"false\"></xref> personality type, or if the interaction partner has the <xref href=\"TinyLife.RelationshipType.Disliked\" data-throw-if-not-resolved=\"false\"></xref> relationship type (or lower).\nIf the person&apos;s current <xref href=\"TinyLife.Objects.Person.Emotion\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"TinyLife.Emotions.EmotionType.Angry\" data-throw-if-not-resolved=\"false\"></xref>, this method also returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsDislikedOrMean(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if any of the conditions are met, otherwise <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function IsDislikedOrMean(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsDislikedOrMean*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsReadyForRomance(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsReadyForRomance(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsReadyForRomance(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsReadyForRomance(ActionInfo, Boolean)
  nameWithType: ActionType.IsReadyForRomance(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsReadyForRomance(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsReadyForRomance
    path: Actions/ActionType.Utilities.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the <xref href=\"TinyLife.Actions.ActionInfo.Person\" data-throw-if-not-resolved=\"false\"></xref> and their interaction partner are <xref href=\"TinyLife.GenealogyType.Unrelated\" data-throw-if-not-resolved=\"false\"></xref> and whether the action is executed manually or their <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> is higher than 0.\nThis method will also return <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.TooSad\" data-throw-if-not-resolved=\"false\"></xref> if the person is currently feeling <xref href=\"TinyLife.Emotions.EmotionType.Sad\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method should be used for <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> actions that are romantic in nature.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsReadyForRomance(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if any of the conditions are met, otherwise <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function IsReadyForRomance(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsReadyForRomance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsComfortable(ActionInfo, Boolean)
  nameWithType: ActionType.IsComfortable(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsComfortable
    path: Actions/ActionType.Utilities.cs
    startLine: 157
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the person is comfortable enough to execute an action.\nA comfortable person is one that doesn&apos;t have the <xref href=\"TinyLife.Emotions.EmotionType.Uncomfortable\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Emotions.EmotionType.Sad\" data-throw-if-not-resolved=\"false\"></xref> emotions.\nTo check only for the <xref href=\"TinyLife.Emotions.EmotionType.Uncomfortable\" data-throw-if-not-resolved=\"false\"></xref> emotion, use <xref href=\"TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsComfortable(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the person is comfortable, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function IsComfortable(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsComfortable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsNotUncomfortable(ActionInfo, Boolean)
  nameWithType: ActionType.IsNotUncomfortable(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsNotUncomfortable
    path: Actions/ActionType.Utilities.cs
    startLine: 168
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether a person is uncomfortable.\nThis method differs from <xref href=\"TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> in that only the <xref href=\"TinyLife.Emotions.EmotionType.Uncomfortable\" data-throw-if-not-resolved=\"false\"></xref> emotion is queried.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsNotUncomfortable(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the person is not uncomfortable, else <xref href="TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function IsNotUncomfortable(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsNotUncomfortable*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsNotEmbarrassed(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsNotEmbarrassed(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsNotEmbarrassed(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsNotEmbarrassed(ActionInfo, Boolean)
  nameWithType: ActionType.IsNotEmbarrassed(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsNotEmbarrassed(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsNotEmbarrassed
    path: Actions/ActionType.Utilities.cs
    startLine: 178
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the person is <xref href=\"TinyLife.Emotions.EmotionType.Embarrassed\" data-throw-if-not-resolved=\"false\"></xref> or not\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsNotEmbarrassed(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the person is not embarrassed, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function IsNotEmbarrassed(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsNotEmbarrassed*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsEmptyHanded(ActionInfo, Boolean)
  nameWithType: ActionType.IsEmptyHanded(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsEmptyHanded
    path: Actions/ActionType.Utilities.cs
    startLine: 188
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the person is not holding an item.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsEmptyHanded(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the person&apos;s hands are empty, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function IsEmptyHanded(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsEmptyHanded*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsFunctional(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsFunctional(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsFunctional(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsFunctional(ActionInfo, Boolean)
  nameWithType: ActionType.IsFunctional(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsFunctional(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsFunctional
    path: Actions/ActionType.Utilities.cs
    startLine: 198
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method inteded to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the action object is broken or if utilities are disabled (<xref href=\"TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>) for the lot that the object is on\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsFunctional(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken" data-throw-if-not-resolved="false"></xref> if the object is broken, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled" data-throw-if-not-resolved="false"></xref> if utilities are disabled, or otherwise <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function IsFunctional(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsFunctional*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.CanWorkAtDeskObject(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanWorkAtDeskObject(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanWorkAtDeskObject(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanWorkAtDeskObject(ActionInfo, Boolean)
  nameWithType: ActionType.CanWorkAtDeskObject(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.CanWorkAtDeskObject(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanWorkAtDeskObject
    path: Actions/ActionType.Utilities.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if the action object (which is expected to be a desk object like a computer) meets all of the criteria for working at it\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult CanWorkAtDeskObject(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the desk object can be worked at, several possible results like <xref href="TinyLife.Actions.ActionType.CanExecuteResult.NoChair" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function CanWorkAtDeskObject(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanWorkAtDeskObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.IsNotExpired(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsNotExpired(TinyLife.Actions.ActionInfo,System.Boolean)
  id: IsNotExpired(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: IsNotExpired(ActionInfo, Boolean)
  nameWithType: ActionType.IsNotExpired(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.IsNotExpired(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsNotExpired
    path: Actions/ActionType.Utilities.cs
    startLine: 225
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether the action object is expired, and returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Expired\" data-throw-if-not-resolved=\"false\"></xref> if it is\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult IsNotExpired(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether the action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if the action object is not expired, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Expired" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function IsNotExpired(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.IsNotExpired*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.CanDoImportantAction(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanDoImportantAction(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanDoImportantAction(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanDoImportantAction(ActionInfo, Boolean)
  nameWithType: ActionType.CanDoImportantAction(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.CanDoImportantAction(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanDoImportantAction
    path: Actions/ActionType.Utilities.cs
    startLine: 237
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether an important action can be executed.\nAn important action can be executed if it is manual, not in the current household, or the per-save option <xref href=\"TinyLife.PerSaveOptions.AiImportantActions\" data-throw-if-not-resolved=\"false\"></xref> is true.\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult CanDoImportantAction(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether the action is automatic
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if an important action can be executed, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function CanDoImportantAction(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanDoImportantAction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.AreDating(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.AreDating(TinyLife.Actions.ActionInfo,System.Boolean)
  id: AreDating(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: AreDating(ActionInfo, Boolean)
  nameWithType: ActionType.AreDating(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.AreDating(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: AreDating
    path: Actions/ActionType.Utilities.cs
    startLine: 247
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether the person and the interaction partner are currently dating\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult AreDating(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether the action is automatic (unused)
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if they are dating, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function AreDating(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.AreDating*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.CanExecuteAll(TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionType.CanExecuteDelegate[])
  commentId: M:TinyLife.Actions.ActionType.CanExecuteAll(TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionType.CanExecuteDelegate[])
  id: CanExecuteAll(TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionType.CanExecuteDelegate[])
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanExecuteAll(ActionInfo, Boolean, ActionType.CanExecuteDelegate[])
  nameWithType: ActionType.CanExecuteAll(ActionInfo, Boolean, ActionType.CanExecuteDelegate[])
  fullName: TinyLife.Actions.ActionType.CanExecuteAll(TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Actions.ActionType.CanExecuteDelegate[])
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanExecuteAll
    path: Actions/ActionType.Utilities.cs
    startLine: 264
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines if all of the passed <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> checks pass.\nIf one of the passed checks does not pass, its result is returned. If all of them pass, <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nThis method is designed to be used with the other helper methods in this class, for example:\n<pre><code>CanExecuteAll(info, automatic, HasChair, IsFunctional, IsEmptyHanded)</code></pre>\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult CanExecuteAll(ActionInfo info, bool automatic, params ActionType.CanExecuteDelegate[] conditions)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic
    - id: conditions
      type: TinyLife.Actions.ActionType.CanExecuteDelegate[]
      description: The conditions that should be checked
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> if all of the conditions are valid, else the first invalid result
    content.vb: Public Shared Function CanExecuteAll(info As ActionInfo, automatic As Boolean, ParamArray conditions As ActionType.CanExecuteDelegate()) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanExecuteAll*
  nameWithType.vb: ActionType.CanExecuteAll(ActionInfo, Boolean, ActionType.CanExecuteDelegate())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionType.CanExecuteAll(TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Actions.ActionType.CanExecuteDelegate())
  name.vb: CanExecuteAll(ActionInfo, Boolean, ActionType.CanExecuteDelegate())
- uid: TinyLife.Actions.ActionType.CanBeSexual(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanBeSexual(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanBeSexual(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: CanBeSexual(ActionInfo, Boolean)
  nameWithType: ActionType.CanBeSexual(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionType.CanBeSexual(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanBeSexual
    path: Actions/ActionType.Utilities.cs
    startLine: 280
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether a person can invoke a sexual activity.\nA <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can invoke such an activity iff they&apos;re not a <xref href=\"TinyLife.Objects.AgeGroup.Child\" data-throw-if-not-resolved=\"false\"></xref> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">automatic</code> is either false or the person is not asexual (<xref href=\"TinyLife.PersonalityType.Asexual\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public static ActionType.CanExecuteResult CanBeSexual(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether this action is automatic
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Hidden" data-throw-if-not-resolved="false"></xref> if the person cannot be sexual, <xref href="TinyLife.Actions.ActionType.CanExecuteResult.Valid" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Shared Function CanBeSexual(info As ActionInfo, automatic As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Actions.ActionType.CanBeSexual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionType.GetSkillPriorityMod(TinyLife.Objects.Person,TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Actions.ActionType.GetSkillPriorityMod(TinyLife.Objects.Person,TinyLife.Skills.SkillType)
  id: GetSkillPriorityMod(TinyLife.Objects.Person,TinyLife.Skills.SkillType)
  parent: TinyLife.Actions.ActionType
  langs:
  - csharp
  - vb
  name: GetSkillPriorityMod(Person, SkillType)
  nameWithType: ActionType.GetSkillPriorityMod(Person, SkillType)
  fullName: TinyLife.Actions.ActionType.GetSkillPriorityMod(TinyLife.Objects.Person, TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionType.Utilities.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetSkillPriorityMod
    path: Actions/ActionType.Utilities.cs
    startLine: 294
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a modifier that can be used for <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> if an action involves a skill building activity.\nActions like <xref href=\"TinyLife.Actions.ActionType.PracticeWriting\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.PracticeProgramming\" data-throw-if-not-resolved=\"false\"></xref> use this to make sure that they are only executed if <xref href=\"TinyLife.PerSaveOptions.AiSkillBuilding\" data-throw-if-not-resolved=\"false\"></xref> is enabled.\nThe modifier returned can be multiplied with a constant, default passive priority.\n"
  example: []
  syntax:
    content: public static float GetSkillPriorityMod(Person person, SkillType skill)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to execute an action
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The skill whose building is involved in the action
    return:
      type: System.Single
      description: A modifier that is between 0 and 1, based on whether the person&apos;s personality or existing skills boost the passed skill
    content.vb: Public Shared Function GetSkillPriorityMod(person As Person, skill As SkillType) As Single
  overload: TinyLife.Actions.ActionType.GetSkillPriorityMod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  commentId: M:TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.ConstructedType
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionType>()
  nameWithType: Extensions.JsonCopy<ActionType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType)()
  name.vb: JsonCopy(Of ActionType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionType>
    nameWithType: Extensions.JsonCopy<ActionType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionType)
    nameWithType: Extensions.JsonCopy(Of ActionType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.Actions.ActionType}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.Actions.ActionType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ActionType>
  nameWithType: IDictionary<String, ActionType>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.Actions.ActionType>
  nameWithType.vb: IDictionary(Of String, ActionType)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.Actions.ActionType)
  name.vb: IDictionary(Of String, ActionType)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.ActionType.TypeSettings
  commentId: T:TinyLife.Actions.ActionType.TypeSettings
  parent: TinyLife.Actions
  name: ActionType.TypeSettings
  nameWithType: ActionType.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings
- uid: TinyLife.Actions.ActionType.Settings*
  commentId: Overload:TinyLife.Actions.ActionType.Settings
  name: Settings
  nameWithType: ActionType.Settings
  fullName: TinyLife.Actions.ActionType.Settings
- uid: TinyLife.Actions.ActionType.SourceString*
  commentId: Overload:TinyLife.Actions.ActionType.SourceString
  name: SourceString
  nameWithType: ActionType.SourceString
  fullName: TinyLife.Actions.ActionType.SourceString
- uid: TinyLife.Emotions.IEmotionSource.SourceString
  commentId: P:TinyLife.Emotions.IEmotionSource.SourceString
  parent: TinyLife.Emotions.IEmotionSource
  name: SourceString
  nameWithType: IEmotionSource.SourceString
  fullName: TinyLife.Emotions.IEmotionSource.SourceString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionType.Construct*
  commentId: Overload:TinyLife.Actions.ActionType.Construct
  name: Construct
  nameWithType: ActionType.Construct
  fullName: TinyLife.Actions.ActionType.Construct
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Nullable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Nullable{TinyLife.Actions.ActionVariety}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ActionVariety>
  nameWithType: Nullable<ActionVariety>
  fullName: System.Nullable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: Nullable(Of ActionVariety)
  fullName.vb: System.Nullable(Of TinyLife.Actions.ActionVariety)
  name.vb: Nullable(Of ActionVariety)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  parent: TinyLife.Actions.Action
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.GetIconName
  commentId: M:TinyLife.Actions.ActionType.GetIconName
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetDisplayName*
  commentId: Overload:TinyLife.Actions.ActionType.GetDisplayName
  name: GetDisplayName
  nameWithType: ActionType.GetDisplayName
  fullName: TinyLife.Actions.ActionType.GetDisplayName
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.ActionType.IsActionType*
  commentId: Overload:TinyLife.Actions.ActionType.IsActionType
  name: IsActionType
  nameWithType: ActionType.IsActionType
  fullName: TinyLife.Actions.ActionType.IsActionType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  isExternal: true
- uid: TinyLife.Uis.Notifications
  commentId: T:TinyLife.Uis.Notifications
  name: Notifications
  nameWithType: Notifications
  fullName: TinyLife.Uis.Notifications
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Actions.ActionType.CanExecute*
  commentId: Overload:TinyLife.Actions.ActionType.CanExecute
  name: CanExecute
  nameWithType: ActionType.CanExecute
  fullName: TinyLife.Actions.ActionType.CanExecute
- uid: TinyLife.Actions.ActionType.TypeSettings.IconName
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IconName
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredEmotion
  isExternal: true
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredPersonality
  isExternal: true
- uid: MLEM.Ui.Elements.Paragraph
  commentId: T:MLEM.Ui.Elements.Paragraph
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Paragraph
  nameWithType: Paragraph
  fullName: MLEM.Ui.Elements.Paragraph
- uid: MLEM.Formatting.Codes.ImageCode
  commentId: T:MLEM.Formatting.Codes.ImageCode
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetIconName*
  commentId: Overload:TinyLife.Actions.ActionType.GetIconName
  name: GetIconName
  nameWithType: ActionType.GetIconName
  fullName: TinyLife.Actions.ActionType.GetIconName
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Actions.ActionType.TypeSettings.Varieties
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Varieties
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetVarieties*
  commentId: Overload:TinyLife.Actions.ActionType.GetVarieties
  name: GetVarieties
  nameWithType: ActionType.GetVarieties
  fullName: TinyLife.Actions.ActionType.GetVarieties
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.Register*
  commentId: Overload:TinyLife.Actions.ActionType.Register
  name: Register
  nameWithType: ActionType.Register
  fullName: TinyLife.Actions.ActionType.Register
- uid: TinyLife.Actions.ActionType.RegisterAll*
  commentId: Overload:TinyLife.Actions.ActionType.RegisterAll
  name: RegisterAll
  nameWithType: ActionType.RegisterAll
  fullName: TinyLife.Actions.ActionType.RegisterAll
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionType.TypeSettings>
  nameWithType: IEnumerable<ActionType.TypeSettings>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType.TypeSettings>
  nameWithType.vb: IEnumerable(Of ActionType.TypeSettings)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType.TypeSettings)
  name.vb: IEnumerable(Of ActionType.TypeSettings)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: ActionType.TypeSettings
    nameWithType: ActionType.TypeSettings
    fullName: TinyLife.Actions.ActionType.TypeSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: ActionType.TypeSettings
    nameWithType: ActionType.TypeSettings
    fullName: TinyLife.Actions.ActionType.TypeSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType[]
  isExternal: true
  name: ActionType[]
  nameWithType: ActionType[]
  fullName: TinyLife.Actions.ActionType[]
  nameWithType.vb: ActionType()
  fullName.vb: TinyLife.Actions.ActionType()
  name.vb: ActionType()
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Valid
  isExternal: true
- uid: TinyLife.Actions.ActionType.Eat
  commentId: F:TinyLife.Actions.ActionType.Eat
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  nameWithType.vb: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: TypelessAction.FindFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: TypelessAction.FindFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsHoldingOrValidParent*
  commentId: Overload:TinyLife.Actions.ActionType.IsHoldingOrValidParent
  name: IsHoldingOrValidParent
  nameWithType: ActionType.IsHoldingOrValidParent
  fullName: TinyLife.Actions.ActionType.IsHoldingOrValidParent
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: System.Func{TinyLife.Objects.Furniture,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Furniture, Boolean>
  nameWithType: Func<Furniture, Boolean>
  fullName: System.Func<TinyLife.Objects.Furniture, System.Boolean>
  nameWithType.vb: Func(Of Furniture, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, System.Boolean)
  name.vb: Func(Of Furniture, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.Furniture},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2)<Furniture, Furniture>, Boolean>
  nameWithType: Func<(T1, T2)<Furniture, Furniture>, Boolean>
  fullName: System.Func<System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.Furniture>, System.Boolean>
  nameWithType.vb: Func(Of (T1, T2)(Of Furniture, Furniture), Boolean)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.Furniture), System.Boolean)
  name.vb: Func(Of (T1, T2)(Of Furniture, Furniture), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanPlaceHeldItem*
  commentId: Overload:TinyLife.Actions.ActionType.CanPlaceHeldItem
  name: CanPlaceHeldItem
  nameWithType: ActionType.CanPlaceHeldItem
  fullName: TinyLife.Actions.ActionType.CanPlaceHeldItem
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  isExternal: true
- uid: TinyLife.Actions.ActionType.HasChairOrIsStandingDesk*
  commentId: Overload:TinyLife.Actions.ActionType.HasChairOrIsStandingDesk
  name: HasChairOrIsStandingDesk
  nameWithType: ActionType.HasChairOrIsStandingDesk
  fullName: TinyLife.Actions.ActionType.HasChairOrIsStandingDesk
- uid: TinyLife.PersonalityType.Mean
  commentId: F:TinyLife.PersonalityType.Mean
  isExternal: true
- uid: TinyLife.RelationshipType.Disliked
  commentId: F:TinyLife.RelationshipType.Disliked
  isExternal: true
- uid: TinyLife.Objects.Person.Emotion
  commentId: P:TinyLife.Objects.Person.Emotion
  isExternal: true
- uid: TinyLife.Emotions.EmotionType.Angry
  commentId: F:TinyLife.Emotions.EmotionType.Angry
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsDislikedOrMean*
  commentId: Overload:TinyLife.Actions.ActionType.IsDislikedOrMean
  name: IsDislikedOrMean
  nameWithType: ActionType.IsDislikedOrMean
  fullName: TinyLife.Actions.ActionType.IsDislikedOrMean
- uid: TinyLife.Actions.ActionInfo.Person
  commentId: P:TinyLife.Actions.ActionInfo.Person
  isExternal: true
- uid: TinyLife.GenealogyType.Unrelated
  commentId: F:TinyLife.GenealogyType.Unrelated
  isExternal: true
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  isExternal: true
- uid: TinyLife.Emotions.EmotionType.Sad
  commentId: F:TinyLife.Emotions.EmotionType.Sad
  isExternal: true
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: TinyLife.Actions.ActionType.IsReadyForRomance*
  commentId: Overload:TinyLife.Actions.ActionType.IsReadyForRomance
  name: IsReadyForRomance
  nameWithType: ActionType.IsReadyForRomance
  fullName: TinyLife.Actions.ActionType.IsReadyForRomance
- uid: TinyLife.Emotions.EmotionType.Uncomfortable
  commentId: F:TinyLife.Emotions.EmotionType.Uncomfortable
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsNotUncomfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsComfortable*
  commentId: Overload:TinyLife.Actions.ActionType.IsComfortable
  name: IsComfortable
  nameWithType: ActionType.IsComfortable
  fullName: TinyLife.Actions.ActionType.IsComfortable
- uid: TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsComfortable(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsNotUncomfortable*
  commentId: Overload:TinyLife.Actions.ActionType.IsNotUncomfortable
  name: IsNotUncomfortable
  nameWithType: ActionType.IsNotUncomfortable
  fullName: TinyLife.Actions.ActionType.IsNotUncomfortable
- uid: TinyLife.Emotions.EmotionType.Embarrassed
  commentId: F:TinyLife.Emotions.EmotionType.Embarrassed
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsNotEmbarrassed*
  commentId: Overload:TinyLife.Actions.ActionType.IsNotEmbarrassed
  name: IsNotEmbarrassed
  nameWithType: ActionType.IsNotEmbarrassed
  fullName: TinyLife.Actions.ActionType.IsNotEmbarrassed
- uid: TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsEmptyHanded*
  commentId: Overload:TinyLife.Actions.ActionType.IsEmptyHanded
  name: IsEmptyHanded
  nameWithType: ActionType.IsEmptyHanded
  fullName: TinyLife.Actions.ActionType.IsEmptyHanded
- uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsFunctional*
  commentId: Overload:TinyLife.Actions.ActionType.IsFunctional
  name: IsFunctional
  nameWithType: ActionType.IsFunctional
  fullName: TinyLife.Actions.ActionType.IsFunctional
- uid: TinyLife.Actions.ActionType.CanWorkAtDeskObject*
  commentId: Overload:TinyLife.Actions.ActionType.CanWorkAtDeskObject
  name: CanWorkAtDeskObject
  nameWithType: ActionType.CanWorkAtDeskObject
  fullName: TinyLife.Actions.ActionType.CanWorkAtDeskObject
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Expired
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Expired
  isExternal: true
- uid: TinyLife.Actions.ActionType.IsNotExpired*
  commentId: Overload:TinyLife.Actions.ActionType.IsNotExpired
  name: IsNotExpired
  nameWithType: ActionType.IsNotExpired
  fullName: TinyLife.Actions.ActionType.IsNotExpired
- uid: TinyLife.PerSaveOptions.AiImportantActions
  commentId: F:TinyLife.PerSaveOptions.AiImportantActions
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanDoImportantAction*
  commentId: Overload:TinyLife.Actions.ActionType.CanDoImportantAction
  name: CanDoImportantAction
  nameWithType: ActionType.CanDoImportantAction
  fullName: TinyLife.Actions.ActionType.CanDoImportantAction
- uid: TinyLife.Actions.ActionType.AreDating*
  commentId: Overload:TinyLife.Actions.ActionType.AreDating
  name: AreDating
  nameWithType: ActionType.AreDating
  fullName: TinyLife.Actions.ActionType.AreDating
- uid: TinyLife.Actions.ActionType.CanExecuteAll*
  commentId: Overload:TinyLife.Actions.ActionType.CanExecuteAll
  name: CanExecuteAll
  nameWithType: ActionType.CanExecuteAll
  fullName: TinyLife.Actions.ActionType.CanExecuteAll
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate[]
  isExternal: true
  name: ActionType.CanExecuteDelegate[]
  nameWithType: ActionType.CanExecuteDelegate[]
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate[]
  nameWithType.vb: ActionType.CanExecuteDelegate()
  fullName.vb: TinyLife.Actions.ActionType.CanExecuteDelegate()
  name.vb: ActionType.CanExecuteDelegate()
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: ActionType.CanExecuteDelegate
    nameWithType: ActionType.CanExecuteDelegate
    fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: ActionType.CanExecuteDelegate
    nameWithType: ActionType.CanExecuteDelegate
    fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.AgeGroup.Child
  commentId: F:TinyLife.Objects.AgeGroup.Child
  isExternal: true
- uid: TinyLife.PersonalityType.Asexual
  commentId: F:TinyLife.PersonalityType.Asexual
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanBeSexual*
  commentId: Overload:TinyLife.Actions.ActionType.CanBeSexual
  name: CanBeSexual
  nameWithType: ActionType.CanBeSexual
  fullName: TinyLife.Actions.ActionType.CanBeSexual
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  isExternal: true
- uid: TinyLife.Actions.ActionType.PracticeWriting
  commentId: F:TinyLife.Actions.ActionType.PracticeWriting
  isExternal: true
- uid: TinyLife.Actions.ActionType.PracticeProgramming
  commentId: F:TinyLife.Actions.ActionType.PracticeProgramming
  isExternal: true
- uid: TinyLife.PerSaveOptions.AiSkillBuilding
  commentId: F:TinyLife.PerSaveOptions.AiSkillBuilding
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetSkillPriorityMod*
  commentId: Overload:TinyLife.Actions.ActionType.GetSkillPriorityMod
  name: GetSkillPriorityMod
  nameWithType: ActionType.GetSkillPriorityMod
  fullName: TinyLife.Actions.ActionType.GetSkillPriorityMod
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills

### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.UnderlyingAction
  commentId: T:TinyLife.Actions.UnderlyingAction
  id: UnderlyingAction
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.UnderlyingAction.Action
  - TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Actions.UnderlyingAction.InitializeExact(TinyLife.Actions.Action,System.Boolean)
  - TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  - TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  - TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: UnderlyingAction
  nameWithType: UnderlyingAction
  fullName: TinyLife.Actions.UnderlyingAction
  type: Class
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: UnderlyingAction
    path: Actions/UnderlyingAction.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn UnderlyingAction is a class that can instantiate a single <xref href=\"TinyLife.Actions.UnderlyingAction.Action\" data-throw-if-not-resolved=\"false\"></xref> that will be executed as part of the action it is used in.\nNote that, when using this class, <xref href=\"TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> and especially <xref href=\"TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> have to be called in the appropriate places.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class UnderlyingAction
    content.vb: >-
      <DataContract>

      Public Class UnderlyingAction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.UnderlyingAction.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.UnderlyingAction.Action
  commentId: P:TinyLife.Actions.UnderlyingAction.Action
  id: Action
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: UnderlyingAction.Action
  fullName: TinyLife.Actions.UnderlyingAction.Action
  type: Property
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Action
    path: Actions/UnderlyingAction.cs
    startLine: 19
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe underlying action.\nThis should be initialized using <xref href=\"TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Action Action { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Action
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public ReadOnly Property Action As Action
  overload: TinyLife.Actions.UnderlyingAction.Action*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  id: Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: Initialize(ActionType, ActionInfo, Boolean, Boolean)
  nameWithType: UnderlyingAction.Initialize(ActionType, ActionInfo, Boolean, Boolean)
  fullName: TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Initialize
    path: Actions/UnderlyingAction.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInitializes the underlying action of this action\n"
  example: []
  syntax:
    content: public Action Initialize(ActionType type, ActionInfo info, bool automatic = false, bool force = true)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action to initialize
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The info to pass to the action
    - id: automatic
      type: System.Boolean
      description: Whether the action should be considered <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
    - id: force
      type: System.Boolean
      description: Whether the action should be created even if <xref href="TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> returns false
    return:
      type: TinyLife.Actions.Action
    content.vb: Public Function Initialize(type As ActionType, info As ActionInfo, automatic As Boolean = False, force As Boolean = True) As Action
  overload: TinyLife.Actions.UnderlyingAction.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.UnderlyingAction.InitializeExact(TinyLife.Actions.Action,System.Boolean)
  commentId: M:TinyLife.Actions.UnderlyingAction.InitializeExact(TinyLife.Actions.Action,System.Boolean)
  id: InitializeExact(TinyLife.Actions.Action,System.Boolean)
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: InitializeExact(Action, Boolean)
  nameWithType: UnderlyingAction.InitializeExact(Action, Boolean)
  fullName: TinyLife.Actions.UnderlyingAction.InitializeExact(TinyLife.Actions.Action, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: InitializeExact
    path: Actions/UnderlyingAction.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInitializes the underlying action of this action using the given <xref href=\"TinyLife.Actions.UnderlyingAction.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should be tested, <xref href=\"TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> can be used instead.\n"
  example: []
  syntax:
    content: public void InitializeExact(Action action, bool automatic = false)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action to initialize
    - id: automatic
      type: System.Boolean
      description: Whether the action should be considered <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub InitializeExact(action As Action, automatic As Boolean = False)
  overload: TinyLife.Actions.UnderlyingAction.InitializeExact*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, GameSpeed)
  nameWithType: UnderlyingAction.Update(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Update
    path: Actions/UnderlyingAction.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nUpdates the <xref href=\"TinyLife.Actions.UnderlyingAction.Action\" data-throw-if-not-resolved=\"false\"></xref>, if it exists.\nThis action should be called at the end of <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref> or any derived methods.\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, GameSpeed speed)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speed
      type: TinyLife.GameSpeed
      description: The game&apos;s current speed setting
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speed As GameSpeed)
  overload: TinyLife.Actions.UnderlyingAction.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: UnderlyingAction.Validate(Person)
  fullName: TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Validate
    path: Actions/UnderlyingAction.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nValidates this action container and its <xref href=\"TinyLife.Actions.UnderlyingAction.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method should be called in <xref href=\"TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: ''
    content.vb: Public Sub Validate(person As Person)
  overload: TinyLife.Actions.UnderlyingAction.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  id: OnCompleted(TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.UnderlyingAction
  langs:
  - csharp
  - vb
  name: OnCompleted(Action.CompletionType)
  nameWithType: UnderlyingAction.OnCompleted(Action.CompletionType)
  fullName: TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/UnderlyingAction.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OnCompleted
    path: Actions/UnderlyingAction.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCalls this underlying action&apos;s <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThis should be called for any completion type that the action that uses this underlying action experiences, even <xref href=\"TinyLife.Actions.Action.CompletionType.Canceled\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.Action.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the underlying action is null or already completed, this method has no effect.\n"
  example: []
  syntax:
    content: public void OnCompleted(Action.CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.Action.CompletionType
      description: The completion type
    content.vb: Public Sub OnCompleted(type As Action.CompletionType)
  overload: TinyLife.Actions.UnderlyingAction.OnCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Actions.UnderlyingAction.Action
  commentId: P:TinyLife.Actions.UnderlyingAction.Action
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.UnderlyingAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.UnderlyingAction.Validate(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.UnderlyingAction.OnCompleted(TinyLife.Actions.Action.CompletionType)
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.UnderlyingAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<UnderlyingAction>()
  nameWithType: Extensions.JsonCopy<UnderlyingAction>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.UnderlyingAction>()
  nameWithType.vb: Extensions.JsonCopy(Of UnderlyingAction)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.UnderlyingAction)()
  name.vb: JsonCopy(Of UnderlyingAction)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<UnderlyingAction>
    nameWithType: Extensions.JsonCopy<UnderlyingAction>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.UnderlyingAction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of UnderlyingAction)
    nameWithType: Extensions.JsonCopy(Of UnderlyingAction)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.UnderlyingAction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.UnderlyingAction.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.Action*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.Action
  name: Action
  nameWithType: UnderlyingAction.Action
  fullName: TinyLife.Actions.UnderlyingAction.Action
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.Initialize*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.Initialize
  name: Initialize
  nameWithType: UnderlyingAction.Initialize
  fullName: TinyLife.Actions.UnderlyingAction.Initialize
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.UnderlyingAction.InitializeExact*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.InitializeExact
  name: InitializeExact
  nameWithType: UnderlyingAction.InitializeExact
  fullName: TinyLife.Actions.UnderlyingAction.InitializeExact
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Update(GameTime, TimeSpan, GameSpeed)
  nameWithType: Action.Update(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.UnderlyingAction.Update*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.Update
  name: Update
  nameWithType: UnderlyingAction.Update
  fullName: TinyLife.Actions.UnderlyingAction.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.GameSpeed
  commentId: T:TinyLife.GameSpeed
  parent: TinyLife
  name: GameSpeed
  nameWithType: GameSpeed
  fullName: TinyLife.GameSpeed
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.UnderlyingAction.Validate*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.Validate
  name: Validate
  nameWithType: UnderlyingAction.Validate
  fullName: TinyLife.Actions.UnderlyingAction.Validate
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(Action.CompletionType)
  nameWithType: Action.OnCompleted(Action.CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action.CompletionType
    name: Action.CompletionType
    nameWithType: Action.CompletionType
    fullName: TinyLife.Actions.Action.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action.CompletionType
    name: Action.CompletionType
    nameWithType: Action.CompletionType
    fullName: TinyLife.Actions.Action.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CompletionType.Canceled
  commentId: F:TinyLife.Actions.Action.CompletionType.Canceled
  isExternal: true
- uid: TinyLife.Actions.Action.CompletionType.Failed
  commentId: F:TinyLife.Actions.Action.CompletionType.Failed
  isExternal: true
- uid: TinyLife.Actions.UnderlyingAction.OnCompleted*
  commentId: Overload:TinyLife.Actions.UnderlyingAction.OnCompleted
  name: OnCompleted
  nameWithType: UnderlyingAction.OnCompleted
  fullName: TinyLife.Actions.UnderlyingAction.OnCompleted
- uid: TinyLife.Actions.Action.CompletionType
  commentId: T:TinyLife.Actions.Action.CompletionType
  parent: TinyLife.Actions
  name: Action.CompletionType
  nameWithType: Action.CompletionType
  fullName: TinyLife.Actions.Action.CompletionType

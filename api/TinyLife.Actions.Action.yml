### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  id: Action
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  - TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Actions.Action.CompletionType)
  - TinyLife.Actions.Action.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.ElapsedTime
  - TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Actions.ActionType,TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.ForceFail
  - TinyLife.Actions.Action.GetDisplayName
  - TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.GetInProgressTime
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.Action.CompletionType)
  - TinyLife.Actions.Action.GetPlaceDirection(TinyLife.Objects.FurnitureType)
  - TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.Info
  - TinyLife.Actions.Action.Initialize
  - TinyLife.Actions.Action.IsCompleted
  - TinyLife.Actions.Action.IsFullyInProgress
  - TinyLife.Actions.Action.IsUnderlying
  - TinyLife.Actions.Action.Map
  - TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  - TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  - TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule)
  - TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action)
  - TinyLife.Actions.Action.Person
  - TinyLife.Actions.Action.PlayerPromptOpen
  - TinyLife.Actions.Action.PutDownOrGoTo(TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  - TinyLife.Actions.Action.Random
  - TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,TinyLife.GameSpeed,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Action.StartedAutomatically
  - TinyLife.Actions.Action.TryForceFail(TinyLife.Actions.ActionType.CanExecuteResult)
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  - TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Action
    path: Actions/Action.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action is something that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> does.\nAn action is always derived from an underlying <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> that contains various action settings.\nActions can be queued up for a person (<xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>) or currently active (<xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>).\nTo create a more complex action, it is best to extend <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can find a multitude of action-related events in <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, like <xref href=\"TinyLife.Objects.Person.OnActionsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class Action : GenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public MustInherit Class Action
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  derivedClasses:
  - TinyLife.Actions.DieAction
  - TinyLife.Actions.MultiAction
  - TinyLife.Actions.PathfindAction
  - TinyLife.Actions.SocialAction
  - TinyLife.Actions.TellPeopleToLeaveRoomAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  id: Random
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Random
    path: Actions/Action.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA <xref href=\"TinyLife.Actions.Action.Random\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used by actions.\nThis value has the default seed.\n"
  example: []
  syntax:
    content: public static readonly Random Random
    return:
      type: System.Random
    content.vb: Public Shared ReadOnly Random As Random
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  id: Type
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Type
    path: Actions/Action.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> that this action instance derives from\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionType Type
    return:
      type: TinyLife.Actions.ActionType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As ActionType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.Info
  commentId: F:TinyLife.Actions.Action.Info
  id: Info
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: Action.Info
  fullName: TinyLife.Actions.Action.Info
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Info
    path: Actions/Action.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for this action that contains the clicked (or otherwise targeted) objects and more\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionInfo Info
    return:
      type: TinyLife.Actions.ActionInfo
    content.vb: >-
      <DataMember>

      Public ReadOnly Info As ActionInfo
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  id: StartedAutomatically
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: StartedAutomatically
    path: Actions/Action.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nIf this value is true, this action was started using <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> or through another action rather than by the player\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool StartedAutomatically { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public ReadOnly Property StartedAutomatically As Boolean
  overload: TinyLife.Actions.Action.StartedAutomatically*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.IsUnderlying
  commentId: P:TinyLife.Actions.Action.IsUnderlying
  id: IsUnderlying
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsUnderlying
  nameWithType: Action.IsUnderlying
  fullName: TinyLife.Actions.Action.IsUnderlying
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsUnderlying
    path: Actions/Action.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nStores whether this action is an underlying action of either a <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"TinyLife.Actions.UnderlyingAction\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsUnderlying { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUnderlying As Boolean
  overload: TinyLife.Actions.Action.IsUnderlying*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  id: Map
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Map
    path: Actions/Action.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Action.Map\" data-throw-if-not-resolved=\"false\"></xref> that this action occurs on\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.Actions.Action.Map*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  id: Person
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Person
    path: Actions/Action.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> that this action is being executed by\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Actions.Action.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  id: ElapsedTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ElapsedTime
    path: Actions/Action.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of in-game time that has elapsed since this action has started\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan ElapsedTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property ElapsedTime As TimeSpan
  overload: TinyLife.Actions.Action.ElapsedTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  id: PlayerPromptOpen
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PlayerPromptOpen
    path: Actions/Action.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA property that stores whether a player prompt is currently open. A prompt can be opened using <xref href=\"TinyLife.Actions.Action.OpenPlayerPrompt(System.String%2cSystem.Predicate%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Action%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Boolean%2cMLEM.Ui.Elements.Element%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis property can be used to ensure that an action is not paused or canceled while a player prompt is open, as, based on the implementation of the action, there might be certain update frames that still occur while the prompt is open.\n"
  example: []
  syntax:
    content: public bool PlayerPromptOpen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property PlayerPromptOpen As Boolean
  overload: TinyLife.Actions.Action.PlayerPromptOpen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Action.ForceFail
  commentId: F:TinyLife.Actions.Action.ForceFail
  id: ForceFail
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ForceFail
  nameWithType: Action.ForceFail
  fullName: TinyLife.Actions.Action.ForceFail
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ForceFail
    path: Actions/Action.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis value can be set to true to force <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref> to return <xref href=\"TinyLife.Actions.Action.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is useful if there is an erroring calculation in your <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref> code etc.\n"
  example: []
  syntax:
    content: protected bool ForceFail
    return:
      type: System.Boolean
    content.vb: Protected ForceFail As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Action(ActionType, ActionInfo)
  nameWithType: Action.Action(ActionType, ActionInfo)
  fullName: TinyLife.Actions.Action.Action(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Actions/Action.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action from the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Action(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type to create this action from
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action
    content.vb: Public Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.Action.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Action.Initialize
  commentId: M:TinyLife.Actions.Action.Initialize
  id: Initialize
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Action.Initialize()
  fullName: TinyLife.Actions.Action.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Initialize
    path: Actions/Action.cs
    startLine: 97
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when the action is first started by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that it is not called when the action gets added to the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>, but when it is moved to <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Initialize()
    content.vb: Public MustOverride Sub Initialize
  overload: TinyLife.Actions.Action.Initialize*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, GameSpeed)
  nameWithType: Action.Update(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Update
    path: Actions/Action.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame if this action is currently active.\nBy default, only the <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is modified in this method and <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, GameSpeed speed)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speed
      type: TinyLife.GameSpeed
      description: The game&apos;s current speed setting
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speed As GameSpeed)
  overload: TinyLife.Actions.Action.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsCompleted
    path: Actions/Action.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> if this action is currently active to check if it should be stopped.\nIf this returns a result other than <xref href=\"TinyLife.Actions.Action.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> will be called and the action is stopped.\nBy default, only <xref href=\"TinyLife.Actions.Action.ForceFail\" data-throw-if-not-resolved=\"false\"></xref> modifies the completion type, otherwise <xref href=\"TinyLife.Actions.Action.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual Action.CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.Action.CompletionType
      description: The current completion type of this action
    content.vb: Public Overridable Function IsCompleted As Action.CompletionType
  overload: TinyLife.Actions.Action.IsCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  id: OnCompleted(TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnCompleted(Action.CompletionType)
  nameWithType: Action.OnCompleted(Action.CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OnCompleted
    path: Actions/Action.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when this action <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, or if it is canceled from an outside source.\nNote that, if this method is called as a result of <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.Action.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> passed will be the same.\n"
  example: []
  syntax:
    content: public virtual void OnCompleted(Action.CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.Action.CompletionType
      description: The type that this action completed with
    content.vb: Public Overridable Sub OnCompleted(type As Action.CompletionType)
  overload: TinyLife.Actions.Action.OnCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanMultitask
    path: Actions/Action.cs
    startLine: 146
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn true on this method if this action can be multi-tasked along with the passed <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nTo actually check this property, <xref href=\"TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action%2cTinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref> should be used as it compares both objects.\nA multi-tasking is an action that is currently active along with another action.\nBy default, multi-tasking is disallowed for any action.\n"
  example: []
  syntax:
    content: public virtual bool CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: System.Boolean
      description: Whether this action can be multi-tasked
    content.vb: Public Overridable Function CanMultitask(other As Action) As Boolean
  overload: TinyLife.Actions.Action.CanMultitask*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Validate
    path: Actions/Action.cs
    startLine: 157
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nValidates this action&apos;s data.\nThis is called when a map is loaded from disk.\nWhen returning false on this method, the action is removed from the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action belongs to
    return:
      type: System.Boolean
      description: Whether or not the action is still valid (or if it has invalid data)
    content.vb: Public Overridable Function Validate(person As Person) As Boolean
  overload: TinyLife.Actions.Action.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  id: CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanCancel(Action)
  nameWithType: Action.CanCancel(Action)
  fullName: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanCancel
    path: Actions/Action.cs
    startLine: 169
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether or not this action can be canceled by the given outside source.\nNote that the outside source can be null, and if it is, it means that the player canceled the action manually.\nBy default, actions can only be canceled if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">cancelSource</code> is null.\n"
  example: []
  syntax:
    content: public virtual bool CanCancel(Action cancelSource)
    parameters:
    - id: cancelSource
      type: TinyLife.Actions.Action
      description: The source of the cancelation, or null if the player canceled it
    return:
      type: System.Boolean
      description: true if the action can be canceled
    content.vb: Public Overridable Function CanCancel(cancelSource As Action) As Boolean
  overload: TinyLife.Actions.Action.CanCancel*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.Action.CompletionType)
  id: GetNextAction(TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetNextAction(Action.CompletionType)
  nameWithType: Action.GetNextAction(Action.CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.Action.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetNextAction
    path: Actions/Action.cs
    startLine: 180
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns an action that should be queued up immediately after this action completes.\nThe queued up action is immediately started in the slot that this action occupied.\nCan be null, and is null by default.\n"
  example: []
  syntax:
    content: public virtual Action GetNextAction(Action.CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.Action.CompletionType
      description: The type that this action completed with
    return:
      type: TinyLife.Actions.Action
      description: The follow-up action
    content.vb: Public Overridable Function GetNextAction(completion As Action.CompletionType) As Action
  overload: TinyLife.Actions.Action.GetNextAction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  id: GetIconObject
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetIconObject
    path: Actions/Action.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the map object that is displayed in the action queue in the top left of the screen.\nNote that this value is ignored if this action&apos;s type has a <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Texture\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, the <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual MapObject GetIconObject()
    return:
      type: TinyLife.Objects.MapObject
      description: The icon object
    content.vb: Public Overridable Function GetIconObject As MapObject
  overload: TinyLife.Actions.Action.GetIconObject*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  id: CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CausesExtremelyFastSpeed
    path: Actions/Action.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns true if this action, while it is currently active, should cause the <xref href=\"TinyLife.GameSpeed.ExtremelyFast\" data-throw-if-not-resolved=\"false\"></xref> speed to be available.\nBy default, this method returns false.\n"
  example: []
  syntax:
    content: public virtual bool CausesExtremelyFastSpeed()
    return:
      type: System.Boolean
      description: Whether the extremely fast speed should be available
    content.vb: Public Overridable Function CausesExtremelyFastSpeed As Boolean
  overload: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetDisplayName
    path: Actions/Action.cs
    startLine: 208
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a localized string that explains this action in short.\nBy default, this method returns <xref href=\"TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string GetDisplayName()
    return:
      type: System.String
      description: This action&apos;s display name
    content.vb: Public Overridable Function GetDisplayName As String
  overload: TinyLife.Actions.Action.GetDisplayName*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.TryForceFail(TinyLife.Actions.ActionType.CanExecuteResult)
  commentId: M:TinyLife.Actions.Action.TryForceFail(TinyLife.Actions.ActionType.CanExecuteResult)
  id: TryForceFail(TinyLife.Actions.ActionType.CanExecuteResult)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: TryForceFail(ActionType.CanExecuteResult)
  nameWithType: Action.TryForceFail(ActionType.CanExecuteResult)
  fullName: TinyLife.Actions.Action.TryForceFail(TinyLife.Actions.ActionType.CanExecuteResult)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TryForceFail
    path: Actions/Action.cs
    startLine: 219
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis is an external version of <xref href=\"TinyLife.Actions.Action.ForceFail\" data-throw-if-not-resolved=\"false\"></xref> which can be called from outside sources, like a <xref href=\"TinyLife.Objects.BreakableFurniture\" data-throw-if-not-resolved=\"false\"></xref> object.\nA reason is provided that can be used to decide whether the external object can cause this action to fail.\nBy default, this action sets <xref href=\"TinyLife.Actions.Action.ForceFail\" data-throw-if-not-resolved=\"false\"></xref> to true and returns true always.\n"
  example: []
  syntax:
    content: public virtual bool TryForceFail(ActionType.CanExecuteResult reason)
    parameters:
    - id: reason
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: The reason for this action to fail
    return:
      type: System.Boolean
      description: Whether this action was successfully forced to fail (if returning true, <xref href="TinyLife.Actions.Action.ForceFail" data-throw-if-not-resolved="false"></xref> should also be set to true)
    content.vb: Public Overridable Function TryForceFail(reason As ActionType.CanExecuteResult) As Boolean
  overload: TinyLife.Actions.Action.TryForceFail*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.IsFullyInProgress
  commentId: M:TinyLife.Actions.Action.IsFullyInProgress
  id: IsFullyInProgress
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsFullyInProgress()
  nameWithType: Action.IsFullyInProgress()
  fullName: TinyLife.Actions.Action.IsFullyInProgress()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: IsFullyInProgress
    path: Actions/Action.cs
    startLine: 230
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether this action is currently &quot;properly&quot; in progress.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, this method returns true if <xref href=\"TinyLife.Actions.Action.GetInProgressTime\" data-throw-if-not-resolved=\"false\"></xref> is greater than <xref href=\"System.TimeSpan.Zero\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool IsFullyInProgress()
    return:
      type: System.Boolean
      description: Whether this action is fully in progress
    content.vb: Public Overridable Function IsFullyInProgress As Boolean
  overload: TinyLife.Actions.Action.IsFullyInProgress*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.GetInProgressTime
  commentId: M:TinyLife.Actions.Action.GetInProgressTime
  id: GetInProgressTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetInProgressTime()
  nameWithType: Action.GetInProgressTime()
  fullName: TinyLife.Actions.Action.GetInProgressTime()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetInProgressTime
    path: Actions/Action.cs
    startLine: 240
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the amount of time that this action has &quot;properly&quot; been in progress for.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual TimeSpan GetInProgressTime()
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overridable Function GetInProgressTime As TimeSpan
  overload: TinyLife.Actions.Action.GetInProgressTime*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  commentId: M:TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  id: ApplyVariety(TinyLife.Actions.ActionVariety)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ApplyVariety(ActionVariety)
  nameWithType: Action.ApplyVariety(ActionVariety)
  fullName: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ApplyVariety
    path: Actions/Action.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nApplies the <xref href=\"TinyLife.Actions.ActionVariety\" data-throw-if-not-resolved=\"false\"></xref> given ot this action.\nBased on the action and the variety, a number of things can be done.\nNote that only varieties supplied in <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Varieties\" data-throw-if-not-resolved=\"false\"></xref> will be passed into this method.\n"
  example: []
  syntax:
    content: public virtual void ApplyVariety(ActionVariety variety)
    parameters:
    - id: variety
      type: TinyLife.Actions.ActionVariety
      description: The variety to apply
    content.vb: Public Overridable Sub ApplyVariety(variety As ActionVariety)
  overload: TinyLife.Actions.Action.ApplyVariety*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  id: CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanEnqueueConversation
    path: Actions/Action.cs
    startLine: 261
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns true if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">person</code> can (automatically) enqueue a social action with the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> that is executing this action.\nNote that enqueueing a social action manually is still possible even if this method returns false.\nBy default, only <xref href=\"TinyLife.Actions.SleepAction\" data-throw-if-not-resolved=\"false\"></xref> returns false on this method.\n"
  example: []
  syntax:
    content: protected virtual bool CanEnqueueConversation(Person person, ActionType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to converse with us
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action that should be enqueued
    return:
      type: System.Boolean
      description: Whether or not enqueueing a social action is possible
    content.vb: Protected Overridable Function CanEnqueueConversation(person As Person, type As ActionType) As Boolean
  overload: TinyLife.Actions.Action.CanEnqueueConversation*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Actions.Action.CompletionType)
  id: CompleteIfNeedFull(TinyLife.NeedType,TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfNeedFull(NeedType, Action.CompletionType)
  nameWithType: Action.CompleteIfNeedFull(NeedType, Action.CompletionType)
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType, TinyLife.Actions.Action.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CompleteIfNeedFull
    path: Actions/Action.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns <xref href=\"TinyLife.Actions.Action.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref>&apos;s value is at <xref href=\"TinyLife.Need.Max\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Action.CompletionType CompleteIfNeedFull(NeedType type, Action.CompletionType els = Action.CompletionType.Active)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The need that should be completed
    - id: els
      type: TinyLife.Actions.Action.CompletionType
      description: The action type that is returned if the need is not completed. <xref href="TinyLife.Actions.Action.CompletionType.Active" data-throw-if-not-resolved="false"></xref> by default.
    return:
      type: TinyLife.Actions.Action.CompletionType
      description: The appropriate completion type
    content.vb: Protected Function CompleteIfNeedFull(type As NeedType, els As Action.CompletionType = Action.CompletionType.Active) As Action.CompletionType
  overload: TinyLife.Actions.Action.CompleteIfNeedFull*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.PutDownOrGoTo(TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  commentId: M:TinyLife.Actions.Action.PutDownOrGoTo(TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  id: PutDownOrGoTo(TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PutDownOrGoTo(ObjectCategory, FurnitureType[])
  nameWithType: Action.PutDownOrGoTo(ObjectCategory, FurnitureType[])
  fullName: TinyLife.Actions.Action.PutDownOrGoTo(TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType[])
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: PutDownOrGoTo
    path: Actions/Action.cs
    startLine: 282
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method used by <xref href=\"TinyLife.Actions.PrepareFoodAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.CookFoodAction\" data-throw-if-not-resolved=\"false\"></xref> that causes the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to walk to a valid surface with the action item on it, plcae the action item down on a valid surface or move the action object from its current location to a valid surface.\nThe validity of the surface is determined by <code data-dev-comment-type=\"paramref\" class=\"paramref\">parentToPutOn</code>, and the item to find is any of <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\n"
  example: []
  syntax:
    content: protected IEnumerable<Action> PutDownOrGoTo(ObjectCategory parentToPutOn, params FurnitureType[] items)
    parameters:
    - id: parentToPutOn
      type: TinyLife.Objects.ObjectCategory
      description: An object category that the object&apos;s surface should have
    - id: items
      type: TinyLife.Objects.FurnitureType[]
      description: The items that should be found on the surface
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: A set of actions that cause the person to set the action object up correctly
    content.vb: Protected Function PutDownOrGoTo(parentToPutOn As ObjectCategory, ParamArray items As FurnitureType()) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.PutDownOrGoTo*
  nameWithType.vb: Action.PutDownOrGoTo(ObjectCategory, FurnitureType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Actions.Action.PutDownOrGoTo(TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType())
  name.vb: PutDownOrGoTo(ObjectCategory, FurnitureType())
- uid: TinyLife.Actions.Action.GetPlaceDirection(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.Actions.Action.GetPlaceDirection(TinyLife.Objects.FurnitureType)
  id: GetPlaceDirection(TinyLife.Objects.FurnitureType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetPlaceDirection(FurnitureType)
  nameWithType: Action.GetPlaceDirection(FurnitureType)
  fullName: TinyLife.Actions.Action.GetPlaceDirection(TinyLife.Objects.FurnitureType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetPlaceDirection
    path: Actions/Action.cs
    startLine: 309
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that represents the facing that the given <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> should be placed with.\nThe direction is determined by the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s current rotation.\n"
  example: []
  syntax:
    content: protected Direction2 GetPlaceDirection(FurnitureType item = null)
    parameters:
    - id: item
      type: TinyLife.Objects.FurnitureType
      description: The item to place
    return:
      type: MLEM.Misc.Direction2
      description: The facing the item should be placed with
    content.vb: Protected Function GetPlaceDirection(item As FurnitureType = Nothing) As Direction2
  overload: TinyLife.Actions.Action.GetPlaceDirection*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  id: Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Sit(Furniture, GameSpeed, ActionSpot)
  nameWithType: Action.Sit(Furniture, GameSpeed, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, TinyLife.GameSpeed, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Sit
    path: Actions/Action.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that causes the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to sit on the given object.\nThis method causes the action spot to be occupied and the person&apos;s <xref href=\"TinyLife.Objects.Person.CurrentPose\" data-throw-if-not-resolved=\"false\"></xref> to be changed to <xref href=\"TinyLife.Objects.Person.Pose.Sitting\" data-throw-if-not-resolved=\"false\"></xref>.\nAdditionally, the <xref href=\"TinyLife.NeedType.Energy\" data-throw-if-not-resolved=\"false\"></xref> need is restored a little bit.\nNote that this method has to be called every <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref> frame for the person to stay sat down.\n"
  example: []
  syntax:
    content: protected bool Sit(Furniture chair, GameSpeed speed, ActionSpot spot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to sit on
    - id: speed
      type: TinyLife.GameSpeed
      description: The current game speed
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to sit on, or null to select one automatically
    return:
      type: System.Boolean
      description: Whether or not the chair can be sat on
    content.vb: Protected Function Sit(chair As Furniture, speed As GameSpeed, spot As ActionSpot = Nothing) As Boolean
  overload: TinyLife.Actions.Action.Sit*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  id: CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  nameWithType: Action.CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName: TinyLife.Actions.Action.CompleteInTime(System.TimeSpan, System.Boolean, TinyLife.Skills.SkillType, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CompleteInTime
    path: Actions/Action.cs
    startLine: 345
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns <xref href=\"TinyLife.Actions.Action.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">time</code> has passed.\nThis method makes use of <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(TinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> to return true faster or slower based on the person&apos;s current mood and skill levels.\n"
  example: []
  syntax:
    content: protected Action.CompletionType CompleteInTime(TimeSpan time, bool efficiencyMatters = false, SkillType skill = null, float levelModifier = 0.1F, bool autoOnly = false)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The (total!) amount of time after which this action should be completed
    - id: efficiencyMatters
      type: System.Boolean
      description: Whether the person&apos;s efficiency modifier (<xref href="TinyLife.Objects.Person.GetEfficiencyModifier(TinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>) should be taken into account for the total time required
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the completion time
    - id: levelModifier
      type: System.Single
      description: The amount that each <code data-dev-comment-type="paramref" class="paramref">skill</code> level should influence the returned time by. Defaults to 0.1.
    - id: autoOnly
      type: System.Boolean
      description: Whether the action should only be completed in the given amount of time if it has been <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>. If both this value and <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref> are true, this method always returns <xref href="TinyLife.Actions.Action.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.Action.CompletionType
      description: <xref href="TinyLife.Actions.Action.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the time has passed, <xref href="TinyLife.Actions.Action.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Protected Function CompleteInTime(time As TimeSpan, efficiencyMatters As Boolean = False, skill As SkillType = Nothing, levelModifier As Single = 0.1F, autoOnly As Boolean = False) As Action.CompletionType
  overload: TinyLife.Actions.Action.CompleteInTime*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  id: OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Element[])
  nameWithType: Action.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Element[])
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, MLEM.Ui.Elements.Element[])
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OpenPlayerPrompt
    path: Actions/Action.cs
    startLine: 364
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt for the player with the given elements, also pausing the game.\nThis behavior is used for things like the <xref href=\"TinyLife.Actions.ActionType.QuitJob\" data-throw-if-not-resolved=\"false\"></xref> action, where a confirmation panel pops up.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Group OpenPlayerPrompt(string title, Predicate<Panel> canFinish, Action<Panel> onFinished, bool canExit, params Element[] children)
    parameters:
    - id: title
      type: System.String
      description: The title that should be displayed in the box, has to be localized if required
    - id: canFinish
      type: System.Predicate{MLEM.Ui.Elements.Panel}
      description: A function that determines whether the Okay button can be pressed. If the function is null, no button is displayed.
    - id: onFinished
      type: System.Action{MLEM.Ui.Elements.Panel}
      description: A function that is called once the Okay button is pressed. Can be null.
    - id: canExit
      type: System.Boolean
      description: Whether the user can exit the window without making a decision by clicking the background
    - id: children
      type: MLEM.Ui.Elements.Element[]
      description: The elements that should be displayed in this prompt, along with the title and possibly the Okay button if <code data-dev-comment-type="paramref" class="paramref">canFinish</code> is used
    return:
      type: MLEM.Ui.Elements.Group
    content.vb: Protected Function OpenPlayerPrompt(title As String, canFinish As Predicate(Of Panel), onFinished As Action(Of Panel), canExit As Boolean, ParamArray children As Element()) As Group
  overload: TinyLife.Actions.Action.OpenPlayerPrompt*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this action was <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Element())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, MLEM.Ui.Elements.Element())
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Element())
- uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action)
  commentId: M:TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action)
  id: OpenYesNoPrompt(System.String,System.Action,System.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenYesNoPrompt(String, Action, Action)
  nameWithType: Action.OpenYesNoPrompt(String, Action, Action)
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt(System.String, System.Action, System.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OpenYesNoPrompt
    path: Actions/Action.cs
    startLine: 400
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt for the player that contains a yes and a no button along with some text.\nThis prompt can be used to ensure that a player selected the right option in an important decision.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected void OpenYesNoPrompt(string title, Action onYes, Action onNo = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onYes
      type: System.Action
      description: The action that should be executed when the yes button is pressed
    - id: onNo
      type: System.Action
      description: The action that should be executed when the no button is pressed
    content.vb: Protected Sub OpenYesNoPrompt(title As String, onYes As Action, onNo As Action = Nothing)
  overload: TinyLife.Actions.Action.OpenYesNoPrompt*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule)
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule)
  id: OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule)
  nameWithType: Action.OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(System.String, System.Action<System.String>, System.Predicate<System.String>, MLEM.Ui.Elements.TextField.Rule)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: OpenTextPrompt
    path: Actions/Action.cs
    startLine: 426
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt with a text box that allows the player to input a string.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected void OpenTextPrompt(string title, Action<string> onFinished, Predicate<string> isNameValid = null, TextField.Rule rule = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onFinished
      type: System.Action{System.String}
      description: An action that is executed when the okay button is pressed, which contains the string that was input into the text box
    - id: isNameValid
      type: System.Predicate{System.String}
      description: A function that determines whether the name is valid. If this is null, all text inputs (except an empty string) will be valid.
    - id: rule
      type: MLEM.Ui.Elements.TextField.Rule
      description: A rule to use for the <xref href="MLEM.Ui.Elements.TextField" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Sub OpenTextPrompt(title As String, onFinished As Action(Of String), isNameValid As Predicate(Of String) = Nothing, rule As TextField.Rule = Nothing)
  overload: TinyLife.Actions.Action.OpenTextPrompt*
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(System.String, System.Action(Of System.String), System.Predicate(Of System.String), MLEM.Ui.Elements.TextField.Rule)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule)
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,TinyLife.GameSpeed,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,TinyLife.GameSpeed,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  id: SpeakAlone(Microsoft.Xna.Framework.GameTime,TinyLife.GameSpeed,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: SpeakAlone(GameTime, GameSpeed, EmoteCategory, SpeakStyle, Int32)
  nameWithType: Action.SpeakAlone(GameTime, GameSpeed, EmoteCategory, SpeakStyle, Int32)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, TinyLife.GameSpeed, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SpeakAlone
    path: Actions/Action.cs
    startLine: 444
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nDisplays emotes for this action&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> with the given settings as if they were talking to themselves out loud.\nThis is used by actions like <xref href=\"TinyLife.Actions.ActionType.PracticeJokes\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.PracticeSpeech\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected bool SpeakAlone(GameTime time, GameSpeed speed, EmoteCategory emoteCategories, SpeakStyle speakStyles, int totalAmount = 2147483647)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time
    - id: speed
      type: TinyLife.GameSpeed
      description: The game&apos;s current speed
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: The categories to pick emotes from, can be a combined flag
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes to display, defaults to an infinite amount (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>)
    return:
      type: System.Boolean
      description: Whether all emotes were succesfully displayed. This method only returns true if <code data-dev-comment-type="paramref" class="paramref">totalAmount</code> is less than the default value
    content.vb: Protected Function SpeakAlone(time As GameTime, speed As GameSpeed, emoteCategories As EmoteCategory, speakStyles As SpeakStyle, totalAmount As Integer = 2147483647) As Boolean
  overload: TinyLife.Actions.Action.SpeakAlone*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  id: GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetFreeChair(Person, Furniture)
  nameWithType: Action.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetFreeChair
    path: Actions/Action.cs
    startLine: 481
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.Chair\" data-throw-if-not-resolved=\"false\"></xref> category that is closest to the given object which is on a desk or table.\nThe furniture returned is the one that the person should <xref href=\"TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture%2cTinyLife.GameSpeed%2cTinyLife.Objects.ActionSpot)\" data-throw-if-not-resolved=\"false\"></xref> on when interacting with the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>.\nThis method will return the <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>&apos;s parent itself if it is a picnic-style table that has benches directly attached to it.\n"
  example: []
  syntax:
    content: public static (Furniture Chair, ActionSpot Spot, Direction2 Direction) GetFreeChair(Person person, Furniture deskObject)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the free chair for
    - id: deskObject
      type: TinyLife.Objects.Furniture
      description: The object that is sat on a desk
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
      description: The corresponding chair, <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> and the action spot&apos;s rotation, or default if there is none
    content.vb: Public Shared Function GetFreeChair(person As Person, deskObject As Furniture) As(Chair As Furniture, Spot As ActionSpot, Direction As Direction2)(Of Furniture , ActionSpot, Direction2)
  overload: TinyLife.Actions.Action.GetFreeChair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Actions.ActionType,TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Actions.ActionType,TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreePeople(TinyLife.Actions.ActionType,TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreePeople(ActionType, Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreePeople(ActionType, Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Actions.ActionType, TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FindAllFreePeople
    path: Actions/Action.cs
    startLine: 515
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Person> FindAllFreePeople(ActionType type, Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action we want to start
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of valid interaction partners
    content.vb: Public Shared Function FindAllFreePeople(type As ActionType, person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Person)
  overload: TinyLife.Actions.Action.FindAllFreePeople*
  nameWithType.vb: Action.FindAllFreePeople(ActionType, Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Actions.ActionType, TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreePeople(ActionType, Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  id: FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FindAllFreeFurniture
    path: Actions/Action.cs
    startLine: 540
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Furniture> FindAllFreeFurniture(Person person, ObjectCategory categories, FurnitureType objectSpotType = null, bool needsFreeActionSpot = true, Vector2? position = null, float? radius = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether or not the furniture returned needs a non-occupied <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of valid furniture
    content.vb: Public Shared Function FindAllFreeFurniture(person As Person, categories As ObjectCategory, objectSpotType As FurnitureType = Nothing, needsFreeActionSpot As Boolean = True, position As Vector2? = Nothing, radius As Single? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As IEnumerable(Of Furniture)
  overload: TinyLife.Actions.Action.FindAllFreeFurniture*
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FindAllFreeWalls
    path: Actions/Action.cs
    startLine: 558
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Wall> FindAllFreeWalls(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the walls should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for walls in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
      description: A set of valid walls
    content.vb: Public Shared Function FindAllFreeWalls(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Wall)
  overload: TinyLife.Actions.Action.FindAllFreeWalls*
  nameWithType.vb: Action.FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FindAllFreeGround
    path: Actions/Action.cs
    startLine: 573
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all positions on the ground that are currently valid for interaction\n"
  example: []
  syntax:
    content: public static IEnumerable<Point> FindAllFreeGround(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the ground should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for ground positions in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of valid locations
    content.vb: Public Shared Function FindAllFreeGround(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Point)
  overload: TinyLife.Actions.Action.FindAllFreeGround*
  nameWithType.vb: Action.FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  id: FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: FindFreeFurniture
    path: Actions/Action.cs
    startLine: 591
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find the best <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance to interact with based on the given data.\nNote that this method always returns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> related to the first result from <xref href=\"TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Boolean%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionInfo FindFreeFurniture(Person person, ObjectCategory categories, FurnitureType objectSpotType = null, Vector2? position = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: TinyLife.Actions.ActionInfo
      description: An action info for the best furniture, or null if there is none
    content.vb: Public Shared Function FindFreeFurniture(person As Person, categories As ObjectCategory, objectSpotType As FurnitureType = Nothing, position As Vector2? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As ActionInfo
  overload: TinyLife.Actions.Action.FindFreeFurniture*
  nameWithType.vb: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanMultitask
    path: Actions/Action.cs
    startLine: 603
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA utility method that can be used whether the two <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> instances can currently be invoked together.\nInternally, this checks if both actions return true on <xref href=\"TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool CanMultitask(Action a1, Action a2)
    parameters:
    - id: a1
      type: TinyLife.Actions.Action
      description: The first action
    - id: a2
      type: TinyLife.Actions.Action
      description: The second action
    return:
      type: System.Boolean
      description: Whether the two actions can be multi-tasked
    content.vb: Public Shared Function CanMultitask(a1 As Action, a2 As Action) As Boolean
  overload: TinyLife.Actions.Action.CanMultitask*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  id: GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: Action.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: GetTableSpot
    path: Actions/Action.cs
    startLine: 614
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns the <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on the table or desk that the given chair is connected to.\nThis is the object spot that should be used for interaction if a person sits on the given chair.\n"
  example: []
  syntax:
    content: public static (Furniture Table, ObjectSpot Spot) GetTableSpot(Furniture chair, ActionSpot actionSpot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to get the table spot for
    - id: actionSpot
      type: TinyLife.Objects.ActionSpot
      description: The action spot on the <code data-dev-comment-type="paramref" class="paramref">chair</code> to get the table spot for
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
      description: The table spot, or null if there is none
    content.vb: Public Shared Function GetTableSpot(chair As Furniture, actionSpot As ActionSpot = Nothing) As(Table As Furniture, Spot As ObjectSpot)(Of Furniture , ObjectSpot)
  overload: TinyLife.Actions.Action.GetTableSpot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentActions
  commentId: F:TinyLife.Objects.Person.CurrentActions
  isExternal: true
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Objects.Person.OnActionsCompleted
  commentId: E:TinyLife.Objects.Person.OnActionsCompleted
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Action>()
  nameWithType: Extensions.JsonCopy<Action>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Action>()
  nameWithType.vb: Extensions.JsonCopy(Of Action)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Action)()
  name.vb: JsonCopy(Of Action)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Action>
    nameWithType: Extensions.JsonCopy<Action>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Action>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Action)
    nameWithType: Extensions.JsonCopy(Of Action)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Action)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  parent: TinyLife.Actions.Action
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.Action.StartedAutomatically*
  commentId: Overload:TinyLife.Actions.Action.StartedAutomatically
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.UnderlyingAction
  commentId: T:TinyLife.Actions.UnderlyingAction
  name: UnderlyingAction
  nameWithType: UnderlyingAction
  fullName: TinyLife.Actions.UnderlyingAction
- uid: TinyLife.Actions.Action.IsUnderlying*
  commentId: Overload:TinyLife.Actions.Action.IsUnderlying
  name: IsUnderlying
  nameWithType: Action.IsUnderlying
  fullName: TinyLife.Actions.Action.IsUnderlying
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  parent: TinyLife.Actions.Action
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.Actions.Action.Map*
  commentId: Overload:TinyLife.Actions.Action.Map
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  parent: TinyLife.Actions.Action
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.Person*
  commentId: Overload:TinyLife.Actions.Action.Person
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.ElapsedTime*
  commentId: Overload:TinyLife.Actions.Action.ElapsedTime
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
  parent: TinyLife.Actions.Action
  isExternal: true
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Element[])
  nameWithType: Action.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Element[])
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, MLEM.Ui.Elements.Element[])
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Element())
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, MLEM.Ui.Elements.Element())
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Element())
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
    name: OpenPlayerPrompt
    nameWithType: Action.OpenPlayerPrompt
    fullName: TinyLife.Actions.Action.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,MLEM.Ui.Elements.Element[])
    name: OpenPlayerPrompt
    nameWithType: Action.OpenPlayerPrompt
    fullName: TinyLife.Actions.Action.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.PlayerPromptOpen*
  commentId: Overload:TinyLife.Actions.Action.PlayerPromptOpen
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  parent: TinyLife.Actions.Action
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
    nameWithType: Action.IsCompleted
    fullName: TinyLife.Actions.Action.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
    nameWithType: Action.IsCompleted
    fullName: TinyLife.Actions.Action.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CompletionType.Failed
  commentId: F:TinyLife.Actions.Action.CompletionType.Failed
  isExternal: true
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Update(GameTime, TimeSpan, GameSpeed)
  nameWithType: Action.Update(GameTime, TimeSpan, GameSpeed)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.#ctor*
  commentId: Overload:TinyLife.Actions.Action.#ctor
  name: Action
  nameWithType: Action.Action
  fullName: TinyLife.Actions.Action.Action
- uid: TinyLife.Actions.Action.Initialize*
  commentId: Overload:TinyLife.Actions.Action.Initialize
  name: Initialize
  nameWithType: Action.Initialize
  fullName: TinyLife.Actions.Action.Initialize
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  parent: TinyLife.Actions.Action
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.Update*
  commentId: Overload:TinyLife.Actions.Action.Update
  name: Update
  nameWithType: Action.Update
  fullName: TinyLife.Actions.Action.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: TinyLife.GameSpeed
  commentId: T:TinyLife.GameSpeed
  parent: TinyLife
  name: GameSpeed
  nameWithType: GameSpeed
  fullName: TinyLife.GameSpeed
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Actions.Action.CompletionType.Completed
  commentId: F:TinyLife.Actions.Action.CompletionType.Completed
  isExternal: true
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(Action.CompletionType)
  nameWithType: Action.OnCompleted(Action.CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action.CompletionType
    name: Action.CompletionType
    nameWithType: Action.CompletionType
    fullName: TinyLife.Actions.Action.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.Action.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action.CompletionType
    name: Action.CompletionType
    nameWithType: Action.CompletionType
    fullName: TinyLife.Actions.Action.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.ForceFail
  commentId: F:TinyLife.Actions.Action.ForceFail
  parent: TinyLife.Actions.Action
  name: ForceFail
  nameWithType: Action.ForceFail
  fullName: TinyLife.Actions.Action.ForceFail
- uid: TinyLife.Actions.Action.CompletionType.Active
  commentId: F:TinyLife.Actions.Action.CompletionType.Active
  isExternal: true
- uid: TinyLife.Actions.Action.IsCompleted*
  commentId: Overload:TinyLife.Actions.Action.IsCompleted
  name: IsCompleted
  nameWithType: Action.IsCompleted
  fullName: TinyLife.Actions.Action.IsCompleted
- uid: TinyLife.Actions.Action.CompletionType
  commentId: T:TinyLife.Actions.Action.CompletionType
  parent: TinyLife.Actions
  name: Action.CompletionType
  nameWithType: Action.CompletionType
  fullName: TinyLife.Actions.Action.CompletionType
- uid: TinyLife.Actions.Action.OnCompleted*
  commentId: Overload:TinyLife.Actions.Action.OnCompleted
  name: OnCompleted
  nameWithType: Action.OnCompleted
  fullName: TinyLife.Actions.Action.OnCompleted
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanMultitask*
  commentId: Overload:TinyLife.Actions.Action.CanMultitask
  name: CanMultitask
  nameWithType: Action.CanMultitask
  fullName: TinyLife.Actions.Action.CanMultitask
- uid: TinyLife.Actions.Action.Validate*
  commentId: Overload:TinyLife.Actions.Action.Validate
  name: Validate
  nameWithType: Action.Validate
  fullName: TinyLife.Actions.Action.Validate
- uid: TinyLife.Actions.Action.CanCancel*
  commentId: Overload:TinyLife.Actions.Action.CanCancel
  name: CanCancel
  nameWithType: Action.CanCancel
  fullName: TinyLife.Actions.Action.CanCancel
- uid: TinyLife.Actions.Action.GetNextAction*
  commentId: Overload:TinyLife.Actions.Action.GetNextAction
  name: GetNextAction
  nameWithType: Action.GetNextAction
  fullName: TinyLife.Actions.Action.GetNextAction
- uid: TinyLife.Actions.ActionType.TypeSettings.Texture
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Texture
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1
  isExternal: true
- uid: TinyLife.Actions.Action.GetIconObject*
  commentId: Overload:TinyLife.Actions.Action.GetIconObject
  name: GetIconObject
  nameWithType: Action.GetIconObject
  fullName: TinyLife.Actions.Action.GetIconObject
- uid: TinyLife.GameSpeed.ExtremelyFast
  commentId: F:TinyLife.GameSpeed.ExtremelyFast
  isExternal: true
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
  commentId: Overload:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  name: CausesExtremelyFastSpeed
  nameWithType: Action.CausesExtremelyFastSpeed
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.Action.GetDisplayName*
  commentId: Overload:TinyLife.Actions.Action.GetDisplayName
  name: GetDisplayName
  nameWithType: Action.GetDisplayName
  fullName: TinyLife.Actions.Action.GetDisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: TinyLife.Actions.Action.TryForceFail*
  commentId: Overload:TinyLife.Actions.Action.TryForceFail
  name: TryForceFail
  nameWithType: Action.TryForceFail
  fullName: TinyLife.Actions.Action.TryForceFail
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: TinyLife.Actions.Action.GetInProgressTime
  commentId: M:TinyLife.Actions.Action.GetInProgressTime
  parent: TinyLife.Actions.Action
  name: GetInProgressTime()
  nameWithType: Action.GetInProgressTime()
  fullName: TinyLife.Actions.Action.GetInProgressTime()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetInProgressTime
    name: GetInProgressTime
    nameWithType: Action.GetInProgressTime
    fullName: TinyLife.Actions.Action.GetInProgressTime
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetInProgressTime
    name: GetInProgressTime
    nameWithType: Action.GetInProgressTime
    fullName: TinyLife.Actions.Action.GetInProgressTime
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
- uid: TinyLife.Actions.Action.IsFullyInProgress*
  commentId: Overload:TinyLife.Actions.Action.IsFullyInProgress
  name: IsFullyInProgress
  nameWithType: Action.IsFullyInProgress
  fullName: TinyLife.Actions.Action.IsFullyInProgress
- uid: TinyLife.Actions.Action.GetInProgressTime*
  commentId: Overload:TinyLife.Actions.Action.GetInProgressTime
  name: GetInProgressTime
  nameWithType: Action.GetInProgressTime
  fullName: TinyLife.Actions.Action.GetInProgressTime
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  parent: TinyLife.Actions
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
- uid: TinyLife.Actions.ActionType.TypeSettings.Varieties
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Varieties
  isExternal: true
- uid: TinyLife.Actions.Action.ApplyVariety*
  commentId: Overload:TinyLife.Actions.Action.ApplyVariety
  name: ApplyVariety
  nameWithType: Action.ApplyVariety
  fullName: TinyLife.Actions.Action.ApplyVariety
- uid: TinyLife.Actions.SleepAction
  commentId: T:TinyLife.Actions.SleepAction
  isExternal: true
- uid: TinyLife.Actions.Action.CanEnqueueConversation*
  commentId: Overload:TinyLife.Actions.Action.CanEnqueueConversation
  name: CanEnqueueConversation
  nameWithType: Action.CanEnqueueConversation
  fullName: TinyLife.Actions.Action.CanEnqueueConversation
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  isExternal: true
- uid: TinyLife.Actions.Action.CompleteIfNeedFull*
  commentId: Overload:TinyLife.Actions.Action.CompleteIfNeedFull
  name: CompleteIfNeedFull
  nameWithType: Action.CompleteIfNeedFull
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife.Actions.PrepareFoodAction
  commentId: T:TinyLife.Actions.PrepareFoodAction
  isExternal: true
- uid: TinyLife.Actions.CookFoodAction
  commentId: T:TinyLife.Actions.CookFoodAction
  isExternal: true
- uid: TinyLife.Actions.Action.PutDownOrGoTo*
  commentId: Overload:TinyLife.Actions.Action.PutDownOrGoTo
  name: PutDownOrGoTo
  nameWithType: Action.PutDownOrGoTo
  fullName: TinyLife.Actions.Action.PutDownOrGoTo
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.FurnitureType[]
  isExternal: true
  name: FurnitureType[]
  nameWithType: FurnitureType[]
  fullName: TinyLife.Objects.FurnitureType[]
  nameWithType.vb: FurnitureType()
  fullName.vb: TinyLife.Objects.FurnitureType()
  name.vb: FurnitureType()
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Actions.Action.GetPlaceDirection*
  commentId: Overload:TinyLife.Actions.Action.GetPlaceDirection
  name: GetPlaceDirection
  nameWithType: Action.GetPlaceDirection
  fullName: TinyLife.Actions.Action.GetPlaceDirection
- uid: TinyLife.Objects.Person.CurrentPose
  commentId: F:TinyLife.Objects.Person.CurrentPose
  isExternal: true
- uid: TinyLife.Objects.Person.Pose.Sitting
  commentId: F:TinyLife.Objects.Person.Pose.Sitting
  isExternal: true
- uid: TinyLife.NeedType.Energy
  commentId: F:TinyLife.NeedType.Energy
  isExternal: true
- uid: TinyLife.Actions.Action.Sit*
  commentId: Overload:TinyLife.Actions.Action.Sit
  name: Sit
  nameWithType: Action.Sit
  fullName: TinyLife.Actions.Action.Sit
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(TinyLife.Skills.SkillType,System.Single)
  isExternal: true
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Action.CompleteInTime*
  commentId: Overload:TinyLife.Actions.Action.CompleteInTime
  name: CompleteInTime
  nameWithType: Action.CompleteInTime
  fullName: TinyLife.Actions.Action.CompleteInTime
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Actions.ActionType.QuitJob
  commentId: F:TinyLife.Actions.ActionType.QuitJob
  isExternal: true
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  parent: TinyLife.Actions.Action
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: TinyLife.Actions.Action.OpenPlayerPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenPlayerPrompt
  name: OpenPlayerPrompt
  nameWithType: Action.OpenPlayerPrompt
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt
- uid: System.Predicate{MLEM.Ui.Elements.Panel}
  commentId: T:System.Predicate{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Panel>
  nameWithType: Predicate<Panel>
  fullName: System.Predicate<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Predicate(Of Panel)
  fullName.vb: System.Predicate(Of MLEM.Ui.Elements.Panel)
  name.vb: Predicate(Of Panel)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`1
  name: Action<Panel>
  nameWithType: Action<Panel>
  fullName: System.Action<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of Panel)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Panel)
  name.vb: Action(Of Panel)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.Element[]
  isExternal: true
  name: Element[]
  nameWithType: Element[]
  fullName: MLEM.Ui.Elements.Element[]
  nameWithType.vb: Element()
  fullName.vb: MLEM.Ui.Elements.Element()
  name.vb: Element()
  spec.csharp:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Ui.Elements.Group
  commentId: T:MLEM.Ui.Elements.Group
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Group
  nameWithType: Group
  fullName: MLEM.Ui.Elements.Group
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Actions.Action.OpenYesNoPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenYesNoPrompt
  name: OpenYesNoPrompt
  nameWithType: Action.OpenYesNoPrompt
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MLEM.Ui.Elements.TextField
  commentId: T:MLEM.Ui.Elements.TextField
  isExternal: true
- uid: TinyLife.Actions.Action.OpenTextPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenTextPrompt
  name: OpenTextPrompt
  nameWithType: Action.OpenTextPrompt
  fullName: TinyLife.Actions.Action.OpenTextPrompt
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: System.Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{System.String}
  commentId: T:System.Predicate{System.String}
  parent: System
  definition: System.Predicate`1
  name: Predicate<String>
  nameWithType: Predicate<String>
  fullName: System.Predicate<System.String>
  nameWithType.vb: Predicate(Of String)
  fullName.vb: System.Predicate(Of System.String)
  name.vb: Predicate(Of String)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.TextField.Rule
  commentId: T:MLEM.Ui.Elements.TextField.Rule
  parent: MLEM.Ui.Elements
  isExternal: true
  name: TextField.Rule
  nameWithType: TextField.Rule
  fullName: MLEM.Ui.Elements.TextField.Rule
- uid: TinyLife.Actions.ActionType.PracticeJokes
  commentId: F:TinyLife.Actions.ActionType.PracticeJokes
  isExternal: true
- uid: TinyLife.Actions.ActionType.PracticeSpeech
  commentId: F:TinyLife.Actions.ActionType.PracticeSpeech
  isExternal: true
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
- uid: TinyLife.Actions.Action.SpeakAlone*
  commentId: Overload:TinyLife.Actions.Action.SpeakAlone
  name: SpeakAlone
  nameWithType: Action.SpeakAlone
  fullName: TinyLife.Actions.Action.SpeakAlone
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  isExternal: true
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  name: Sit(Furniture, GameSpeed, ActionSpot)
  nameWithType: Action.Sit(Furniture, GameSpeed, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, TinyLife.GameSpeed, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: Action.Sit
    fullName: TinyLife.Actions.Action.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,TinyLife.GameSpeed,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: Action.Sit
    fullName: TinyLife.Actions.Action.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetFreeChair*
  commentId: Overload:TinyLife.Actions.Action.GetFreeChair
  name: GetFreeChair
  nameWithType: Action.GetFreeChair
  fullName: TinyLife.Actions.Action.GetFreeChair
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Furniture, ActionSpot, Direction2>
  nameWithType: (T1, T2, T3)<Furniture, ActionSpot, Direction2>
  fullName: System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2>
  nameWithType.vb: (T1, T2, T3)(Of Furniture, ActionSpot, Direction2)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2)
  name.vb: (T1, T2, T3)(Of Furniture, ActionSpot, Direction2)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.Actions.Action.FindAllFreePeople*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreePeople
  name: FindAllFreePeople
  nameWithType: Action.FindAllFreePeople
  fullName: TinyLife.Actions.Action.FindAllFreePeople
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Vector2>
  nameWithType: Nullable<Vector2>
  fullName: System.Nullable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: Nullable(Of Vector2)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: Nullable(Of Vector2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.BreakableFurniture.Broken
  commentId: F:TinyLife.Objects.BreakableFurniture.Broken
  parent: TinyLife.Objects.BreakableFurniture
  name: Broken
  nameWithType: BreakableFurniture.Broken
  fullName: TinyLife.Objects.BreakableFurniture.Broken
- uid: TinyLife.Actions.Action.FindAllFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeFurniture
  name: FindAllFreeFurniture
  nameWithType: Action.FindAllFreeFurniture
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Actions.Action.FindAllFreeWalls*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeWalls
  name: FindAllFreeWalls
  nameWithType: Action.FindAllFreeWalls
  fullName: TinyLife.Actions.Action.FindAllFreeWalls
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Wall>
  nameWithType: IEnumerable<Wall>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Wall>
  nameWithType.vb: IEnumerable(Of Wall)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Wall)
  name.vb: IEnumerable(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreeGround*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeGround
  name: FindAllFreeGround
  nameWithType: Action.FindAllFreeGround
  fullName: TinyLife.Actions.Action.FindAllFreeGround
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: Action.FindAllFreeFurniture
    fullName: TinyLife.Actions.Action.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: Action.FindAllFreeFurniture
    fullName: TinyLife.Actions.Action.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindFreeFurniture
  name: FindFreeFurniture
  nameWithType: Action.FindFreeFurniture
  fullName: TinyLife.Actions.Action.FindFreeFurniture
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Actions.Action.GetTableSpot*
  commentId: Overload:TinyLife.Actions.Action.GetTableSpot
  name: GetTableSpot
  nameWithType: Action.GetTableSpot
  fullName: TinyLife.Actions.Action.GetTableSpot
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Furniture, ObjectSpot>
  nameWithType: (T1, T2)<Furniture, ObjectSpot>
  fullName: System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot>
  nameWithType.vb: (T1, T2)(Of Furniture, ObjectSpot)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  name.vb: (T1, T2)(Of Furniture, ObjectSpot)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )

### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Job
  commentId: T:TinyLife.Goals.Job
  id: Job
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Job.#ctor(TinyLife.Goals.JobType,TinyLife.Objects.Person)
  - TinyLife.Goals.Job.AddLevel(System.Int32)
  - TinyLife.Goals.Job.AddPerformance(System.Single)
  - TinyLife.Goals.Job.CurrentHourlyPay
  - TinyLife.Goals.Job.HasRequiredPromotionSkills
  - TinyLife.Goals.Job.Level
  - TinyLife.Goals.Job.MaxLevel
  - TinyLife.Goals.Job.Performance
  - TinyLife.Goals.Job.Person
  - TinyLife.Goals.Job.Type
  - TinyLife.Goals.Job.Update(System.TimeSpan)
  - TinyLife.Goals.Job.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Job
  nameWithType: Job
  fullName: TinyLife.Goals.Job
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Job
    path: Goals/Job.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA job is a kind of work that a <xref href=\"TinyLife.Goals.Job.Person\" data-throw-if-not-resolved=\"false\"></xref> can have.\nThe person&apos;s current job is accessible using <xref href=\"TinyLife.Objects.Person.Job\" data-throw-if-not-resolved=\"false\"></xref>.\nA job instance is constructed from its underlying <xref href=\"TinyLife.Goals.JobType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Job : GenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Job
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.Job.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.Job.MaxLevel
  commentId: F:TinyLife.Goals.Job.MaxLevel
  id: MaxLevel
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: MaxLevel
  nameWithType: Job.MaxLevel
  fullName: TinyLife.Goals.Job.MaxLevel
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxLevel
    path: Goals/Job.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe maximum level that a <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> can have.\nA job&apos;s level goes from 0 to this value, inclusively.\n"
  example: []
  syntax:
    content: public const int MaxLevel = 9
    return:
      type: System.Int32
    content.vb: Public Const MaxLevel As Integer = 9
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Goals.Job.Type
  commentId: F:TinyLife.Goals.Job.Type
  id: Type
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Job.Type
  fullName: TinyLife.Goals.Job.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: Goals/Job.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe underlying <xref href=\"TinyLife.Goals.JobType\" data-throw-if-not-resolved=\"false\"></xref> that this job results from\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly JobType Type
    return:
      type: TinyLife.Goals.JobType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As JobType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Job.Person
  commentId: P:TinyLife.Goals.Job.Person
  id: Person
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Job.Person
  fullName: TinyLife.Goals.Job.Person
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: Goals/Job.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe <xref href=\"TinyLife.Goals.Job.Person\" data-throw-if-not-resolved=\"false\"></xref> that currently has this job\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Goals.Job.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Job.Performance
  commentId: P:TinyLife.Goals.Job.Performance
  id: Performance
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Performance
  nameWithType: Job.Performance
  fullName: TinyLife.Goals.Job.Performance
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Performance
    path: Goals/Job.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis job&apos;s current performance, ranging from 0 to 1, representing the percentage of work performance.\nThe default value is 0.5.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Performance { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Performance As Single
  overload: TinyLife.Goals.Job.Performance*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Job.Level
  commentId: P:TinyLife.Goals.Job.Level
  id: Level
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: Job.Level
  fullName: TinyLife.Goals.Job.Level
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Level
    path: Goals/Job.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe current level that this job is at.\nNote that the default level is 0, and the level goes up to a maximum of <xref href=\"TinyLife.Goals.Job.MaxLevel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Level { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Level As Integer
  overload: TinyLife.Goals.Job.Level*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Job.CurrentHourlyPay
  commentId: P:TinyLife.Goals.Job.CurrentHourlyPay
  id: CurrentHourlyPay
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: CurrentHourlyPay
  nameWithType: Job.CurrentHourlyPay
  fullName: TinyLife.Goals.Job.CurrentHourlyPay
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentHourlyPay
    path: Goals/Job.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe amount of tiny bucks that this job pays per hour. This is based on <xref href=\"TinyLife.Goals.JobType.HourlyPay\" data-throw-if-not-resolved=\"false\"></xref> and the current <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float CurrentHourlyPay { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property CurrentHourlyPay As Single
  overload: TinyLife.Goals.Job.CurrentHourlyPay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Job.#ctor(TinyLife.Goals.JobType,TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.Job.#ctor(TinyLife.Goals.JobType,TinyLife.Objects.Person)
  id: '#ctor(TinyLife.Goals.JobType,TinyLife.Objects.Person)'
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Job(JobType, Person)
  nameWithType: Job.Job(JobType, Person)
  fullName: TinyLife.Goals.Job.Job(TinyLife.Goals.JobType, TinyLife.Objects.Person)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Goals/Job.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new job from the given settings\n"
  example: []
  syntax:
    content: public Job(JobType type, Person person)
    parameters:
    - id: type
      type: TinyLife.Goals.JobType
      description: The underlying job type
    - id: person
      type: TinyLife.Objects.Person
      description: The person that should have this job
    content.vb: Public Sub New(type As JobType, person As Person)
  overload: TinyLife.Goals.Job.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Job.Update(System.TimeSpan)
  commentId: M:TinyLife.Goals.Job.Update(System.TimeSpan)
  id: Update(System.TimeSpan)
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Update(TimeSpan)
  nameWithType: Job.Update(TimeSpan)
  fullName: TinyLife.Goals.Job.Update(System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: Goals/Job.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nUpdates this job, changing the <xref href=\"TinyLife.Goals.Job.Performance\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref> according to this job&apos;s person&apos;s current actions.\nThis is called in <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Update(TimeSpan passedInGame)
    parameters:
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game since the last update
    content.vb: Public Sub Update(passedInGame As TimeSpan)
  overload: TinyLife.Goals.Job.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Job.AddPerformance(System.Single)
  commentId: M:TinyLife.Goals.Job.AddPerformance(System.Single)
  id: AddPerformance(System.Single)
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: AddPerformance(Single)
  nameWithType: Job.AddPerformance(Single)
  fullName: TinyLife.Goals.Job.AddPerformance(System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddPerformance
    path: Goals/Job.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nAdds (or removes) the given amount of performance to this job&apos;s <xref href=\"TinyLife.Goals.Job.Performance\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the total <xref href=\"TinyLife.Goals.Job.Performance\" data-throw-if-not-resolved=\"false\"></xref> rolls over (below 0 or above 1), <xref href=\"TinyLife.Goals.Job.AddLevel(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called and the performace is reset accordingly.\n"
  example: []
  syntax:
    content: public void AddPerformance(float performance)
    parameters:
    - id: performance
      type: System.Single
      description: The amount to add or remove to the current performance
    content.vb: Public Sub AddPerformance(performance As Single)
  overload: TinyLife.Goals.Job.AddPerformance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Job.AddLevel(System.Int32)
  commentId: M:TinyLife.Goals.Job.AddLevel(System.Int32)
  id: AddLevel(System.Int32)
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: AddLevel(Int32)
  nameWithType: Job.AddLevel(Int32)
  fullName: TinyLife.Goals.Job.AddLevel(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLevel
    path: Goals/Job.cs
    startLine: 123
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nAdds (or removes) the given amount of levels to this job&apos;s <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that the level value is automatically clamped between 0 and <xref href=\"TinyLife.Goals.Job.MaxLevel\" data-throw-if-not-resolved=\"false\"></xref>, inclusively.\n"
  example: []
  syntax:
    content: public void AddLevel(int level)
    parameters:
    - id: level
      type: System.Int32
      description: The level to add to this job&apos;s current level
    content.vb: Public Sub AddLevel(level As Integer)
  overload: TinyLife.Goals.Job.AddLevel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Job.HasRequiredPromotionSkills
  commentId: M:TinyLife.Goals.Job.HasRequiredPromotionSkills
  id: HasRequiredPromotionSkills
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: HasRequiredPromotionSkills()
  nameWithType: Job.HasRequiredPromotionSkills()
  fullName: TinyLife.Goals.Job.HasRequiredPromotionSkills()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasRequiredPromotionSkills
    path: Goals/Job.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nChecks whether this job&apos;s <xref href=\"TinyLife.Goals.Job.Person\" data-throw-if-not-resolved=\"false\"></xref> has all of the <xref href=\"TinyLife.Goals.JobType.RequiredPromotionSkills\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool HasRequiredPromotionSkills()
    return:
      type: System.Boolean
      description: Whether the skills required for promotion are present
    content.vb: Public Function HasRequiredPromotionSkills As Boolean
  overload: TinyLife.Goals.Job.HasRequiredPromotionSkills*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Job.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.Job.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Goals.Job
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Job.Validate(Person)
  fullName: TinyLife.Goals.Job.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Job.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: Goals/Job.cs
    startLine: 166
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.Goals.Job.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Goals.Job.Person
  commentId: P:TinyLife.Goals.Job.Person
  isExternal: true
- uid: TinyLife.Objects.Person.Job
  commentId: P:TinyLife.Objects.Person.Job
  isExternal: true
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  parent: TinyLife.Goals
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Job.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Job>()
  nameWithType: Extensions.JsonCopy<Job>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Job>()
  nameWithType.vb: Extensions.JsonCopy(Of Job)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Job)()
  name.vb: JsonCopy(Of Job)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Job>
    nameWithType: Extensions.JsonCopy<Job>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Job>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Job)
    nameWithType: Extensions.JsonCopy(Of Job)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Job)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.Job
  commentId: T:TinyLife.Goals.Job
  parent: TinyLife.Goals
  name: Job
  nameWithType: Job
  fullName: TinyLife.Goals.Job
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Goals.Job.Person*
  commentId: Overload:TinyLife.Goals.Job.Person
  name: Person
  nameWithType: Job.Person
  fullName: TinyLife.Goals.Job.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Goals.Job.Performance*
  commentId: Overload:TinyLife.Goals.Job.Performance
  name: Performance
  nameWithType: Job.Performance
  fullName: TinyLife.Goals.Job.Performance
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Goals.Job.MaxLevel
  commentId: F:TinyLife.Goals.Job.MaxLevel
  isExternal: true
- uid: TinyLife.Goals.Job.Level*
  commentId: Overload:TinyLife.Goals.Job.Level
  name: Level
  nameWithType: Job.Level
  fullName: TinyLife.Goals.Job.Level
- uid: TinyLife.Goals.JobType.HourlyPay
  commentId: F:TinyLife.Goals.JobType.HourlyPay
  isExternal: true
- uid: TinyLife.Goals.Job.Level
  commentId: P:TinyLife.Goals.Job.Level
  isExternal: true
- uid: TinyLife.Goals.Job.CurrentHourlyPay*
  commentId: Overload:TinyLife.Goals.Job.CurrentHourlyPay
  name: CurrentHourlyPay
  nameWithType: Job.CurrentHourlyPay
  fullName: TinyLife.Goals.Job.CurrentHourlyPay
- uid: TinyLife.Goals.Job.#ctor*
  commentId: Overload:TinyLife.Goals.Job.#ctor
  name: Job
  nameWithType: Job.Job
  fullName: TinyLife.Goals.Job.Job
- uid: TinyLife.Goals.Job.Performance
  commentId: P:TinyLife.Goals.Job.Performance
  isExternal: true
- uid: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  commentId: M:TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed)
  isExternal: true
- uid: TinyLife.Goals.Job.Update*
  commentId: Overload:TinyLife.Goals.Job.Update
  name: Update
  nameWithType: Job.Update
  fullName: TinyLife.Goals.Job.Update
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Goals.Job.AddLevel(System.Int32)
  commentId: M:TinyLife.Goals.Job.AddLevel(System.Int32)
  isExternal: true
- uid: TinyLife.Goals.Job.AddPerformance*
  commentId: Overload:TinyLife.Goals.Job.AddPerformance
  name: AddPerformance
  nameWithType: Job.AddPerformance
  fullName: TinyLife.Goals.Job.AddPerformance
- uid: TinyLife.Goals.Job.AddLevel*
  commentId: Overload:TinyLife.Goals.Job.AddLevel
  name: AddLevel
  nameWithType: Job.AddLevel
  fullName: TinyLife.Goals.Job.AddLevel
- uid: TinyLife.Goals.JobType.RequiredPromotionSkills
  commentId: P:TinyLife.Goals.JobType.RequiredPromotionSkills
  isExternal: true
- uid: TinyLife.Goals.Job.HasRequiredPromotionSkills*
  commentId: Overload:TinyLife.Goals.Job.HasRequiredPromotionSkills
  name: HasRequiredPromotionSkills
  nameWithType: Job.HasRequiredPromotionSkills
  fullName: TinyLife.Goals.Job.HasRequiredPromotionSkills
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.Job.Validate*
  commentId: Overload:TinyLife.Goals.Job.Validate
  name: Validate
  nameWithType: Job.Validate
  fullName: TinyLife.Goals.Job.Validate

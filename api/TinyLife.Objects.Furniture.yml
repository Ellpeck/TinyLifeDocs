### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  id: Furniture
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  - TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.Area
  - TinyLife.Objects.Furniture.AreUtilitiesDisabled
  - TinyLife.Objects.Furniture.CanBeDirty
  - TinyLife.Objects.Furniture.Colors
  - TinyLife.Objects.Furniture.Creator
  - TinyLife.Objects.Furniture.CreatorId
  - TinyLife.Objects.Furniture.CustomPrice
  - TinyLife.Objects.Furniture.DevaluedThroughUse
  - TinyLife.Objects.Furniture.Dirty
  - TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean)
  - TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  - TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  - TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  - TinyLife.Objects.Furniture.GetChildren``1
  - TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  - TinyLife.Objects.Furniture.GetDescription
  - TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  - TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.GetPrice
  - TinyLife.Objects.Furniture.GetVisibility
  - TinyLife.Objects.Furniture.HasParent
  - TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  - TinyLife.Objects.Furniture.IsStatic
  - TinyLife.Objects.Furniture.NotifyNeighbors
  - TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Objects.Furniture.OnAdded
  - TinyLife.Objects.Furniture.OnDirty
  - TinyLife.Objects.Furniture.OnGetDescription
  - TinyLife.Objects.Furniture.OnGetDirty
  - TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  - TinyLife.Objects.Furniture.OnRemoved
  - TinyLife.Objects.Furniture.OnSetCreator
  - TinyLife.Objects.Furniture.ParentFurniture
  - TinyLife.Objects.Furniture.ParentObjectSpot
  - TinyLife.Objects.Furniture.Quality
  - TinyLife.Objects.Furniture.Random
  - TinyLife.Objects.Furniture.RemoveAndUnlink
  - TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  - TinyLife.Objects.Furniture.RemoveChildren``1(System.Predicate{``0})
  - TinyLife.Objects.Furniture.Rotation
  - TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  - TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  - TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  - TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  - TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  - TinyLife.Objects.Furniture.Type
  - TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - TinyLife.Objects.Furniture.Validate
  - TinyLife.Objects.Furniture.VisualPosition
  langs:
  - csharp
  - vb
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Furniture
    path: Objects/Furniture.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA furniture is an instance of a <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> which is placed in the world, or in a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s hand.\nTo register a custom furniture, use <xref href=\"TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class Furniture : MapObject, IGenericDataHolder, IPricedObject'
    content.vb: >-
      Public Class Furniture
          Inherits MapObject
          Implements IGenericDataHolder, IPricedObject
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  - TinyLife.Objects.MapObject
  derivedClasses:
  - TinyLife.Objects.BreakableFurniture
  - TinyLife.Objects.CornerFurniture
  - TinyLife.Objects.Fence
  - TinyLife.Objects.FoodTypedItem
  - TinyLife.Objects.Gravestone
  - TinyLife.Objects.LightFurniture
  - TinyLife.Objects.OverlayWallHanging
  - TinyLife.Objects.Painting
  - TinyLife.Objects.UnfinishedWoodwork
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - TinyLife.Objects.MapObject.PersonRotationOrder
  - TinyLife.Objects.MapObject.OnCreated
  - TinyLife.Objects.MapObject.OnValidated
  - TinyLife.Objects.MapObject.OnEventsAttachable
  - TinyLife.Objects.MapObject.OnDraw
  - TinyLife.Objects.MapObject.OnUpdate
  - TinyLife.Objects.MapObject.Id
  - TinyLife.Objects.MapObject.Map
  - TinyLife.Objects.MapObject.Position
  - TinyLife.Objects.MapObject.CurrentLot
  - TinyLife.Objects.MapObject.IsInWorld
  - TinyLife.Objects.MapObject.GetHoverInfo
  - TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  - TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.GetModCategory(System.String)
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Furniture.TinyLife.Utilities.Extensions.JsonCopy``1
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  - MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Furniture.Random
  commentId: F:TinyLife.Objects.Furniture.Random
  id: Random
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Furniture.Random
  fullName: TinyLife.Objects.Furniture.Random
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Random
    path: Objects/Furniture.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA <xref href=\"TinyLife.Objects.Furniture.Random\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used by furniture items.\nThis value has the default seed.\n"
  example: []
  syntax:
    content: protected static readonly Random Random
    return:
      type: System.Random
    content.vb: Protected Shared ReadOnly Random As Random
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Furniture.OnGetDescription
  commentId: E:TinyLife.Objects.Furniture.OnGetDescription
  id: OnGetDescription
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnGetDescription
  nameWithType: Furniture.OnGetDescription
  fullName: TinyLife.Objects.Furniture.OnGetDescription
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetDescription
    path: Objects/Furniture.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when <xref href=\"TinyLife.Objects.Furniture.GetDescription\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThis event can be used to change the description of furniture instances by adding to the provided <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<List<string>> OnGetDescription
    return:
      type: System.Action{System.Collections.Generic.List{System.String}}
    content.vb: Public Event OnGetDescription As Action(Of List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.OnSetCreator
  commentId: E:TinyLife.Objects.Furniture.OnSetCreator
  id: OnSetCreator
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnSetCreator
  nameWithType: Furniture.OnSetCreator
  fullName: TinyLife.Objects.Furniture.OnSetCreator
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnSetCreator
    path: Objects/Furniture.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThe arguments passed to this event are the same that are passed to <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person, bool, EventPhase> OnSetCreator
    return:
      type: System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
    content.vb: Public Event OnSetCreator As Action(Of Person, Boolean, EventPhase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.OnGetDirty
  commentId: E:TinyLife.Objects.Furniture.OnGetDirty
  id: OnGetDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnGetDirty
  nameWithType: Furniture.OnGetDirty
  fullName: TinyLife.Objects.Furniture.OnGetDirty
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetDirty
    path: Objects/Furniture.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when this furniture gets more dirty in <xref href=\"TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<TimeSpan> OnGetDirty
    return:
      type: System.Action{System.TimeSpan}
    content.vb: Public Event OnGetDirty As Action(Of TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.OnDirty
  commentId: E:TinyLife.Objects.Furniture.OnDirty
  id: OnDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnDirty
  nameWithType: Furniture.OnDirty
  fullName: TinyLife.Objects.Furniture.OnDirty
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnDirty
    path: Objects/Furniture.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when this furniture gets dirty, meaning its <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> value is set to true.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action OnDirty
    return:
      type: System.Action
    content.vb: Public Event OnDirty As Action
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.Type
  commentId: F:TinyLife.Objects.Furniture.Type
  id: Type
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Furniture.Type
  fullName: TinyLife.Objects.Furniture.Type
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: Objects/Furniture.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> that this furniture has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly FurnitureType Type
    return:
      type: TinyLife.Objects.FurnitureType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As FurnitureType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.Rotation
  commentId: F:TinyLife.Objects.Furniture.Rotation
  id: Rotation
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: Furniture.Rotation
  fullName: TinyLife.Objects.Furniture.Rotation
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Rotation
    path: Objects/Furniture.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe current rotation of this furniture.\nSince furniture has a wide variety of looks, the specific value of the rotation doesn&apos;t necessarily have much practical meaning.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Direction2 Rotation
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <DataMember>

      Public Rotation As Direction2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  id: ParentFurniture
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentFurniture
    path: Objects/Furniture.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that this furniture is currently latched on to.\nIf this value is non-null, <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> returns the object spot that this furniture is in.\n"
  example: []
  syntax:
    content: public Furniture ParentFurniture { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Furniture
    content.vb: Public ReadOnly Property ParentFurniture As Furniture
  overload: TinyLife.Objects.Furniture.ParentFurniture*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.ParentObjectSpot
  commentId: P:TinyLife.Objects.Furniture.ParentObjectSpot
  id: ParentObjectSpot
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentObjectSpot
    path: Objects/Furniture.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> that this furniture is currently in.\nIf this value is non-null, <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> returns the furniture that this object spot belongs to.\n"
  example: []
  syntax:
    content: public ObjectSpot ParentObjectSpot { get; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectSpot
    content.vb: Public ReadOnly Property ParentObjectSpot As ObjectSpot
  overload: TinyLife.Objects.Furniture.ParentObjectSpot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.HasParent
  commentId: P:TinyLife.Objects.Furniture.HasParent
  id: HasParent
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: HasParent
  nameWithType: Furniture.HasParent
  fullName: TinyLife.Objects.Furniture.HasParent
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasParent
    path: Objects/Furniture.cs
    startLine: 82
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> for this furniture exists.\nNote that, if this object is not in the world, or the <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> is not currently in the world, this property will still be true.\n"
  example: []
  syntax:
    content: public bool HasParent { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasParent As Boolean
  overload: TinyLife.Objects.Furniture.HasParent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.Colors
  commentId: F:TinyLife.Objects.Furniture.Colors
  id: Colors
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Furniture.Colors
  fullName: TinyLife.Objects.Furniture.Colors
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: Objects/Furniture.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe indices of the colors that this furniture has.\nRefer to <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref> for the actual colors that these indices represent.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int[] Colors
    return:
      type: System.Int32[]
    content.vb: >-
      <DataMember>

      Public Colors As Integer()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.Area
  commentId: P:TinyLife.Objects.Furniture.Area
  id: Area
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Furniture.Area
  fullName: TinyLife.Objects.Furniture.Area
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: Objects/Furniture.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this furniture piece is currently taking up, based on its <xref href=\"TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref> and its <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public RectangleF Area { get; }
    parameters: []
    return:
      type: MLEM.Misc.RectangleF
    content.vb: Public ReadOnly Property Area As RectangleF
  overload: TinyLife.Objects.Furniture.Area*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.VisualPosition
  commentId: P:TinyLife.Objects.Furniture.VisualPosition
  id: VisualPosition
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: VisualPosition
  nameWithType: Furniture.VisualPosition
  fullName: TinyLife.Objects.Furniture.VisualPosition
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisualPosition
    path: Objects/Furniture.cs
    startLine: 97
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe position (in world space) that this furniture is at.\nThis only differs from this object&apos;s <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> if the <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.AbstractSpot.YOffset\" data-throw-if-not-resolved=\"false\"></xref> is non-zero. \n"
  example: []
  syntax:
    content: public Vector2 VisualPosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public ReadOnly Property VisualPosition As Vector2
  overload: TinyLife.Objects.Furniture.VisualPosition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.DevaluedThroughUse
  commentId: F:TinyLife.Objects.Furniture.DevaluedThroughUse
  id: DevaluedThroughUse
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: DevaluedThroughUse
  nameWithType: Furniture.DevaluedThroughUse
  fullName: TinyLife.Objects.Furniture.DevaluedThroughUse
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DevaluedThroughUse
    path: Objects/Furniture.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA field that gets set to true in <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this value is true, the <xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> of this object is greatly reduced.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool DevaluedThroughUse
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public DevaluedThroughUse As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.AreUtilitiesDisabled
  commentId: P:TinyLife.Objects.Furniture.AreUtilitiesDisabled
  id: AreUtilitiesDisabled
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AreUtilitiesDisabled
  nameWithType: Furniture.AreUtilitiesDisabled
  fullName: TinyLife.Objects.Furniture.AreUtilitiesDisabled
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AreUtilitiesDisabled
    path: Objects/Furniture.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether utilities are disabled on the current lot.\nThis is a shorthand for <xref href=\"TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool AreUtilitiesDisabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AreUtilitiesDisabled As Boolean
  overload: TinyLife.Objects.Furniture.AreUtilitiesDisabled*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.IsStatic
  commentId: F:TinyLife.Objects.Furniture.IsStatic
  id: IsStatic
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: Furniture.IsStatic
  fullName: TinyLife.Objects.Furniture.IsStatic
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsStatic
    path: Objects/Furniture.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA field that is true for objects that are part of the exported base map that the current map is created from\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool IsStatic
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public IsStatic As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.CreatorId
  commentId: P:TinyLife.Objects.Furniture.CreatorId
  id: CreatorId
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreatorId
    path: Objects/Furniture.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that created this object in some capacity.\nThis value defaults to <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, meaning no creator.\nTo easily access the creator <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, see <xref href=\"TinyLife.Objects.Furniture.Creator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Guid CreatorId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public ReadOnly Property CreatorId As Guid
  overload: TinyLife.Objects.Furniture.CreatorId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.Quality
  commentId: F:TinyLife.Objects.Furniture.Quality
  id: Quality
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Quality
  nameWithType: Furniture.Quality
  fullName: TinyLife.Objects.Furniture.Quality
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Quality
    path: Objects/Furniture.cs
    startLine: 127
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe quality of this object, which defaults to null, meaning no quality.\nThe quality is used by <xref href=\"TinyLife.Objects.Food\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, and items crafted on the woodworking table.\nIf this value is nonnull, the quality is displayed in the furniture item&apos;s description (<xref href=\"TinyLife.Objects.Furniture.GetDescription\" data-throw-if-not-resolved=\"false\"></xref>) and it influences the furniture&apos;s price (<xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref>) using <xref href=\"TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Quality? Quality
    return:
      type: System.Nullable{TinyLife.Skills.Quality}
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Quality As Quality?
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.CanBeDirty
  commentId: P:TinyLife.Objects.Furniture.CanBeDirty
  id: CanBeDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanBeDirty
    path: Objects/Furniture.cs
    startLine: 132
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that queries whether this object can be made dirty.\nIf this property is false, <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> will not automatically be set to true.\n"
  example: []
  syntax:
    content: public bool CanBeDirty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanBeDirty As Boolean
  overload: TinyLife.Objects.Furniture.CanBeDirty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  id: Dirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Dirty
    path: Objects/Furniture.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether this object is currently dirty.\nIf <xref href=\"TinyLife.Objects.Furniture.CanBeDirty\" data-throw-if-not-resolved=\"false\"></xref> is false, this field is usually unused.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool Dirty
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Dirty As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.CustomPrice
  commentId: F:TinyLife.Objects.Furniture.CustomPrice
  id: CustomPrice
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CustomPrice
  nameWithType: Furniture.CustomPrice
  fullName: TinyLife.Objects.Furniture.CustomPrice
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CustomPrice
    path: Objects/Furniture.cs
    startLine: 144
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn optional custom price that this furniture item has over its regular price (<xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref>).\nIf this field has a value, the regularly calculated price from <xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> will be ignored and this value will be used as the object&apos;s price instead.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public float? CustomPrice
    return:
      type: System.Nullable{System.Single}
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public CustomPrice As Single?
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.Creator
  commentId: P:TinyLife.Objects.Furniture.Creator
  id: Creator
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Creator
    path: Objects/Furniture.cs
    startLine: 149
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that created this object in some capacity.\nThis value is based on the underlying <xref href=\"TinyLife.Objects.Furniture.CreatorId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Person Creator { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Creator As Person
  overload: TinyLife.Objects.Furniture.Creator*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)'
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Furniture(Guid, FurnitureType, Int32[], Map, Vector2)
  nameWithType: Furniture.Furniture(Guid, FurnitureType, Int32[], Map, Vector2)
  fullName: TinyLife.Objects.Furniture.Furniture(System.Guid, TinyLife.Objects.FurnitureType, System.Int32[], TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Objects/Furniture.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new furniture instance.\nBy default, this is done using <xref href=\"TinyLife.Objects.FurnitureType.Construct(System.Int32%5b%5d%2cTinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Furniture(Guid id, FurnitureType type, int[] colors, Map map, Vector2 pos)
    parameters:
    - id: id
      type: System.Guid
      description: The id to apply to the created furniture instance
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type to create an instance of
    - id: colors
      type: System.Int32[]
      description: The colors to apply to the furniture
    - id: map
      type: TinyLife.World.Map
      description: The map to create the furniture on
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the furniture should have
    content.vb: Public Sub New(id As Guid, type As FurnitureType, colors As Integer(), map As Map, pos As Vector2)
  overload: TinyLife.Objects.Furniture.#ctor*
  nameWithType.vb: Furniture.Furniture(Guid, FurnitureType, Int32(), Map, Vector2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.Furniture(System.Guid, TinyLife.Objects.FurnitureType, System.Int32(), TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  name.vb: Furniture(Guid, FurnitureType, Int32(), Map, Vector2)
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: Furniture.Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: Objects/Furniture.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this object on the current <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>, at the current <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public sealed override void Draw(GameTime time, SpriteBatch batch, Vector2 drawPos, Color? overrideColor)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw this furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    content.vb: Public NotOverridable Overrides Sub Draw(time As GameTime, batch As SpriteBatch, drawPos As Vector2, overrideColor As Color?)
  overridden: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  overload: TinyLife.Objects.Furniture.Draw*
  nameWithType.vb: Furniture.Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  modifiers.csharp:
  - public
  - sealed
  - override
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
- uid: TinyLife.Objects.Furniture.Validate
  commentId: M:TinyLife.Objects.Furniture.Validate
  id: Validate
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Furniture.Validate()
  fullName: TinyLife.Objects.Furniture.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: Objects/Furniture.cs
    startLine: 207
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\nBy default, this method invokes <xref href=\"TinyLife.Objects.MapObject.OnValidated\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overrides Function Validate As Boolean
  overridden: TinyLife.Objects.MapObject.Validate
  overload: TinyLife.Objects.Furniture.Validate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  id: Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Intersects(RectangleF)
  nameWithType: Furniture.Intersects(RectangleF)
  fullName: TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intersects
    path: Objects/Furniture.cs
    startLine: 234
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this map object intersects with the given rectangle.\nThis is used for <xref href=\"TinyLife.World.Map.GetObjects%60%601(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public override bool Intersects(RectangleF rectangle)
    parameters:
    - id: rectangle
      type: MLEM.Misc.RectangleF
      description: The area that should be checked for
    return:
      type: System.Boolean
      description: true if this object intersects with the given rectangle
    content.vb: Public Overrides Function Intersects(rectangle As RectangleF) As Boolean
  overridden: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  overload: TinyLife.Objects.Furniture.Intersects*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  id: GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetCategories(Person)
  nameWithType: Furniture.GetCategories(Person)
  fullName: TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCategories
    path: Objects/Furniture.cs
    startLine: 239
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this object has, based on the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public sealed override ObjectCategory GetCategories(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories that this object has
    content.vb: Public NotOverridable Overrides Function GetCategories(person As Person) As ObjectCategory
  overridden: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  overload: TinyLife.Objects.Furniture.GetCategories*
  modifiers.csharp:
  - public
  - sealed
  - override
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: TinyLife.Objects.Furniture.OnAdded
  commentId: M:TinyLife.Objects.Furniture.OnAdded
  id: OnAdded
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnAdded()
  nameWithType: Furniture.OnAdded()
  fullName: TinyLife.Objects.Furniture.OnAdded()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnAdded
    path: Objects/Furniture.cs
    startLine: 244
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is added to a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public override void OnAdded()
    content.vb: Public Overrides Sub OnAdded
  overridden: TinyLife.Objects.MapObject.OnAdded
  overload: TinyLife.Objects.Furniture.OnAdded*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.OnRemoved
  commentId: M:TinyLife.Objects.Furniture.OnRemoved
  id: OnRemoved
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnRemoved()
  nameWithType: Furniture.OnRemoved()
  fullName: TinyLife.Objects.Furniture.OnRemoved()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRemoved
    path: Objects/Furniture.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is removed from a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public override void OnRemoved()
    content.vb: Public Overrides Sub OnRemoved
  overridden: TinyLife.Objects.MapObject.OnRemoved
  overload: TinyLife.Objects.Furniture.OnRemoved*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: Furniture.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAiPriority
    path: Objects/Furniture.cs
    startLine: 257
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns an integer that represents a priority for the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref>&apos;s interaction with this object.\nA higher priority means that this object will be picked over other objects (with lower priority).\nThe default return value is 0, meaning that no special priority is assigned to this object.\nFor any <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.SingleBed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.ObjectCategory.DoubleBed\" data-throw-if-not-resolved=\"false\"></xref> category that is the person&apos;s <xref href=\"TinyLife.Objects.Person.LastBedSleptIn\" data-throw-if-not-resolved=\"false\"></xref>, 10 is returned.\n"
  example: []
  syntax:
    content: public override int GetAiPriority(Person person, ObjectCategory categories)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose AI is attempting to interact with this object
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that are relevant for the ai interaction
    return:
      type: System.Int32
      description: This object&apos;s priority
    content.vb: Public Overrides Function GetAiPriority(person As Person, categories As ObjectCategory) As Integer
  overridden: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  overload: TinyLife.Objects.Furniture.GetAiPriority*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.GetVisibility
  commentId: M:TinyLife.Objects.Furniture.GetVisibility
  id: GetVisibility
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetVisibility()
  nameWithType: Furniture.GetVisibility()
  fullName: TinyLife.Objects.Furniture.GetVisibility()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisibility
    path: Objects/Furniture.cs
    startLine: 266
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the visibility settings of this object.\nBy default, <xref href=\"TinyLife.Objects.Visibility.WhenVisible\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nFor <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Visibility\" data-throw-if-not-resolved=\"false\"></xref> is returned instead.\n"
  example: []
  syntax:
    content: public override Visibility GetVisibility()
    return:
      type: TinyLife.Objects.Visibility
      description: This object&apos;s visibility settings
    content.vb: Public Overrides Function GetVisibility As Visibility
  overridden: TinyLife.Objects.MapObject.GetVisibility
  overload: TinyLife.Objects.Furniture.GetVisibility*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnActionCompleted(Action, CompletionType, Boolean)
  nameWithType: Furniture.OnActionCompleted(Action, CompletionType, Boolean)
  fullName: TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionCompleted
    path: Objects/Furniture.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in is completed.\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets <xref href=\"TinyLife.Objects.Furniture.DevaluedThroughUse\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void OnActionCompleted(Action action, CompletionType type, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type of the action&apos;s completion
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Sub OnActionCompleted(action As Action, type As CompletionType, isAuxiliary As Boolean)
  overridden: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  overload: TinyLife.Objects.Furniture.OnActionCompleted*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  id: ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  nameWithType: Furniture.ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  fullName: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: Objects/Furniture.cs
    startLine: 281
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in updates, which is every <xref href=\"Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> frame.\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets deals with <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  example: []
  syntax:
    content: public override void ActionUpdate(Action action, GameTime time, TimeSpan passedInGame, GameSpeed speed, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speed
      type: TinyLife.GameSpeed
      description: The game&apos;s current speed setting
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Sub ActionUpdate(action As Action, time As GameTime, passedInGame As TimeSpan, speed As GameSpeed, isAuxiliary As Boolean)
  overridden: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  overload: TinyLife.Objects.Furniture.ActionUpdate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, Vector2, Nullable<Color>, Direction2, Int32[], Single, Boolean, Furniture, AbstractSpot, Single, Boolean)
  nameWithType: Furniture.Draw(GameTime, SpriteBatch, Vector2, Vector2, Nullable<Color>, Direction2, Int32[], Single, Boolean, Furniture, AbstractSpot, Single, Boolean)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>, MLEM.Misc.Direction2, System.Int32[], System.Single, System.Boolean, TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: Objects/Furniture.cs
    startLine: 311
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this furniture in the world with the given settings.\nThis is a more generalized version of <xref href=\"TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Vector2 pos, Vector2 drawPos, Color? overrideColor, Direction2 rotation, int[] colors, float drawScale, bool pivot, Furniture parent, AbstractSpot parentSpot, float depthOffset, bool held)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space, that the furniture is at
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw the furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: An optional color to override the default colors of the furniture
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation of the furniture
    - id: colors
      type: System.Int32[]
      description: The colors to draw the furniture with
    - id: drawScale
      type: System.Single
      description: The scale to draw the furniture with
    - id: pivot
      type: System.Boolean
      description: Whether or not to move the furniture by its texture&apos;s pivot point
    - id: parent
      type: TinyLife.Objects.Furniture
      description: The object that this furniture is latched on to, or null if there is none
    - id: parentSpot
      type: TinyLife.Objects.AbstractSpot
      description: The object spot that this furntiture is in, or null if there is none
    - id: depthOffset
      type: System.Single
      description: A value that is added onto the calculated depth of the object
    - id: held
      type: System.Boolean
      description: Whether or not this item is currently being held by a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, pos As Vector2, drawPos As Vector2, overrideColor As Color?, rotation As Direction2, colors As Integer(), drawScale As Single, pivot As Boolean, parent As Furniture, parentSpot As AbstractSpot, depthOffset As Single, held As Boolean)
  overload: TinyLife.Objects.Furniture.Draw*
  nameWithType.vb: Furniture.Draw(GameTime, SpriteBatch, Vector2, Vector2, Nullable(Of Color), Direction2, Int32(), Single, Boolean, Furniture, AbstractSpot, Single, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color), MLEM.Misc.Direction2, System.Int32(), System.Single, System.Boolean, TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot, System.Single, System.Boolean)
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Vector2, Nullable(Of Color), Direction2, Int32(), Single, Boolean, Furniture, AbstractSpot, Single, Boolean)
- uid: TinyLife.Objects.Furniture.GetPrice
  commentId: M:TinyLife.Objects.Furniture.GetPrice
  id: GetPrice
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Furniture.GetPrice()
  fullName: TinyLife.Objects.Furniture.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: Objects/Furniture.cs
    startLine: 319
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Overridable Function GetPrice As Single
  overload: TinyLife.Objects.Furniture.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.Furniture.GetDescription
  commentId: M:TinyLife.Objects.Furniture.GetDescription
  id: GetDescription
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDescription()
  nameWithType: Furniture.GetDescription()
  fullName: TinyLife.Objects.Furniture.GetDescription()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDescription
    path: Objects/Furniture.cs
    startLine: 331
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of lines that are displayed in build mode when this furniture is hovered over, either in the buy menu or in the <xref href=\"TinyLife.World.Household.FurnitureStorage\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, info about <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Reliability\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating\" data-throw-if-not-resolved=\"false\"></xref> is returned, and <xref href=\"TinyLife.Objects.Furniture.OnGetDescription\" data-throw-if-not-resolved=\"false\"></xref> is invoked.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<string> GetDescription()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A set of description lines for this furniture item
    content.vb: Public Overridable Function GetDescription As IEnumerable(Of String)
  overload: TinyLife.Objects.Furniture.GetDescription*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  commentId: M:TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  id: GetDecorativeRating(TinyLife.World.Room)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDecorativeRating(Room)
  nameWithType: Furniture.GetDecorativeRating(Room)
  fullName: TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDecorativeRating
    path: Objects/Furniture.cs
    startLine: 363
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the decorative rating of this object in the given room.\nBy default, the underlying <xref href=\"TinyLife.Objects.Furniture.Type\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating\" data-throw-if-not-resolved=\"false\"></xref>, influeced by whether this object is <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>, is returned.\n"
  example: []
  syntax:
    content: public virtual int GetDecorativeRating(Room room)
    parameters:
    - id: room
      type: TinyLife.World.Room
      description: The room that the object is in, or null if it is not in a room at all
    return:
      type: System.Int32
      description: The decorative rating of this object
    content.vb: Public Overridable Function GetDecorativeRating(room As Room) As Integer
  overload: TinyLife.Objects.Furniture.GetDecorativeRating*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  commentId: M:TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  id: GetDirty(System.TimeSpan)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDirty(TimeSpan)
  nameWithType: Furniture.GetDirty(TimeSpan)
  fullName: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDirty
    path: Objects/Furniture.cs
    startLine: 373
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this object to get &quot;more dirty&quot; by increasing a timer and randomly, based on the amount of time that the timer has, turns <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> to true.\nIf this object cannot be dirty (<xref href=\"TinyLife.Objects.Furniture.CanBeDirty\" data-throw-if-not-resolved=\"false\"></xref>), or it is already <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>, this method has no effect.\nBy default, this method is called in <xref href=\"TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cTinyLife.GameSpeed%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> every update frame if this object isn&apos;t already <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void GetDirty(TimeSpan passedInGame)
    parameters:
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that should be simulated in game
    content.vb: Public Overridable Sub GetDirty(passedInGame As TimeSpan)
  overload: TinyLife.Objects.Furniture.GetDirty*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  id: SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCreator
    path: Objects/Furniture.cs
    startLine: 390
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the <xref href=\"TinyLife.Objects.Furniture.CreatorId\" data-throw-if-not-resolved=\"false\"></xref> (and thus, the <xref href=\"TinyLife.Objects.Furniture.Creator\" data-throw-if-not-resolved=\"false\"></xref>) of this furniture item, optionally triggering goals that react to the <xref href=\"TinyLife.Goals.GoalTrigger.FurnitureCreated\" data-throw-if-not-resolved=\"false\"></xref> goal trigger\n"
  example: []
  syntax:
    content: public virtual void SetCreator(Person person, bool triggerGoals = true)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to set as the creator
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.GoalTrigger.FurnitureCreated" data-throw-if-not-resolved="false"></xref> goal triggers should be triggered
    content.vb: Public Overridable Sub SetCreator(person As Person, triggerGoals As Boolean = True)
  overload: TinyLife.Objects.Furniture.SetCreator*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  id: OnNeighborChanged(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnNeighborChanged(Furniture)
  nameWithType: Furniture.OnNeighborChanged(Furniture)
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnNeighborChanged
    path: Objects/Furniture.cs
    startLine: 408
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method gets called when any neighboring furniture changes. The neighboring furniture is passed.\nBy default, this method does nothing, so calling base is not necessary.\n"
  example: []
  syntax:
    content: protected virtual void OnNeighborChanged(Furniture neighbor)
    parameters:
    - id: neighbor
      type: TinyLife.Objects.Furniture
      description: The neighbor furniture that changed
    content.vb: Protected Overridable Sub OnNeighborChanged(neighbor As Furniture)
  overload: TinyLife.Objects.Furniture.OnNeighborChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  commentId: M:TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  id: DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: DrawUi(GameTime, SpriteBatch, Element, Single, Int32[])
  nameWithType: Furniture.DrawUi(GameTime, SpriteBatch, Element, Single, Int32[])
  fullName: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Ui.Elements.Element, System.Single, System.Int32[])
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: Objects/Furniture.cs
    startLine: 420
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this furniture in a ui context, rather than a world context.\nScale is determined based on the element that is passed.\n"
  example: []
  syntax:
    content: public void DrawUi(GameTime time, SpriteBatch batch, Element element, float drawScale, int[] colors)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The element to calculate scaling based on
    - id: drawScale
      type: System.Single
      description: The scale to draw the furniture with
    - id: colors
      type: System.Int32[]
      description: The colors to draw the furniture with
    content.vb: Public Sub DrawUi(time As GameTime, batch As SpriteBatch, element As Element, drawScale As Single, colors As Integer())
  overload: TinyLife.Objects.Furniture.DrawUi*
  nameWithType.vb: Furniture.DrawUi(GameTime, SpriteBatch, Element, Single, Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Ui.Elements.Element, System.Single, System.Int32())
  name.vb: DrawUi(GameTime, SpriteBatch, Element, Single, Int32())
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpots(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpots(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpots
    path: Objects/Furniture.cs
    startLine: 435
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a list of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances that are part of this furniture, which are considered free.\nFree, in this instance, is any spot that has the given category and is not currently occupied by another person.\n"
  example: []
  syntax:
    content: public IEnumerable<(ActionSpot Spot, Direction2 Dir)> GetFreeActionSpots(Person person, ObjectCategory context)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
      description: A set of action spots and the directions which they&apos;re free in
    content.vb: Public Function GetFreeActionSpots(person As Person, context As ObjectCategory) As IEnumerable(Of(Spot As ActionSpot, Dir As Direction2)(Of ActionSpot , Direction2))
  overload: TinyLife.Objects.Furniture.GetFreeActionSpots*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpot(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpot(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpot
    path: Objects/Furniture.cs
    startLine: 451
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot from <xref href=\"TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (ActionSpot, Direction2) GetFreeActionSpot(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
      description: A free action spot and the direction it&apos;s free in, or an empty tuple if there is no free action spot
    content.vb: Public Function GetFreeActionSpot(person As Person, context As ObjectCategory = Nothing) As(ActionSpot, Direction2)(Of ActionSpot , Direction2)
  overload: TinyLife.Objects.Furniture.GetFreeActionSpot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: Objects/Furniture.cs
    startLine: 458
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot, packed into an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override ActionInfo GetFreeActionSpotInfo(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The first free action spot as an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Function GetFreeActionSpotInfo(person As Person, context As ObjectCategory = Nothing) As ActionInfo
  overridden: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  overload: TinyLife.Objects.Furniture.GetFreeActionSpotInfo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  id: GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetActionSpotInfo(Person, ActionSpot, Direction2)
  nameWithType: Furniture.GetActionSpotInfo(Person, ActionSpot, Direction2)
  fullName: TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetActionSpotInfo
    path: Objects/Furniture.cs
    startLine: 470
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to the given <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> and rotation\n"
  example: []
  syntax:
    content: public ActionInfo GetActionSpotInfo(Person person, ActionSpot spot, Direction2 direction = Direction2.None)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to return an info for
    - id: direction
      type: MLEM.Misc.Direction2
      description: The direction to offset the <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref> by. Defaults to <xref href="MLEM.Misc.Direction2.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given settings
    content.vb: Public Function GetActionSpotInfo(person As Person, spot As ActionSpot, direction As Direction2 = Direction2.None) As ActionInfo
  overload: TinyLife.Objects.Furniture.GetActionSpotInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeObjectSpot(FurnitureType, Nullable<Vector2>)
  nameWithType: Furniture.GetFreeObjectSpot(FurnitureType, Nullable<Vector2>)
  fullName: TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeObjectSpot
    path: Objects/Furniture.cs
    startLine: 482
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on this furniture.\nFree, in this case, is any object spot that isn&apos;t already occupied by a different furniture.\n"
  example: []
  syntax:
    content: public ObjectSpot GetFreeObjectSpot(FurnitureType type, Vector2? position = default(Vector2? ))
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The furniture type to find a free object spot for
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot should be closest too. If null, no position will be preferred. Defaults to null.
    return:
      type: TinyLife.Objects.ObjectSpot
      description: A free object spot, or null if there is none
    content.vb: Public Function GetFreeObjectSpot(type As FurnitureType, position As Vector2? = Nothing) As ObjectSpot
  overload: TinyLife.Objects.Furniture.GetFreeObjectSpot*
  nameWithType.vb: Furniture.GetFreeObjectSpot(FurnitureType, Nullable(Of Vector2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2))
  name.vb: GetFreeObjectSpot(FurnitureType, Nullable(Of Vector2))
- uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  commentId: M:TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  id: SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetParent(Furniture, ObjectSpot)
  nameWithType: Furniture.SetParent(Furniture, ObjectSpot)
  fullName: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetParent
    path: Objects/Furniture.cs
    startLine: 496
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the parent of this furniture, changing its <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> and settings its <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> value.\nNote that this does not add the object to the map (<xref href=\"TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>).\nWhen modifying furniture in the world, it is preferred to use <xref href=\"TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot%2cTinyLife.Objects.Furniture%2cMLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref> on the parent furniture instead.\n"
  example: []
  syntax:
    content: public void SetParent(Furniture parent, ObjectSpot spot)
    parameters:
    - id: parent
      type: TinyLife.Objects.Furniture
      description: The parent furniture to slot into
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The object spot to slot into
    content.vb: Public Sub SetParent(parent As Furniture, spot As ObjectSpot)
  overload: TinyLife.Objects.Furniture.SetParent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  id: UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UnlinkParentsAndChildren
    path: Objects/Furniture.cs
    startLine: 510
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nUnlinks this object from its parents and its children by setting its <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> to their default values and doing the same for all of its children (<xref href=\"TinyLife.Objects.Furniture.GetChildren%60%601\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public void UnlinkParentsAndChildren()
    content.vb: Public Sub UnlinkParentsAndChildren
  overload: TinyLife.Objects.Furniture.UnlinkParentsAndChildren*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink
  commentId: M:TinyLife.Objects.Furniture.RemoveAndUnlink
  id: RemoveAndUnlink
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: RemoveAndUnlink()
  nameWithType: Furniture.RemoveAndUnlink()
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveAndUnlink
    path: Objects/Furniture.cs
    startLine: 520
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA compound helper method that calls <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref>.\nFor furniture that is being removed from the world entirely, this method is usually preferred over <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void RemoveAndUnlink()
    content.vb: Public Sub RemoveAndUnlink
  overload: TinyLife.Objects.Furniture.RemoveAndUnlink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  id: GetChildren``1
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetChildren
    path: Objects/Furniture.cs
    startLine: 530
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a list of all of the children of this furniture.\nChildren are all furnitures in the world that have their <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> set to this furniture instance.\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetChildren<T>()
          where T : MapObject
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A list of this furniture&apos;s children
    content.vb: Public Function GetChildren(Of T As MapObject) As IEnumerable(Of T)
  overload: TinyLife.Objects.Furniture.GetChildren*
  nameWithType.vb: Furniture.GetChildren(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
- uid: TinyLife.Objects.Furniture.RemoveChildren``1(System.Predicate{``0})
  commentId: M:TinyLife.Objects.Furniture.RemoveChildren``1(System.Predicate{``0})
  id: RemoveChildren``1(System.Predicate{``0})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: RemoveChildren<T>(Predicate<T>)
  nameWithType: Furniture.RemoveChildren<T>(Predicate<T>)
  fullName: TinyLife.Objects.Furniture.RemoveChildren<T>(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveChildren
    path: Objects/Furniture.cs
    startLine: 541
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRemoves all of the children from this furniture that match the given predicate.\nChildren are all furnitures in the world that have their <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> set to this furniture instance.\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> RemoveChildren<T>(Predicate<T> predicate = null)
          where T : Furniture
    parameters:
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate to check children against. If null, all children will be removed.
    typeParameters:
    - id: T
      description: The type of children to remove
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The children that were removed from this furniture
    content.vb: Public Function RemoveChildren(Of T As Furniture)(predicate As Predicate(Of T) = Nothing) As IEnumerable(Of T)
  overload: TinyLife.Objects.Furniture.RemoveChildren*
  nameWithType.vb: Furniture.RemoveChildren(Of T)(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.RemoveChildren(Of T)(System.Predicate(Of T))
  name.vb: RemoveChildren(Of T)(Predicate(Of T))
- uid: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  id: RemoveChild(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: RemoveChild(Furniture)
  nameWithType: Furniture.RemoveChild(Furniture)
  fullName: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveChild
    path: Objects/Furniture.cs
    startLine: 555
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRemoves the given child from the world and sets its <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> to their default values, unlinking it from this object\n"
  example: []
  syntax:
    content: public bool RemoveChild(Furniture child)
    parameters:
    - id: child
      type: TinyLife.Objects.Furniture
      description: The child to remove
    return:
      type: System.Boolean
      description: Whether the object was actually a child of this furniture (true) or not (false)
    content.vb: Public Function RemoveChild(child As Furniture) As Boolean
  overload: TinyLife.Objects.Furniture.RemoveChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AddChild<T>(FurnitureType, Direction2, Int32[], Nullable<Guid>, Nullable<Vector2>)
  nameWithType: Furniture.AddChild<T>(FurnitureType, Direction2, Int32[], Nullable<Guid>, Nullable<Vector2>)
  fullName: TinyLife.Objects.Furniture.AddChild<T>(TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, System.Int32[], System.Nullable<System.Guid>, System.Nullable<Microsoft.Xna.Framework.Vector2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddChild
    path: Objects/Furniture.cs
    startLine: 574
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds a child to this furniture, setting its parent (<xref href=\"TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectSpot)\" data-throw-if-not-resolved=\"false\"></xref>) to this furniture.\n"
  example: []
  syntax:
    content: >-
      public T AddChild<T>(FurnitureType type, Direction2 rotation, int[] colors = null, Guid? id = default(Guid? ), Vector2? position = default(Vector2? ))
          where T : Furniture
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type of furniture to construct as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture
    - id: colors
      type: System.Int32[]
      description: The colors that the child should have
    - id: id
      type: System.Nullable{System.Guid}
      description: The id that the child should have, random by default
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot to add this child to should be closest too. If null, no position will be preferred. Defaults to null.
    typeParameters:
    - id: T
      description: The type of furniture that the child is
    return:
      type: '{T}'
      description: The child that was added, or null if it doesn&apos;t match the type specified
    content.vb: Public Function AddChild(Of T As Furniture)(type As FurnitureType, rotation As Direction2, colors As Integer() = Nothing, id As Guid? = Nothing, position As Vector2? = Nothing) As T
  overload: TinyLife.Objects.Furniture.AddChild*
  nameWithType.vb: Furniture.AddChild(Of T)(FurnitureType, Direction2, Int32(), Nullable(Of Guid), Nullable(Of Vector2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.AddChild(Of T)(TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, System.Int32(), System.Nullable(Of System.Guid), System.Nullable(Of Microsoft.Xna.Framework.Vector2))
  name.vb: AddChild(Of T)(FurnitureType, Direction2, Int32(), Nullable(Of Guid), Nullable(Of Vector2))
- uid: TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AddChild(Furniture, Direction2, Nullable<Vector2>)
  nameWithType: Furniture.AddChild(Furniture, Direction2, Nullable<Vector2>)
  fullName: TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture, MLEM.Misc.Direction2, System.Nullable<Microsoft.Xna.Framework.Vector2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddChild
    path: Objects/Furniture.cs
    startLine: 589
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds a child to this furniture, setting its parent (<xref href=\"TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectSpot)\" data-throw-if-not-resolved=\"false\"></xref>) to this furniture and adding it to this furniture&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nThe object spot selected is the first available object spot.\n"
  example: []
  syntax:
    content: public bool AddChild(Furniture item, Direction2 rotation, Vector2? position = default(Vector2? ))
    parameters:
    - id: item
      type: TinyLife.Objects.Furniture
      description: The furniture to add as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation that the furniture should have, can be the same as the previous rotation
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot to add this child to should be closest too. If null, no position will be preferred. Defaults to null.
    return:
      type: System.Boolean
      description: If there was a free object spot to add the furniture to
    content.vb: Public Function AddChild(item As Furniture, rotation As Direction2, position As Vector2? = Nothing) As Boolean
  overload: TinyLife.Objects.Furniture.AddChild*
  nameWithType.vb: Furniture.AddChild(Furniture, Direction2, Nullable(Of Vector2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture, MLEM.Misc.Direction2, System.Nullable(Of Microsoft.Xna.Framework.Vector2))
  name.vb: AddChild(Furniture, Direction2, Nullable(Of Vector2))
- uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  commentId: M:TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  id: SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetChild(ObjectSpot, FurnitureType, Direction2, Int32[], Nullable<Guid>)
  nameWithType: Furniture.SetChild(ObjectSpot, FurnitureType, Direction2, Int32[], Nullable<Guid>)
  fullName: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, System.Int32[], System.Nullable<System.Guid>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetChild
    path: Objects/Furniture.cs
    startLine: 606
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the child element in the given object spot to the given furniture and adds it to this furniture&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nIf there are already children in the given object spot, those are removed prior to adding the new child.\n"
  example: []
  syntax:
    content: public void SetChild(ObjectSpot spot, FurnitureType type, Direction2 rotation, int[] colors = null, Guid? id = default(Guid? ))
    parameters:
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The spot to add the child to
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type of furniture to construct as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture
    - id: colors
      type: System.Int32[]
      description: The colors that the child should have
    - id: id
      type: System.Nullable{System.Guid}
      description: The id that the child should have, random by default
    content.vb: Public Sub SetChild(spot As ObjectSpot, type As FurnitureType, rotation As Direction2, colors As Integer() = Nothing, id As Guid? = Nothing)
  overload: TinyLife.Objects.Furniture.SetChild*
  nameWithType.vb: Furniture.SetChild(ObjectSpot, FurnitureType, Direction2, Int32(), Nullable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, System.Int32(), System.Nullable(Of System.Guid))
  name.vb: SetChild(ObjectSpot, FurnitureType, Direction2, Int32(), Nullable(Of Guid))
- uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  id: SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetChild(ObjectSpot, Furniture, Direction2)
  nameWithType: Furniture.SetChild(ObjectSpot, Furniture, Direction2)
  fullName: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.Furniture, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetChild
    path: Objects/Furniture.cs
    startLine: 617
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the child element in the given object spot to the given furniture and adds it to this furniture&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nIf there are already children in the given object spot, those are removed prior to adding the new child.\n"
  example: []
  syntax:
    content: public void SetChild(ObjectSpot spot, Furniture item, Direction2 rotation)
    parameters:
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The spot to add the child to
    - id: item
      type: TinyLife.Objects.Furniture
      description: The furniture to add to the spot
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture
    content.vb: Public Sub SetChild(spot As ObjectSpot, item As Furniture, rotation As Direction2)
  overload: TinyLife.Objects.Furniture.SetChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.NotifyNeighbors
  commentId: M:TinyLife.Objects.Furniture.NotifyNeighbors
  id: NotifyNeighbors
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: NotifyNeighbors()
  nameWithType: Furniture.NotifyNeighbors()
  fullName: TinyLife.Objects.Furniture.NotifyNeighbors()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotifyNeighbors
    path: Objects/Furniture.cs
    startLine: 629
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nNotifies all of the neighboring <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects of a change by calling their <xref href=\"TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref> methods.\nThis is used by things like fences, which change their orientation if their neighbors are added or removed.\n"
  example: []
  syntax:
    content: public void NotifyNeighbors()
    content.vb: Public Sub NotifyNeighbors
  overload: TinyLife.Objects.Furniture.NotifyNeighbors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  commentId: M:TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  id: SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetNewId(IEnumerable<Furniture>)
  nameWithType: Furniture.SetNewId(IEnumerable<Furniture>)
  fullName: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetNewId
    path: Objects/Furniture.cs
    startLine: 642
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAssigns a new, randomly generated <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to this furniture item&apos;s <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> and additionally updates the <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> relation of any objects passed that might be children of this object.\nWhen assigning a new id, it usually makes sense to pass all of the objects in this furniture item&apos;s vicinity, or all of the objects that might otherwise be attached to it.\nNote that objects which are passed as <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibleChildren</code> that aren&apos;t children of this object are ignored.\n"
  example: []
  syntax:
    content: public void SetNewId(IEnumerable<Furniture> possibleChildren = null)
    parameters:
    - id: possibleChildren
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of furniture items that might (but do not have to be) children of this furniture
    content.vb: Public Sub SetNewId(possibleChildren As IEnumerable(Of Furniture) = Nothing)
  overload: TinyLife.Objects.Furniture.SetNewId*
  nameWithType.vb: Furniture.SetNewId(IEnumerable(Of Furniture))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture))
  name.vb: SetNewId(IEnumerable(Of Furniture))
references:
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  commentId: M:TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: TinyLife.Objects.MapObject.PersonRotationOrder
  commentId: F:TinyLife.Objects.MapObject.PersonRotationOrder
  parent: TinyLife.Objects.MapObject
  name: PersonRotationOrder
  nameWithType: MapObject.PersonRotationOrder
  fullName: TinyLife.Objects.MapObject.PersonRotationOrder
- uid: TinyLife.Objects.MapObject.OnCreated
  commentId: E:TinyLife.Objects.MapObject.OnCreated
  parent: TinyLife.Objects.MapObject
  name: OnCreated
  nameWithType: MapObject.OnCreated
  fullName: TinyLife.Objects.MapObject.OnCreated
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  parent: TinyLife.Objects.MapObject
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
- uid: TinyLife.Objects.MapObject.OnDraw
  commentId: E:TinyLife.Objects.MapObject.OnDraw
  parent: TinyLife.Objects.MapObject
  name: OnDraw
  nameWithType: MapObject.OnDraw
  fullName: TinyLife.Objects.MapObject.OnDraw
- uid: TinyLife.Objects.MapObject.OnUpdate
  commentId: E:TinyLife.Objects.MapObject.OnUpdate
  parent: TinyLife.Objects.MapObject
  name: OnUpdate
  nameWithType: MapObject.OnUpdate
  fullName: TinyLife.Objects.MapObject.OnUpdate
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  parent: TinyLife.Objects.MapObject
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  parent: TinyLife.Objects.MapObject
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: TinyLife.Objects.MapObject.GetHoverInfo
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo
  parent: TinyLife.Objects.MapObject
  name: GetHoverInfo()
  nameWithType: MapObject.GetHoverInfo()
  fullName: TinyLife.Objects.MapObject.GetHoverInfo()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo
    name: GetHoverInfo
    nameWithType: MapObject.GetHoverInfo
    fullName: TinyLife.Objects.MapObject.GetHoverInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo
    name: GetHoverInfo
    nameWithType: MapObject.GetHoverInfo
    fullName: TinyLife.Objects.MapObject.GetHoverInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: MapObject.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
    nameWithType: MapObject.OnCameraRotationChanged
    fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
    nameWithType: MapObject.OnCameraRotationChanged
    fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  parent: TinyLife.Objects.MapObject
  name: SetMapAndValidate(Map)
  nameWithType: MapObject.SetMapAndValidate(Map)
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
    nameWithType: MapObject.SetMapAndValidate
    fullName: TinyLife.Objects.MapObject.SetMapAndValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
    nameWithType: MapObject.SetMapAndValidate
    fullName: TinyLife.Objects.MapObject.SetMapAndValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: HasCategory(Person, ObjectCategory)
  nameWithType: MapObject.HasCategory(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
    nameWithType: MapObject.HasCategory
    fullName: TinyLife.Objects.MapObject.HasCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
    nameWithType: MapObject.HasCategory
    fullName: TinyLife.Objects.MapObject.HasCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  nameWithType: MapObject.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Skills.SkillType, System.Single)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: MapObject.GetEfficiencyModifier
    fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: MapObject.GetEfficiencyModifier
    fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, Furniture, AbstractSpot, Direction2, Single, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: MapObject.DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, Furniture, AbstractSpot, Direction2, Single, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, System.Single, Microsoft.Xna.Framework.Point, System.Boolean, TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot, MLEM.Misc.Direction2, System.Single, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetModCategory(String)
  nameWithType: MapObject.GetModCategory(String)
  fullName: TinyLife.Objects.MapObject.GetModCategory(System.String)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Furniture>()
  nameWithType: Extensions.JsonCopy<Furniture>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Furniture>()
  nameWithType.vb: Extensions.JsonCopy(Of Furniture)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Furniture)()
  name.vb: JsonCopy(Of Furniture)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Furniture>
    nameWithType: Extensions.JsonCopy<Furniture>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Furniture>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Furniture)
    nameWithType: Extensions.JsonCopy(Of Furniture)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Furniture)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  name: GetTimeSpan(String)
  nameWithType: Extensions.GetTimeSpan(String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.IGenericDataHolder.TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  name: SetTimeSpan(String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  commentId: M:TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
  isExternal: true
  name: GetTimeSpan(IGenericDataHolder, String)
  nameWithType: Extensions.GetTimeSpan(IGenericDataHolder, String)
  fullName: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String)
    name: GetTimeSpan
    nameWithType: Extensions.GetTimeSpan
    fullName: TinyLife.Utilities.Extensions.GetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
  isExternal: true
  name: SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  nameWithType: Extensions.SetTimeSpan(IGenericDataHolder, String, TimeSpan)
  fullName: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder, System.String, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.SetTimeSpan(MLEM.Misc.IGenericDataHolder,System.String,System.TimeSpan)
    name: SetTimeSpan
    nameWithType: Extensions.SetTimeSpan
    fullName: TinyLife.Utilities.Extensions.SetTimeSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.IGenericDataHolder
    name: IGenericDataHolder
    nameWithType: IGenericDataHolder
    fullName: MLEM.Misc.IGenericDataHolder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Furniture.Random
  commentId: F:TinyLife.Objects.Furniture.Random
  parent: TinyLife.Objects.Furniture
  name: Random
  nameWithType: Furniture.Random
  fullName: TinyLife.Objects.Furniture.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.GetDescription
  commentId: M:TinyLife.Objects.Furniture.GetDescription
  parent: TinyLife.Objects.Furniture
  name: GetDescription()
  nameWithType: Furniture.GetDescription()
  fullName: TinyLife.Objects.Furniture.GetDescription()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetDescription
    name: GetDescription
    nameWithType: Furniture.GetDescription
    fullName: TinyLife.Objects.Furniture.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetDescription
    name: GetDescription
    nameWithType: Furniture.GetDescription
    fullName: TinyLife.Objects.Furniture.GetDescription
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Collections.Generic.List{System.String}}
  commentId: T:System.Action{System.Collections.Generic.List{System.String}}
  parent: System
  definition: System.Action`1
  name: Action<List<String>>
  nameWithType: Action<List<String>>
  fullName: System.Action<System.Collections.Generic.List<System.String>>
  nameWithType.vb: Action(Of List(Of String))
  fullName.vb: System.Action(Of System.Collections.Generic.List(Of System.String))
  name.vb: Action(Of List(Of String))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
  commentId: T:System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
  parent: System
  definition: System.Action`3
  name: Action<Person, Boolean, EventPhase>
  nameWithType: Action<Person, Boolean, EventPhase>
  fullName: System.Action<TinyLife.Objects.Person, System.Boolean, TinyLife.Mods.EventPhase>
  nameWithType.vb: Action(Of Person, Boolean, EventPhase)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, System.Boolean, TinyLife.Mods.EventPhase)
  name.vb: Action(Of Person, Boolean, EventPhase)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  commentId: M:TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: GetDirty(TimeSpan)
  nameWithType: Furniture.GetDirty(TimeSpan)
  fullName: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
    name: GetDirty
    nameWithType: Furniture.GetDirty
    fullName: TinyLife.Objects.Furniture.GetDirty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetDirty(System.TimeSpan)
    name: GetDirty
    nameWithType: Furniture.GetDirty
    fullName: TinyLife.Objects.Furniture.GetDirty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.TimeSpan}
  commentId: T:System.Action{System.TimeSpan}
  parent: System
  definition: System.Action`1
  name: Action<TimeSpan>
  nameWithType: Action<TimeSpan>
  fullName: System.Action<System.TimeSpan>
  nameWithType.vb: Action(Of TimeSpan)
  fullName.vb: System.Action(Of System.TimeSpan)
  name.vb: Action(Of TimeSpan)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  parent: TinyLife.Objects.Furniture
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Furniture.ParentObjectSpot
  commentId: P:TinyLife.Objects.Furniture.ParentObjectSpot
  parent: TinyLife.Objects.Furniture
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
- uid: TinyLife.Objects.Furniture.ParentFurniture*
  commentId: Overload:TinyLife.Objects.Furniture.ParentFurniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  parent: TinyLife.Objects.Furniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.Furniture.ParentObjectSpot*
  commentId: Overload:TinyLife.Objects.Furniture.ParentObjectSpot
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
- uid: TinyLife.Objects.Furniture.HasParent*
  commentId: Overload:TinyLife.Objects.Furniture.HasParent
  name: HasParent
  nameWithType: Furniture.HasParent
  fullName: TinyLife.Objects.Furniture.HasParent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  isExternal: true
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
  isExternal: true
- uid: TinyLife.Objects.Furniture.Area*
  commentId: Overload:TinyLife.Objects.Furniture.Area
  name: Area
  nameWithType: Furniture.Area
  fullName: TinyLife.Objects.Furniture.Area
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  parent: TinyLife.Objects.AbstractSpot
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: TinyLife.Objects.Furniture.VisualPosition*
  commentId: Overload:TinyLife.Objects.Furniture.VisualPosition
  name: VisualPosition
  nameWithType: Furniture.VisualPosition
  fullName: TinyLife.Objects.Furniture.VisualPosition
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetPrice
  commentId: M:TinyLife.Objects.Furniture.GetPrice
  parent: TinyLife.Objects.Furniture
  name: GetPrice()
  nameWithType: Furniture.GetPrice()
  fullName: TinyLife.Objects.Furniture.GetPrice()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetPrice
    name: GetPrice
    nameWithType: Furniture.GetPrice
    fullName: TinyLife.Objects.Furniture.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetPrice
    name: GetPrice
    nameWithType: Furniture.GetPrice
    fullName: TinyLife.Objects.Furniture.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  isExternal: true
- uid: TinyLife.Objects.Furniture.AreUtilitiesDisabled*
  commentId: Overload:TinyLife.Objects.Furniture.AreUtilitiesDisabled
  name: AreUtilitiesDisabled
  nameWithType: Furniture.AreUtilitiesDisabled
  fullName: TinyLife.Objects.Furniture.AreUtilitiesDisabled
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
  isExternal: true
- uid: TinyLife.Objects.Furniture.Creator
  commentId: P:TinyLife.Objects.Furniture.Creator
  parent: TinyLife.Objects.Furniture
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
- uid: TinyLife.Objects.Furniture.CreatorId*
  commentId: Overload:TinyLife.Objects.Furniture.CreatorId
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
- uid: TinyLife.Objects.Food
  commentId: T:TinyLife.Objects.Food
  parent: TinyLife.Objects
  name: Food
  nameWithType: Food
  fullName: TinyLife.Objects.Food
- uid: TinyLife.Objects.Painting
  commentId: T:TinyLife.Objects.Painting
  name: Painting
  nameWithType: Painting
  fullName: TinyLife.Objects.Painting
- uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  name: GetPriceModifier(Quality)
  nameWithType: Extensions.GetPriceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
    name: GetPriceModifier
    nameWithType: Extensions.GetPriceModifier
    fullName: TinyLife.Utilities.Extensions.GetPriceModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Skills.Quality
    name: Quality
    nameWithType: Quality
    fullName: TinyLife.Skills.Quality
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
    name: GetPriceModifier
    nameWithType: Extensions.GetPriceModifier
    fullName: TinyLife.Utilities.Extensions.GetPriceModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Skills.Quality
    name: Quality
    nameWithType: Quality
    fullName: TinyLife.Skills.Quality
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{TinyLife.Skills.Quality}
  commentId: T:System.Nullable{TinyLife.Skills.Quality}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Quality>
  nameWithType: Nullable<Quality>
  fullName: System.Nullable<TinyLife.Skills.Quality>
  nameWithType.vb: Nullable(Of Quality)
  fullName.vb: System.Nullable(Of TinyLife.Skills.Quality)
  name.vb: Nullable(Of Quality)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.Quality
    name: Quality
    nameWithType: Quality
    fullName: TinyLife.Skills.Quality
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.Quality
    name: Quality
    nameWithType: Quality
    fullName: TinyLife.Skills.Quality
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.CanBeDirty*
  commentId: Overload:TinyLife.Objects.Furniture.CanBeDirty
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
- uid: TinyLife.Objects.Furniture.CanBeDirty
  commentId: P:TinyLife.Objects.Furniture.CanBeDirty
  parent: TinyLife.Objects.Furniture
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.CreatorId
  commentId: P:TinyLife.Objects.Furniture.CreatorId
  parent: TinyLife.Objects.Furniture
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
- uid: TinyLife.Objects.Furniture.Creator*
  commentId: Overload:TinyLife.Objects.Furniture.Creator
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
- uid: TinyLife.Objects.FurnitureType.Construct(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
  commentId: M:TinyLife.Objects.FurnitureType.Construct(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
  isExternal: true
- uid: TinyLife.Objects.Furniture.#ctor*
  commentId: Overload:TinyLife.Objects.Furniture.#ctor
  name: Furniture
  nameWithType: Furniture.Furniture
  fullName: TinyLife.Objects.Furniture.Furniture
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  nameWithType.vb: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.Draw*
  commentId: Overload:TinyLife.Objects.Furniture.Draw
  name: Draw
  nameWithType: Furniture.Draw
  fullName: TinyLife.Objects.Furniture.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  parent: TinyLife.Objects.MapObject
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.Validate*
  commentId: Overload:TinyLife.Objects.Furniture.Validate
  name: Validate
  nameWithType: Furniture.Validate
  fullName: TinyLife.Objects.Furniture.Validate
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
    nameWithType: MapObject.Intersects
    fullName: TinyLife.Objects.MapObject.Intersects
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
    nameWithType: MapObject.Intersects
    fullName: TinyLife.Objects.MapObject.Intersects
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.Intersects*
  commentId: Overload:TinyLife.Objects.Furniture.Intersects
  name: Intersects
  nameWithType: Furniture.Intersects
  fullName: TinyLife.Objects.Furniture.Intersects
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetCategories*
  commentId: Overload:TinyLife.Objects.Furniture.GetCategories
  name: GetCategories
  nameWithType: Furniture.GetCategories
  fullName: TinyLife.Objects.Furniture.GetCategories
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.MapObject.OnAdded
  commentId: M:TinyLife.Objects.MapObject.OnAdded
  parent: TinyLife.Objects.MapObject
  name: OnAdded()
  nameWithType: MapObject.OnAdded()
  fullName: TinyLife.Objects.MapObject.OnAdded()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
    nameWithType: MapObject.OnAdded
    fullName: TinyLife.Objects.MapObject.OnAdded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
    nameWithType: MapObject.OnAdded
    fullName: TinyLife.Objects.MapObject.OnAdded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.OnAdded*
  commentId: Overload:TinyLife.Objects.Furniture.OnAdded
  name: OnAdded
  nameWithType: Furniture.OnAdded
  fullName: TinyLife.Objects.Furniture.OnAdded
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  parent: TinyLife.Objects.MapObject
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.OnRemoved*
  commentId: Overload:TinyLife.Objects.Furniture.OnRemoved
  name: OnRemoved
  nameWithType: Furniture.OnRemoved
  fullName: TinyLife.Objects.Furniture.OnRemoved
- uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: MapObject.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
    nameWithType: MapObject.GetAiPriority
    fullName: TinyLife.Objects.MapObject.GetAiPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
    nameWithType: MapObject.GetAiPriority
    fullName: TinyLife.Objects.MapObject.GetAiPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetAiPriority*
  commentId: Overload:TinyLife.Objects.Furniture.GetAiPriority
  name: GetAiPriority
  nameWithType: Furniture.GetAiPriority
  fullName: TinyLife.Objects.Furniture.GetAiPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.MapObject.GetVisibility
  commentId: M:TinyLife.Objects.MapObject.GetVisibility
  parent: TinyLife.Objects.MapObject
  name: GetVisibility()
  nameWithType: MapObject.GetVisibility()
  fullName: TinyLife.Objects.MapObject.GetVisibility()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetVisibility
    name: GetVisibility
    nameWithType: MapObject.GetVisibility
    fullName: TinyLife.Objects.MapObject.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetVisibility
    name: GetVisibility
    nameWithType: MapObject.GetVisibility
    fullName: TinyLife.Objects.MapObject.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetVisibility*
  commentId: Overload:TinyLife.Objects.Furniture.GetVisibility
  name: GetVisibility
  nameWithType: Furniture.GetVisibility
  fullName: TinyLife.Objects.Furniture.GetVisibility
- uid: TinyLife.Objects.Visibility
  commentId: T:TinyLife.Objects.Visibility
  parent: TinyLife.Objects
  name: Visibility
  nameWithType: Visibility
  fullName: TinyLife.Objects.Visibility
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnActionCompleted(Action, CompletionType, Boolean)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    nameWithType: MapObject.OnActionCompleted
    fullName: TinyLife.Objects.MapObject.OnActionCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    nameWithType: MapObject.OnActionCompleted
    fullName: TinyLife.Objects.MapObject.OnActionCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.OnActionCompleted*
  commentId: Overload:TinyLife.Objects.Furniture.OnActionCompleted
  name: OnActionCompleted
  nameWithType: Furniture.OnActionCompleted
  fullName: TinyLife.Objects.Furniture.OnActionCompleted
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Objects.Furniture.ActionUpdate*
  commentId: Overload:TinyLife.Objects.Furniture.ActionUpdate
  name: ActionUpdate
  nameWithType: Furniture.ActionUpdate
  fullName: TinyLife.Objects.Furniture.ActionUpdate
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.GameSpeed
  commentId: T:TinyLife.GameSpeed
  parent: TinyLife
  name: GameSpeed
  nameWithType: GameSpeed
  fullName: TinyLife.GameSpeed
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: Furniture.Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  nameWithType.vb: Furniture.Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Furniture.Draw
    fullName: TinyLife.Objects.Furniture.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Furniture.Draw
    fullName: TinyLife.Objects.Furniture.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.Furniture.GetPrice*
  commentId: Overload:TinyLife.Objects.Furniture.GetPrice
  name: GetPrice
  nameWithType: Furniture.GetPrice
  fullName: TinyLife.Objects.Furniture.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.FurnitureStorage
  commentId: F:TinyLife.World.Household.FurnitureStorage
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  isExternal: true
- uid: TinyLife.Objects.Furniture.OnGetDescription
  commentId: E:TinyLife.Objects.Furniture.OnGetDescription
  parent: TinyLife.Objects.Furniture
  name: OnGetDescription
  nameWithType: Furniture.OnGetDescription
  fullName: TinyLife.Objects.Furniture.OnGetDescription
- uid: TinyLife.Objects.Furniture.GetDescription*
  commentId: Overload:TinyLife.Objects.Furniture.GetDescription
  name: GetDescription
  nameWithType: Furniture.GetDescription
  fullName: TinyLife.Objects.Furniture.GetDescription
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.Furniture.Type
  commentId: F:TinyLife.Objects.Furniture.Type
  parent: TinyLife.Objects.Furniture
  name: Type
  nameWithType: Furniture.Type
  fullName: TinyLife.Objects.Furniture.Type
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  isExternal: true
- uid: TinyLife.Objects.Furniture.GetDecorativeRating*
  commentId: Overload:TinyLife.Objects.Furniture.GetDecorativeRating
  name: GetDecorativeRating
  nameWithType: Furniture.GetDecorativeRating
  fullName: TinyLife.Objects.Furniture.GetDecorativeRating
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  nameWithType: Furniture.ActionUpdate(Action, GameTime, TimeSpan, GameSpeed, Boolean)
  fullName: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, TinyLife.GameSpeed, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: Furniture.ActionUpdate
    fullName: TinyLife.Objects.Furniture.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,TinyLife.GameSpeed,System.Boolean)
    name: ActionUpdate
    nameWithType: Furniture.ActionUpdate
    fullName: TinyLife.Objects.Furniture.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.GameSpeed
    name: GameSpeed
    nameWithType: GameSpeed
    fullName: TinyLife.GameSpeed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetDirty*
  commentId: Overload:TinyLife.Objects.Furniture.GetDirty
  name: GetDirty
  nameWithType: Furniture.GetDirty
  fullName: TinyLife.Objects.Furniture.GetDirty
- uid: TinyLife.Goals.GoalTrigger.FurnitureCreated
  commentId: F:TinyLife.Goals.GoalTrigger.FurnitureCreated
  isExternal: true
- uid: TinyLife.Objects.Furniture.SetCreator*
  commentId: Overload:TinyLife.Objects.Furniture.SetCreator
  name: SetCreator
  nameWithType: Furniture.SetCreator
  fullName: TinyLife.Objects.Furniture.SetCreator
- uid: TinyLife.Objects.Furniture.OnNeighborChanged*
  commentId: Overload:TinyLife.Objects.Furniture.OnNeighborChanged
  name: OnNeighborChanged
  nameWithType: Furniture.OnNeighborChanged
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged
- uid: TinyLife.Objects.Furniture.DrawUi*
  commentId: Overload:TinyLife.Objects.Furniture.DrawUi
  name: DrawUi
  nameWithType: Furniture.DrawUi
  fullName: TinyLife.Objects.Furniture.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpots
  name: GetFreeActionSpots
  nameWithType: Furniture.GetFreeActionSpots
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<ActionSpot, Direction2>>
  nameWithType: IEnumerable<(T1, T2)<ActionSpot, Direction2>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of ActionSpot, Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (T1, T2)(Of ActionSpot, Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  name: GetFreeActionSpots(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpots(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
    nameWithType: Furniture.GetFreeActionSpots
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
    nameWithType: Furniture.GetFreeActionSpots
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpot*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpot
  name: GetFreeActionSpot
  nameWithType: Furniture.GetFreeActionSpot
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpot
- uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<ActionSpot, Direction2>
  nameWithType: (T1, T2)<ActionSpot, Direction2>
  fullName: System.ValueTuple<TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2>
  nameWithType.vb: (T1, T2)(Of ActionSpot, Direction2)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2)
  name.vb: (T1, T2)(Of ActionSpot, Direction2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: MapObject.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: MapObject.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: Furniture.GetFreeActionSpotInfo
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionInfo.ActionLocation
  commentId: F:TinyLife.Actions.ActionInfo.ActionLocation
  isExternal: true
- uid: MLEM.Misc.Direction2.None
  commentId: F:MLEM.Misc.Direction2.None
  isExternal: true
- uid: TinyLife.Objects.Furniture.GetActionSpotInfo*
  commentId: Overload:TinyLife.Objects.Furniture.GetActionSpotInfo
  name: GetActionSpotInfo
  nameWithType: Furniture.GetActionSpotInfo
  fullName: TinyLife.Objects.Furniture.GetActionSpotInfo
- uid: TinyLife.Objects.Furniture.GetFreeObjectSpot*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeObjectSpot
  name: GetFreeObjectSpot
  nameWithType: Furniture.GetFreeObjectSpot
  fullName: TinyLife.Objects.Furniture.GetFreeObjectSpot
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Vector2>
  nameWithType: Nullable<Vector2>
  fullName: System.Nullable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: Nullable(Of Vector2)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: Nullable(Of Vector2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  isExternal: true
- uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetChild(ObjectSpot, Furniture, Direction2)
  nameWithType: Furniture.SetChild(ObjectSpot, Furniture, Direction2)
  fullName: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.Furniture, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
    name: SetChild
    nameWithType: Furniture.SetChild
    fullName: TinyLife.Objects.Furniture.SetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
    name: SetChild
    nameWithType: Furniture.SetChild
    fullName: TinyLife.Objects.Furniture.SetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.SetParent*
  commentId: Overload:TinyLife.Objects.Furniture.SetParent
  name: SetParent
  nameWithType: Furniture.SetParent
  fullName: TinyLife.Objects.Furniture.SetParent
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  parent: TinyLife.Objects.Furniture
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren<T>
    nameWithType: Furniture.GetChildren<T>
    fullName: TinyLife.Objects.Furniture.GetChildren<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren(Of T)
    nameWithType: Furniture.GetChildren(Of T)
    fullName: TinyLife.Objects.Furniture.GetChildren(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren*
  commentId: Overload:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  name: UnlinkParentsAndChildren
  nameWithType: Furniture.UnlinkParentsAndChildren
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  isExternal: true
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink*
  commentId: Overload:TinyLife.Objects.Furniture.RemoveAndUnlink
  name: RemoveAndUnlink
  nameWithType: Furniture.RemoveAndUnlink
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink
- uid: TinyLife.Objects.Furniture.GetChildren*
  commentId: Overload:TinyLife.Objects.Furniture.GetChildren
  name: GetChildren
  nameWithType: Furniture.GetChildren
  fullName: TinyLife.Objects.Furniture.GetChildren
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.RemoveChildren*
  commentId: Overload:TinyLife.Objects.Furniture.RemoveChildren
  name: RemoveChildren
  nameWithType: Furniture.RemoveChildren
  fullName: TinyLife.Objects.Furniture.RemoveChildren
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.RemoveChild*
  commentId: Overload:TinyLife.Objects.Furniture.RemoveChild
  name: RemoveChild
  nameWithType: Furniture.RemoveChild
  fullName: TinyLife.Objects.Furniture.RemoveChild
- uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  commentId: M:TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  parent: TinyLife.Objects.Furniture
  name: SetParent(Furniture, ObjectSpot)
  nameWithType: Furniture.SetParent(Furniture, ObjectSpot)
  fullName: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
    name: SetParent
    nameWithType: Furniture.SetParent
    fullName: TinyLife.Objects.Furniture.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
    name: SetParent
    nameWithType: Furniture.SetParent
    fullName: TinyLife.Objects.Furniture.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.AddChild*
  commentId: Overload:TinyLife.Objects.Furniture.AddChild
  name: AddChild
  nameWithType: Furniture.AddChild
  fullName: TinyLife.Objects.Furniture.AddChild
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Objects.Furniture.SetChild*
  commentId: Overload:TinyLife.Objects.Furniture.SetChild
  name: SetChild
  nameWithType: Furniture.SetChild
  fullName: TinyLife.Objects.Furniture.SetChild
- uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  name: OnNeighborChanged(Furniture)
  nameWithType: Furniture.OnNeighborChanged(Furniture)
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
    name: OnNeighborChanged
    nameWithType: Furniture.OnNeighborChanged
    fullName: TinyLife.Objects.Furniture.OnNeighborChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
    name: OnNeighborChanged
    nameWithType: Furniture.OnNeighborChanged
    fullName: TinyLife.Objects.Furniture.OnNeighborChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.NotifyNeighbors*
  commentId: Overload:TinyLife.Objects.Furniture.NotifyNeighbors
  name: NotifyNeighbors
  nameWithType: Furniture.NotifyNeighbors
  fullName: TinyLife.Objects.Furniture.NotifyNeighbors
- uid: TinyLife.Objects.Furniture.SetNewId*
  commentId: Overload:TinyLife.Objects.Furniture.SetNewId
  name: SetNewId
  nameWithType: Furniture.SetNewId
  fullName: TinyLife.Objects.Furniture.SetNewId
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )

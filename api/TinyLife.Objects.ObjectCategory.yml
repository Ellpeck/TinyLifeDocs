### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  id: ObjectCategory
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ObjectCategory.#ctor(System.String,System.Numerics.BigInteger)
  - TinyLife.Objects.ObjectCategory.Barbecue
  - TinyLife.Objects.ObjectCategory.BartendingObject
  - TinyLife.Objects.ObjectCategory.Bed
  - TinyLife.Objects.ObjectCategory.Bookshelf
  - TinyLife.Objects.ObjectCategory.CanBeScrapped
  - TinyLife.Objects.ObjectCategory.CanBeThrownAway
  - TinyLife.Objects.ObjectCategory.CanCoverDoor
  - TinyLife.Objects.ObjectCategory.CanCoverWindow
  - TinyLife.Objects.ObjectCategory.CeilingHanging
  - TinyLife.Objects.ObjectCategory.Chair
  - TinyLife.Objects.ObjectCategory.Cleanable
  - TinyLife.Objects.ObjectCategory.Computer
  - TinyLife.Objects.ObjectCategory.Counter
  - TinyLife.Objects.ObjectCategory.CounterObject
  - TinyLife.Objects.ObjectCategory.DeskObject
  - TinyLife.Objects.ObjectCategory.DisallowedOnGround
  - TinyLife.Objects.ObjectCategory.Easel
  - TinyLife.Objects.ObjectCategory.Fireplaces
  - TinyLife.Objects.ObjectCategory.ForceGridPlacement
  - TinyLife.Objects.ObjectCategory.Fridge
  - TinyLife.Objects.ObjectCategory.Gravestone
  - TinyLife.Objects.ObjectCategory.Ground
  - TinyLife.Objects.ObjectCategory.Holdable
  - TinyLife.Objects.ObjectCategory.Lamp
  - TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  - TinyLife.Objects.ObjectCategory.Mailbox
  - TinyLife.Objects.ObjectCategory.Mirror
  - TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  - TinyLife.Objects.ObjectCategory.NonBuyable
  - TinyLife.Objects.ObjectCategory.NonColliding
  - TinyLife.Objects.ObjectCategory.NonMovable
  - TinyLife.Objects.ObjectCategory.NonSellable
  - TinyLife.Objects.ObjectCategory.Nothing
  - TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  - TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.op_Implicit(System.Int64)~TinyLife.Objects.ObjectCategory
  - TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  - TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Int64
  - TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  - TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ObjectCategory.People
  - TinyLife.Objects.ObjectCategory.RoofAttached
  - TinyLife.Objects.ObjectCategory.Self
  - TinyLife.Objects.ObjectCategory.Shower
  - TinyLife.Objects.ObjectCategory.Sink
  - TinyLife.Objects.ObjectCategory.SmallObject
  - TinyLife.Objects.ObjectCategory.SpecialInteractable
  - TinyLife.Objects.ObjectCategory.StandingDesk
  - TinyLife.Objects.ObjectCategory.Stove
  - TinyLife.Objects.ObjectCategory.Table
  - TinyLife.Objects.ObjectCategory.Television
  - TinyLife.Objects.ObjectCategory.Toilet
  - TinyLife.Objects.ObjectCategory.TrashCan
  - TinyLife.Objects.ObjectCategory.Tree
  - TinyLife.Objects.ObjectCategory.WallHanging
  - TinyLife.Objects.ObjectCategory.Walls
  - TinyLife.Objects.ObjectCategory.Wardrobe
  - TinyLife.Objects.ObjectCategory.WorkoutEquipment
  langs:
  - csharp
  - vb
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
  type: Class
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ObjectCategory
    path: Objects/MapObject.cs
    startLine: 430
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn object category is a way to tell the <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> system what type an object is.\nAn object can have any number of categories attached to it, since <xref href=\"MLEM.Data.DynamicEnum\" data-throw-if-not-resolved=\"false\"></xref> provides <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref>-like behavior.\nCustom modded categories can be added and retrieved using <xref href=\"TinyLife.Objects.MapObject.GetModCategory(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class ObjectCategory : DynamicEnum'
    content.vb: >-
      Public Class ObjectCategory
          Inherits DynamicEnum
  inheritance:
  - System.Object
  - MLEM.Data.DynamicEnum
  inheritedMembers:
  - MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
  - MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
  - MLEM.Data.DynamicEnum.ToString
  - MLEM.Data.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  - MLEM.Data.DynamicEnum.AddValue``1(System.String)
  - MLEM.Data.DynamicEnum.AddFlag``1(System.String)
  - MLEM.Data.DynamicEnum.GetValues``1
  - MLEM.Data.DynamicEnum.GetValues(System.Type)
  - MLEM.Data.DynamicEnum.Or``1({T},{T})
  - MLEM.Data.DynamicEnum.And``1({T},{T})
  - MLEM.Data.DynamicEnum.Xor``1({T},{T})
  - MLEM.Data.DynamicEnum.Neg``1({T})
  - MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
  - MLEM.Data.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  - MLEM.Data.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  - MLEM.Data.DynamicEnum.Parse``1(System.String)
  - MLEM.Data.DynamicEnum.Parse(System.Type,System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.JsonCopy``1
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultTab
  - TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  id: Nothing
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Nothing
    path: Objects/MapObject.cs
    startLine: 433
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that reprsents an object without any properties
  example: []
  syntax:
    content: public static readonly ObjectCategory Nothing
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Nothing As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Ground
  commentId: F:TinyLife.Objects.ObjectCategory.Ground
  id: Ground
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Ground
  nameWithType: ObjectCategory.Ground
  fullName: TinyLife.Objects.ObjectCategory.Ground
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Ground
    path: Objects/MapObject.cs
    startLine: 435
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents the ground
  example: []
  syntax:
    content: public static readonly ObjectCategory Ground
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Ground As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  id: Chair
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Chair
  nameWithType: ObjectCategory.Chair
  fullName: TinyLife.Objects.ObjectCategory.Chair
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Chair
    path: Objects/MapObject.cs
    startLine: 437
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents sittable surfaces
  example: []
  syntax:
    content: public static readonly ObjectCategory Chair
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Chair As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Toilet
  commentId: F:TinyLife.Objects.ObjectCategory.Toilet
  id: Toilet
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Toilet
  nameWithType: ObjectCategory.Toilet
  fullName: TinyLife.Objects.ObjectCategory.Toilet
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Toilet
    path: Objects/MapObject.cs
    startLine: 439
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can use the toilet
  example: []
  syntax:
    content: public static readonly ObjectCategory Toilet
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Toilet As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Bed
  commentId: F:TinyLife.Objects.ObjectCategory.Bed
  id: Bed
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Bed
  nameWithType: ObjectCategory.Bed
  fullName: TinyLife.Objects.ObjectCategory.Bed
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Bed
    path: Objects/MapObject.cs
    startLine: 441
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can sleep
  example: []
  syntax:
    content: public static readonly ObjectCategory Bed
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Bed As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Fridge
  commentId: F:TinyLife.Objects.ObjectCategory.Fridge
  id: Fridge
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Fridge
  nameWithType: ObjectCategory.Fridge
  fullName: TinyLife.Objects.ObjectCategory.Fridge
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Fridge
    path: Objects/MapObject.cs
    startLine: 443
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can get food ingredients
  example: []
  syntax:
    content: public static readonly ObjectCategory Fridge
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Fridge As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Shower
  commentId: F:TinyLife.Objects.ObjectCategory.Shower
  id: Shower
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Shower
  nameWithType: ObjectCategory.Shower
  fullName: TinyLife.Objects.ObjectCategory.Shower
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Shower
    path: Objects/MapObject.cs
    startLine: 445
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can shower
  example: []
  syntax:
    content: public static readonly ObjectCategory Shower
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Shower As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Counter
  commentId: F:TinyLife.Objects.ObjectCategory.Counter
  id: Counter
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Counter
  nameWithType: ObjectCategory.Counter
  fullName: TinyLife.Objects.ObjectCategory.Counter
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Counter
    path: Objects/MapObject.cs
    startLine: 447
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can prepare food and place <xref href="TinyLife.Objects.ObjectCategory.CounterObject" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory Counter
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Counter As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Stove
  commentId: F:TinyLife.Objects.ObjectCategory.Stove
  id: Stove
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Stove
  nameWithType: ObjectCategory.Stove
  fullName: TinyLife.Objects.ObjectCategory.Stove
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Stove
    path: Objects/MapObject.cs
    startLine: 449
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can cook food
  example: []
  syntax:
    content: public static readonly ObjectCategory Stove
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Stove As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.SmallObject
  commentId: F:TinyLife.Objects.ObjectCategory.SmallObject
  id: SmallObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: SmallObject
  nameWithType: ObjectCategory.SmallObject
  fullName: TinyLife.Objects.ObjectCategory.SmallObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SmallObject
    path: Objects/MapObject.cs
    startLine: 451
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can sit on <xref href="TinyLife.Objects.ObjectCategory.Counter" data-throw-if-not-resolved="false"></xref> and <xref href="TinyLife.Objects.ObjectCategory.Table" data-throw-if-not-resolved="false"></xref> objects. For objects that sit on these surfaces, but are not small, <xref href="TinyLife.Objects.ObjectCategory.LargeSurfaceObject" data-throw-if-not-resolved="false"></xref> should be used.
  example: []
  syntax:
    content: public static readonly ObjectCategory SmallObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly SmallObject As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.NonBuyable
  commentId: F:TinyLife.Objects.ObjectCategory.NonBuyable
  id: NonBuyable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonBuyable
  nameWithType: ObjectCategory.NonBuyable
  fullName: TinyLife.Objects.ObjectCategory.NonBuyable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NonBuyable
    path: Objects/MapObject.cs
    startLine: 453
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that cannot be bought in the <xref href="TinyLife.Tools.FurnitureTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonBuyable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonBuyable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Table
  commentId: F:TinyLife.Objects.ObjectCategory.Table
  id: Table
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: ObjectCategory.Table
  fullName: TinyLife.Objects.ObjectCategory.Table
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Table
    path: Objects/MapObject.cs
    startLine: 455
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can place <xref href="TinyLife.Objects.ObjectCategory.SmallObject" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory Table
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Table As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Holdable
  commentId: F:TinyLife.Objects.ObjectCategory.Holdable
  id: Holdable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Holdable
  nameWithType: ObjectCategory.Holdable
  fullName: TinyLife.Objects.ObjectCategory.Holdable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Holdable
    path: Objects/MapObject.cs
    startLine: 457
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be held by a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory Holdable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Holdable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.DeskObject
  commentId: F:TinyLife.Objects.ObjectCategory.DeskObject
  id: DeskObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DeskObject
  nameWithType: ObjectCategory.DeskObject
  fullName: TinyLife.Objects.ObjectCategory.DeskObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: DeskObject
    path: Objects/MapObject.cs
    startLine: 459
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be placed on desks and standing desks
  example: []
  syntax:
    content: public static readonly ObjectCategory DeskObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DeskObject As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.DisallowedOnGround
  commentId: F:TinyLife.Objects.ObjectCategory.DisallowedOnGround
  id: DisallowedOnGround
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: DisallowedOnGround
  nameWithType: ObjectCategory.DisallowedOnGround
  fullName: TinyLife.Objects.ObjectCategory.DisallowedOnGround
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: DisallowedOnGround
    path: Objects/MapObject.cs
    startLine: 461
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that cannot be placed on the ground, but only in object spots
  example: []
  syntax:
    content: public static readonly ObjectCategory DisallowedOnGround
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly DisallowedOnGround As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Computer
  commentId: F:TinyLife.Objects.ObjectCategory.Computer
  id: Computer
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Computer
  nameWithType: ObjectCategory.Computer
  fullName: TinyLife.Objects.ObjectCategory.Computer
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Computer
    path: Objects/MapObject.cs
    startLine: 463
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents computers
  example: []
  syntax:
    content: public static readonly ObjectCategory Computer
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Computer As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Sink
  commentId: F:TinyLife.Objects.ObjectCategory.Sink
  id: Sink
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Sink
  nameWithType: ObjectCategory.Sink
  fullName: TinyLife.Objects.ObjectCategory.Sink
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Sink
    path: Objects/MapObject.cs
    startLine: 465
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where one can clean dishes and wash hands
  example: []
  syntax:
    content: public static readonly ObjectCategory Sink
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Sink As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CounterObject
  commentId: F:TinyLife.Objects.ObjectCategory.CounterObject
  id: CounterObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CounterObject
  nameWithType: ObjectCategory.CounterObject
  fullName: TinyLife.Objects.ObjectCategory.CounterObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CounterObject
    path: Objects/MapObject.cs
    startLine: 467
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be placed on <xref href="TinyLife.Objects.ObjectCategory.Counter" data-throw-if-not-resolved="false"></xref> objects
  example: []
  syntax:
    content: public static readonly ObjectCategory CounterObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CounterObject As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Cleanable
  commentId: F:TinyLife.Objects.ObjectCategory.Cleanable
  id: Cleanable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Cleanable
  nameWithType: ObjectCategory.Cleanable
  fullName: TinyLife.Objects.ObjectCategory.Cleanable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Cleanable
    path: Objects/MapObject.cs
    startLine: 469
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can be cleaned in a <xref href="TinyLife.Objects.ObjectCategory.Sink" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory Cleanable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Cleanable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.People
  commentId: F:TinyLife.Objects.ObjectCategory.People
  id: People
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: People
  nameWithType: ObjectCategory.People
  fullName: TinyLife.Objects.ObjectCategory.People
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: People
    path: Objects/MapObject.cs
    startLine: 471
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that all <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> instances hae
  example: []
  syntax:
    content: public static readonly ObjectCategory People
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly People As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Mailbox
  commentId: F:TinyLife.Objects.ObjectCategory.Mailbox
  id: Mailbox
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Mailbox
  nameWithType: ObjectCategory.Mailbox
  fullName: TinyLife.Objects.ObjectCategory.Mailbox
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Mailbox
    path: Objects/MapObject.cs
    startLine: 473
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents mailboxes
  example: []
  syntax:
    content: public static readonly ObjectCategory Mailbox
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Mailbox As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Wardrobe
  commentId: F:TinyLife.Objects.ObjectCategory.Wardrobe
  id: Wardrobe
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Wardrobe
  nameWithType: ObjectCategory.Wardrobe
  fullName: TinyLife.Objects.ObjectCategory.Wardrobe
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Wardrobe
    path: Objects/MapObject.cs
    startLine: 475
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects where a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> can change
  example: []
  syntax:
    content: public static readonly ObjectCategory Wardrobe
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Wardrobe As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  commentId: F:TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  id: NaturalGroundRequired
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NaturalGroundRequired
  nameWithType: ObjectCategory.NaturalGroundRequired
  fullName: TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NaturalGroundRequired
    path: Objects/MapObject.cs
    startLine: 477
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects that can only be placed on natural ground, namely grass tiles
  example: []
  syntax:
    content: public static readonly ObjectCategory NaturalGroundRequired
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NaturalGroundRequired As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  id: Self
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Self
  nameWithType: ObjectCategory.Self
  fullName: TinyLife.Objects.ObjectCategory.Self
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Self
    path: Objects/MapObject.cs
    startLine: 479
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents the object that contains it
  example: []
  syntax:
    content: public static readonly ObjectCategory Self
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Self As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.WallHanging
  commentId: F:TinyLife.Objects.ObjectCategory.WallHanging
  id: WallHanging
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: WallHanging
  nameWithType: ObjectCategory.WallHanging
  fullName: TinyLife.Objects.ObjectCategory.WallHanging
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WallHanging
    path: Objects/MapObject.cs
    startLine: 481
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects which need to be hung on <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> objects. If an object should be able to hang on a window or door, it should additionally have the <xref href="TinyLife.Objects.ObjectCategory.CanCoverWindow" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Objects.ObjectCategory.CanCoverDoor" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory WallHanging
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly WallHanging As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.ForceGridPlacement
  commentId: F:TinyLife.Objects.ObjectCategory.ForceGridPlacement
  id: ForceGridPlacement
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ForceGridPlacement
  nameWithType: ObjectCategory.ForceGridPlacement
  fullName: TinyLife.Objects.ObjectCategory.ForceGridPlacement
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ForceGridPlacement
    path: Objects/MapObject.cs
    startLine: 483
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects which cannot be placed off the grid using the ALT key in the <xref href="TinyLife.Tools.FurnitureTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory ForceGridPlacement
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ForceGridPlacement As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Easel
  commentId: F:TinyLife.Objects.ObjectCategory.Easel
  id: Easel
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Easel
  nameWithType: ObjectCategory.Easel
  fullName: TinyLife.Objects.ObjectCategory.Easel
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Easel
    path: Objects/MapObject.cs
    startLine: 485
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents places where one can paint paintings
  example: []
  syntax:
    content: public static readonly ObjectCategory Easel
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Easel As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Mirror
  commentId: F:TinyLife.Objects.ObjectCategory.Mirror
  id: Mirror
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Mirror
  nameWithType: ObjectCategory.Mirror
  fullName: TinyLife.Objects.ObjectCategory.Mirror
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Mirror
    path: Objects/MapObject.cs
    startLine: 487
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents mirrors
  example: []
  syntax:
    content: public static readonly ObjectCategory Mirror
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Mirror As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Bookshelf
  commentId: F:TinyLife.Objects.ObjectCategory.Bookshelf
  id: Bookshelf
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Bookshelf
  nameWithType: ObjectCategory.Bookshelf
  fullName: TinyLife.Objects.ObjectCategory.Bookshelf
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Bookshelf
    path: Objects/MapObject.cs
    startLine: 489
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that books are stored in
  example: []
  syntax:
    content: public static readonly ObjectCategory Bookshelf
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Bookshelf As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.NonColliding
  commentId: F:TinyLife.Objects.ObjectCategory.NonColliding
  id: NonColliding
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonColliding
  nameWithType: ObjectCategory.NonColliding
  fullName: TinyLife.Objects.ObjectCategory.NonColliding
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NonColliding
    path: Objects/MapObject.cs
    startLine: 491
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> does not collide with
  example: []
  syntax:
    content: public static readonly ObjectCategory NonColliding
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonColliding As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Gravestone
  commentId: F:TinyLife.Objects.ObjectCategory.Gravestone
  id: Gravestone
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Gravestone
  nameWithType: ObjectCategory.Gravestone
  fullName: TinyLife.Objects.ObjectCategory.Gravestone
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Gravestone
    path: Objects/MapObject.cs
    startLine: 493
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents gravestones
  example: []
  syntax:
    content: public static readonly ObjectCategory Gravestone
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Gravestone As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  id: NonSellable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonSellable
  nameWithType: ObjectCategory.NonSellable
  fullName: TinyLife.Objects.ObjectCategory.NonSellable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NonSellable
    path: Objects/MapObject.cs
    startLine: 495
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that cannot be solved or removed using <xref href="TinyLife.Tools.RemoveTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonSellable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonSellable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.NonMovable
  commentId: F:TinyLife.Objects.ObjectCategory.NonMovable
  id: NonMovable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: NonMovable
  nameWithType: ObjectCategory.NonMovable
  fullName: TinyLife.Objects.ObjectCategory.NonMovable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: NonMovable
    path: Objects/MapObject.cs
    startLine: 497
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents things that cannot be moved using <xref href="TinyLife.Tools.MoveTool" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static readonly ObjectCategory NonMovable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly NonMovable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Tree
  commentId: F:TinyLife.Objects.ObjectCategory.Tree
  id: Tree
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Tree
  nameWithType: ObjectCategory.Tree
  fullName: TinyLife.Objects.ObjectCategory.Tree
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Tree
    path: Objects/MapObject.cs
    startLine: 499
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents trees
  example: []
  syntax:
    content: public static readonly ObjectCategory Tree
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Tree As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Television
  commentId: F:TinyLife.Objects.ObjectCategory.Television
  id: Television
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Television
  nameWithType: ObjectCategory.Television
  fullName: TinyLife.Objects.ObjectCategory.Television
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Television
    path: Objects/MapObject.cs
    startLine: 501
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents televisions
  example: []
  syntax:
    content: public static readonly ObjectCategory Television
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Television As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.BartendingObject
  commentId: F:TinyLife.Objects.ObjectCategory.BartendingObject
  id: BartendingObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BartendingObject
  nameWithType: ObjectCategory.BartendingObject
  fullName: TinyLife.Objects.ObjectCategory.BartendingObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: BartendingObject
    path: Objects/MapObject.cs
    startLine: 503
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents objects a bartender can use
  example: []
  syntax:
    content: public static readonly ObjectCategory BartendingObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly BartendingObject As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Walls
  commentId: F:TinyLife.Objects.ObjectCategory.Walls
  id: Walls
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Walls
  nameWithType: ObjectCategory.Walls
  fullName: TinyLife.Objects.ObjectCategory.Walls
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Walls
    path: Objects/MapObject.cs
    startLine: 505
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents <xref href="TinyLife.World.Wall" data-throw-if-not-resolved="false"></xref> objects. If this category is used, <xref href="TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> is used for AI-based invocation.
  example: []
  syntax:
    content: public static readonly ObjectCategory Walls
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Walls As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.WorkoutEquipment
  commentId: F:TinyLife.Objects.ObjectCategory.WorkoutEquipment
  id: WorkoutEquipment
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: WorkoutEquipment
  nameWithType: ObjectCategory.WorkoutEquipment
  fullName: TinyLife.Objects.ObjectCategory.WorkoutEquipment
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: WorkoutEquipment
    path: Objects/MapObject.cs
    startLine: 507
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents any workout equipment, which is used by the <xref href="TinyLife.Set.Workout" data-throw-if-not-resolved="false"></xref> set
  example: []
  syntax:
    content: public static readonly ObjectCategory WorkoutEquipment
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly WorkoutEquipment As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  commentId: F:TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  id: LargeSurfaceObject
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: LargeSurfaceObject
  nameWithType: ObjectCategory.LargeSurfaceObject
  fullName: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: LargeSurfaceObject
    path: Objects/MapObject.cs
    startLine: 509
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents an object which is large and can sit on a surface. This is a non-small version of <xref href="TinyLife.Objects.ObjectCategory.SmallObject" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory LargeSurfaceObject
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly LargeSurfaceObject As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.StandingDesk
  commentId: F:TinyLife.Objects.ObjectCategory.StandingDesk
  id: StandingDesk
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: StandingDesk
  nameWithType: ObjectCategory.StandingDesk
  fullName: TinyLife.Objects.ObjectCategory.StandingDesk
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: StandingDesk
    path: Objects/MapObject.cs
    startLine: 511
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category that represents desks that a person stands at, rather than sitting. Usually, objects with this category should also have the <xref href="TinyLife.Objects.ObjectCategory.Table" data-throw-if-not-resolved="false"></xref> category.
  example: []
  syntax:
    content: public static readonly ObjectCategory StandingDesk
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly StandingDesk As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Lamp
  commentId: F:TinyLife.Objects.ObjectCategory.Lamp
  id: Lamp
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Lamp
  nameWithType: ObjectCategory.Lamp
  fullName: TinyLife.Objects.ObjectCategory.Lamp
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Lamp
    path: Objects/MapObject.cs
    startLine: 513
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for lamps that can be turned on and off. Objects that have this category are expected to extend <xref href="TinyLife.Objects.LightFurniture" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static readonly ObjectCategory Lamp
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Lamp As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CeilingHanging
  commentId: F:TinyLife.Objects.ObjectCategory.CeilingHanging
  id: CeilingHanging
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CeilingHanging
  nameWithType: ObjectCategory.CeilingHanging
  fullName: TinyLife.Objects.ObjectCategory.CeilingHanging
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CeilingHanging
    path: Objects/MapObject.cs
    startLine: 515
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that are hanging on the ceiling. For most objects in this category, <xref href="TinyLife.Objects.ObjectCategory.NonColliding" data-throw-if-not-resolved="false"></xref> should also be used.
  example: []
  syntax:
    content: public static readonly ObjectCategory CeilingHanging
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CeilingHanging As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  id: CanCoverWindow
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanCoverWindow
  nameWithType: ObjectCategory.CanCoverWindow
  fullName: TinyLife.Objects.ObjectCategory.CanCoverWindow
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanCoverWindow
    path: Objects/MapObject.cs
    startLine: 517
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that can be attached to windows. If an object doesn&apos;t also have the <xref href="TinyLife.Objects.ObjectCategory.WallHanging" data-throw-if-not-resolved="false"></xref> category, this category has no effect.
  example: []
  syntax:
    content: public static readonly ObjectCategory CanCoverWindow
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanCoverWindow As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CanCoverDoor
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverDoor
  id: CanCoverDoor
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanCoverDoor
  nameWithType: ObjectCategory.CanCoverDoor
  fullName: TinyLife.Objects.ObjectCategory.CanCoverDoor
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanCoverDoor
    path: Objects/MapObject.cs
    startLine: 519
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for things that can be attached to doors. If an object doesn&apos;t also have the <xref href="TinyLife.Objects.ObjectCategory.WallHanging" data-throw-if-not-resolved="false"></xref> category, this category has no effect.
  example: []
  syntax:
    content: public static readonly ObjectCategory CanCoverDoor
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanCoverDoor As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Barbecue
  commentId: F:TinyLife.Objects.ObjectCategory.Barbecue
  id: Barbecue
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Barbecue
  nameWithType: ObjectCategory.Barbecue
  fullName: TinyLife.Objects.ObjectCategory.Barbecue
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Barbecue
    path: Objects/MapObject.cs
    startLine: 521
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for outdoor cooking spots
  example: []
  syntax:
    content: public static readonly ObjectCategory Barbecue
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Barbecue As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.TrashCan
  commentId: F:TinyLife.Objects.ObjectCategory.TrashCan
  id: TrashCan
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: TrashCan
  nameWithType: ObjectCategory.TrashCan
  fullName: TinyLife.Objects.ObjectCategory.TrashCan
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: TrashCan
    path: Objects/MapObject.cs
    startLine: 523
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for places where items with the <xref href="TinyLife.Objects.ObjectCategory.CanBeThrownAway" data-throw-if-not-resolved="false"></xref> category can be thrown away
  example: []
  syntax:
    content: public static readonly ObjectCategory TrashCan
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly TrashCan As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeThrownAway
  id: CanBeThrownAway
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanBeThrownAway
  nameWithType: ObjectCategory.CanBeThrownAway
  fullName: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanBeThrownAway
    path: Objects/MapObject.cs
    startLine: 525
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for items that can be thrown away in a <xref href="TinyLife.Objects.ObjectCategory.TrashCan" data-throw-if-not-resolved="false"></xref>, if they also have the <xref href="TinyLife.Objects.ObjectCategory.Holdable" data-throw-if-not-resolved="false"></xref> category
  example: []
  syntax:
    content: public static readonly ObjectCategory CanBeThrownAway
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanBeThrownAway As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.SpecialInteractable
  commentId: F:TinyLife.Objects.ObjectCategory.SpecialInteractable
  id: SpecialInteractable
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: SpecialInteractable
  nameWithType: ObjectCategory.SpecialInteractable
  fullName: TinyLife.Objects.ObjectCategory.SpecialInteractable
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: SpecialInteractable
    path: Objects/MapObject.cs
    startLine: 527
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for items like the <xref href="TinyLife.Objects.FurnitureType.WoodworkingTable" data-throw-if-not-resolved="false"></xref> that can be interacted with, but don&apos;t require their own, unique category, since there is only one furniture type that matches them
  example: []
  syntax:
    content: public static readonly ObjectCategory SpecialInteractable
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly SpecialInteractable As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.CanBeScrapped
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeScrapped
  id: CanBeScrapped
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: CanBeScrapped
  nameWithType: ObjectCategory.CanBeScrapped
  fullName: TinyLife.Objects.ObjectCategory.CanBeScrapped
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: CanBeScrapped
    path: Objects/MapObject.cs
    startLine: 529
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for items that can be scrapped using <xref href="TinyLife.Actions.ActionType.Scrap" data-throw-if-not-resolved="false"></xref> (provided they are on a lot that can be &quot;edited&quot; by the person executing the action)
  example: []
  syntax:
    content: public static readonly ObjectCategory CanBeScrapped
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly CanBeScrapped As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  commentId: F:TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  id: ObstructedByRoofs
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ObstructedByRoofs
  nameWithType: ObjectCategory.ObstructedByRoofs
  fullName: TinyLife.Objects.ObjectCategory.ObstructedByRoofs
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: ObstructedByRoofs
    path: Objects/MapObject.cs
    startLine: 531
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that get obstructed by roofs (and should be removed if a roof is placed above them)
  example: []
  syntax:
    content: public static readonly ObjectCategory ObstructedByRoofs
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly ObstructedByRoofs As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.RoofAttached
  commentId: F:TinyLife.Objects.ObjectCategory.RoofAttached
  id: RoofAttached
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: RoofAttached
  nameWithType: ObjectCategory.RoofAttached
  fullName: TinyLife.Objects.ObjectCategory.RoofAttached
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: RoofAttached
    path: Objects/MapObject.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for objects that have to be attached to roofs (which is useful for chimneys and other rooftop items)
  example: []
  syntax:
    content: public static readonly ObjectCategory RoofAttached
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly RoofAttached As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.Fireplaces
  commentId: F:TinyLife.Objects.ObjectCategory.Fireplaces
  id: Fireplaces
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Fireplaces
  nameWithType: ObjectCategory.Fireplaces
  fullName: TinyLife.Objects.ObjectCategory.Fireplaces
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: Fireplaces
    path: Objects/MapObject.cs
    startLine: 535
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: An object category for fireplaces
  example: []
  syntax:
    content: public static readonly ObjectCategory Fireplaces
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared ReadOnly Fireplaces As ObjectCategory
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.ObjectCategory.#ctor(System.String,System.Numerics.BigInteger)
  commentId: M:TinyLife.Objects.ObjectCategory.#ctor(System.String,System.Numerics.BigInteger)
  id: '#ctor(System.String,System.Numerics.BigInteger)'
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ObjectCategory(String, BigInteger)
  nameWithType: ObjectCategory.ObjectCategory(String, BigInteger)
  fullName: TinyLife.Objects.ObjectCategory.ObjectCategory(System.String, System.Numerics.BigInteger)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: .ctor
    path: Objects/MapObject.cs
    startLine: 538
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: protected ObjectCategory(string name, BigInteger value)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Numerics.BigInteger
    content.vb: Protected Sub New(name As String, value As BigInteger)
  overload: TinyLife.Objects.ObjectCategory.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  id: op_Implicit(TinyLife.Objects.ObjectCategory)~System.Numerics.BigInteger
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Implicit(ObjectCategory to BigInteger)
  nameWithType: ObjectCategory.Implicit(ObjectCategory to BigInteger)
  fullName: TinyLife.Objects.ObjectCategory.Implicit(TinyLife.Objects.ObjectCategory to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_Implicit
    path: Objects/MapObject.cs
    startLine: 542
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static implicit operator BigInteger(ObjectCategory category)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
    return:
      type: System.Numerics.BigInteger
    content.vb: Public Shared Widening Operator CType(category As ObjectCategory) As BigInteger
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.Widening(ObjectCategory to BigInteger)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.ObjectCategory.Widening(TinyLife.Objects.ObjectCategory to System.Numerics.BigInteger)
  name.vb: Widening(ObjectCategory to BigInteger)
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Int64
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(TinyLife.Objects.ObjectCategory)~System.Int64
  id: op_Implicit(TinyLife.Objects.ObjectCategory)~System.Int64
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Implicit(ObjectCategory to Int64)
  nameWithType: ObjectCategory.Implicit(ObjectCategory to Int64)
  fullName: TinyLife.Objects.ObjectCategory.Implicit(TinyLife.Objects.ObjectCategory to System.Int64)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_Implicit
    path: Objects/MapObject.cs
    startLine: 543
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static implicit operator long (ObjectCategory category)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
    return:
      type: System.Int64
    content.vb: Public Shared Widening Operator CType(category As ObjectCategory) As Long
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.Widening(ObjectCategory to Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.ObjectCategory.Widening(TinyLife.Objects.ObjectCategory to System.Int64)
  name.vb: Widening(ObjectCategory to Int64)
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  id: op_Implicit(System.Numerics.BigInteger)~TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Implicit(BigInteger to ObjectCategory)
  nameWithType: ObjectCategory.Implicit(BigInteger to ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.Implicit(System.Numerics.BigInteger to TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_Implicit
    path: Objects/MapObject.cs
    startLine: 544
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static implicit operator ObjectCategory(BigInteger value)
    parameters:
    - id: value
      type: System.Numerics.BigInteger
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Widening Operator CType(value As BigInteger) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.Widening(BigInteger to ObjectCategory)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.ObjectCategory.Widening(System.Numerics.BigInteger to TinyLife.Objects.ObjectCategory)
  name.vb: Widening(BigInteger to ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_Implicit(System.Int64)~TinyLife.Objects.ObjectCategory
  commentId: M:TinyLife.Objects.ObjectCategory.op_Implicit(System.Int64)~TinyLife.Objects.ObjectCategory
  id: op_Implicit(System.Int64)~TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to ObjectCategory)
  nameWithType: ObjectCategory.Implicit(Int64 to ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.Implicit(System.Int64 to TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_Implicit
    path: Objects/MapObject.cs
    startLine: 545
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static implicit operator ObjectCategory(long value)
    parameters:
    - id: value
      type: System.Int64
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Widening Operator CType(value As Long) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_Implicit*
  nameWithType.vb: ObjectCategory.Widening(Int64 to ObjectCategory)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.ObjectCategory.Widening(System.Int64 to TinyLife.Objects.ObjectCategory)
  name.vb: Widening(Int64 to ObjectCategory)
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_BitwiseOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BitwiseOr(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.BitwiseOr(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.BitwiseOr(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_BitwiseOr
    path: Objects/MapObject.cs
    startLine: 546
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static ObjectCategory operator |(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
    - id: right
      type: TinyLife.Objects.ObjectCategory
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Operator Or(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_BitwiseOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_BitwiseAnd(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: BitwiseAnd(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.BitwiseAnd(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.BitwiseAnd(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_BitwiseAnd
    path: Objects/MapObject.cs
    startLine: 547
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static ObjectCategory operator &(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
    - id: right
      type: TinyLife.Objects.ObjectCategory
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Operator And(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_BitwiseAnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  id: op_ExclusiveOr(TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: ExclusiveOr(ObjectCategory, ObjectCategory)
  nameWithType: ObjectCategory.ExclusiveOr(ObjectCategory, ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.ExclusiveOr(TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_ExclusiveOr
    path: Objects/MapObject.cs
    startLine: 548
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static ObjectCategory operator ^(ObjectCategory left, ObjectCategory right)
    parameters:
    - id: left
      type: TinyLife.Objects.ObjectCategory
    - id: right
      type: TinyLife.Objects.ObjectCategory
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Operator Xor(left As ObjectCategory, right As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_ExclusiveOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ObjectCategory.op_OnesComplement(TinyLife.Objects.ObjectCategory)
  id: op_OnesComplement(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ObjectCategory
  langs:
  - csharp
  - vb
  name: OnesComplement(ObjectCategory)
  nameWithType: ObjectCategory.OnesComplement(ObjectCategory)
  fullName: TinyLife.Objects.ObjectCategory.OnesComplement(TinyLife.Objects.ObjectCategory)
  type: Operator
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife.git
    id: op_OnesComplement
    path: Objects/MapObject.cs
    startLine: 549
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static ObjectCategory operator ~(ObjectCategory value)
    parameters:
    - id: value
      type: TinyLife.Objects.ObjectCategory
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Shared Operator Not(value As ObjectCategory) As ObjectCategory
  overload: TinyLife.Objects.ObjectCategory.op_OnesComplement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: MLEM.Data.DynamicEnum
  commentId: T:MLEM.Data.DynamicEnum
  parent: MLEM.Data
  isExternal: true
  name: DynamicEnum
  nameWithType: DynamicEnum
  fullName: MLEM.Data.DynamicEnum
- uid: System.FlagsAttribute
  commentId: T:System.FlagsAttribute
  parent: System
  isExternal: true
  name: FlagsAttribute
  nameWithType: FlagsAttribute
  fullName: System.FlagsAttribute
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetModCategory(String)
  nameWithType: MapObject.GetModCategory(String)
  fullName: TinyLife.Objects.MapObject.GetModCategory(System.String)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
  commentId: M:MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: HasFlag(DynamicEnum)
  nameWithType: DynamicEnum.HasFlag(DynamicEnum)
  fullName: MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
    name: HasFlag
    nameWithType: DynamicEnum.HasFlag
    fullName: MLEM.Data.DynamicEnum.HasFlag
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.HasFlag(MLEM.Data.DynamicEnum)
    name: HasFlag
    nameWithType: DynamicEnum.HasFlag
    fullName: MLEM.Data.DynamicEnum.HasFlag
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
  commentId: M:MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: HasAnyFlag(DynamicEnum)
  nameWithType: DynamicEnum.HasAnyFlag(DynamicEnum)
  fullName: MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
    name: HasAnyFlag
    nameWithType: DynamicEnum.HasAnyFlag
    fullName: MLEM.Data.DynamicEnum.HasAnyFlag
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.HasAnyFlag(MLEM.Data.DynamicEnum)
    name: HasAnyFlag
    nameWithType: DynamicEnum.HasAnyFlag
    fullName: MLEM.Data.DynamicEnum.HasAnyFlag
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.ToString
  commentId: M:MLEM.Data.DynamicEnum.ToString
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: ToString()
  nameWithType: DynamicEnum.ToString()
  fullName: MLEM.Data.DynamicEnum.ToString()
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.ToString
    name: ToString
    nameWithType: DynamicEnum.ToString
    fullName: MLEM.Data.DynamicEnum.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.ToString
    name: ToString
    nameWithType: DynamicEnum.ToString
    fullName: MLEM.Data.DynamicEnum.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  commentId: M:MLEM.Data.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: Add<T>(String, BigInteger)
  nameWithType: DynamicEnum.Add<T>(String, BigInteger)
  fullName: MLEM.Data.DynamicEnum.Add<T>(System.String, System.Numerics.BigInteger)
  nameWithType.vb: DynamicEnum.Add(Of T)(String, BigInteger)
  fullName.vb: MLEM.Data.DynamicEnum.Add(Of T)(System.String, System.Numerics.BigInteger)
  name.vb: Add(Of T)(String, BigInteger)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
    name: Add<T>
    nameWithType: DynamicEnum.Add<T>
    fullName: MLEM.Data.DynamicEnum.Add<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Add``1(System.String,System.Numerics.BigInteger)
    name: Add(Of T)
    nameWithType: DynamicEnum.Add(Of T)
    fullName: MLEM.Data.DynamicEnum.Add(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.AddValue``1(System.String)
  commentId: M:MLEM.Data.DynamicEnum.AddValue``1(System.String)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: AddValue<T>(String)
  nameWithType: DynamicEnum.AddValue<T>(String)
  fullName: MLEM.Data.DynamicEnum.AddValue<T>(System.String)
  nameWithType.vb: DynamicEnum.AddValue(Of T)(String)
  fullName.vb: MLEM.Data.DynamicEnum.AddValue(Of T)(System.String)
  name.vb: AddValue(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.AddValue``1(System.String)
    name: AddValue<T>
    nameWithType: DynamicEnum.AddValue<T>
    fullName: MLEM.Data.DynamicEnum.AddValue<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.AddValue``1(System.String)
    name: AddValue(Of T)
    nameWithType: DynamicEnum.AddValue(Of T)
    fullName: MLEM.Data.DynamicEnum.AddValue(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.AddFlag``1(System.String)
  commentId: M:MLEM.Data.DynamicEnum.AddFlag``1(System.String)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: AddFlag<T>(String)
  nameWithType: DynamicEnum.AddFlag<T>(String)
  fullName: MLEM.Data.DynamicEnum.AddFlag<T>(System.String)
  nameWithType.vb: DynamicEnum.AddFlag(Of T)(String)
  fullName.vb: MLEM.Data.DynamicEnum.AddFlag(Of T)(System.String)
  name.vb: AddFlag(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.AddFlag``1(System.String)
    name: AddFlag<T>
    nameWithType: DynamicEnum.AddFlag<T>
    fullName: MLEM.Data.DynamicEnum.AddFlag<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.AddFlag``1(System.String)
    name: AddFlag(Of T)
    nameWithType: DynamicEnum.AddFlag(Of T)
    fullName: MLEM.Data.DynamicEnum.AddFlag(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.GetValues``1
  commentId: M:MLEM.Data.DynamicEnum.GetValues``1
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: GetValues<T>()
  nameWithType: DynamicEnum.GetValues<T>()
  fullName: MLEM.Data.DynamicEnum.GetValues<T>()
  nameWithType.vb: DynamicEnum.GetValues(Of T)()
  fullName.vb: MLEM.Data.DynamicEnum.GetValues(Of T)()
  name.vb: GetValues(Of T)()
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.GetValues``1
    name: GetValues<T>
    nameWithType: DynamicEnum.GetValues<T>
    fullName: MLEM.Data.DynamicEnum.GetValues<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.GetValues``1
    name: GetValues(Of T)
    nameWithType: DynamicEnum.GetValues(Of T)
    fullName: MLEM.Data.DynamicEnum.GetValues(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.GetValues(System.Type)
  commentId: M:MLEM.Data.DynamicEnum.GetValues(System.Type)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: GetValues(Type)
  nameWithType: DynamicEnum.GetValues(Type)
  fullName: MLEM.Data.DynamicEnum.GetValues(System.Type)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.GetValues(System.Type)
    name: GetValues
    nameWithType: DynamicEnum.GetValues
    fullName: MLEM.Data.DynamicEnum.GetValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.GetValues(System.Type)
    name: GetValues
    nameWithType: DynamicEnum.GetValues
    fullName: MLEM.Data.DynamicEnum.GetValues
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Or``1({T},{T})
  commentId: M:MLEM.Data.DynamicEnum.Or``1(``0,``0)
  parent: MLEM.Data.DynamicEnum
  definition: MLEM.Data.DynamicEnum.Or``1(``0,``0)
  name: Or<T>(T, T)
  nameWithType: DynamicEnum.Or<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.Or<T>(T, T)
  nameWithType.vb: DynamicEnum.Or(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.Or(Of T)(T, T)
  name.vb: Or(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Or``1(``0,``0)
    name: Or<T>
    nameWithType: DynamicEnum.Or<T>
    fullName: MLEM.Data.DynamicEnum.Or<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Or``1(``0,``0)
    name: Or(Of T)
    nameWithType: DynamicEnum.Or(Of T)
    fullName: MLEM.Data.DynamicEnum.Or(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.And``1({T},{T})
  commentId: M:MLEM.Data.DynamicEnum.And``1(``0,``0)
  parent: MLEM.Data.DynamicEnum
  definition: MLEM.Data.DynamicEnum.And``1(``0,``0)
  name: And<T>(T, T)
  nameWithType: DynamicEnum.And<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.And<T>(T, T)
  nameWithType.vb: DynamicEnum.And(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.And(Of T)(T, T)
  name.vb: And(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.And``1(``0,``0)
    name: And<T>
    nameWithType: DynamicEnum.And<T>
    fullName: MLEM.Data.DynamicEnum.And<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.And``1(``0,``0)
    name: And(Of T)
    nameWithType: DynamicEnum.And(Of T)
    fullName: MLEM.Data.DynamicEnum.And(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Xor``1({T},{T})
  commentId: M:MLEM.Data.DynamicEnum.Xor``1(``0,``0)
  parent: MLEM.Data.DynamicEnum
  definition: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
  name: Xor<T>(T, T)
  nameWithType: DynamicEnum.Xor<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.Xor<T>(T, T)
  nameWithType.vb: DynamicEnum.Xor(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.Xor(Of T)(T, T)
  name.vb: Xor(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
    name: Xor<T>
    nameWithType: DynamicEnum.Xor<T>
    fullName: MLEM.Data.DynamicEnum.Xor<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
    name: Xor(Of T)
    nameWithType: DynamicEnum.Xor(Of T)
    fullName: MLEM.Data.DynamicEnum.Xor(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Neg``1({T})
  commentId: M:MLEM.Data.DynamicEnum.Neg``1(``0)
  parent: MLEM.Data.DynamicEnum
  definition: MLEM.Data.DynamicEnum.Neg``1(``0)
  name: Neg<T>(T)
  nameWithType: DynamicEnum.Neg<T>(T)
  fullName: MLEM.Data.DynamicEnum.Neg<T>(T)
  nameWithType.vb: DynamicEnum.Neg(Of T)(T)
  fullName.vb: MLEM.Data.DynamicEnum.Neg(Of T)(T)
  name.vb: Neg(Of T)(T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Neg``1(``0)
    name: Neg<T>
    nameWithType: DynamicEnum.Neg<T>
    fullName: MLEM.Data.DynamicEnum.Neg<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Neg``1(``0)
    name: Neg(Of T)
    nameWithType: DynamicEnum.Neg(Of T)
    fullName: MLEM.Data.DynamicEnum.Neg(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
  commentId: M:MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: GetValue(DynamicEnum)
  nameWithType: DynamicEnum.GetValue(DynamicEnum)
  fullName: MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
    name: GetValue
    nameWithType: DynamicEnum.GetValue
    fullName: MLEM.Data.DynamicEnum.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.GetValue(MLEM.Data.DynamicEnum)
    name: GetValue
    nameWithType: DynamicEnum.GetValue
    fullName: MLEM.Data.DynamicEnum.GetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Data.DynamicEnum
    name: DynamicEnum
    nameWithType: DynamicEnum
    fullName: MLEM.Data.DynamicEnum
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  commentId: M:MLEM.Data.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: GetEnumValue<T>(BigInteger)
  nameWithType: DynamicEnum.GetEnumValue<T>(BigInteger)
  fullName: MLEM.Data.DynamicEnum.GetEnumValue<T>(System.Numerics.BigInteger)
  nameWithType.vb: DynamicEnum.GetEnumValue(Of T)(BigInteger)
  fullName.vb: MLEM.Data.DynamicEnum.GetEnumValue(Of T)(System.Numerics.BigInteger)
  name.vb: GetEnumValue(Of T)(BigInteger)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
    name: GetEnumValue<T>
    nameWithType: DynamicEnum.GetEnumValue<T>
    fullName: MLEM.Data.DynamicEnum.GetEnumValue<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.GetEnumValue``1(System.Numerics.BigInteger)
    name: GetEnumValue(Of T)
    nameWithType: DynamicEnum.GetEnumValue(Of T)
    fullName: MLEM.Data.DynamicEnum.GetEnumValue(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  commentId: M:MLEM.Data.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: GetEnumValue(Type, BigInteger)
  nameWithType: DynamicEnum.GetEnumValue(Type, BigInteger)
  fullName: MLEM.Data.DynamicEnum.GetEnumValue(System.Type, System.Numerics.BigInteger)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
    name: GetEnumValue
    nameWithType: DynamicEnum.GetEnumValue
    fullName: MLEM.Data.DynamicEnum.GetEnumValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.GetEnumValue(System.Type,System.Numerics.BigInteger)
    name: GetEnumValue
    nameWithType: DynamicEnum.GetEnumValue
    fullName: MLEM.Data.DynamicEnum.GetEnumValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Parse``1(System.String)
  commentId: M:MLEM.Data.DynamicEnum.Parse``1(System.String)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: Parse<T>(String)
  nameWithType: DynamicEnum.Parse<T>(String)
  fullName: MLEM.Data.DynamicEnum.Parse<T>(System.String)
  nameWithType.vb: DynamicEnum.Parse(Of T)(String)
  fullName.vb: MLEM.Data.DynamicEnum.Parse(Of T)(System.String)
  name.vb: Parse(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Parse``1(System.String)
    name: Parse<T>
    nameWithType: DynamicEnum.Parse<T>
    fullName: MLEM.Data.DynamicEnum.Parse<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Parse``1(System.String)
    name: Parse(Of T)
    nameWithType: DynamicEnum.Parse(Of T)
    fullName: MLEM.Data.DynamicEnum.Parse(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Parse(System.Type,System.String)
  commentId: M:MLEM.Data.DynamicEnum.Parse(System.Type,System.String)
  parent: MLEM.Data.DynamicEnum
  isExternal: true
  name: Parse(Type, String)
  nameWithType: DynamicEnum.Parse(Type, String)
  fullName: MLEM.Data.DynamicEnum.Parse(System.Type, System.String)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Parse(System.Type,System.String)
    name: Parse
    nameWithType: DynamicEnum.Parse
    fullName: MLEM.Data.DynamicEnum.Parse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Parse(System.Type,System.String)
    name: Parse
    nameWithType: DynamicEnum.Parse
    fullName: MLEM.Data.DynamicEnum.Parse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ObjectCategory>()
  nameWithType: Extensions.JsonCopy<ObjectCategory>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ObjectCategory>()
  nameWithType.vb: Extensions.JsonCopy(Of ObjectCategory)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ObjectCategory)()
  name.vb: JsonCopy(Of ObjectCategory)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ObjectCategory>
    nameWithType: Extensions.JsonCopy<ObjectCategory>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ObjectCategory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ObjectCategory)
    nameWithType: Extensions.JsonCopy(Of ObjectCategory)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ObjectCategory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultTab
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  name: GetDefaultTab()
  nameWithType: Extensions.GetDefaultTab()
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectCategory.TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  name: GetDefaultDirtyOverlayTextureName()
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName()
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: MLEM.Data
  commentId: N:MLEM.Data
  isExternal: true
  name: MLEM.Data
  nameWithType: MLEM.Data
  fullName: MLEM.Data
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: MLEM.Data.DynamicEnum.Or``1(``0,``0)
  commentId: M:MLEM.Data.DynamicEnum.Or``1(``0,``0)
  isExternal: true
  name: Or<T>(T, T)
  nameWithType: DynamicEnum.Or<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.Or<T>(T, T)
  nameWithType.vb: DynamicEnum.Or(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.Or(Of T)(T, T)
  name.vb: Or(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Or``1(``0,``0)
    name: Or<T>
    nameWithType: DynamicEnum.Or<T>
    fullName: MLEM.Data.DynamicEnum.Or<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Or``1(``0,``0)
    name: Or(Of T)
    nameWithType: DynamicEnum.Or(Of T)
    fullName: MLEM.Data.DynamicEnum.Or(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.And``1(``0,``0)
  commentId: M:MLEM.Data.DynamicEnum.And``1(``0,``0)
  isExternal: true
  name: And<T>(T, T)
  nameWithType: DynamicEnum.And<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.And<T>(T, T)
  nameWithType.vb: DynamicEnum.And(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.And(Of T)(T, T)
  name.vb: And(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.And``1(``0,``0)
    name: And<T>
    nameWithType: DynamicEnum.And<T>
    fullName: MLEM.Data.DynamicEnum.And<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.And``1(``0,``0)
    name: And(Of T)
    nameWithType: DynamicEnum.And(Of T)
    fullName: MLEM.Data.DynamicEnum.And(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
  commentId: M:MLEM.Data.DynamicEnum.Xor``1(``0,``0)
  isExternal: true
  name: Xor<T>(T, T)
  nameWithType: DynamicEnum.Xor<T>(T, T)
  fullName: MLEM.Data.DynamicEnum.Xor<T>(T, T)
  nameWithType.vb: DynamicEnum.Xor(Of T)(T, T)
  fullName.vb: MLEM.Data.DynamicEnum.Xor(Of T)(T, T)
  name.vb: Xor(Of T)(T, T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
    name: Xor<T>
    nameWithType: DynamicEnum.Xor<T>
    fullName: MLEM.Data.DynamicEnum.Xor<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Xor``1(``0,``0)
    name: Xor(Of T)
    nameWithType: DynamicEnum.Xor(Of T)
    fullName: MLEM.Data.DynamicEnum.Xor(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.DynamicEnum.Neg``1(``0)
  commentId: M:MLEM.Data.DynamicEnum.Neg``1(``0)
  isExternal: true
  name: Neg<T>(T)
  nameWithType: DynamicEnum.Neg<T>(T)
  fullName: MLEM.Data.DynamicEnum.Neg<T>(T)
  nameWithType.vb: DynamicEnum.Neg(Of T)(T)
  fullName.vb: MLEM.Data.DynamicEnum.Neg(Of T)(T)
  name.vb: Neg(Of T)(T)
  spec.csharp:
  - uid: MLEM.Data.DynamicEnum.Neg``1(``0)
    name: Neg<T>
    nameWithType: DynamicEnum.Neg<T>
    fullName: MLEM.Data.DynamicEnum.Neg<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.DynamicEnum.Neg``1(``0)
    name: Neg(Of T)
    nameWithType: DynamicEnum.Neg(Of T)
    fullName: MLEM.Data.DynamicEnum.Neg(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ObjectCategory.CounterObject
  commentId: F:TinyLife.Objects.ObjectCategory.CounterObject
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Counter
  commentId: F:TinyLife.Objects.ObjectCategory.Counter
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Table
  commentId: F:TinyLife.Objects.ObjectCategory.Table
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  commentId: F:TinyLife.Objects.ObjectCategory.LargeSurfaceObject
  isExternal: true
- uid: TinyLife.Tools.FurnitureTool
  commentId: T:TinyLife.Tools.FurnitureTool
  name: FurnitureTool
  nameWithType: FurnitureTool
  fullName: TinyLife.Tools.FurnitureTool
- uid: TinyLife.Objects.ObjectCategory.SmallObject
  commentId: F:TinyLife.Objects.ObjectCategory.SmallObject
  isExternal: true
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.ObjectCategory.Sink
  commentId: F:TinyLife.Objects.ObjectCategory.Sink
  isExternal: true
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.CanCoverDoor
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverDoor
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Tools.RemoveTool
  commentId: T:TinyLife.Tools.RemoveTool
  parent: TinyLife.Tools
  name: RemoveTool
  nameWithType: RemoveTool
  fullName: TinyLife.Tools.RemoveTool
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: TinyLife.Tools.MoveTool
  commentId: T:TinyLife.Tools.MoveTool
  parent: TinyLife.Tools
  name: MoveTool
  nameWithType: MoveTool
  fullName: TinyLife.Tools.MoveTool
- uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: Action.FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: Action.FindAllFreeWalls
    fullName: TinyLife.Actions.Action.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: Action.FindAllFreeWalls
    fullName: TinyLife.Actions.Action.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Set.Workout
  commentId: F:TinyLife.Set.Workout
  isExternal: true
- uid: TinyLife.Objects.LightFurniture
  commentId: T:TinyLife.Objects.LightFurniture
  parent: TinyLife.Objects
  name: LightFurniture
  nameWithType: LightFurniture
  fullName: TinyLife.Objects.LightFurniture
- uid: TinyLife.Objects.ObjectCategory.NonColliding
  commentId: F:TinyLife.Objects.ObjectCategory.NonColliding
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.WallHanging
  commentId: F:TinyLife.Objects.ObjectCategory.WallHanging
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.CanBeThrownAway
  commentId: F:TinyLife.Objects.ObjectCategory.CanBeThrownAway
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.TrashCan
  commentId: F:TinyLife.Objects.ObjectCategory.TrashCan
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Holdable
  commentId: F:TinyLife.Objects.ObjectCategory.Holdable
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.WoodworkingTable
  commentId: F:TinyLife.Objects.FurnitureType.WoodworkingTable
  isExternal: true
- uid: TinyLife.Actions.ActionType.Scrap
  commentId: F:TinyLife.Actions.ActionType.Scrap
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.#ctor*
  commentId: Overload:TinyLife.Objects.ObjectCategory.#ctor
  name: ObjectCategory
  nameWithType: ObjectCategory.ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory.ObjectCategory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: TinyLife.Objects.ObjectCategory.op_Implicit*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_Implicit
  name: Implicit
  nameWithType: ObjectCategory.Implicit
  fullName: TinyLife.Objects.ObjectCategory.Implicit
  nameWithType.vb: ObjectCategory.Widening
  fullName.vb: TinyLife.Objects.ObjectCategory.Widening
  name.vb: Widening
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseOr*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_BitwiseOr
  name: BitwiseOr
  nameWithType: ObjectCategory.BitwiseOr
  fullName: TinyLife.Objects.ObjectCategory.BitwiseOr
- uid: TinyLife.Objects.ObjectCategory.op_BitwiseAnd*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_BitwiseAnd
  name: BitwiseAnd
  nameWithType: ObjectCategory.BitwiseAnd
  fullName: TinyLife.Objects.ObjectCategory.BitwiseAnd
- uid: TinyLife.Objects.ObjectCategory.op_ExclusiveOr*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_ExclusiveOr
  name: ExclusiveOr
  nameWithType: ObjectCategory.ExclusiveOr
  fullName: TinyLife.Objects.ObjectCategory.ExclusiveOr
- uid: TinyLife.Objects.ObjectCategory.op_OnesComplement*
  commentId: Overload:TinyLife.Objects.ObjectCategory.op_OnesComplement
  name: OnesComplement
  nameWithType: ObjectCategory.OnesComplement
  fullName: TinyLife.Objects.ObjectCategory.OnesComplement

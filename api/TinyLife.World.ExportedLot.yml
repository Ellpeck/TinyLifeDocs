### YamlMime:ManagedReference
items:
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  id: ExportedLot
  parent: TinyLife.World
  children:
  - TinyLife.World.ExportedLot.Area
  - TinyLife.World.ExportedLot.ExportedVersion
  - TinyLife.World.ExportedLot.Furniture
  - TinyLife.World.ExportedLot.GetCoveredArea(TinyLife.World.Map)
  - TinyLife.World.ExportedLot.GetPrice
  - TinyLife.World.ExportedLot.Roofs
  - TinyLife.World.ExportedLot.Tiles
  - TinyLife.World.ExportedLot.Type
  - TinyLife.World.ExportedLot.Walls
  langs:
  - csharp
  - vb
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedLot
    path: World/Lot.cs
    startLine: 304
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn exported lot is all of the relevant data of a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that should be exported to a file when clicking the &quot;Export&quot; button in the build menu.\nTo create an exported lot from a lot, use <xref href=\"TinyLife.World.Lot.Export\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class ExportedLot : IPricedObject'
    content.vb: >-
      Public Class ExportedLot
          Implements IPricedObject
  inheritance:
  - System.Object
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.ExportedLot.ExportedVersion
  commentId: F:TinyLife.World.ExportedLot.ExportedVersion
  id: ExportedVersion
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: ExportedVersion
  nameWithType: ExportedLot.ExportedVersion
  fullName: TinyLife.World.ExportedLot.ExportedVersion
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedVersion
    path: World/Lot.cs
    startLine: 309
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe game version that this lot was exported with\n"
  example: []
  syntax:
    content: public string ExportedVersion
    return:
      type: System.String
    content.vb: Public ExportedVersion As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  id: Area
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: ExportedLot.Area
  fullName: TinyLife.World.ExportedLot.Area
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: World/Lot.cs
    startLine: 313
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe area that this lot covers in the world\n"
  example: []
  syntax:
    content: public Rectangle Area
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: Public Area As Rectangle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Type
  commentId: F:TinyLife.World.ExportedLot.Type
  id: Type
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExportedLot.Type
  fullName: TinyLife.World.ExportedLot.Type
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: World/Lot.cs
    startLine: 317
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis lot&apos;s <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public LotType Type
    return:
      type: TinyLife.World.LotType
    content.vb: Public Type As LotType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  id: Furniture
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Furniture
  nameWithType: ExportedLot.Furniture
  fullName: TinyLife.World.ExportedLot.Furniture
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Furniture
    path: World/Lot.cs
    startLine: 321
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.ExportedLot.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that is present on this lot\n"
  example: []
  syntax:
    content: public List<Furniture> Furniture
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Furniture}
    content.vb: Public Furniture As List(Of Furniture)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Walls
  commentId: F:TinyLife.World.ExportedLot.Walls
  id: Walls
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Walls
  nameWithType: ExportedLot.Walls
  fullName: TinyLife.World.ExportedLot.Walls
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Walls
    path: World/Lot.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe walls that are present on this lot\n"
  example: []
  syntax:
    content: public List<Wall> Walls
    return:
      type: System.Collections.Generic.List{TinyLife.World.Wall}
    content.vb: Public Walls As List(Of Wall)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Roofs
  commentId: F:TinyLife.World.ExportedLot.Roofs
  id: Roofs
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Roofs
  nameWithType: ExportedLot.Roofs
  fullName: TinyLife.World.ExportedLot.Roofs
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Roofs
    path: World/Lot.cs
    startLine: 329
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe roofs that are present on this lot\n"
  example: []
  syntax:
    content: public List<Roof> Roofs
    return:
      type: System.Collections.Generic.List{TinyLife.World.Roof}
    content.vb: Public Roofs As List(Of Roof)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.Tiles
  commentId: F:TinyLife.World.ExportedLot.Tiles
  id: Tiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: ExportedLot.Tiles
  fullName: TinyLife.World.ExportedLot.Tiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tiles
    path: World/Lot.cs
    startLine: 333
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe ground tiles of this lot\n"
  example: []
  syntax:
    content: public Tile[, ] Tiles
    return:
      type: TinyLife.World.Tile[,]
    content.vb: Public Tiles As Tile(,)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.GetPrice
  commentId: M:TinyLife.World.ExportedLot.GetPrice
  id: GetPrice
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: ExportedLot.GetPrice()
  fullName: TinyLife.World.ExportedLot.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: World/Lot.cs
    startLine: 336
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.World.ExportedLot.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedLot.GetCoveredArea(TinyLife.World.Map)
  commentId: M:TinyLife.World.ExportedLot.GetCoveredArea(TinyLife.World.Map)
  id: GetCoveredArea(TinyLife.World.Map)
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetCoveredArea(Map)
  nameWithType: ExportedLot.GetCoveredArea(Map)
  fullName: TinyLife.World.ExportedLot.GetCoveredArea(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCoveredArea
    path: World/Lot.cs
    startLine: 350
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this lot actually covers.\nThe area covered by this lot is always bounded by its <xref href=\"TinyLife.World.ExportedLot.Area\" data-throw-if-not-resolved=\"false\"></xref>, but will be smaller if there are fewer objects on the lot.\n"
  example: []
  syntax:
    content: public RectangleF GetCoveredArea(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    return:
      type: MLEM.Misc.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea(map As Map) As RectangleF
  overload: TinyLife.World.ExportedLot.GetCoveredArea*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ExportedLot>()
  nameWithType: Extensions.JsonCopy<ExportedLot>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedLot>()
  nameWithType.vb: Extensions.JsonCopy(Of ExportedLot)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedLot)()
  name.vb: JsonCopy(Of ExportedLot)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ExportedLot>
    nameWithType: Extensions.JsonCopy<ExportedLot>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedLot>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ExportedLot)
    nameWithType: Extensions.JsonCopy(Of ExportedLot)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedLot)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Furniture>
  nameWithType: List<Furniture>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Furniture>
  nameWithType.vb: List(Of Furniture)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Furniture)
  name.vb: List(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Wall>
  nameWithType: List<Wall>
  fullName: System.Collections.Generic.List<TinyLife.World.Wall>
  nameWithType.vb: List(Of Wall)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Wall)
  name.vb: List(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Roof>
  nameWithType: List<Roof>
  fullName: System.Collections.Generic.List<TinyLife.World.Roof>
  nameWithType.vb: List(Of Roof)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Roof)
  name.vb: List(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Roof
    name: Roof
    nameWithType: Roof
    fullName: TinyLife.World.Roof
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Roof
    name: Roof
    nameWithType: Roof
    fullName: TinyLife.World.Roof
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile[,]
  isExternal: true
  name: Tile[,]
  nameWithType: Tile[,]
  fullName: TinyLife.World.Tile[,]
  nameWithType.vb: Tile(,)
  fullName.vb: TinyLife.World.Tile(,)
  name.vb: Tile(,)
  spec.csharp:
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: TinyLife.World.ExportedLot.GetPrice*
  commentId: Overload:TinyLife.World.ExportedLot.GetPrice
  name: GetPrice
  nameWithType: ExportedLot.GetPrice
  fullName: TinyLife.World.ExportedLot.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  isExternal: true
- uid: TinyLife.World.ExportedLot.GetCoveredArea*
  commentId: Overload:TinyLife.World.ExportedLot.GetCoveredArea
  name: GetCoveredArea
  nameWithType: ExportedLot.GetCoveredArea
  fullName: TinyLife.World.ExportedLot.GetCoveredArea
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc

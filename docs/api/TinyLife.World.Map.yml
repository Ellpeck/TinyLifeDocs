### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  id: Map
  parent: TinyLife.World
  children:
  - TinyLife.World.Map.#ctor(System.String,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  - TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  - TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  - TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  - TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  - TinyLife.World.Map.AddWall(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.AddWall(TinyLife.World.Wall,System.Boolean)
  - TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  - TinyLife.World.Map.Finalize
  - TinyLife.World.Map.GetAllLotEmployments
  - TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  - TinyLife.World.Map.GetClosestRoad(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetClosestSidewalk(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  - TinyLife.World.Map.GetDeadPerson(System.Guid)
  - TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.World.Map.GetExitRoads
  - TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  - TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  - TinyLife.World.Map.GetHouseholds
  - TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetLot(System.Guid)
  - TinyLife.World.Map.GetLots
  - TinyLife.World.Map.GetObject``1(System.Guid)
  - TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetPeople
  - TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  - TinyLife.World.Map.GetRegularVisitors
  - TinyLife.World.Map.GetRoads
  - TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  - TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  - TinyLife.World.Map.GetWallBetween(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetWalls(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.IsInSectionBounds(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  - TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.LoadStaticMap(System.String,System.Action{System.String},System.Boolean)
  - TinyLife.World.Map.MailToSend
  - TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.MarkTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean)
  - TinyLife.World.Map.Name
  - TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.World.Map.OnObjectAdded
  - TinyLife.World.Map.OnObjectRemoved
  - TinyLife.World.Map.OnUpdate
  - TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  - TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  - TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  - TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  - TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  - TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  - TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  - TinyLife.World.Map.RemoveWall(TinyLife.World.Wall,System.Boolean)
  - TinyLife.World.Map.RoadRadius
  - TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  - TinyLife.World.Map.Size
  - TinyLife.World.Map.SizeInSections
  - TinyLife.World.Map.StaticVersion
  - TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.World.Map.UpdateExternalPeople
  - TinyLife.World.Map.Validate(System.Action{System.String},System.Boolean)
  - TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
  type: Class
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: World/Map.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA map holds all of the data about a city, like its tiles, its objects and its roads.\nA map is split into <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> objects which allows faster retrieval of objects in an area.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Map : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Map
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Map.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Map.RoadRadius
  commentId: F:TinyLife.World.Map.RoadRadius
  id: RoadRadius
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RoadRadius
  nameWithType: Map.RoadRadius
  fullName: TinyLife.World.Map.RoadRadius
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RoadRadius
    path: World/Map.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis field holds the radius that roads are required to have (in road tiles) excluding the center dotted line tiles.\nIt is set to 2.\n"
  example: []
  syntax:
    content: public const int RoadRadius = 2
    return:
      type: System.Int32
    content.vb: Public Const RoadRadius As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.World.Map.OnUpdate
  commentId: E:TinyLife.World.Map.OnUpdate
  id: OnUpdate
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: Map.OnUpdate
  fullName: TinyLife.World.Map.OnUpdate
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnUpdate
    path: World/Map.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when this map is updated in <xref href=\"TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public event UpdateDelegate OnUpdate
    return:
      type: TinyLife.World.UpdateDelegate
    content.vb: Public Event OnUpdate As UpdateDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.OnObjectAdded
  commentId: E:TinyLife.World.Map.OnObjectAdded
  id: OnObjectAdded
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnObjectAdded
  nameWithType: Map.OnObjectAdded
  fullName: TinyLife.World.Map.OnObjectAdded
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnObjectAdded
    path: World/Map.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> is added to this map using <xref href=\"TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public event Action<MapObject> OnObjectAdded
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Event OnObjectAdded As Action(Of MapObject)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.OnObjectRemoved
  commentId: E:TinyLife.World.Map.OnObjectRemoved
  id: OnObjectRemoved
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnObjectRemoved
  nameWithType: Map.OnObjectRemoved
  fullName: TinyLife.World.Map.OnObjectRemoved
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnObjectRemoved
    path: World/Map.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> is removed from this map using <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public event Action<MapObject> OnObjectRemoved
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Event OnObjectRemoved As Action(Of MapObject)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.Name
  commentId: F:TinyLife.World.Map.Name
  id: Name
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Map.Name
  fullName: TinyLife.World.Map.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: World/Map.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this map\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly string Name
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public ReadOnly Name As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Map.MailToSend
  commentId: F:TinyLife.World.Map.MailToSend
  id: MailToSend
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MailToSend
  nameWithType: Map.MailToSend
  fullName: TinyLife.World.Map.MailToSend
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MailToSend
    path: World/Map.cs
    startLine: 95
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA list of all <xref href=\"TinyLife.World.Mail\" data-throw-if-not-resolved=\"false\"></xref> that needs to be sent by a mail carrier the next morning.\nTo send mail, use <see cref=\"!:SendMail\"></see>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Mail> MailToSend
    return:
      type: System.Collections.Generic.List{TinyLife.World.Mail}
    content.vb: >-
      <DataMember>

      Public ReadOnly MailToSend As List(Of Mail)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Map.SizeInSections
  commentId: P:TinyLife.World.Map.SizeInSections
  id: SizeInSections
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: SizeInSections
  nameWithType: Map.SizeInSections
  fullName: TinyLife.World.Map.SizeInSections
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SizeInSections
    path: World/Map.cs
    startLine: 100
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe size, in sections (not tiles) that this map has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Point SizeInSections { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: >-
      <DataMember>

      Public ReadOnly Property SizeInSections As Point
  overload: TinyLife.World.Map.SizeInSections*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Map.Size
  commentId: P:TinyLife.World.Map.Size
  id: Size
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Map.Size
  fullName: TinyLife.World.Map.Size
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Size
    path: World/Map.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe size in tiles that this map has.\nThis is always <xref href=\"TinyLife.World.Map.SizeInSections\" data-throw-if-not-resolved=\"false\"></xref> multiplied by <xref href=\"TinyLife.World.MapSection.Size\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point Size { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property Size As Point
  overload: TinyLife.World.Map.Size*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Map.StaticVersion
  commentId: P:TinyLife.World.Map.StaticVersion
  id: StaticVersion
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: StaticVersion
  nameWithType: Map.StaticVersion
  fullName: TinyLife.World.Map.StaticVersion
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StaticVersion
    path: World/Map.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe static version of this map.\nWhen a new save file is created, a static version of each map is loaded and used as the save file&apos;s basis.\nIf the static version of the save file is newer, their save file is updated to the new static map version, which causes all non-lot objects to be copied to the saved map.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int StaticVersion { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Property StaticVersion As Integer
  overload: TinyLife.World.Map.StaticVersion*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Map.#ctor(System.String,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.#ctor(System.String,Microsoft.Xna.Framework.Point)
  id: '#ctor(System.String,Microsoft.Xna.Framework.Point)'
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Map(String, Point)
  nameWithType: Map.Map(String, Point)
  fullName: TinyLife.World.Map.Map(System.String, Microsoft.Xna.Framework.Point)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: World/Map.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new map with the given name and size\n"
  example: []
  syntax:
    content: public Map(string name, Point sizeInSections)
    parameters:
    - id: name
      type: System.String
      description: The name of this map
    - id: sizeInSections
      type: Microsoft.Xna.Framework.Point
      description: The size, in sections, of this map
    content.vb: Public Sub New(name As String, sizeInSections As Point)
  overload: TinyLife.World.Map.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.Finalize
  commentId: M:TinyLife.World.Map.Finalize
  id: Finalize
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: Map.Finalize()
  fullName: TinyLife.World.Map.Finalize()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Finalize
    path: World/Map.cs
    startLine: 153
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: TinyLife.World.Map.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Map.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: World/Map.cs
    startLine: 164
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nUpdates this map, its <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> objects and its <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.World.Map.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  commentId: M:TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Boolean, Nullable<RectangleF>, Nullable<Matrix>, RenderTarget2D, Boolean)
  nameWithType: Map.Draw(GameTime, SpriteBatch, Boolean, Nullable<RectangleF>, Nullable<Matrix>, RenderTarget2D, Boolean)
  fullName: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, System.Boolean, System.Nullable<MLEM.Misc.RectangleF>, System.Nullable<Microsoft.Xna.Framework.Matrix>, Microsoft.Xna.Framework.Graphics.RenderTarget2D, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: World/Map.cs
    startLine: 213
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this map and all of its objects.\nNote that drawing in this manner uses multiple <xref href=\"Microsoft.Xna.Framework.Graphics.RenderTarget2D\" data-throw-if-not-resolved=\"false\"></xref> objects, for things like the ground and the lightmaps.\n"
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, bool selectionMode, RectangleF? visibleArea = null, Matrix? visibleMatrix = null, RenderTarget2D lightmap = null, bool ignoreObjectVisibility = false)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: selectionMode
      type: System.Boolean
      description: Whether we&apos;re drawing in selection mode (&quot;ShowSelectionEffect&quot; cheat displays this mode)
    - id: visibleArea
      type: System.Nullable{MLEM.Misc.RectangleF}
      description: The area that is visible to the camera. If this is null, <xref href="MLEM.Cameras.Camera.GetVisibleRectangle" data-throw-if-not-resolved="false"></xref> is used instead
    - id: visibleMatrix
      type: System.Nullable{Microsoft.Xna.Framework.Matrix}
      description: A matrix that has a translation and scale that determines the visible area of the screenshot
    - id: lightmap
      type: Microsoft.Xna.Framework.Graphics.RenderTarget2D
      description: The light map to draw lighting data onto, or null to use the default light map
    - id: ignoreObjectVisibility
      type: System.Boolean
      description: Whether object visibility (<xref href="TinyLife.Objects.MapObject.GetVisibility" data-throw-if-not-resolved="false"></xref>) should be ignored
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, selectionMode As Boolean, visibleArea As RectangleF? = Nothing, visibleMatrix As Matrix? = Nothing, lightmap As RenderTarget2D = Nothing, ignoreObjectVisibility As Boolean = False)
  overload: TinyLife.World.Map.Draw*
  nameWithType.vb: Map.Draw(GameTime, SpriteBatch, Boolean, Nullable(Of RectangleF), Nullable(Of Matrix), RenderTarget2D, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, System.Boolean, System.Nullable(Of MLEM.Misc.RectangleF), System.Nullable(Of Microsoft.Xna.Framework.Matrix), Microsoft.Xna.Framework.Graphics.RenderTarget2D, System.Boolean)
  name.vb: Draw(GameTime, SpriteBatch, Boolean, Nullable(Of RectangleF), Nullable(Of Matrix), RenderTarget2D, Boolean)
- uid: TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  id: GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetDepth(Vector2, Single, Boolean, Boolean, Boolean)
  nameWithType: Map.GetDepth(Vector2, Single, Boolean, Boolean, Boolean)
  fullName: TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2, System.Single, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDepth
    path: World/Map.cs
    startLine: 458
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nGets the depth that should be used for drawing a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.World.Tile\" data-throw-if-not-resolved=\"false\"></xref> at the given position\n"
  example: []
  syntax:
    content: public float GetDepth(Vector2 worldPos, float offset = 0F, bool center = true, bool borderOffset = false, bool applyCameraRotation = true)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to get depth for, in tile coordinates
    - id: offset
      type: System.Single
      description: An offset added to the depth value
    - id: center
      type: System.Boolean
      description: Whether the position should be centered on the x axis
    - id: borderOffset
      type: System.Boolean
      description: Whether the map border offset should be applied to the camera rotation using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>. This value only has an effect if <code data-dev-comment-type="paramref" class="paramref">applyCameraRotation</code> is true
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game&apos;s current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Single
      description: The depth to pass to the draw call
    content.vb: Public Function GetDepth(worldPos As Vector2, offset As Single = 0F, center As Boolean = True, borderOffset As Boolean = False, applyCameraRotation As Boolean = True) As Single
  overload: TinyLife.World.Map.GetDepth*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  id: IsInBounds(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsInBounds(Point)
  nameWithType: Map.IsInBounds(Point)
  fullName: TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInBounds
    path: World/Map.cs
    startLine: 469
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given position is in bounds of this map&apos;s <xref href=\"TinyLife.World.Map.Size\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsInBounds(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: System.Boolean
      description: true if the position is in bounds, false otherwise
    content.vb: Public Function IsInBounds(pos As Point) As Boolean
  overload: TinyLife.World.Map.IsInBounds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.IsInSectionBounds(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsInSectionBounds(Microsoft.Xna.Framework.Point)
  id: IsInSectionBounds(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsInSectionBounds(Point)
  nameWithType: Map.IsInSectionBounds(Point)
  fullName: TinyLife.World.Map.IsInSectionBounds(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInSectionBounds
    path: World/Map.cs
    startLine: 478
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given section position is in bounds of this map&apos;s <xref href=\"TinyLife.World.Map.SizeInSections\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsInSectionBounds(Point section)
    parameters:
    - id: section
      type: Microsoft.Xna.Framework.Point
      description: The section position to query
    return:
      type: System.Boolean
      description: true if the position is in bounds, false otherwise
    content.vb: Public Function IsInSectionBounds(section As Point) As Boolean
  overload: TinyLife.World.Map.IsInSectionBounds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  id: AddRoad(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddRoad(Point)
  nameWithType: Map.AddRoad(Point)
  fullName: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRoad
    path: World/Map.cs
    startLine: 487
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a road to the map at the given position.\nThis doesn&apos;t actually add the road tiles, but it notifies the pathfinder that there is a road center at this location.\n"
  example: []
  syntax:
    content: public void AddRoad(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to add a road to
    content.vb: Public Sub AddRoad(pos As Point)
  overload: TinyLife.World.Map.AddRoad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  id: IsRoad(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsRoad(Point)
  nameWithType: Map.IsRoad(Point)
  fullName: TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsRoad
    path: World/Map.cs
    startLine: 497
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given position contains a road.\nThis doesn&apos;t query road tiles, but it queries for road markers added by <xref href=\"TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsRoad(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsRoad(pos As Point) As Boolean
  overload: TinyLife.World.Map.IsRoad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetClosestRoad(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetClosestRoad(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetClosestRoad(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestRoad(Point, Int32)
  nameWithType: Map.GetClosestRoad(Point, Int32)
  fullName: TinyLife.World.Map.GetClosestRoad(Microsoft.Xna.Framework.Point, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestRoad
    path: World/Map.cs
    startLine: 507
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the clost road marker to the given position, keeping the given radius in mind.\n"
  example: []
  syntax:
    content: public Point? GetClosestRoad(Point pos, int radius)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to find the closest road to
    - id: radius
      type: System.Int32
      description: The radius, in tiles, to search for roads in
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: The closest road point
    content.vb: Public Function GetClosestRoad(pos As Point, radius As Integer) As Point?
  overload: TinyLife.World.Map.GetClosestRoad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetRoads
  commentId: M:TinyLife.World.Map.GetRoads
  id: GetRoads
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoads()
  nameWithType: Map.GetRoads()
  fullName: TinyLife.World.Map.GetRoads()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoads
    path: World/Map.cs
    startLine: 520
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the road markers on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Point> GetRoads()
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of all road markers on this map
    content.vb: Public Function GetRoads As IEnumerable(Of Point)
  overload: TinyLife.World.Map.GetRoads*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetClosestSidewalk(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Map.GetClosestSidewalk(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  id: GetClosestSidewalk(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestSidewalk(Point, Vector2)
  nameWithType: Map.GetClosestSidewalk(Point, Vector2)
  fullName: TinyLife.World.Map.GetClosestSidewalk(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestSidewalk
    path: World/Map.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the closest sidewalk position to the given road position.\nA sidewalk is a tile whose name starts with &quot;Concrete&quot; that is <xref href=\"TinyLife.World.Map.RoadRadius\" data-throw-if-not-resolved=\"false\"></xref>+1 tiles away from the road marker.\nNote that the road position must have <xref href=\"TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> return true for it.\n"
  example: []
  syntax:
    content: public Point? GetClosestSidewalk(Point road, Vector2 pos)
    parameters:
    - id: road
      type: Microsoft.Xna.Framework.Point
      description: The road marker
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to which the distance should be shortest
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: The closest sidewalk position
    content.vb: Public Function GetClosestSidewalk(road As Point, pos As Vector2) As Point?
  overload: TinyLife.World.Map.GetClosestSidewalk*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  id: GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetTilesAround(Vector2, Int32, Boolean, Boolean, Predicate<Point>)
  nameWithType: Map.GetTilesAround(Vector2, Int32, Boolean, Boolean, Predicate<Point>)
  fullName: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2, System.Int32, System.Boolean, System.Boolean, System.Predicate<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTilesAround
    path: World/Map.cs
    startLine: 550
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of tiles around the given position that match the given conditions\n"
  example: []
  syntax:
    content: public IEnumerable<Point> GetTilesAround(Vector2 pos, int radius, bool hasToBeOnLot = false, bool sameRoom = false, Predicate<Point> valid = null)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position
    - id: radius
      type: System.Int32
      description: The radius, in tiles
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether the returned positions have to be on a lot
    - id: sameRoom
      type: System.Boolean
      description: Whether the returned positions have to be in the same room as the <code data-dev-comment-type="paramref" class="paramref">pos</code> passed
    - id: valid
      type: System.Predicate{Microsoft.Xna.Framework.Point}
      description: A function that determines whether a position should be returned. If this is null, all valid positions are returned.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of positions that match the given conditions
    content.vb: Public Function GetTilesAround(pos As Vector2, radius As Integer, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False, valid As Predicate(Of Point) = Nothing) As IEnumerable(Of Point)
  overload: TinyLife.World.Map.GetTilesAround*
  nameWithType.vb: Map.GetTilesAround(Vector2, Int32, Boolean, Boolean, Predicate(Of Point))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2, System.Int32, System.Boolean, System.Boolean, System.Predicate(Of Microsoft.Xna.Framework.Point))
  name.vb: GetTilesAround(Vector2, Int32, Boolean, Boolean, Predicate(Of Point))
- uid: TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)
  id: GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestEmptyTile(Vector2, Int32, Boolean, Boolean, Boolean)
  nameWithType: Map.GetClosestEmptyTile(Vector2, Int32, Boolean, Boolean, Boolean)
  fullName: TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2, System.Int32, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestEmptyTile
    path: World/Map.cs
    startLine: 577
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the position of the closest tile that is empty.\nAn empty tile is a tile that has no <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances on it.\n"
  example: []
  syntax:
    content: public Point? GetClosestEmptyTile(Vector2 pos, int radius = 2, bool ignorePeople = true, bool hasToBeOnLot = false, bool sameRoom = false)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to be close to
    - id: radius
      type: System.Int32
      description: The radius to search for empty tiles in
    - id: ignorePeople
      type: System.Boolean
      description: Whether or not people should be ignored. If this is true, the returned empty tile might currently be occupied by a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref>.
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether or not the returned tile position has to be part of a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>
    - id: sameRoom
      type: System.Boolean
      description: Whether or not the returned tile position has to be in the same room as <code data-dev-comment-type="paramref" class="paramref">pos</code>
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: The closest empty tile, or null if there isn&apos;t one
    content.vb: Public Function GetClosestEmptyTile(pos As Vector2, radius As Integer = 2, ignorePeople As Boolean = True, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False) As Point?
  overload: TinyLife.World.Map.GetClosestEmptyTile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  id: GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRandomTile(Random, Vector2, Int32, Boolean, Boolean, Predicate<Point>)
  nameWithType: Map.GetRandomTile(Random, Vector2, Int32, Boolean, Boolean, Predicate<Point>)
  fullName: TinyLife.World.Map.GetRandomTile(System.Random, Microsoft.Xna.Framework.Vector2, System.Int32, System.Boolean, System.Boolean, System.Predicate<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomTile
    path: World/Map.cs
    startLine: 595
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a random tile in the given radius that matches the given predicate.\nIf no tile is found, an empty <xref href=\"System.Nullable%601\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public Point? GetRandomTile(Random random, Vector2 pos, int radius = 32, bool hasToBeOnLot = false, bool sameRoom = false, Predicate<Point> valid = null)
    parameters:
    - id: random
      type: System.Random
      description: The random to use
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the radius should be centered on
    - id: radius
      type: System.Int32
      description: The radius
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether the position returned has to be on a lot
    - id: sameRoom
      type: System.Boolean
      description: Whether the position returned has to be in the same room as the <code data-dev-comment-type="paramref" class="paramref">pos</code> passed
    - id: valid
      type: System.Predicate{Microsoft.Xna.Framework.Point}
      description: A predicate that determines whether tile should be included
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: A random tile that matches the given conditions
    content.vb: Public Function GetRandomTile(random As Random, pos As Vector2, radius As Integer = 32, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False, valid As Predicate(Of Point) = Nothing) As Point?
  overload: TinyLife.World.Map.GetRandomTile*
  nameWithType.vb: Map.GetRandomTile(Random, Vector2, Int32, Boolean, Boolean, Predicate(Of Point))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.GetRandomTile(System.Random, Microsoft.Xna.Framework.Vector2, System.Int32, System.Boolean, System.Boolean, System.Predicate(Of Microsoft.Xna.Framework.Point))
  name.vb: GetRandomTile(Random, Vector2, Int32, Boolean, Boolean, Predicate(Of Point))
- uid: TinyLife.World.Map.Validate(System.Action{System.String},System.Boolean)
  commentId: M:TinyLife.World.Map.Validate(System.Action{System.String},System.Boolean)
  id: Validate(System.Action{System.String},System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Validate(Action<String>, Boolean)
  nameWithType: Map.Validate(Action<String>, Boolean)
  fullName: TinyLife.World.Map.Validate(System.Action<System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: World/Map.cs
    startLine: 620
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\nWhen called on a map, each <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> is validated, and roads and rooms are generated.\n"
  example: []
  syntax:
    content: public void Validate(Action<string> setState, bool thorough = true)
    parameters:
    - id: setState
      type: System.Action{System.String}
    - id: thorough
      type: System.Boolean
    content.vb: Public Sub Validate(setState As Action(Of String), thorough As Boolean = True)
  overload: TinyLife.World.Map.Validate*
  nameWithType.vb: Map.Validate(Action(Of String), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.Validate(System.Action(Of System.String), System.Boolean)
  name.vb: Validate(Action(Of String), Boolean)
- uid: TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point)
  id: GetRoom(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoom(Point)
  nameWithType: Map.GetRoom(Point)
  fullName: TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoom
    path: World/Map.cs
    startLine: 668
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the room that the given position is contained in\n"
  example: []
  syntax:
    content: public Room GetRoom(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: TinyLife.World.Room
      description: The room at that location, or null if there is none
    content.vb: Public Function GetRoom(pos As Point) As Room
  overload: TinyLife.World.Map.GetRoom*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetLot(System.Guid)
  commentId: M:TinyLife.World.Map.GetLot(System.Guid)
  id: GetLot(System.Guid)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLot(Guid)
  nameWithType: Map.GetLot(Guid)
  fullName: TinyLife.World.Map.GetLot(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLot
    path: World/Map.cs
    startLine: 683
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the lot with the given id on this map.\nThe returned lot&apos;s <xref href=\"TinyLife.World.Lot.Id\" data-throw-if-not-resolved=\"false\"></xref> will equal the given id.\n"
  example: []
  syntax:
    content: public Lot GetLot(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The id that the lot should have
    return:
      type: TinyLife.World.Lot
      description: The lot with the given id
    content.vb: Public Function GetLot(id As Guid) As Lot
  overload: TinyLife.World.Map.GetLot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  id: GetLot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLot(Point)
  nameWithType: Map.GetLot(Point)
  fullName: TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLot
    path: World/Map.cs
    startLine: 694
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the lot that is present at the given position.\nThe lot returned will always have its <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref> contain the passed position.\n"
  example: []
  syntax:
    content: public Lot GetLot(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: TinyLife.World.Lot
      description: The lot at that position, or null if there is none
    content.vb: Public Function GetLot(pos As Point) As Lot
  overload: TinyLife.World.Map.GetLot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  commentId: M:TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  id: AddLot(Microsoft.Xna.Framework.Rectangle)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddLot(Rectangle)
  nameWithType: Map.AddLot(Rectangle)
  fullName: TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLot
    path: World/Map.cs
    startLine: 707
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a new lot with the given area to this map&apos;s lots\n"
  example: []
  syntax:
    content: public Lot AddLot(Rectangle area)
    parameters:
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area that the new lot should have
    return:
      type: TinyLife.World.Lot
      description: The newly created lot
    content.vb: Public Function AddLot(area As Rectangle) As Lot
  overload: TinyLife.World.Map.AddLot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  id: RemoveLot(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveLot(Lot)
  nameWithType: Map.RemoveLot(Lot)
  fullName: TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveLot
    path: World/Map.cs
    startLine: 717
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given lot from this map&apos;s lots\n"
  example: []
  syntax:
    content: public void RemoveLot(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to remove
    content.vb: Public Sub RemoveLot(lot As Lot)
  overload: TinyLife.World.Map.RemoveLot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetLots
  commentId: M:TinyLife.World.Map.GetLots
  id: GetLots
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLots()
  nameWithType: Map.GetLots()
  fullName: TinyLife.World.Map.GetLots()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLots
    path: World/Map.cs
    startLine: 725
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> objects on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Lot> GetLots()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
      description: This map&apos;s lots
    content.vb: Public Function GetLots As IEnumerable(Of Lot)
  overload: TinyLife.World.Map.GetLots*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddWall(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.AddWall(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: AddWall(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddWall(Point, Point)
  nameWithType: Map.AddWall(Point, Point)
  fullName: TinyLife.World.Map.AddWall(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddWall
    path: World/Map.cs
    startLine: 736
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given wall to the given position.\n"
  example: []
  syntax:
    content: public bool AddWall(Point pos, Point secondPos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the new wall should have
    - id: secondPos
      type: Microsoft.Xna.Framework.Point
      description: The second position that the new wall should have
    return:
      type: System.Boolean
      description: Whether the wall could be added
    content.vb: Public Function AddWall(pos As Point, secondPos As Point) As Boolean
  overload: TinyLife.World.Map.AddWall*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddWall(TinyLife.World.Wall,System.Boolean)
  commentId: M:TinyLife.World.Map.AddWall(TinyLife.World.Wall,System.Boolean)
  id: AddWall(TinyLife.World.Wall,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddWall(Wall, Boolean)
  nameWithType: Map.AddWall(Wall, Boolean)
  fullName: TinyLife.World.Map.AddWall(TinyLife.World.Wall, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddWall
    path: World/Map.cs
    startLine: 748
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given wall to the given position.\nOptionally, the <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref> related to that wall is re-calculated.\n"
  example: []
  syntax:
    content: public bool AddWall(Wall wall, bool initializeRooms = true)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
      description: The wall to add
    - id: initializeRooms
      type: System.Boolean
      description: Whether added rooms should have concrete and roofing added to them. Defaults to true.
    return:
      type: System.Boolean
      description: Whether the wall could be added successfully
    content.vb: Public Function AddWall(wall As Wall, initializeRooms As Boolean = True) As Boolean
  overload: TinyLife.World.Map.AddWall*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveWall(TinyLife.World.Wall,System.Boolean)
  commentId: M:TinyLife.World.Map.RemoveWall(TinyLife.World.Wall,System.Boolean)
  id: RemoveWall(TinyLife.World.Wall,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveWall(Wall, Boolean)
  nameWithType: Map.RemoveWall(Wall, Boolean)
  fullName: TinyLife.World.Map.RemoveWall(TinyLife.World.Wall, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveWall
    path: World/Map.cs
    startLine: 759
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given wall from the map\n"
  example: []
  syntax:
    content: public bool RemoveWall(Wall wall, bool initializeRooms = true)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
      description: The wall to remove
    - id: initializeRooms
      type: System.Boolean
      description: Whether added rooms should have concrete and roofing added to them. Defaults to true.
    return:
      type: System.Boolean
      description: Whether the wall was present on the map and could be removed
    content.vb: Public Function RemoveWall(wall As Wall, initializeRooms As Boolean = True) As Boolean
  overload: TinyLife.World.Map.RemoveWall*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetWallBetween(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetWallBetween(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: GetWallBetween(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetWallBetween(Point, Point)
  nameWithType: Map.GetWallBetween(Point, Point)
  fullName: TinyLife.World.Map.GetWallBetween(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWallBetween
    path: World/Map.cs
    startLine: 775
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the wall between the <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">secondPos</code>.\nA wall is between two positions if its <xref href=\"TinyLife.World.Wall.Positions\" data-throw-if-not-resolved=\"false\"></xref> are exactly those two positions, ignoring their order.\n"
  example: []
  syntax:
    content: public Wall GetWallBetween(Point pos, Point secondPos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The first position
    - id: secondPos
      type: Microsoft.Xna.Framework.Point
      description: The second position
    return:
      type: TinyLife.World.Wall
      description: The wall between the two positions, or null if there is none
    content.vb: Public Function GetWallBetween(pos As Point, secondPos As Point) As Wall
  overload: TinyLife.World.Map.GetWallBetween*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point)
  id: GetTile(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetTile(Point)
  nameWithType: Map.GetTile(Point)
  fullName: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTile
    path: World/Map.cs
    startLine: 789
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the tile at the given position on this map\n"
  example: []
  syntax:
    content: public Tile GetTile(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: TinyLife.World.Tile
      description: The tile at that position
    content.vb: Public Function GetTile(pos As Point) As Tile
  overload: TinyLife.World.Map.GetTile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  commentId: M:TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  id: SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: SetTile(Point, Tile)
  nameWithType: Map.SetTile(Point, Tile)
  fullName: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point, TinyLife.World.Tile)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetTile
    path: World/Map.cs
    startLine: 799
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nSets the tile at the given position to the given tile\n"
  example: []
  syntax:
    content: public void SetTile(Point pos, Tile tile)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position
    - id: tile
      type: TinyLife.World.Tile
      description: The tile
    content.vb: Public Sub SetTile(pos As Point, tile As Tile)
  overload: TinyLife.World.Map.SetTile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  commentId: M:TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  id: AddRoof(TinyLife.World.Roof)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddRoof(Roof)
  nameWithType: Map.AddRoof(Roof)
  fullName: TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRoof
    path: World/Map.cs
    startLine: 814
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given roof to this map\n"
  example: []
  syntax:
    content: public void AddRoof(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to add
    content.vb: Public Sub AddRoof(roof As Roof)
  overload: TinyLife.World.Map.AddRoof*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point)
  id: GetRoof(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoof(Point)
  nameWithType: Map.GetRoof(Point)
  fullName: TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoof
    path: World/Map.cs
    startLine: 824
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nGets a <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> whose area contains the given position\n"
  example: []
  syntax:
    content: public Roof GetRoof(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to find a roof at
    return:
      type: TinyLife.World.Roof
      description: The roof at that position, or null if there is none
    content.vb: Public Function GetRoof(pos As Point) As Roof
  overload: TinyLife.World.Map.GetRoof*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  commentId: M:TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  id: RemoveRoof(TinyLife.World.Roof)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveRoof(Roof)
  nameWithType: Map.RemoveRoof(Roof)
  fullName: TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveRoof
    path: World/Map.cs
    startLine: 837
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> from this map\n"
  example: []
  syntax:
    content: public void RemoveRoof(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to remove
    content.vb: Public Sub RemoveRoof(roof As Roof)
  overload: TinyLife.World.Map.RemoveRoof*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  id: GetObjects``1(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetObjects<T>(RectangleF)
  nameWithType: Map.GetObjects<T>(RectangleF)
  fullName: TinyLife.World.Map.GetObjects<T>(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObjects
    path: World/Map.cs
    startLine: 848
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of objects that are present in the given area.\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetObjects<T>(RectangleF area)
          where T : MapObject
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area, in tile coordinates
    typeParameters:
    - id: T
      description: The type that the objects need to have
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of objects that match the criteria
    content.vb: Public Function GetObjects(Of T As MapObject)(area As RectangleF) As IEnumerable(Of T)
  overload: TinyLife.World.Map.GetObjects*
  nameWithType.vb: Map.GetObjects(Of T)(RectangleF)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.GetObjects(Of T)(MLEM.Misc.RectangleF)
  name.vb: GetObjects(Of T)(RectangleF)
- uid: TinyLife.World.Map.GetObject``1(System.Guid)
  commentId: M:TinyLife.World.Map.GetObject``1(System.Guid)
  id: GetObject``1(System.Guid)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetObject<T>(Guid)
  nameWithType: Map.GetObject<T>(Guid)
  fullName: TinyLife.World.Map.GetObject<T>(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObject
    path: World/Map.cs
    startLine: 864
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the object with the given id of the given type.\nIf there is no object with that id, or its type does not match, null is returned.\n"
  example: []
  syntax:
    content: >-
      public T GetObject<T>(Guid id)
          where T : MapObject
    parameters:
    - id: id
      type: System.Guid
      description: The id that the returned object should have
    typeParameters:
    - id: T
      description: The type that the object is expected to have
    return:
      type: '{T}'
      description: The object, or null if there is no matching one
    content.vb: Public Function GetObject(Of T As MapObject)(id As Guid) As T
  overload: TinyLife.World.Map.GetObject*
  nameWithType.vb: Map.GetObject(Of T)(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.GetObject(Of T)(System.Guid)
  name.vb: GetObject(Of T)(Guid)
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  id: AddObject(TinyLife.Objects.MapObject)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddObject(MapObject)
  nameWithType: Map.AddObject(MapObject)
  fullName: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddObject
    path: World/Map.cs
    startLine: 879
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given object to this map.\nNote that, if the object&apos;s <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> is already present on this map, this method will cause an exception.\n"
  example: []
  syntax:
    content: public void AddObject(MapObject obj)
    parameters:
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object to add to this map
    content.vb: Public Sub AddObject(obj As MapObject)
  overload: TinyLife.World.Map.AddObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  id: RemoveObject(TinyLife.Objects.MapObject)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveObject(MapObject)
  nameWithType: Map.RemoveObject(MapObject)
  fullName: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveObject
    path: World/Map.cs
    startLine: 902
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given object from this map and its underlying <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref>.\nThis also calls <xref href=\"TinyLife.Objects.MapObject.OnRemoved\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nWhen removing a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> object from the world entirely, including when putting it into furniture storage or someone&apos;s hand, <xref href=\"TinyLife.Objects.Furniture.RemoveAndUnlink\" data-throw-if-not-resolved=\"false\"></xref> should be used instead, or <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref> should be called in addition to this method.\nIf the furniture item is a child of another furniture item, <xref href=\"TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref> can also be used instead.\nAs all of those methods also sever the relationships between furniture items and their parents (which is equivalent to calling <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref>), they are usually preferred over this method, since parent-child relationships should not persist in many cases.\n"
  example: []
  syntax:
    content: public void RemoveObject(MapObject obj)
    parameters:
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object to remove
    content.vb: Public Sub RemoveObject(obj As MapObject)
  overload: TinyLife.World.Map.RemoveObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetPeople
  commentId: M:TinyLife.World.Map.GetPeople
  id: GetPeople
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetPeople()
  nameWithType: Map.GetPeople()
  fullName: TinyLife.World.Map.GetPeople()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPeople
    path: World/Map.cs
    startLine: 920
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects that are on this map.\nNote that no <xref href=\"TinyLife.World.Map.DeadPeople\" data-throw-if-not-resolved=\"false\"></xref> are returned.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetPeople()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: This map&apos;s people
    content.vb: Public Function GetPeople As IEnumerable(Of Person)
  overload: TinyLife.World.Map.GetPeople*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  id: GetHousehold(TinyLife.Objects.Person)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHousehold(Person)
  nameWithType: Map.GetHousehold(Person)
  fullName: TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHousehold
    path: World/Map.cs
    startLine: 932
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the household that the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> lives in\n"
  example: []
  syntax:
    content: public Household GetHousehold(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query
    return:
      type: TinyLife.World.Household
      description: The person&apos;s household, or null if there is none
    content.vb: Public Function GetHousehold(person As Person) As Household
  overload: TinyLife.World.Map.GetHousehold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  id: GetHousehold(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHousehold(Lot)
  nameWithType: Map.GetHousehold(Lot)
  fullName: TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHousehold
    path: World/Map.cs
    startLine: 945
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the household that lives on the given <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Household GetHousehold(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to query
    return:
      type: TinyLife.World.Household
      description: The household that lives on the lot, or null if none lives there
    content.vb: Public Function GetHousehold(lot As Lot) As Household
  overload: TinyLife.World.Map.GetHousehold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  id: AddHousehold(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddHousehold(Lot)
  nameWithType: Map.AddHousehold(Lot)
  fullName: TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddHousehold
    path: World/Map.cs
    startLine: 958
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a new household to this map by calling the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: public Household AddHousehold(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot that the household should live on
    return:
      type: TinyLife.World.Household
      description: The newly created household
    content.vb: Public Function AddHousehold(lot As Lot) As Household
  overload: TinyLife.World.Map.AddHousehold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  commentId: M:TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  id: RemoveHousehold(TinyLife.World.Household)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveHousehold(Household)
  nameWithType: Map.RemoveHousehold(Household)
  fullName: TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveHousehold
    path: World/Map.cs
    startLine: 968
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given household from this map\n"
  example: []
  syntax:
    content: public void RemoveHousehold(Household household)
    parameters:
    - id: household
      type: TinyLife.World.Household
      description: The household to remove
    content.vb: Public Sub RemoveHousehold(household As Household)
  overload: TinyLife.World.Map.RemoveHousehold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetHouseholds
  commentId: M:TinyLife.World.Map.GetHouseholds
  id: GetHouseholds
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHouseholds()
  nameWithType: Map.GetHouseholds()
  fullName: TinyLife.World.Map.GetHouseholds()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHouseholds
    path: World/Map.cs
    startLine: 976
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref> instances that live on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Household> GetHouseholds()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Household}
      description: This map&apos;s households
    content.vb: Public Function GetHouseholds As IEnumerable(Of Household)
  overload: TinyLife.World.Map.GetHouseholds*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  id: GetSection(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSection(Point)
  nameWithType: Map.GetSection(Point)
  fullName: TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSection
    path: World/Map.cs
    startLine: 986
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> at the given tile position\n"
  example: []
  syntax:
    content: public MapSection GetSection(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The tile position
    return:
      type: TinyLife.World.MapSection
      description: The section at that position
    content.vb: Public Function GetSection(pos As Point) As MapSection
  overload: TinyLife.World.Map.GetSection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSections(Point, Int32)
  nameWithType: Map.GetSections(Point, Int32)
  fullName: TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSections
    path: World/Map.cs
    startLine: 998
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of sections that are contained in (or intersect with) the given area\n"
  example: []
  syntax:
    content: public IEnumerable<MapSection> GetSections(Point point, int radiusIncrease)
    parameters:
    - id: point
      type: Microsoft.Xna.Framework.Point
      description: The position to find the section for, in tile coordinates
    - id: radiusIncrease
      type: System.Int32
      description: The radius, in sections, that the search area should be extended by
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
      description: A set of sections covered by this area
    content.vb: Public Function GetSections(point As Point, radiusIncrease As Integer) As IEnumerable(Of MapSection)
  overload: TinyLife.World.Map.GetSections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  commentId: M:TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  id: GetSections(MLEM.Misc.RectangleF,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSections(RectangleF, Int32)
  nameWithType: Map.GetSections(RectangleF, Int32)
  fullName: TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSections
    path: World/Map.cs
    startLine: 1008
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of sections that are contained in (or intersect with) the given area\n"
  example: []
  syntax:
    content: public IEnumerable<MapSection> GetSections(RectangleF area, int radiusIncrease)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to find sections in, in tile coordinates
    - id: radiusIncrease
      type: System.Int32
      description: The radius, in sections, that the search area should be extended by
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
      description: A set of sections covered by this area
    content.vb: Public Function GetSections(area As RectangleF, radiusIncrease As Integer) As IEnumerable(Of MapSection)
  overload: TinyLife.World.Map.GetSections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  id: MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MarkDirtyForPathfinding(Point)
  nameWithType: Map.MarkDirtyForPathfinding(Point)
  fullName: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkDirtyForPathfinding
    path: World/Map.cs
    startLine: 1029
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given position dirty for pathfinding purposes.\nWhen a path is found again close to this position, its cost (<xref href=\"TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person%2cMicrosoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref>) will be re-calculated.\nThis method is called by <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> when it is placed for removed.\n"
  example: []
  syntax:
    content: public void MarkDirtyForPathfinding(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to mark dirty
    content.vb: Public Sub MarkDirtyForPathfinding(pos As Point)
  overload: TinyLife.World.Map.MarkDirtyForPathfinding*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetPathCost(Person, Point, Point)
  nameWithType: Map.GetPathCost(Person, Point, Point)
  fullName: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPathCost
    path: World/Map.cs
    startLine: 1049
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the cost to pathfind from the given current position to the given next position.\nNote that, for this method to return a proper result, <code data-dev-comment-type=\"paramref\" class=\"paramref\">nextPos</code> has to be directly or diagonally adjacent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">currPos</code>.\n"
  example: []
  syntax:
    content: public float GetPathCost(Person person, Point currPos, Point nextPos)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the path cost for
    - id: currPos
      type: Microsoft.Xna.Framework.Point
      description: The current position
    - id: nextPos
      type: Microsoft.Xna.Framework.Point
      description: The next, neighboring position
    return:
      type: System.Single
      description: The cost to path to this location
    content.vb: Public Function GetPathCost(person As Person, currPos As Point, nextPos As Point) As Single
  overload: TinyLife.World.Map.GetPathCost*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: CanWalkBetween(Person, Point, Point)
  nameWithType: Map.CanWalkBetween(Person, Point, Point)
  fullName: TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanWalkBetween
    path: World/Map.cs
    startLine: 1068
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given person can walk between the two given positions.\nInternally, this method only queries whether <xref href=\"TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person%2cMicrosoft.Xna.Framework.Point%2cMicrosoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> is lower than <xref href=\"MLEM.Pathfinding.AStar%601.InfiniteCost\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that, for this method to return a proper result, <code data-dev-comment-type=\"paramref\" class=\"paramref\">nextPos</code> has to be directly or diagonally adjacent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">currPos</code>.\n"
  example: []
  syntax:
    content: public bool CanWalkBetween(Person person, Point currPos, Point nextPos)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the path cost for
    - id: currPos
      type: Microsoft.Xna.Framework.Point
      description: The current position
    - id: nextPos
      type: Microsoft.Xna.Framework.Point
      description: The next, neighboring position
    return:
      type: System.Boolean
      description: Whether the two locations can be walked between
    content.vb: Public Function CanWalkBetween(person As Person, currPos As Point, nextPos As Point) As Boolean
  overload: TinyLife.World.Map.CanWalkBetween*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point)
  id: IsFreeSpot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsFreeSpot(Point)
  nameWithType: Map.IsFreeSpot(Point)
  fullName: TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFreeSpot
    path: World/Map.cs
    startLine: 1077
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether or not the given position on the given map is free for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> to stand in\n"
  example: []
  syntax:
    content: public bool IsFreeSpot(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: System.Boolean
      description: Whether this position is free to stand on
    content.vb: Public Function IsFreeSpot(pos As Point) As Boolean
  overload: TinyLife.World.Map.IsFreeSpot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetDeadPerson(System.Guid)
  commentId: M:TinyLife.World.Map.GetDeadPerson(System.Guid)
  id: GetDeadPerson(System.Guid)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetDeadPerson(Guid)
  nameWithType: Map.GetDeadPerson(Guid)
  fullName: TinyLife.World.Map.GetDeadPerson(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDeadPerson
    path: World/Map.cs
    startLine: 1087
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a dead <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> id\n"
  example: []
  syntax:
    content: public Person GetDeadPerson(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The id to get a dead person by
    return:
      type: TinyLife.Objects.Person
      description: The dead person instance, or null if there is none
    content.vb: Public Function GetDeadPerson(id As Guid) As Person
  overload: TinyLife.World.Map.GetDeadPerson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  id: PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PlaySound(SoundEffect, Vector2, Single, Single, Boolean, Boolean)
  nameWithType: Map.PlaySound(SoundEffect, Vector2, Single, Single, Boolean, Boolean)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, Microsoft.Xna.Framework.Vector2, System.Single, System.Single, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlaySound
    path: World/Map.cs
    startLine: 1107
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nPlays a sound at the given location (in world space) statically.\nIf the sound should move while being played, use <xref href=\"TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect%2cTinyLife.World.MapAudioEmitter%2cSystem.Single%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> instead.\nNote that the returned <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> does not need to be disposed when it is finished playing.\n"
  example: []
  syntax:
    content: public SoundEffectInstance PlaySound(SoundEffect sound, Vector2 pos, float volume = 1F, float pitch = 0F, bool loop = false, bool applyWorldSoundVolume = true)
    parameters:
    - id: sound
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: The sound effect to play
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space, to play the sound at
    - id: volume
      type: System.Single
      description: The sound&apos;s volume, between 0 and 1 (default)
    - id: pitch
      type: System.Single
      description: The sound&apos;s pitch, between -1, 0 (default) and 1
    - id: loop
      type: System.Boolean
      description: Whether or not the sound should loop
    - id: applyWorldSoundVolume
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Options.WorldSoundVolume" data-throw-if-not-resolved="false"></xref> should be applied to the passed <code data-dev-comment-type="paramref" class="paramref">volume</code>
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffectInstance
      description: The sound effect instance that is responsible for playing this sound, which can be stopped or paused
    content.vb: Public Function PlaySound(sound As SoundEffect, pos As Vector2, volume As Single = 1F, pitch As Single = 0F, loop As Boolean = False, applyWorldSoundVolume As Boolean = True) As SoundEffectInstance
  overload: TinyLife.World.Map.PlaySound*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  id: PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
  nameWithType: Map.PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, TinyLife.World.MapAudioEmitter, System.Single, System.Single, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlaySound
    path: World/Map.cs
    startLine: 1124
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nPlays a sound at the given location (in world space) with the given <xref href=\"TinyLife.World.MapAudioEmitter\" data-throw-if-not-resolved=\"false\"></xref>, whose <xref href=\"TinyLife.World.MapAudioEmitter.WorldPosition\" data-throw-if-not-resolved=\"false\"></xref> can be updated by the caller.\nIf the sound should move in a static locatdion, use <xref href=\"TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> instead.\nNote that the returned <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> does not need to be disposed when it is finished playing.\n"
  example: []
  syntax:
    content: public SoundEffectInstance PlaySound(SoundEffect sound, MapAudioEmitter emitter, float volume = 1F, float pitch = 0F, bool loop = false, bool applyWorldSoundVolume = true)
    parameters:
    - id: sound
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: The sound effect to play
    - id: emitter
      type: TinyLife.World.MapAudioEmitter
      description: The audio emitter, whose <xref href="TinyLife.World.MapAudioEmitter.WorldPosition" data-throw-if-not-resolved="false"></xref> should be set by the caller
    - id: volume
      type: System.Single
      description: The sound&apos;s volume, between 0 and 1 (default)
    - id: pitch
      type: System.Single
      description: The sound&apos;s pitch, between -1, 0 (default) and 1
    - id: loop
      type: System.Boolean
      description: Whether or not the sound should loop
    - id: applyWorldSoundVolume
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Options.WorldSoundVolume" data-throw-if-not-resolved="false"></xref> should be applied to the passed <code data-dev-comment-type="paramref" class="paramref">volume</code>
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffectInstance
      description: The sound effect instance that is responsible for playing this sound, which can be stopped or paused
    content.vb: Public Function PlaySound(sound As SoundEffect, emitter As MapAudioEmitter, volume As Single = 1F, pitch As Single = 0F, loop As Boolean = False, applyWorldSoundVolume As Boolean = True) As SoundEffectInstance
  overload: TinyLife.World.Map.PlaySound*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  id: GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestExitRoad(Vector2)
  nameWithType: Map.GetClosestExitRoad(Vector2)
  fullName: TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestExitRoad
    path: World/Map.cs
    startLine: 1142
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the point of the road that is at the edge of the map and the <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that the map border is in, and is also closest to the given position.\nSince every map is expected to have at least one exit road, no checking is done to ensure that one exists.\n"
  example: []
  syntax:
    content: public (Point, Direction2) GetClosestExitRoad(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
    return:
      type: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}
      description: The closest exit road
    content.vb: Public Function GetClosestExitRoad(position As Vector2) As(Point, Direction2)(Of Point , Direction2)
  overload: TinyLife.World.Map.GetClosestExitRoad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetExitRoads
  commentId: M:TinyLife.World.Map.GetExitRoads
  id: GetExitRoads
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetExitRoads()
  nameWithType: Map.GetExitRoads()
  fullName: TinyLife.World.Map.GetExitRoads()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetExitRoads
    path: World/Map.cs
    startLine: 1150
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the positions of all of the roads that are at the borders of this map and the <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that the map border is in\n"
  example: []
  syntax:
    content: public IEnumerable<(Point, Direction2)> GetExitRoads()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
      description: All of the exit roads out of this map
    content.vb: Public Function GetExitRoads As IEnumerable(Of(Point, Direction2)(Of Point , Direction2))
  overload: TinyLife.World.Map.GetExitRoads*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetWalls(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetWalls(MLEM.Misc.RectangleF)
  id: GetWalls(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetWalls(RectangleF)
  nameWithType: Map.GetWalls(RectangleF)
  fullName: TinyLife.World.Map.GetWalls(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalls
    path: World/Map.cs
    startLine: 1165
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of walls in the given area.\nAll <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> objects for which at least one <xref href=\"TinyLife.World.Wall.Positions\" data-throw-if-not-resolved=\"false\"></xref> entry is contained in the area are returned.\n"
  example: []
  syntax:
    content: public IEnumerable<Wall> GetWalls(RectangleF area)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to query for walls
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
      description: A set of walls in the area
    content.vb: Public Function GetWalls(area As RectangleF) As IEnumerable(Of Wall)
  overload: TinyLife.World.Map.GetWalls*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ApplyCameraRotation(Vector2, Boolean, Nullable<Direction2>)
  nameWithType: Map.ApplyCameraRotation(Vector2, Boolean, Nullable<Direction2>)
  fullName: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, System.Boolean, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ApplyCameraRotation
    path: World/Map.cs
    startLine: 1181
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nApplies the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> to the given position in world space\n"
  example: []
  syntax:
    content: public Vector2 ApplyCameraRotation(Vector2 worldPos, bool borderOffset = false, Direction2? cameraRotation = null)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space
    - id: borderOffset
      type: System.Boolean
      description: Whether a border offset should be applied. This is useful for tiles and other objects that aren&apos;t centered in the middle of their tiles, but that use the top-left corner of a tile for positioning.
    - id: cameraRotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: An optional override camera rotation which should be used in favor of <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The position in world space, but with camera rotation appplied
    content.vb: Public Function ApplyCameraRotation(worldPos As Vector2, borderOffset As Boolean = False, cameraRotation As Direction2? = Nothing) As Vector2
  overload: TinyLife.World.Map.ApplyCameraRotation*
  nameWithType.vb: Map.ApplyCameraRotation(Vector2, Boolean, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, System.Boolean, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: ApplyCameraRotation(Vector2, Boolean, Nullable(Of Direction2))
- uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  id: ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ApplyInverseCameraRotation(Vector2, Nullable<Direction2>)
  nameWithType: Map.ApplyInverseCameraRotation(Vector2, Nullable<Direction2>)
  fullName: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ApplyInverseCameraRotation
    path: World/Map.cs
    startLine: 1197
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nApplies the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> to the given position in world space in reverse, undoing the action done by <xref href=\"TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Vector2 ApplyInverseCameraRotation(Vector2 worldPos, Direction2? cameraRotation = null)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space
    - id: cameraRotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: An optional override camera rotation which should be used in favor of <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The position in world space, but without camera rotation appplied
    content.vb: Public Function ApplyInverseCameraRotation(worldPos As Vector2, cameraRotation As Direction2? = Nothing) As Vector2
  overload: TinyLife.World.Map.ApplyInverseCameraRotation*
  nameWithType.vb: Map.ApplyInverseCameraRotation(Vector2, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: ApplyInverseCameraRotation(Vector2, Nullable(Of Direction2))
- uid: TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  id: OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: Map.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCameraRotationChanged
    path: World/Map.cs
    startLine: 1212
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA method that is called when <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> is changed.\nWhen changing camera rotation manually, this method should be called along with the change.\n"
  example: []
  syntax:
    content: public void OnCameraRotationChanged(Direction2 oldRotation, Direction2 newRotation)
    parameters:
    - id: oldRotation
      type: MLEM.Misc.Direction2
      description: ''
    - id: newRotation
      type: MLEM.Misc.Direction2
      description: ''
    content.vb: Public Sub OnCameraRotationChanged(oldRotation As Direction2, newRotation As Direction2)
  overload: TinyLife.World.Map.OnCameraRotationChanged*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  commentId: M:TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  id: AddLight(TinyLife.Objects.Light)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddLight(Light)
  nameWithType: Map.AddLight(Light)
  fullName: TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLight
    path: World/Map.cs
    startLine: 1234
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given light to the world at its <xref href=\"TinyLife.Objects.Light.Position\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddLight(Light light)
    parameters:
    - id: light
      type: TinyLife.Objects.Light
      description: The light to add
    content.vb: Public Sub AddLight(light As Light)
  overload: TinyLife.World.Map.AddLight*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  commentId: M:TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  id: RemoveLight(TinyLife.Objects.Light)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveLight(Light)
  nameWithType: Map.RemoveLight(Light)
  fullName: TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveLight
    path: World/Map.cs
    startLine: 1243
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given light from the world\n"
  example: []
  syntax:
    content: public void RemoveLight(Light light)
    parameters:
    - id: light
      type: TinyLife.Objects.Light
      description: The light to remove
    content.vb: Public Sub RemoveLight(light As Light)
  overload: TinyLife.World.Map.RemoveLight*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean)
  commentId: M:TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean)
  id: MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MoveEverything(Point, Rectangle, Boolean)
  nameWithType: Map.MoveEverything(Point, Rectangle, Boolean)
  fullName: TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Rectangle, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MoveEverything
    path: World/Map.cs
    startLine: 1254
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMoves all of the objects, walls, tiles and roofs in the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">area</code> in the world, optionally moving the lots as well\n"
  example: []
  syntax:
    content: public void MoveEverything(Point offset, Rectangle area, bool moveLots)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Point
      description: The offset to move things by
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area to move
    - id: moveLots
      type: System.Boolean
      description: Whether lots should be moved as well. The content of lots will be moved regardless of this parameter
    content.vb: Public Sub MoveEverything(offset As Point, area As Rectangle, moveLots As Boolean)
  overload: TinyLife.World.Map.MoveEverything*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  id: ValidateRooms(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ValidateRooms(Point)
  nameWithType: Map.ValidateRooms(Point)
  fullName: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidateRooms
    path: World/Map.cs
    startLine: 1313
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves all outdated rooms on this map after calling their <xref href=\"TinyLife.World.Room.Validate\" data-throw-if-not-resolved=\"false\"></xref> methods.\nThis is called by <xref href=\"TinyLife.World.Map.AddWall(TinyLife.World.Wall%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and a few other methods.\n"
  example: []
  syntax:
    content: public void ValidateRooms(Point position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position around which to validate rooms
    content.vb: Public Sub ValidateRooms(position As Point)
  overload: TinyLife.World.Map.ValidateRooms*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetRegularVisitors
  commentId: M:TinyLife.World.Map.GetRegularVisitors
  id: GetRegularVisitors
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRegularVisitors()
  nameWithType: Map.GetRegularVisitors()
  fullName: TinyLife.World.Map.GetRegularVisitors()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRegularVisitors
    path: World/Map.cs
    startLine: 1328
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the set of <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances in the world that are regular visitors.\nThis method is a shorthand for <xref href=\"TinyLife.World.Map.GetPeople\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.IsRegularVisitor\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that dead regular visitors are not returned.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetRegularVisitors()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: This map&apos;s regular visitors
    content.vb: Public Function GetRegularVisitors As IEnumerable(Of Person)
  overload: TinyLife.World.Map.GetRegularVisitors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.UpdateExternalPeople
  commentId: M:TinyLife.World.Map.UpdateExternalPeople
  id: UpdateExternalPeople
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: UpdateExternalPeople()
  nameWithType: Map.UpdateExternalPeople()
  fullName: TinyLife.World.Map.UpdateExternalPeople()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpdateExternalPeople
    path: World/Map.cs
    startLine: 1340
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nUpdates this map&apos;s regular visitors, based on the <xref href=\"TinyLife.PerSaveOptions.MaxRegularVisitors\" data-throw-if-not-resolved=\"false\"></xref> value, and also assigns random people to empty <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> slots.\nThis method does three things: It removes visitors that have been added into the world by the player (through household imports),\nit removes visitors if the current number of visitors is greater than the maximum,\nand it attempts to add new visitors if it is lower than the maximum and <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> people in empty slots.\nThis method is called automatically in variouos locations.\n"
  example: []
  syntax:
    content: public void UpdateExternalPeople()
    content.vb: Public Sub UpdateExternalPeople
  overload: TinyLife.World.Map.UpdateExternalPeople*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  id: IsLotHidden(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsLotHidden(Lot)
  nameWithType: Map.IsLotHidden(Lot)
  fullName: TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsLotHidden
    path: World/Map.cs
    startLine: 1423
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether the given lot is hidden from the camera.\nNote that the result of this method will be different from <xref href=\"TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref>, since this method also checks for the ShowAllLots cheat.\n"
  example: []
  syntax:
    content: public bool IsLotHidden(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsLotHidden(lot As Lot) As Boolean
  overload: TinyLife.World.Map.IsLotHidden*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.GetAllLotEmployments
  commentId: M:TinyLife.World.Map.GetAllLotEmployments
  id: GetAllLotEmployments
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetAllLotEmployments()
  nameWithType: Map.GetAllLotEmployments()
  fullName: TinyLife.World.Map.GetAllLotEmployments()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAllLotEmployments
    path: World/Map.cs
    startLine: 1440
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> instances and their <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> on the map.\nNote that <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref> are also returned, with their <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> component being set to null.\n"
  example: []
  syntax:
    content: public IEnumerable<(LotEmployment Employment, Lot Lot)> GetAllLotEmployments()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
      description: All lot employments on this map
    content.vb: Public Function GetAllLotEmployments As IEnumerable(Of(Employment As LotEmployment, Lot As Lot)(Of LotEmployment , Lot))
  overload: TinyLife.World.Map.GetAllLotEmployments*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.MarkTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.MarkTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  id: MarkTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MarkTileDirtyForDrawing(Point)
  nameWithType: Map.MarkTileDirtyForDrawing(Point)
  fullName: TinyLife.World.Map.MarkTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkTileDirtyForDrawing
    path: World/Map.cs
    startLine: 1453
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given position dirty for drawing, which causes the underlying <xref href=\"MLEM.Graphics.StaticSpriteBatch\" data-throw-if-not-resolved=\"false\"></xref> to re-render the tile.\nThis method is used automatically by <xref href=\"TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point%2cTinyLife.World.Tile)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.GrassyAutoTile\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void MarkTileDirtyForDrawing(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to mark dirty.
    content.vb: Public Sub MarkTileDirtyForDrawing(pos As Point)
  overload: TinyLife.World.Map.MarkTileDirtyForDrawing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Map.LoadStaticMap(System.String,System.Action{System.String},System.Boolean)
  commentId: M:TinyLife.World.Map.LoadStaticMap(System.String,System.Action{System.String},System.Boolean)
  id: LoadStaticMap(System.String,System.Action{System.String},System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: LoadStaticMap(String, Action<String>, Boolean)
  nameWithType: Map.LoadStaticMap(String, Action<String>, Boolean)
  fullName: TinyLife.World.Map.LoadStaticMap(System.String, System.Action<System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LoadStaticMap
    path: World/Map.cs
    startLine: 1804
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nLoads a static map with the given name from the game&apos;s content directory.\nNote that the map is not validated (<xref href=\"TinyLife.World.Map.Validate(System.Action%7bSystem.String%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public static Map LoadStaticMap(string name, Action<string> setState, bool validateThoroughly)
    parameters:
    - id: name
      type: System.String
    - id: setState
      type: System.Action{System.String}
    - id: validateThoroughly
      type: System.Boolean
    return:
      type: TinyLife.World.Map
      description: The static map that was loaded
    content.vb: Public Shared Function LoadStaticMap(name As String, setState As Action(Of String), validateThoroughly As Boolean) As Map
  overload: TinyLife.World.Map.LoadStaticMap*
  nameWithType.vb: Map.LoadStaticMap(String, Action(Of String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Map.LoadStaticMap(System.String, System.Action(Of System.String), System.Boolean)
  name.vb: LoadStaticMap(String, Action(Of String), Boolean)
references:
- uid: TinyLife.World.MapSection
  commentId: T:TinyLife.World.MapSection
  parent: TinyLife.World
  name: MapSection
  nameWithType: MapSection
  fullName: TinyLife.World.MapSection
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Map>()
  nameWithType: Extensions.JsonCopy<Map>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Map>()
  nameWithType.vb: Extensions.JsonCopy(Of Map)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Map)()
  name.vb: JsonCopy(Of Map)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Map>
    nameWithType: Extensions.JsonCopy<Map>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Map>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Map)
    nameWithType: Extensions.JsonCopy(Of Map)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Map)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.World.UpdateDelegate
  commentId: T:TinyLife.World.UpdateDelegate
  parent: TinyLife.World
  name: UpdateDelegate
  nameWithType: UpdateDelegate
  fullName: TinyLife.World.UpdateDelegate
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  isExternal: true
- uid: System.Action{TinyLife.Objects.MapObject}
  commentId: T:System.Action{TinyLife.Objects.MapObject}
  parent: System
  definition: System.Action`1
  name: Action<MapObject>
  nameWithType: Action<MapObject>
  fullName: System.Action<TinyLife.Objects.MapObject>
  nameWithType.vb: Action(Of MapObject)
  fullName.vb: System.Action(Of TinyLife.Objects.MapObject)
  name.vb: Action(Of MapObject)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Mail
  commentId: T:TinyLife.World.Mail
  parent: TinyLife.World
  name: Mail
  nameWithType: Mail
  fullName: TinyLife.World.Mail
- uid: System.Collections.Generic.List{TinyLife.World.Mail}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Mail}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Mail>
  nameWithType: List<Mail>
  fullName: System.Collections.Generic.List<TinyLife.World.Mail>
  nameWithType.vb: List(Of Mail)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Mail)
  name.vb: List(Of Mail)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Mail
    name: Mail
    nameWithType: Mail
    fullName: TinyLife.World.Mail
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Mail
    name: Mail
    nameWithType: Mail
    fullName: TinyLife.World.Mail
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.World.Map.SizeInSections*
  commentId: Overload:TinyLife.World.Map.SizeInSections
  name: SizeInSections
  nameWithType: Map.SizeInSections
  fullName: TinyLife.World.Map.SizeInSections
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Map.SizeInSections
  commentId: P:TinyLife.World.Map.SizeInSections
  isExternal: true
- uid: TinyLife.World.MapSection.Size
  commentId: F:TinyLife.World.MapSection.Size
  isExternal: true
- uid: TinyLife.World.Map.Size*
  commentId: Overload:TinyLife.World.Map.Size
  name: Size
  nameWithType: Map.Size
  fullName: TinyLife.World.Map.Size
- uid: TinyLife.World.Map.StaticVersion*
  commentId: Overload:TinyLife.World.Map.StaticVersion
  name: StaticVersion
  nameWithType: Map.StaticVersion
  fullName: TinyLife.World.Map.StaticVersion
- uid: TinyLife.World.Map.#ctor*
  commentId: Overload:TinyLife.World.Map.#ctor
  name: Map
  nameWithType: Map.Map
  fullName: TinyLife.World.Map.Map
- uid: TinyLife.World.Map.Finalize*
  commentId: Overload:TinyLife.World.Map.Finalize
  name: Finalize
  nameWithType: Map.Finalize
  fullName: TinyLife.World.Map.Finalize
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.World.Map.Update*
  commentId: Overload:TinyLife.World.Map.Update
  name: Update
  nameWithType: Map.Update
  fullName: TinyLife.World.Map.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework.Graphics.RenderTarget2D
  commentId: T:Microsoft.Xna.Framework.Graphics.RenderTarget2D
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: RenderTarget2D
  nameWithType: RenderTarget2D
  fullName: Microsoft.Xna.Framework.Graphics.RenderTarget2D
- uid: MLEM.Cameras.Camera.GetVisibleRectangle
  commentId: M:MLEM.Cameras.Camera.GetVisibleRectangle
  isExternal: true
- uid: TinyLife.Objects.MapObject.GetVisibility
  commentId: M:TinyLife.Objects.MapObject.GetVisibility
  parent: TinyLife.Objects.MapObject
  name: GetVisibility()
  nameWithType: MapObject.GetVisibility()
  fullName: TinyLife.Objects.MapObject.GetVisibility()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetVisibility
    name: GetVisibility
    nameWithType: MapObject.GetVisibility
    fullName: TinyLife.Objects.MapObject.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetVisibility
    name: GetVisibility
    nameWithType: MapObject.GetVisibility
    fullName: TinyLife.Objects.MapObject.GetVisibility
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.Draw*
  commentId: Overload:TinyLife.World.Map.Draw
  name: Draw
  nameWithType: Map.Draw
  fullName: TinyLife.World.Map.Draw
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{MLEM.Misc.RectangleF}
  commentId: T:System.Nullable{MLEM.Misc.RectangleF}
  parent: System
  definition: System.Nullable`1
  name: Nullable<RectangleF>
  nameWithType: Nullable<RectangleF>
  fullName: System.Nullable<MLEM.Misc.RectangleF>
  nameWithType.vb: Nullable(Of RectangleF)
  fullName.vb: System.Nullable(Of MLEM.Misc.RectangleF)
  name.vb: Nullable(Of RectangleF)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Microsoft.Xna.Framework.Matrix}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Matrix}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Matrix>
  nameWithType: Nullable<Matrix>
  fullName: System.Nullable<Microsoft.Xna.Framework.Matrix>
  nameWithType.vb: Nullable(Of Matrix)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Matrix)
  name.vb: Nullable(Of Matrix)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Matrix
    name: Matrix
    nameWithType: Matrix
    fullName: Microsoft.Xna.Framework.Matrix
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Matrix
    name: Matrix
    nameWithType: Matrix
    fullName: Microsoft.Xna.Framework.Matrix
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  isExternal: true
- uid: TinyLife.World.Map.GetDepth*
  commentId: Overload:TinyLife.World.Map.GetDepth
  name: GetDepth
  nameWithType: Map.GetDepth
  fullName: TinyLife.World.Map.GetDepth
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: TinyLife.World.Map.Size
  commentId: P:TinyLife.World.Map.Size
  isExternal: true
- uid: TinyLife.World.Map.IsInBounds*
  commentId: Overload:TinyLife.World.Map.IsInBounds
  name: IsInBounds
  nameWithType: Map.IsInBounds
  fullName: TinyLife.World.Map.IsInBounds
- uid: TinyLife.World.Map.IsInSectionBounds*
  commentId: Overload:TinyLife.World.Map.IsInSectionBounds
  name: IsInSectionBounds
  nameWithType: Map.IsInSectionBounds
  fullName: TinyLife.World.Map.IsInSectionBounds
- uid: TinyLife.World.Map.AddRoad*
  commentId: Overload:TinyLife.World.Map.AddRoad
  name: AddRoad
  nameWithType: Map.AddRoad
  fullName: TinyLife.World.Map.AddRoad
- uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  isExternal: true
- uid: TinyLife.World.Map.IsRoad*
  commentId: Overload:TinyLife.World.Map.IsRoad
  name: IsRoad
  nameWithType: Map.IsRoad
  fullName: TinyLife.World.Map.IsRoad
- uid: TinyLife.World.Map.GetClosestRoad*
  commentId: Overload:TinyLife.World.Map.GetClosestRoad
  name: GetClosestRoad
  nameWithType: Map.GetClosestRoad
  fullName: TinyLife.World.Map.GetClosestRoad
- uid: System.Nullable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Point}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Point>
  nameWithType: Nullable<Point>
  fullName: System.Nullable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: Nullable(Of Point)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Point)
  name.vb: Nullable(Of Point)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetRoads*
  commentId: Overload:TinyLife.World.Map.GetRoads
  name: GetRoads
  nameWithType: Map.GetRoads
  fullName: TinyLife.World.Map.GetRoads
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.RoadRadius
  commentId: F:TinyLife.World.Map.RoadRadius
  isExternal: true
- uid: TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  isExternal: true
- uid: TinyLife.World.Map.GetClosestSidewalk*
  commentId: Overload:TinyLife.World.Map.GetClosestSidewalk
  name: GetClosestSidewalk
  nameWithType: Map.GetClosestSidewalk
  fullName: TinyLife.World.Map.GetClosestSidewalk
- uid: TinyLife.World.Map.GetTilesAround*
  commentId: Overload:TinyLife.World.Map.GetTilesAround
  name: GetTilesAround
  nameWithType: Map.GetTilesAround
  fullName: TinyLife.World.Map.GetTilesAround
- uid: System.Predicate{Microsoft.Xna.Framework.Point}
  commentId: T:System.Predicate{Microsoft.Xna.Framework.Point}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Point>
  nameWithType: Predicate<Point>
  fullName: System.Predicate<Microsoft.Xna.Framework.Point>
  nameWithType.vb: Predicate(Of Point)
  fullName.vb: System.Predicate(Of Microsoft.Xna.Framework.Point)
  name.vb: Predicate(Of Point)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Map.GetClosestEmptyTile*
  commentId: Overload:TinyLife.World.Map.GetClosestEmptyTile
  name: GetClosestEmptyTile
  nameWithType: Map.GetClosestEmptyTile
  fullName: TinyLife.World.Map.GetClosestEmptyTile
- uid: TinyLife.World.Map.GetRandomTile*
  commentId: Overload:TinyLife.World.Map.GetRandomTile
  name: GetRandomTile
  nameWithType: Map.GetRandomTile
  fullName: TinyLife.World.Map.GetRandomTile
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.World.Map.Validate*
  commentId: Overload:TinyLife.World.Map.Validate
  name: Validate
  nameWithType: Map.Validate
  fullName: TinyLife.World.Map.Validate
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: System.Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetRoom*
  commentId: Overload:TinyLife.World.Map.GetRoom
  name: GetRoom
  nameWithType: Map.GetRoom
  fullName: TinyLife.World.Map.GetRoom
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.World.Lot.Id
  commentId: F:TinyLife.World.Lot.Id
  isExternal: true
- uid: TinyLife.World.Map.GetLot*
  commentId: Overload:TinyLife.World.Map.GetLot
  name: GetLot
  nameWithType: Map.GetLot
  fullName: TinyLife.World.Map.GetLot
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  isExternal: true
- uid: TinyLife.World.Map.AddLot*
  commentId: Overload:TinyLife.World.Map.AddLot
  name: AddLot
  nameWithType: Map.AddLot
  fullName: TinyLife.World.Map.AddLot
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: TinyLife.World.Map.RemoveLot*
  commentId: Overload:TinyLife.World.Map.RemoveLot
  name: RemoveLot
  nameWithType: Map.RemoveLot
  fullName: TinyLife.World.Map.RemoveLot
- uid: TinyLife.World.Map.GetLots*
  commentId: Overload:TinyLife.World.Map.GetLots
  name: GetLots
  nameWithType: Map.GetLots
  fullName: TinyLife.World.Map.GetLots
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Lot>
  nameWithType: IEnumerable<Lot>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Lot>
  nameWithType.vb: IEnumerable(Of Lot)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Lot)
  name.vb: IEnumerable(Of Lot)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.AddWall*
  commentId: Overload:TinyLife.World.Map.AddWall
  name: AddWall
  nameWithType: Map.AddWall
  fullName: TinyLife.World.Map.AddWall
- uid: TinyLife.World.Map.RemoveWall*
  commentId: Overload:TinyLife.World.Map.RemoveWall
  name: RemoveWall
  nameWithType: Map.RemoveWall
  fullName: TinyLife.World.Map.RemoveWall
- uid: TinyLife.World.Wall.Positions
  commentId: F:TinyLife.World.Wall.Positions
  isExternal: true
- uid: TinyLife.World.Map.GetWallBetween*
  commentId: Overload:TinyLife.World.Map.GetWallBetween
  name: GetWallBetween
  nameWithType: Map.GetWallBetween
  fullName: TinyLife.World.Map.GetWallBetween
- uid: TinyLife.World.Map.GetTile*
  commentId: Overload:TinyLife.World.Map.GetTile
  name: GetTile
  nameWithType: Map.GetTile
  fullName: TinyLife.World.Map.GetTile
- uid: TinyLife.World.Map.SetTile*
  commentId: Overload:TinyLife.World.Map.SetTile
  name: SetTile
  nameWithType: Map.SetTile
  fullName: TinyLife.World.Map.SetTile
- uid: TinyLife.World.Map.AddRoof*
  commentId: Overload:TinyLife.World.Map.AddRoof
  name: AddRoof
  nameWithType: Map.AddRoof
  fullName: TinyLife.World.Map.AddRoof
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Map.GetRoof*
  commentId: Overload:TinyLife.World.Map.GetRoof
  name: GetRoof
  nameWithType: Map.GetRoof
  fullName: TinyLife.World.Map.GetRoof
- uid: TinyLife.World.Map.RemoveRoof*
  commentId: Overload:TinyLife.World.Map.RemoveRoof
  name: RemoveRoof
  nameWithType: Map.RemoveRoof
  fullName: TinyLife.World.Map.RemoveRoof
- uid: TinyLife.World.Map.GetObjects*
  commentId: Overload:TinyLife.World.Map.GetObjects
  name: GetObjects
  nameWithType: Map.GetObjects
  fullName: TinyLife.World.Map.GetObjects
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetObject*
  commentId: Overload:TinyLife.World.Map.GetObject
  name: GetObject
  nameWithType: Map.GetObject
  fullName: TinyLife.World.Map.GetObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.World.Map.AddObject*
  commentId: Overload:TinyLife.World.Map.AddObject
  name: AddObject
  nameWithType: Map.AddObject
  fullName: TinyLife.World.Map.AddObject
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  parent: TinyLife.Objects.MapObject
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink
  commentId: M:TinyLife.Objects.Furniture.RemoveAndUnlink
  parent: TinyLife.Objects.Furniture
  name: RemoveAndUnlink()
  nameWithType: Furniture.RemoveAndUnlink()
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.RemoveAndUnlink
    name: RemoveAndUnlink
    nameWithType: Furniture.RemoveAndUnlink
    fullName: TinyLife.Objects.Furniture.RemoveAndUnlink
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.RemoveAndUnlink
    name: RemoveAndUnlink
    nameWithType: Furniture.RemoveAndUnlink
    fullName: TinyLife.Objects.Furniture.RemoveAndUnlink
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  name: RemoveChild(Furniture)
  nameWithType: Furniture.RemoveChild(Furniture)
  fullName: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
    name: RemoveChild
    nameWithType: Furniture.RemoveChild
    fullName: TinyLife.Objects.Furniture.RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
    name: RemoveChild
    nameWithType: Furniture.RemoveChild
    fullName: TinyLife.Objects.Furniture.RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.RemoveObject*
  commentId: Overload:TinyLife.World.Map.RemoveObject
  name: RemoveObject
  nameWithType: Map.RemoveObject
  fullName: TinyLife.World.Map.RemoveObject
- uid: TinyLife.World.Map.DeadPeople
  commentId: F:TinyLife.World.Map.DeadPeople
  isExternal: true
- uid: TinyLife.World.Map.GetPeople*
  commentId: Overload:TinyLife.World.Map.GetPeople
  name: GetPeople
  nameWithType: Map.GetPeople
  fullName: TinyLife.World.Map.GetPeople
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetHousehold*
  commentId: Overload:TinyLife.World.Map.GetHousehold
  name: GetHousehold
  nameWithType: Map.GetHousehold
  fullName: TinyLife.World.Map.GetHousehold
- uid: TinyLife.World.Map.AddHousehold*
  commentId: Overload:TinyLife.World.Map.AddHousehold
  name: AddHousehold
  nameWithType: Map.AddHousehold
  fullName: TinyLife.World.Map.AddHousehold
- uid: TinyLife.World.Map.RemoveHousehold*
  commentId: Overload:TinyLife.World.Map.RemoveHousehold
  name: RemoveHousehold
  nameWithType: Map.RemoveHousehold
  fullName: TinyLife.World.Map.RemoveHousehold
- uid: TinyLife.World.Map.GetHouseholds*
  commentId: Overload:TinyLife.World.Map.GetHouseholds
  name: GetHouseholds
  nameWithType: Map.GetHouseholds
  fullName: TinyLife.World.Map.GetHouseholds
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Household}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Household}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Household>
  nameWithType: IEnumerable<Household>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Household>
  nameWithType.vb: IEnumerable(Of Household)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Household)
  name.vb: IEnumerable(Of Household)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Household
    name: Household
    nameWithType: Household
    fullName: TinyLife.World.Household
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Household
    name: Household
    nameWithType: Household
    fullName: TinyLife.World.Household
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetSection*
  commentId: Overload:TinyLife.World.Map.GetSection
  name: GetSection
  nameWithType: Map.GetSection
  fullName: TinyLife.World.Map.GetSection
- uid: TinyLife.World.Map.GetSections*
  commentId: Overload:TinyLife.World.Map.GetSections
  name: GetSections
  nameWithType: Map.GetSections
  fullName: TinyLife.World.Map.GetSections
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MapSection>
  nameWithType: IEnumerable<MapSection>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.MapSection>
  nameWithType.vb: IEnumerable(Of MapSection)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.MapSection)
  name.vb: IEnumerable(Of MapSection)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.MapSection
    name: MapSection
    nameWithType: MapSection
    fullName: TinyLife.World.MapSection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.MapSection
    name: MapSection
    nameWithType: MapSection
    fullName: TinyLife.World.MapSection
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  isExternal: true
- uid: TinyLife.World.Map.MarkDirtyForPathfinding*
  commentId: Overload:TinyLife.World.Map.MarkDirtyForPathfinding
  name: MarkDirtyForPathfinding
  nameWithType: Map.MarkDirtyForPathfinding
  fullName: TinyLife.World.Map.MarkDirtyForPathfinding
- uid: TinyLife.World.Map.GetPathCost*
  commentId: Overload:TinyLife.World.Map.GetPathCost
  name: GetPathCost
  nameWithType: Map.GetPathCost
  fullName: TinyLife.World.Map.GetPathCost
- uid: MLEM.Pathfinding.AStar`1.InfiniteCost
  commentId: F:MLEM.Pathfinding.AStar`1.InfiniteCost
  isExternal: true
- uid: TinyLife.World.Map.CanWalkBetween*
  commentId: Overload:TinyLife.World.Map.CanWalkBetween
  name: CanWalkBetween
  nameWithType: Map.CanWalkBetween
  fullName: TinyLife.World.Map.CanWalkBetween
- uid: TinyLife.World.Map.IsFreeSpot*
  commentId: Overload:TinyLife.World.Map.IsFreeSpot
  name: IsFreeSpot
  nameWithType: Map.IsFreeSpot
  fullName: TinyLife.World.Map.IsFreeSpot
- uid: TinyLife.World.Map.GetDeadPerson*
  commentId: Overload:TinyLife.World.Map.GetDeadPerson
  name: GetDeadPerson
  nameWithType: Map.GetDeadPerson
  fullName: TinyLife.World.Map.GetDeadPerson
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  isExternal: true
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
- uid: TinyLife.Options.WorldSoundVolume
  commentId: F:TinyLife.Options.WorldSoundVolume
  isExternal: true
- uid: TinyLife.World.Map.PlaySound*
  commentId: Overload:TinyLife.World.Map.PlaySound
  name: PlaySound
  nameWithType: Map.PlaySound
  fullName: TinyLife.World.Map.PlaySound
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: true
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: TinyLife.World.MapAudioEmitter
  commentId: T:TinyLife.World.MapAudioEmitter
  parent: TinyLife.World
  name: MapAudioEmitter
  nameWithType: MapAudioEmitter
  fullName: TinyLife.World.MapAudioEmitter
- uid: TinyLife.World.MapAudioEmitter.WorldPosition
  commentId: P:TinyLife.World.MapAudioEmitter.WorldPosition
  isExternal: true
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean)
  isExternal: true
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.World.Map.GetClosestExitRoad*
  commentId: Overload:TinyLife.World.Map.GetClosestExitRoad
  name: GetClosestExitRoad
  nameWithType: Map.GetClosestExitRoad
  fullName: TinyLife.World.Map.GetClosestExitRoad
- uid: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Point, Direction2>
  nameWithType: (T1, T2)<Point, Direction2>
  fullName: System.ValueTuple<Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2>
  nameWithType.vb: (T1, T2)(Of Point, Direction2)
  fullName.vb: System.ValueTuple(Of Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2)
  name.vb: (T1, T2)(Of Point, Direction2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetExitRoads*
  commentId: Overload:TinyLife.World.Map.GetExitRoads
  name: GetExitRoads
  nameWithType: Map.GetExitRoads
  fullName: TinyLife.World.Map.GetExitRoads
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<Point, Direction2>>
  nameWithType: IEnumerable<(T1, T2)<Point, Direction2>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of Point, Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (T1, T2)(Of Point, Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetWalls*
  commentId: Overload:TinyLife.World.Map.GetWalls
  name: GetWalls
  nameWithType: Map.GetWalls
  fullName: TinyLife.World.Map.GetWalls
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Wall>
  nameWithType: IEnumerable<Wall>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Wall>
  nameWithType.vb: IEnumerable(Of Wall)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Wall)
  name.vb: IEnumerable(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.ApplyCameraRotation*
  commentId: Overload:TinyLife.World.Map.ApplyCameraRotation
  name: ApplyCameraRotation
  nameWithType: Map.ApplyCameraRotation
  fullName: TinyLife.World.Map.ApplyCameraRotation
- uid: System.Nullable{MLEM.Misc.Direction2}
  commentId: T:System.Nullable{MLEM.Misc.Direction2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Direction2>
  nameWithType: Nullable<Direction2>
  fullName: System.Nullable<MLEM.Misc.Direction2>
  nameWithType.vb: Nullable(Of Direction2)
  fullName.vb: System.Nullable(Of MLEM.Misc.Direction2)
  name.vb: Nullable(Of Direction2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.ApplyInverseCameraRotation*
  commentId: Overload:TinyLife.World.Map.ApplyInverseCameraRotation
  name: ApplyInverseCameraRotation
  nameWithType: Map.ApplyInverseCameraRotation
  fullName: TinyLife.World.Map.ApplyInverseCameraRotation
- uid: TinyLife.World.Map.OnCameraRotationChanged*
  commentId: Overload:TinyLife.World.Map.OnCameraRotationChanged
  name: OnCameraRotationChanged
  nameWithType: Map.OnCameraRotationChanged
  fullName: TinyLife.World.Map.OnCameraRotationChanged
- uid: TinyLife.Objects.Light.Position
  commentId: P:TinyLife.Objects.Light.Position
  isExternal: true
- uid: TinyLife.World.Map.AddLight*
  commentId: Overload:TinyLife.World.Map.AddLight
  name: AddLight
  nameWithType: Map.AddLight
  fullName: TinyLife.World.Map.AddLight
- uid: TinyLife.Objects.Light
  commentId: T:TinyLife.Objects.Light
  parent: TinyLife.Objects
  name: Light
  nameWithType: Light
  fullName: TinyLife.Objects.Light
- uid: TinyLife.World.Map.RemoveLight*
  commentId: Overload:TinyLife.World.Map.RemoveLight
  name: RemoveLight
  nameWithType: Map.RemoveLight
  fullName: TinyLife.World.Map.RemoveLight
- uid: TinyLife.World.Map.MoveEverything*
  commentId: Overload:TinyLife.World.Map.MoveEverything
  name: MoveEverything
  nameWithType: Map.MoveEverything
  fullName: TinyLife.World.Map.MoveEverything
- uid: TinyLife.World.Room.Validate
  commentId: M:TinyLife.World.Room.Validate
  isExternal: true
- uid: TinyLife.World.Map.AddWall(TinyLife.World.Wall,System.Boolean)
  commentId: M:TinyLife.World.Map.AddWall(TinyLife.World.Wall,System.Boolean)
  isExternal: true
- uid: TinyLife.World.Map.ValidateRooms*
  commentId: Overload:TinyLife.World.Map.ValidateRooms
  name: ValidateRooms
  nameWithType: Map.ValidateRooms
  fullName: TinyLife.World.Map.ValidateRooms
- uid: TinyLife.World.Map.GetPeople
  commentId: M:TinyLife.World.Map.GetPeople
  isExternal: true
- uid: TinyLife.Objects.Person.IsRegularVisitor
  commentId: P:TinyLife.Objects.Person.IsRegularVisitor
  isExternal: true
- uid: TinyLife.World.Map.GetRegularVisitors*
  commentId: Overload:TinyLife.World.Map.GetRegularVisitors
  name: GetRegularVisitors
  nameWithType: Map.GetRegularVisitors
  fullName: TinyLife.World.Map.GetRegularVisitors
- uid: TinyLife.PerSaveOptions.MaxRegularVisitors
  commentId: F:TinyLife.PerSaveOptions.MaxRegularVisitors
  isExternal: true
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World.Map.UpdateExternalPeople*
  commentId: Overload:TinyLife.World.Map.UpdateExternalPeople
  name: UpdateExternalPeople
  nameWithType: Map.UpdateExternalPeople
  fullName: TinyLife.World.Map.UpdateExternalPeople
- uid: TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.World.Map.IsLotHidden*
  commentId: Overload:TinyLife.World.Map.IsLotHidden
  name: IsLotHidden
  nameWithType: Map.IsLotHidden
  fullName: TinyLife.World.Map.IsLotHidden
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  isExternal: true
- uid: TinyLife.World.Map.GetAllLotEmployments*
  commentId: Overload:TinyLife.World.Map.GetAllLotEmployments
  name: GetAllLotEmployments
  nameWithType: Map.GetAllLotEmployments
  fullName: TinyLife.World.Map.GetAllLotEmployments
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<LotEmployment, Lot>>
  nameWithType: IEnumerable<(T1, T2)<LotEmployment, Lot>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<TinyLife.World.LotEmployment, TinyLife.World.Lot>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of LotEmployment, Lot))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of TinyLife.World.LotEmployment, TinyLife.World.Lot))
  name.vb: IEnumerable(Of (T1, T2)(Of LotEmployment, Lot))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Lot
    name: Lot
    nameWithType: Lot
    fullName: TinyLife.World.Lot
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
- uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  commentId: M:TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,TinyLife.World.Tile)
  isExternal: true
- uid: TinyLife.World.GrassyAutoTile
  commentId: T:TinyLife.World.GrassyAutoTile
  name: GrassyAutoTile
  nameWithType: GrassyAutoTile
  fullName: TinyLife.World.GrassyAutoTile
- uid: TinyLife.World.Map.MarkTileDirtyForDrawing*
  commentId: Overload:TinyLife.World.Map.MarkTileDirtyForDrawing
  name: MarkTileDirtyForDrawing
  nameWithType: Map.MarkTileDirtyForDrawing
  fullName: TinyLife.World.Map.MarkTileDirtyForDrawing
- uid: TinyLife.World.Map.Validate(System.Action{System.String},System.Boolean)
  commentId: M:TinyLife.World.Map.Validate(System.Action{System.String},System.Boolean)
  isExternal: true
- uid: TinyLife.World.Map.LoadStaticMap*
  commentId: Overload:TinyLife.World.Map.LoadStaticMap
  name: LoadStaticMap
  nameWithType: Map.LoadStaticMap
  fullName: TinyLife.World.Map.LoadStaticMap
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map

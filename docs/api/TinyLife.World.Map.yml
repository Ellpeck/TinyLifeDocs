### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  id: Map
  parent: TinyLife.World
  children:
  - TinyLife.World.Map.#ctor(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  - TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  - TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  - TinyLife.World.Map.AddLot(TinyLife.World.Lot)
  - TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  - TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  - TinyLife.World.Map.AddStairs(TinyLife.World.Stairs)
  - TinyLife.World.Map.AddWall(TinyLife.Objects.WallLike)
  - TinyLife.World.Map.AdoptableChildren
  - TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  - TinyLife.World.Map.Finalize
  - TinyLife.World.Map.GetAllLotEmployments
  - TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.World.Map.GetClosestFreeExitPoint(Microsoft.Xna.Framework.Vector2)
  - TinyLife.World.Map.GetClosestRoads(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetClosestRoadsidePosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  - TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.World.Map.GetExitPoints
  - TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  - TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  - TinyLife.World.Map.GetHouseholds
  - TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetLot(System.Guid)
  - TinyLife.World.Map.GetLots
  - TinyLife.World.Map.GetMapSampler
  - TinyLife.World.Map.GetObject``1(System.Guid)
  - TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetPeople
  - TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  - TinyLife.World.Map.GetRegularVisitors
  - TinyLife.World.Map.GetRoads
  - TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetRoofs(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  - TinyLife.World.Map.GetStairs(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetStairs(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.GetStoredDeadPeople
  - TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  - TinyLife.World.Map.GetVisibleWorldArea(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.GetWallBetween``1(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.GetWalls``1(MLEM.Misc.RectangleF)
  - TinyLife.World.Map.Info
  - TinyLife.World.Map.IsActive
  - TinyLife.World.Map.IsCurrent
  - TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  - TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.LoadStaticMap(TinyLife.PerSaveOptions.MapInfo)
  - TinyLife.World.Map.MailToSend
  - TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point,System.Int32)
  - TinyLife.World.Map.MarkGroundTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  - TinyLife.World.Map.MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject,TinyLife.World.MapSection,System.Boolean)
  - TinyLife.World.Map.MaxFloor
  - TinyLife.World.Map.MinorUpdateMinutes
  - TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean,TinyLife.World.Tile)
  - TinyLife.World.Map.Neighborhood
  - TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.World.Map.OnCurrentGameMapChanged(TinyLife.World.Map,TinyLife.World.Map)
  - TinyLife.World.Map.OnEventsAttachable
  - TinyLife.World.Map.OnObjectAdded
  - TinyLife.World.Map.OnObjectRemoved
  - TinyLife.World.Map.OnUpdate
  - TinyLife.World.Map.PassiveUpdateMinutes
  - TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  - TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  - TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
  - TinyLife.World.Map.PrepareForPermanentRemoval
  - TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  - TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  - TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  - TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  - TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  - TinyLife.World.Map.RemoveStairs(TinyLife.World.Stairs)
  - TinyLife.World.Map.RemoveWall(TinyLife.Objects.WallLike)
  - TinyLife.World.Map.RoadRadius
  - TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  - TinyLife.World.Map.Size
  - TinyLife.World.Map.SizeInSections
  - TinyLife.World.Map.StaticVersion
  - TinyLife.World.Map.Time
  - TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  - TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  - TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  - TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point,System.Int32)
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
  type: Class
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/World/Map.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA map holds all of the data about a city, like its tiles, its objects and its roads.\nA map is split into <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> objects which allows faster retrieval of objects in an area.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Map : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Map Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Map.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Map.RoadRadius
  commentId: F:TinyLife.World.Map.RoadRadius
  id: RoadRadius
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RoadRadius
  nameWithType: Map.RoadRadius
  fullName: TinyLife.World.Map.RoadRadius
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RoadRadius
    path: ../TinyLife/World/Map.cs
    startLine: 47
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis field holds the radius that roads are required to have (in road tiles) excluding the center dotted line tiles.\nIt is set to 2.\n"
  example: []
  syntax:
    content: public const int RoadRadius = 2
    return:
      type: System.Int32
    content.vb: Public Const RoadRadius As Integer = 2
- uid: TinyLife.World.Map.MaxFloor
  commentId: F:TinyLife.World.Map.MaxFloor
  id: MaxFloor
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MaxFloor
  nameWithType: Map.MaxFloor
  fullName: TinyLife.World.Map.MaxFloor
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxFloor
    path: ../TinyLife/World/Map.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe maximum floor, above the ground floor, that objects can be placed on in build mode.\nIt is set to 1 in the demo and 4 in the full version of the game.\n"
  example: []
  syntax:
    content: public const int MaxFloor = 4
    return:
      type: System.Int32
    content.vb: Public Const MaxFloor As Integer = 4
- uid: TinyLife.World.Map.MinorUpdateMinutes
  commentId: F:TinyLife.World.Map.MinorUpdateMinutes
  id: MinorUpdateMinutes
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MinorUpdateMinutes
  nameWithType: Map.MinorUpdateMinutes
  fullName: TinyLife.World.Map.MinorUpdateMinutes
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MinorUpdateMinutes
    path: ../TinyLife/World/Map.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe amount of minutes of in-game time that have to pass before an <xref href=\"TinyLife.Objects.IUpdatingObject\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.IUpdatingObject.UpdateMode.Minor\" data-throw-if-not-resolved=\"false\"></xref> is updated.\n"
  example: []
  syntax:
    content: public const float MinorUpdateMinutes = 15
    return:
      type: System.Single
    content.vb: Public Const MinorUpdateMinutes As Single = 15
- uid: TinyLife.World.Map.PassiveUpdateMinutes
  commentId: F:TinyLife.World.Map.PassiveUpdateMinutes
  id: PassiveUpdateMinutes
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PassiveUpdateMinutes
  nameWithType: Map.PassiveUpdateMinutes
  fullName: TinyLife.World.Map.PassiveUpdateMinutes
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassiveUpdateMinutes
    path: ../TinyLife/World/Map.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe amount of minutes of in-game time that have to pass before an <xref href=\"TinyLife.Objects.IUpdatingObject\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.IUpdatingObject.UpdateMode.MajorIfActive\" data-throw-if-not-resolved=\"false\"></xref> is updated while this map isn&apos;t <xref href=\"TinyLife.World.Map.IsActive\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public const float PassiveUpdateMinutes = 5
    return:
      type: System.Single
    content.vb: Public Const PassiveUpdateMinutes As Single = 5
- uid: TinyLife.World.Map.OnEventsAttachable
  commentId: E:TinyLife.World.Map.OnEventsAttachable
  id: OnEventsAttachable
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnEventsAttachable
  nameWithType: Map.OnEventsAttachable
  fullName: TinyLife.World.Map.OnEventsAttachable
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEventsAttachable
    path: ../TinyLife/World/Map.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when non-static events for a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> are ready to be attached to.\nThis event is invoked in <xref href=\"TinyLife.World.Map.PostValidate(System.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Map> OnEventsAttachable
    return:
      type: System.Action{TinyLife.World.Map}
    content.vb: Public Shared Event OnEventsAttachable As Action(Of Map)
- uid: TinyLife.World.Map.OnUpdate
  commentId: E:TinyLife.World.Map.OnUpdate
  id: OnUpdate
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: Map.OnUpdate
  fullName: TinyLife.World.Map.OnUpdate
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnUpdate
    path: ../TinyLife/World/Map.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when this map is updated in <xref href=\"TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.World.Map.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event UpdateDelegate OnUpdate
    return:
      type: TinyLife.World.UpdateDelegate
    content.vb: Public Event OnUpdate As UpdateDelegate
- uid: TinyLife.World.Map.OnObjectAdded
  commentId: E:TinyLife.World.Map.OnObjectAdded
  id: OnObjectAdded
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnObjectAdded
  nameWithType: Map.OnObjectAdded
  fullName: TinyLife.World.Map.OnObjectAdded
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnObjectAdded
    path: ../TinyLife/World/Map.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> is added to this map using <xref href=\"TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>\nThis event can be subscribed to using <xref href=\"TinyLife.World.Map.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<MapObject> OnObjectAdded
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Event OnObjectAdded As Action(Of MapObject)
- uid: TinyLife.World.Map.OnObjectRemoved
  commentId: E:TinyLife.World.Map.OnObjectRemoved
  id: OnObjectRemoved
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnObjectRemoved
  nameWithType: Map.OnObjectRemoved
  fullName: TinyLife.World.Map.OnObjectRemoved
  type: Event
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnObjectRemoved
    path: ../TinyLife/World/Map.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> is removed from this map using <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>\nThis event can be subscribed to using <xref href=\"TinyLife.World.Map.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<MapObject> OnObjectRemoved
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Event OnObjectRemoved As Action(Of MapObject)
- uid: TinyLife.World.Map.MailToSend
  commentId: F:TinyLife.World.Map.MailToSend
  id: MailToSend
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MailToSend
  nameWithType: Map.MailToSend
  fullName: TinyLife.World.Map.MailToSend
  type: Field
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MailToSend
    path: ../TinyLife/World/Map.cs
    startLine: 125
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA list of all <xref href=\"TinyLife.World.Mail\" data-throw-if-not-resolved=\"false\"></xref> that needs to be sent by a mail carrier the next morning.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Mail> MailToSend
    return:
      type: System.Collections.Generic.List{TinyLife.World.Mail}
    content.vb: >-
      <DataMember>

      Public ReadOnly MailToSend As List(Of Mail)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Map.AdoptableChildren
  commentId: P:TinyLife.World.Map.AdoptableChildren
  id: AdoptableChildren
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AdoptableChildren
  nameWithType: Map.AdoptableChildren
  fullName: TinyLife.World.Map.AdoptableChildren
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AdoptableChildren
    path: ../TinyLife/World/Map.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of randomly generated children that can be adopted using <xref href=\"TinyLife.Actions.ActionType.AdoptChild\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this collection has children removed from it, it will automatically get repopulated until there are 12 children in it.\n"
  example: []
  syntax:
    content: public List<Person> AdoptableChildren { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Person}
    content.vb: Public ReadOnly Property AdoptableChildren As List(Of Person)
  overload: TinyLife.World.Map.AdoptableChildren*
- uid: TinyLife.World.Map.SizeInSections
  commentId: P:TinyLife.World.Map.SizeInSections
  id: SizeInSections
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: SizeInSections
  nameWithType: Map.SizeInSections
  fullName: TinyLife.World.Map.SizeInSections
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SizeInSections
    path: ../TinyLife/World/Map.cs
    startLine: 146
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe size, in sections (not tiles) that this map has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Point SizeInSections { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: >-
      <DataMember>

      Public Property SizeInSections As Point
  overload: TinyLife.World.Map.SizeInSections*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Map.Size
  commentId: P:TinyLife.World.Map.Size
  id: Size
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Map.Size
  fullName: TinyLife.World.Map.Size
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Size
    path: ../TinyLife/World/Map.cs
    startLine: 160
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe size in tiles that this map has.\nThis is always <xref href=\"TinyLife.World.Map.SizeInSections\" data-throw-if-not-resolved=\"false\"></xref> multiplied by <xref href=\"TinyLife.World.MapSection.Size\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point Size { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public Property Size As Point
  overload: TinyLife.World.Map.Size*
- uid: TinyLife.World.Map.StaticVersion
  commentId: P:TinyLife.World.Map.StaticVersion
  id: StaticVersion
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: StaticVersion
  nameWithType: Map.StaticVersion
  fullName: TinyLife.World.Map.StaticVersion
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StaticVersion
    path: ../TinyLife/World/Map.cs
    startLine: 174
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe static version of this map.\nWhen a new save file is created, a static version of each map is loaded and used as the save file&apos;s basis.\nIf the static version of the save file is newer, their save file is updated to the new static map version, which causes all non-lot objects to be copied to the saved map.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int StaticVersion { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Property StaticVersion As Integer
  overload: TinyLife.World.Map.StaticVersion*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  id: Time
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Time
    path: ../TinyLife/World/Map.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis map&apos;s current in-game time, including the full day and time.\n"
  example: []
  syntax:
    content: public TimeSpan Time { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property Time As TimeSpan
  overload: TinyLife.World.Map.Time*
- uid: TinyLife.World.Map.Info
  commentId: P:TinyLife.World.Map.Info
  id: Info
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: Map.Info
  fullName: TinyLife.World.Map.Info
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Info
    path: ../TinyLife/World/Map.cs
    startLine: 183
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis map&apos;s <xref href=\"TinyLife.PerSaveOptions.MapInfo\" data-throw-if-not-resolved=\"false\"></xref>, which includes its name and whether it is custom.\n"
  example: []
  syntax:
    content: public PerSaveOptions.MapInfo Info { get; }
    parameters: []
    return:
      type: TinyLife.PerSaveOptions.MapInfo
    content.vb: Public Property Info As PerSaveOptions.MapInfo
  overload: TinyLife.World.Map.Info*
- uid: TinyLife.World.Map.Neighborhood
  commentId: P:TinyLife.World.Map.Neighborhood
  id: Neighborhood
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Neighborhood
  nameWithType: Map.Neighborhood
  fullName: TinyLife.World.Map.Neighborhood
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Neighborhood
    path: ../TinyLife/World/Map.cs
    startLine: 188
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe set of all maps that are loaded together as part of the same save, including this map.\nDuring gameplay, this collection is the same as <xref href=\"TinyLife.GameImpl.CurrentMaps\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Dictionary<string, Map> Neighborhood { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map}
    content.vb: Public Property Neighborhood As Dictionary(Of String, Map)
  overload: TinyLife.World.Map.Neighborhood*
- uid: TinyLife.World.Map.IsCurrent
  commentId: P:TinyLife.World.Map.IsCurrent
  id: IsCurrent
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsCurrent
  nameWithType: Map.IsCurrent
  fullName: TinyLife.World.Map.IsCurrent
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCurrent
    path: ../TinyLife/World/Map.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this map is current. This returns whether this map is the same as <xref href=\"TinyLife.GameImpl.CurrentMap\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsCurrent { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCurrent As Boolean
  overload: TinyLife.World.Map.IsCurrent*
- uid: TinyLife.World.Map.IsActive
  commentId: P:TinyLife.World.Map.IsActive
  id: IsActive
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsActive
  nameWithType: Map.IsActive
  fullName: TinyLife.World.Map.IsActive
  type: Property
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsActive
    path: ../TinyLife/World/Map.cs
    startLine: 196
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this map is active. An active map is one that is either current (<xref href=\"TinyLife.World.Map.IsCurrent\" data-throw-if-not-resolved=\"false\"></xref>), or that has members of the <xref href=\"TinyLife.GameImpl.CurrentHousehold\" data-throw-if-not-resolved=\"false\"></xref> on it.\n"
  example: []
  syntax:
    content: public bool IsActive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsActive As Boolean
  overload: TinyLife.World.Map.IsActive*
- uid: TinyLife.World.Map.#ctor(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.#ctor(Microsoft.Xna.Framework.Point)
  id: '#ctor(Microsoft.Xna.Framework.Point)'
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Map(Point)
  nameWithType: Map.Map(Point)
  fullName: TinyLife.World.Map.Map(Microsoft.Xna.Framework.Point)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Map.cs
    startLine: 246
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new map with the given size\n"
  example: []
  syntax:
    content: public Map(Point sizeInSections)
    parameters:
    - id: sizeInSections
      type: Microsoft.Xna.Framework.Point
      description: The size, in sections, of this map
    content.vb: Public Sub New(sizeInSections As Point)
  overload: TinyLife.World.Map.#ctor*
  nameWithType.vb: Map.New(Point)
  fullName.vb: TinyLife.World.Map.New(Microsoft.Xna.Framework.Point)
  name.vb: New(Point)
- uid: TinyLife.World.Map.Finalize
  commentId: M:TinyLife.World.Map.Finalize
  id: Finalize
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ~Map()
  nameWithType: Map.~Map()
  fullName: TinyLife.World.Map.~Map()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Finalize
    path: ../TinyLife/World/Map.cs
    startLine: 251
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  example: []
  syntax:
    content: protected ~Map()
    content.vb: ''
  overload: TinyLife.World.Map.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Map.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/World/Map.cs
    startLine: 262
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nUpdates this map, its <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> objects and its <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.World.Map.Update*
  nameWithType.vb: Map.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  commentId: M:TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Nullable{MLEM.Misc.RectangleF},System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, bool, RectangleF?, Matrix?, RenderTarget2D, bool)
  nameWithType: Map.Draw(GameTime, SpriteBatch, bool, RectangleF?, Matrix?, RenderTarget2D, bool)
  fullName: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, bool, MLEM.Misc.RectangleF?, Microsoft.Xna.Framework.Matrix?, Microsoft.Xna.Framework.Graphics.RenderTarget2D, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Map.cs
    startLine: 393
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this map and all of its objects.\nNote that drawing in this manner uses multiple <xref href=\"Microsoft.Xna.Framework.Graphics.RenderTarget2D\" data-throw-if-not-resolved=\"false\"></xref> objects, for things like the ground and the lightmaps.\n"
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, bool selectionMode, RectangleF? visibleArea = null, Matrix? visibleMatrix = null, RenderTarget2D lightmap = null, bool ignoreObjectVisibility = false)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: selectionMode
      type: System.Boolean
      description: Whether we&apos;re drawing in selection mode (&quot;ShowSelectionEffect&quot; cheat displays this mode)
    - id: visibleArea
      type: System.Nullable{MLEM.Misc.RectangleF}
      description: The area that is visible, in world space. If this is null, <xref href="MLEM.Cameras.Camera.GetVisibleRectangle" data-throw-if-not-resolved="false"></xref> is used to calculate the visible area.
    - id: visibleMatrix
      type: System.Nullable{Microsoft.Xna.Framework.Matrix}
      description: A matrix that has a translation and scale that determines the visible area of the screenshot
    - id: lightmap
      type: Microsoft.Xna.Framework.Graphics.RenderTarget2D
      description: The light map to draw lighting data onto, or null to use the default light map
    - id: ignoreObjectVisibility
      type: System.Boolean
      description: Whether object visibility (<xref href="TinyLife.Objects.MapObject.Visibility" data-throw-if-not-resolved="false"></xref>) should be ignored
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, selectionMode As Boolean, visibleArea As RectangleF? = Nothing, visibleMatrix As Matrix? = Nothing, lightmap As RenderTarget2D = Nothing, ignoreObjectVisibility As Boolean = False)
  overload: TinyLife.World.Map.Draw*
  nameWithType.vb: Map.Draw(GameTime, SpriteBatch, Boolean, RectangleF?, Matrix?, RenderTarget2D, Boolean)
  fullName.vb: TinyLife.World.Map.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Boolean, MLEM.Misc.RectangleF?, Microsoft.Xna.Framework.Matrix?, Microsoft.Xna.Framework.Graphics.RenderTarget2D, Boolean)
  name.vb: Draw(GameTime, SpriteBatch, Boolean, RectangleF?, Matrix?, RenderTarget2D, Boolean)
- uid: TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)
  id: GetDepth(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetDepth(Vector2, float, float, bool, bool, bool)
  nameWithType: Map.GetDepth(Vector2, float, float, bool, bool, bool)
  fullName: TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2, float, float, bool, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDepth
    path: ../TinyLife/World/Map.cs
    startLine: 753
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nGets the depth that should be used for drawing an object at the given position\n"
  example: []
  syntax:
    content: public float GetDepth(Vector2 worldPos, float floor, float offset = 0, bool center = true, bool borderOffset = false, bool applyCameraRotation = true)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to get depth for, in tile coordinates
    - id: floor
      type: System.Single
      description: The floor to get depth for.
    - id: offset
      type: System.Single
      description: An offset added to the depth value
    - id: center
      type: System.Boolean
      description: Whether the position should be centered on the x axis
    - id: borderOffset
      type: System.Boolean
      description: Whether the map border offset should be applied to the camera rotation using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>. This value only has an effect if <code data-dev-comment-type="paramref" class="paramref">applyCameraRotation</code> is true
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game&apos;s current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Single
      description: The depth to pass to the draw call
    content.vb: Public Function GetDepth(worldPos As Vector2, floor As Single, offset As Single = 0, center As Boolean = True, borderOffset As Boolean = False, applyCameraRotation As Boolean = True) As Single
  overload: TinyLife.World.Map.GetDepth*
  nameWithType.vb: Map.GetDepth(Vector2, Single, Single, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.GetDepth(Microsoft.Xna.Framework.Vector2, Single, Single, Boolean, Boolean, Boolean)
  name.vb: GetDepth(Vector2, Single, Single, Boolean, Boolean, Boolean)
- uid: TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  id: IsInBounds(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsInBounds(Point)
  nameWithType: Map.IsInBounds(Point)
  fullName: TinyLife.World.Map.IsInBounds(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInBounds
    path: ../TinyLife/World/Map.cs
    startLine: 766
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given position is in bounds of this map&apos;s <xref href=\"TinyLife.World.Map.Size\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsInBounds(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: System.Boolean
      description: true if the position is in bounds, false otherwise
    content.vb: Public Function IsInBounds(pos As Point) As Boolean
  overload: TinyLife.World.Map.IsInBounds*
- uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  id: AddRoad(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddRoad(Point)
  nameWithType: Map.AddRoad(Point)
  fullName: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRoad
    path: ../TinyLife/World/Map.cs
    startLine: 775
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a road to the map at the given position.\nThis doesn&apos;t actually add the road tiles, but it notifies the pathfinder that there is a road center at this location.\n"
  example: []
  syntax:
    content: public void AddRoad(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to add a road to
    content.vb: Public Sub AddRoad(pos As Point)
  overload: TinyLife.World.Map.AddRoad*
- uid: TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  id: IsRoad(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsRoad(Point)
  nameWithType: Map.IsRoad(Point)
  fullName: TinyLife.World.Map.IsRoad(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsRoad
    path: ../TinyLife/World/Map.cs
    startLine: 785
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given position contains a road.\nThis doesn&apos;t query road tiles, but it queries for road markers added by <xref href=\"TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsRoad(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsRoad(pos As Point) As Boolean
  overload: TinyLife.World.Map.IsRoad*
- uid: TinyLife.World.Map.GetClosestRoads(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetClosestRoads(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetClosestRoads(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestRoads(Point, int)
  nameWithType: Map.GetClosestRoads(Point, int)
  fullName: TinyLife.World.Map.GetClosestRoads(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestRoads
    path: ../TinyLife/World/Map.cs
    startLine: 795
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all road markers around the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code> in the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">radius</code>, ordered by their distance to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code>.\n"
  example: []
  syntax:
    content: public IEnumerable<Point> GetClosestRoads(Point pos, int radius)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to find the closest roads to
    - id: radius
      type: System.Int32
      description: The radius, in tiles, to search for roads in
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: The closest road points
    content.vb: Public Function GetClosestRoads(pos As Point, radius As Integer) As IEnumerable(Of Point)
  overload: TinyLife.World.Map.GetClosestRoads*
  nameWithType.vb: Map.GetClosestRoads(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetClosestRoads(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetClosestRoads(Point, Integer)
- uid: TinyLife.World.Map.GetRoads
  commentId: M:TinyLife.World.Map.GetRoads
  id: GetRoads
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoads()
  nameWithType: Map.GetRoads()
  fullName: TinyLife.World.Map.GetRoads()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoads
    path: ../TinyLife/World/Map.cs
    startLine: 805
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the road markers on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Point> GetRoads()
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of all road markers on this map
    content.vb: Public Function GetRoads() As IEnumerable(Of Point)
  overload: TinyLife.World.Map.GetRoads*
- uid: TinyLife.World.Map.GetClosestRoadsidePosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Map.GetClosestRoadsidePosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  id: GetClosestRoadsidePosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestRoadsidePosition(Point, Vector2)
  nameWithType: Map.GetClosestRoadsidePosition(Point, Vector2)
  fullName: TinyLife.World.Map.GetClosestRoadsidePosition(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestRoadsidePosition
    path: ../TinyLife/World/Map.cs
    startLine: 816
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the closest roadside position to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">road</code> position, as well as the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code>.\n"
  example: []
  syntax:
    content: public Point? GetClosestRoadsidePosition(Point road, Vector2 pos)
    parameters:
    - id: road
      type: Microsoft.Xna.Framework.Point
      description: The road position.
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The (non-road) position that the returned roadside position should be closest to.
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: The closest roadside position, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if there is none around.
    content.vb: Public Function GetClosestRoadsidePosition(road As Point, pos As Vector2) As Point?
  overload: TinyLife.World.Map.GetClosestRoadsidePosition*
- uid: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  id: GetTilesAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetTilesAround(Vector2, float, int, bool, bool, bool, Predicate<Point>)
  nameWithType: Map.GetTilesAround(Vector2, float, int, bool, bool, bool, Predicate<Point>)
  fullName: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2, float, int, bool, bool, bool, System.Predicate<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTilesAround
    path: ../TinyLife/World/Map.cs
    startLine: 834
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of tiles around the given position that match the given conditions\n"
  example: []
  syntax:
    content: public IEnumerable<Point> GetTilesAround(Vector2 pos, float floor, int radius, bool hasToBeOnLot = false, bool sameRoom = false, bool hasToBeNonnull = true, Predicate<Point> valid = null)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position
    - id: floor
      type: System.Single
      description: The floor to query.
    - id: radius
      type: System.Int32
      description: The radius, in tiles
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether the returned positions have to be on a lot
    - id: sameRoom
      type: System.Boolean
      description: Whether the returned positions have to be in the same room as the <code data-dev-comment-type="paramref" class="paramref">pos</code> passed
    - id: hasToBeNonnull
      type: System.Boolean
    - id: valid
      type: System.Predicate{Microsoft.Xna.Framework.Point}
      description: A function that determines whether a position should be returned. If this is null, all valid positions are returned.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of positions that match the given conditions
    content.vb: Public Function GetTilesAround(pos As Vector2, floor As Single, radius As Integer, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False, hasToBeNonnull As Boolean = True, valid As Predicate(Of Point) = Nothing) As IEnumerable(Of Point)
  overload: TinyLife.World.Map.GetTilesAround*
  nameWithType.vb: Map.GetTilesAround(Vector2, Single, Integer, Boolean, Boolean, Boolean, Predicate(Of Point))
  fullName.vb: TinyLife.World.Map.GetTilesAround(Microsoft.Xna.Framework.Vector2, Single, Integer, Boolean, Boolean, Boolean, System.Predicate(Of Microsoft.Xna.Framework.Point))
  name.vb: GetTilesAround(Vector2, Single, Integer, Boolean, Boolean, Boolean, Predicate(Of Point))
- uid: TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestEmptyTile(Vector2, float, int, bool, bool, bool, bool)
  nameWithType: Map.GetClosestEmptyTile(Vector2, float, int, bool, bool, bool, bool)
  fullName: TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2, float, int, bool, bool, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestEmptyTile
    path: ../TinyLife/World/Map.cs
    startLine: 864
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the position of the closest tile that is empty.\nAn empty tile is a tile that has no <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances on it.\n"
  example: []
  syntax:
    content: public Point? GetClosestEmptyTile(Vector2 pos, float floor, int radius = 2, bool ignorePeople = true, bool hasToBeOnLot = false, bool sameRoom = false, bool hasToBeNonnull = true)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to be close to
    - id: floor
      type: System.Single
      description: The floor to query tiles on.
    - id: radius
      type: System.Int32
      description: The radius to search for empty tiles in
    - id: ignorePeople
      type: System.Boolean
      description: Whether or not people should be ignored. If this is true, the returned empty tile might currently be occupied by a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref>.
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether or not the returned tile position has to be part of a <xref href="TinyLife.World.Lot" data-throw-if-not-resolved="false"></xref>
    - id: sameRoom
      type: System.Boolean
      description: Whether or not the returned tile position has to be in the same room as <code data-dev-comment-type="paramref" class="paramref">pos</code>
    - id: hasToBeNonnull
      type: System.Boolean
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: The closest empty tile, or null if there isn&apos;t one
    content.vb: Public Function GetClosestEmptyTile(pos As Vector2, floor As Single, radius As Integer = 2, ignorePeople As Boolean = True, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False, hasToBeNonnull As Boolean = True) As Point?
  overload: TinyLife.World.Map.GetClosestEmptyTile*
  nameWithType.vb: Map.GetClosestEmptyTile(Vector2, Single, Integer, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.GetClosestEmptyTile(Microsoft.Xna.Framework.Vector2, Single, Integer, Boolean, Boolean, Boolean, Boolean)
  name.vb: GetClosestEmptyTile(Vector2, Single, Integer, Boolean, Boolean, Boolean, Boolean)
- uid: TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.World.Map.GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  id: GetRandomTile(System.Random,Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Predicate{Microsoft.Xna.Framework.Point})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRandomTile(Random, Vector2, int, int, bool, bool, bool, Predicate<Point>)
  nameWithType: Map.GetRandomTile(Random, Vector2, int, int, bool, bool, bool, Predicate<Point>)
  fullName: TinyLife.World.Map.GetRandomTile(System.Random, Microsoft.Xna.Framework.Vector2, int, int, bool, bool, bool, System.Predicate<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomTile
    path: ../TinyLife/World/Map.cs
    startLine: 883
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a random tile in the given radius that matches the given predicate.\nIf no tile is found, an empty <xref href=\"System.Nullable%601\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public Point? GetRandomTile(Random random, Vector2 pos, int floor, int radius = 32, bool hasToBeOnLot = false, bool sameRoom = false, bool hasToBeNonnull = true, Predicate<Point> valid = null)
    parameters:
    - id: random
      type: System.Random
      description: The random to use
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the radius should be centered on
    - id: floor
      type: System.Int32
      description: The floor to query.
    - id: radius
      type: System.Int32
      description: The radius
    - id: hasToBeOnLot
      type: System.Boolean
      description: Whether the position returned has to be on a lot
    - id: sameRoom
      type: System.Boolean
      description: Whether the position returned has to be in the same room as the <code data-dev-comment-type="paramref" class="paramref">pos</code> passed
    - id: hasToBeNonnull
      type: System.Boolean
    - id: valid
      type: System.Predicate{Microsoft.Xna.Framework.Point}
      description: A predicate that determines whether tile should be included
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Point}
      description: A random tile that matches the given conditions
    content.vb: Public Function GetRandomTile(random As Random, pos As Vector2, floor As Integer, radius As Integer = 32, hasToBeOnLot As Boolean = False, sameRoom As Boolean = False, hasToBeNonnull As Boolean = True, valid As Predicate(Of Point) = Nothing) As Point?
  overload: TinyLife.World.Map.GetRandomTile*
  nameWithType.vb: Map.GetRandomTile(Random, Vector2, Integer, Integer, Boolean, Boolean, Boolean, Predicate(Of Point))
  fullName.vb: TinyLife.World.Map.GetRandomTile(System.Random, Microsoft.Xna.Framework.Vector2, Integer, Integer, Boolean, Boolean, Boolean, System.Predicate(Of Microsoft.Xna.Framework.Point))
  name.vb: GetRandomTile(Random, Vector2, Integer, Integer, Boolean, Boolean, Boolean, Predicate(Of Point))
- uid: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  id: ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ValidateEarly(MapInfo, Dictionary<string, Map>, Action<string>, Action<float>)
  nameWithType: Map.ValidateEarly(PerSaveOptions.MapInfo, Dictionary<string, Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo, System.Collections.Generic.Dictionary<string, TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidateEarly
    path: ../TinyLife/World/Map.cs
    startLine: 911
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk, before <xref href=\"TinyLife.World.Map.Validate(System.Boolean%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nWhen called on a map, early section and object validation occurs.\n"
  example: []
  syntax:
    content: public void ValidateEarly(PerSaveOptions.MapInfo info, Dictionary<string, Map> neighborhood, Action<string> setState, Action<float> setProgress)
    parameters:
    - id: info
      type: TinyLife.PerSaveOptions.MapInfo
      description: The <xref href="TinyLife.PerSaveOptions.MapInfo" data-throw-if-not-resolved="false"></xref> to assign to this map.
    - id: neighborhood
      type: System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map}
      description: The <xref href="TinyLife.World.Map.Neighborhood" data-throw-if-not-resolved="false"></xref> to assign to this map.
    - id: setState
      type: System.Action{System.String}
      description: An action that accepts the current state of the loading process.
    - id: setProgress
      type: System.Action{System.Single}
      description: An action that accepts the progress of the current state of the loading process.
    content.vb: Public Sub ValidateEarly(info As PerSaveOptions.MapInfo, neighborhood As Dictionary(Of String, Map), setState As Action(Of String), setProgress As Action(Of Single))
  overload: TinyLife.World.Map.ValidateEarly*
  nameWithType.vb: Map.ValidateEarly(PerSaveOptions.MapInfo, Dictionary(Of String, Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo, System.Collections.Generic.Dictionary(Of String, TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: ValidateEarly(MapInfo, Dictionary(Of String, Map), Action(Of String), Action(Of Single))
- uid: TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  id: Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: Validate(bool, Action<string>, Action<float>)
  nameWithType: Map.Validate(bool, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.Validate(bool, System.Action<string>, System.Action<float>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Map.cs
    startLine: 935
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk, between <xref href=\"TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Map.PostValidate(System.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen called on a map, it causes all objects to be validated, roads to be generated, outdated information to be removed, and more.\n"
  example: []
  syntax:
    content: public void Validate(bool localize, Action<string> setState, Action<float> setProgress)
    parameters:
    - id: localize
      type: System.Boolean
      description: Whether this map&apos;s data should be localized upon validation, which is only used for builtin maps and not custom ones.
    - id: setState
      type: System.Action{System.String}
      description: An action that accepts the current state of the loading process.
    - id: setProgress
      type: System.Action{System.Single}
      description: An action that accepts the progress of the current state of the loading process.
    content.vb: Public Sub Validate(localize As Boolean, setState As Action(Of String), setProgress As Action(Of Single))
  overload: TinyLife.World.Map.Validate*
  nameWithType.vb: Map.Validate(Boolean, Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.Validate(Boolean, System.Action(Of String), System.Action(Of Single))
  name.vb: Validate(Boolean, Action(Of String), Action(Of Single))
- uid: TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
  id: PostValidate(System.Action{System.String},System.Action{System.Single})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PostValidate(Action<string>, Action<float>)
  nameWithType: Map.PostValidate(Action<string>, Action<float>)
  fullName: TinyLife.World.Map.PostValidate(System.Action<string>, System.Action<float>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PostValidate
    path: ../TinyLife/World/Map.cs
    startLine: 993
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk, after <xref href=\"TinyLife.World.Map.Validate(System.Boolean%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref> has already been called.\nWhen called on a map, post-load preloads like pathfinding pre-generation occurs.\n"
  example: []
  syntax:
    content: public void PostValidate(Action<string> setState, Action<float> setProgress)
    parameters:
    - id: setState
      type: System.Action{System.String}
      description: An action that accepts the current state of the loading process.
    - id: setProgress
      type: System.Action{System.Single}
      description: An action that accepts the progress of the current state of the loading process.
    content.vb: Public Sub PostValidate(setState As Action(Of String), setProgress As Action(Of Single))
  overload: TinyLife.World.Map.PostValidate*
  nameWithType.vb: Map.PostValidate(Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.PostValidate(System.Action(Of String), System.Action(Of Single))
  name.vb: PostValidate(Action(Of String), Action(Of Single))
- uid: TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetRoom(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoom(Point, int)
  nameWithType: Map.GetRoom(Point, int)
  fullName: TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoom
    path: ../TinyLife/World/Map.cs
    startLine: 1010
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the room that the given position is contained in\n"
  example: []
  syntax:
    content: public Room GetRoom(Point pos, int floor)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    - id: floor
      type: System.Int32
      description: The floor to query.
    return:
      type: TinyLife.World.Room
      description: The room at that location, or null if there is none
    content.vb: Public Function GetRoom(pos As Point, floor As Integer) As Room
  overload: TinyLife.World.Map.GetRoom*
  nameWithType.vb: Map.GetRoom(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetRoom(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetRoom(Point, Integer)
- uid: TinyLife.World.Map.GetLot(System.Guid)
  commentId: M:TinyLife.World.Map.GetLot(System.Guid)
  id: GetLot(System.Guid)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLot(Guid)
  nameWithType: Map.GetLot(Guid)
  fullName: TinyLife.World.Map.GetLot(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLot
    path: ../TinyLife/World/Map.cs
    startLine: 1024
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the lot with the given id on this map.\nThe returned lot&apos;s <xref href=\"TinyLife.World.Lot.Id\" data-throw-if-not-resolved=\"false\"></xref> will equal the given id.\n"
  example: []
  syntax:
    content: public Lot GetLot(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The id that the lot should have
    return:
      type: TinyLife.World.Lot
      description: The lot with the given id
    content.vb: Public Function GetLot(id As Guid) As Lot
  overload: TinyLife.World.Map.GetLot*
- uid: TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  id: GetLot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLot(Point)
  nameWithType: Map.GetLot(Point)
  fullName: TinyLife.World.Map.GetLot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLot
    path: ../TinyLife/World/Map.cs
    startLine: 1035
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the lot that is present at the given position.\nThe lot returned will always have its <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref> contain the passed position.\n"
  example: []
  syntax:
    content: public Lot GetLot(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    return:
      type: TinyLife.World.Lot
      description: The lot at that position, or null if there is none
    content.vb: Public Function GetLot(pos As Point) As Lot
  overload: TinyLife.World.Map.GetLot*
- uid: TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  commentId: M:TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  id: AddLot(Microsoft.Xna.Framework.Rectangle)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddLot(Rectangle)
  nameWithType: Map.AddLot(Rectangle)
  fullName: TinyLife.World.Map.AddLot(Microsoft.Xna.Framework.Rectangle)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLot
    path: ../TinyLife/World/Map.cs
    startLine: 1048
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a new lot with the given area to this map&apos;s lots\n"
  example: []
  syntax:
    content: public Lot AddLot(Rectangle area)
    parameters:
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area that the new lot should have
    return:
      type: TinyLife.World.Lot
      description: The newly created lot
    content.vb: Public Function AddLot(area As Rectangle) As Lot
  overload: TinyLife.World.Map.AddLot*
- uid: TinyLife.World.Map.AddLot(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.AddLot(TinyLife.World.Lot)
  id: AddLot(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddLot(Lot)
  nameWithType: Map.AddLot(Lot)
  fullName: TinyLife.World.Map.AddLot(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLot
    path: ../TinyLife/World/Map.cs
    startLine: 1058
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given lot to this map&apos;s lots.\n"
  example: []
  syntax:
    content: public void AddLot(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to add.
    content.vb: Public Sub AddLot(lot As Lot)
  overload: TinyLife.World.Map.AddLot*
- uid: TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  id: RemoveLot(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveLot(Lot)
  nameWithType: Map.RemoveLot(Lot)
  fullName: TinyLife.World.Map.RemoveLot(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveLot
    path: ../TinyLife/World/Map.cs
    startLine: 1066
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given lot from this map&apos;s lots\n"
  example: []
  syntax:
    content: public void RemoveLot(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to remove
    content.vb: Public Sub RemoveLot(lot As Lot)
  overload: TinyLife.World.Map.RemoveLot*
- uid: TinyLife.World.Map.GetLots
  commentId: M:TinyLife.World.Map.GetLots
  id: GetLots
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetLots()
  nameWithType: Map.GetLots()
  fullName: TinyLife.World.Map.GetLots()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLots
    path: ../TinyLife/World/Map.cs
    startLine: 1085
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> objects on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Lot> GetLots()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
      description: This map&apos;s lots
    content.vb: Public Function GetLots() As IEnumerable(Of Lot)
  overload: TinyLife.World.Map.GetLots*
- uid: TinyLife.World.Map.AddWall(TinyLife.Objects.WallLike)
  commentId: M:TinyLife.World.Map.AddWall(TinyLife.Objects.WallLike)
  id: AddWall(TinyLife.Objects.WallLike)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddWall(WallLike)
  nameWithType: Map.AddWall(WallLike)
  fullName: TinyLife.World.Map.AddWall(TinyLife.Objects.WallLike)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddWall
    path: ../TinyLife/World/Map.cs
    startLine: 1096
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given wall to the given position.\nOptionally, the <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref> related to that wall is re-calculated.\n"
  example: []
  syntax:
    content: public bool AddWall(WallLike wall)
    parameters:
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall to add
    return:
      type: System.Boolean
      description: Whether the wall could be added successfully
    content.vb: Public Function AddWall(wall As WallLike) As Boolean
  overload: TinyLife.World.Map.AddWall*
- uid: TinyLife.World.Map.RemoveWall(TinyLife.Objects.WallLike)
  commentId: M:TinyLife.World.Map.RemoveWall(TinyLife.Objects.WallLike)
  id: RemoveWall(TinyLife.Objects.WallLike)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveWall(WallLike)
  nameWithType: Map.RemoveWall(WallLike)
  fullName: TinyLife.World.Map.RemoveWall(TinyLife.Objects.WallLike)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveWall
    path: ../TinyLife/World/Map.cs
    startLine: 1106
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given wall from the map\n"
  example: []
  syntax:
    content: public bool RemoveWall(WallLike wall)
    parameters:
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall to remove
    return:
      type: System.Boolean
      description: Whether the wall was present on the map and could be removed
    content.vb: Public Function RemoveWall(wall As WallLike) As Boolean
  overload: TinyLife.World.Map.RemoveWall*
- uid: TinyLife.World.Map.GetWallBetween``1(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetWallBetween``1(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  id: GetWallBetween``1(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetWallBetween<T>(Point, Point, int)
  nameWithType: Map.GetWallBetween<T>(Point, Point, int)
  fullName: TinyLife.World.Map.GetWallBetween<T>(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWallBetween
    path: ../TinyLife/World/Map.cs
    startLine: 1123
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the wall between the <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">secondPos</code>.\nA wall is between two positions if its <xref href=\"TinyLife.Objects.WallLike.Positions\" data-throw-if-not-resolved=\"false\"></xref> are exactly those two positions, ignoring their order.\n"
  example: []
  syntax:
    content: 'public T GetWallBetween<T>(Point pos, Point secondPos, int floor) where T : WallLike'
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The first position
    - id: secondPos
      type: Microsoft.Xna.Framework.Point
      description: The second position
    - id: floor
      type: System.Int32
      description: The floor.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The wall between the two positions, or null if there is none
    content.vb: Public Function GetWallBetween(Of T As WallLike)(pos As Point, secondPos As Point, floor As Integer) As T
  overload: TinyLife.World.Map.GetWallBetween*
  nameWithType.vb: Map.GetWallBetween(Of T)(Point, Point, Integer)
  fullName.vb: TinyLife.World.Map.GetWallBetween(Of T)(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetWallBetween(Of T)(Point, Point, Integer)
- uid: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetTile(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetTile(Point, int)
  nameWithType: Map.GetTile(Point, int)
  fullName: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTile
    path: ../TinyLife/World/Map.cs
    startLine: 1139
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the tile at the given position on this map.\nNote that, if the floor is not the ground floor 0, this method can return <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>.\n"
  example: []
  syntax:
    content: public Tile GetTile(Point pos, int floor)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    - id: floor
      type: System.Int32
      description: The floor.
    return:
      type: TinyLife.World.Tile
      description: The tile at that position
    content.vb: Public Function GetTile(pos As Point, floor As Integer) As Tile
  overload: TinyLife.World.Map.GetTile*
  nameWithType.vb: Map.GetTile(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetTile(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetTile(Point, Integer)
- uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  commentId: M:TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  id: SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: SetTile(Point, int, Tile)
  nameWithType: Map.SetTile(Point, int, Tile)
  fullName: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point, int, TinyLife.World.Tile)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetTile
    path: ../TinyLife/World/Map.cs
    startLine: 1150
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nSets the tile at the given position to the given tile\n"
  example: []
  syntax:
    content: public void SetTile(Point pos, int floor, Tile tile)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position
    - id: floor
      type: System.Int32
      description: The floor.
    - id: tile
      type: TinyLife.World.Tile
      description: The tile
    content.vb: Public Sub SetTile(pos As Point, floor As Integer, tile As Tile)
  overload: TinyLife.World.Map.SetTile*
  nameWithType.vb: Map.SetTile(Point, Integer, Tile)
  fullName.vb: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point, Integer, TinyLife.World.Tile)
  name.vb: SetTile(Point, Integer, Tile)
- uid: TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  commentId: M:TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  id: AddRoof(TinyLife.World.Roof)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddRoof(Roof)
  nameWithType: Map.AddRoof(Roof)
  fullName: TinyLife.World.Map.AddRoof(TinyLife.World.Roof)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRoof
    path: ../TinyLife/World/Map.cs
    startLine: 1168
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given roof to this map\n"
  example: []
  syntax:
    content: public void AddRoof(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to add
    content.vb: Public Sub AddRoof(roof As Roof)
  overload: TinyLife.World.Map.AddRoof*
- uid: TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetRoof(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoof(Point, int)
  nameWithType: Map.GetRoof(Point, int)
  fullName: TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoof
    path: ../TinyLife/World/Map.cs
    startLine: 1182
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nGets a <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> whose area contains the given position\n"
  example: []
  syntax:
    content: public Roof GetRoof(Point pos, int floor)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to find a roof at
    - id: floor
      type: System.Int32
      description: The floor to find a roof at.
    return:
      type: TinyLife.World.Roof
      description: The roof at that position, or null if there is none
    content.vb: Public Function GetRoof(pos As Point, floor As Integer) As Roof
  overload: TinyLife.World.Map.GetRoof*
  nameWithType.vb: Map.GetRoof(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetRoof(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetRoof(Point, Integer)
- uid: TinyLife.World.Map.GetRoofs(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetRoofs(MLEM.Misc.RectangleF)
  id: GetRoofs(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRoofs(RectangleF)
  nameWithType: Map.GetRoofs(RectangleF)
  fullName: TinyLife.World.Map.GetRoofs(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoofs
    path: ../TinyLife/World/Map.cs
    startLine: 1197
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the roofs that intersect the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">area</code>.\n"
  example: []
  syntax:
    content: public IEnumerable<Roof> GetRoofs(RectangleF area)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to search for roofs in.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
      description: The roofs in the given area.
    content.vb: Public Function GetRoofs(area As RectangleF) As IEnumerable(Of Roof)
  overload: TinyLife.World.Map.GetRoofs*
- uid: TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  commentId: M:TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  id: RemoveRoof(TinyLife.World.Roof)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveRoof(Roof)
  nameWithType: Map.RemoveRoof(Roof)
  fullName: TinyLife.World.Map.RemoveRoof(TinyLife.World.Roof)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveRoof
    path: ../TinyLife/World/Map.cs
    startLine: 1210
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> from this map\n"
  example: []
  syntax:
    content: public void RemoveRoof(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to remove
    content.vb: Public Sub RemoveRoof(roof As Roof)
  overload: TinyLife.World.Map.RemoveRoof*
- uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  id: GetObjects``1(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetObjects<T>(RectangleF)
  nameWithType: Map.GetObjects<T>(RectangleF)
  fullName: TinyLife.World.Map.GetObjects<T>(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObjects
    path: ../TinyLife/World/Map.cs
    startLine: 1224
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of objects that are present in the given area.\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetObjects<T>(RectangleF area) where T : MapObject'
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area, in tile coordinates
    typeParameters:
    - id: T
      description: The type that the objects need to have
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of objects that match the criteria
    content.vb: Public Function GetObjects(Of T As MapObject)(area As RectangleF) As IEnumerable(Of T)
  overload: TinyLife.World.Map.GetObjects*
  nameWithType.vb: Map.GetObjects(Of T)(RectangleF)
  fullName.vb: TinyLife.World.Map.GetObjects(Of T)(MLEM.Misc.RectangleF)
  name.vb: GetObjects(Of T)(RectangleF)
- uid: TinyLife.World.Map.GetObject``1(System.Guid)
  commentId: M:TinyLife.World.Map.GetObject``1(System.Guid)
  id: GetObject``1(System.Guid)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetObject<T>(Guid)
  nameWithType: Map.GetObject<T>(Guid)
  fullName: TinyLife.World.Map.GetObject<T>(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObject
    path: ../TinyLife/World/Map.cs
    startLine: 1240
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the object with the given id of the given type.\nIf there is no object with that id, or its type does not match, null is returned.\n"
  example: []
  syntax:
    content: 'public T GetObject<T>(Guid id) where T : MapObject'
    parameters:
    - id: id
      type: System.Guid
      description: The id that the returned object should have
    typeParameters:
    - id: T
      description: The type that the object is expected to have
    return:
      type: '{T}'
      description: The object, or null if there is no matching one
    content.vb: Public Function GetObject(Of T As MapObject)(id As Guid) As T
  overload: TinyLife.World.Map.GetObject*
  nameWithType.vb: Map.GetObject(Of T)(Guid)
  fullName.vb: TinyLife.World.Map.GetObject(Of T)(System.Guid)
  name.vb: GetObject(Of T)(Guid)
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  id: AddObject(TinyLife.Objects.MapObject)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddObject(MapObject)
  nameWithType: Map.AddObject(MapObject)
  fullName: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddObject
    path: ../TinyLife/World/Map.cs
    startLine: 1252
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given object to this map.\nNote that, if the object&apos;s <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> is already present on this map, this method will cause an exception.\n"
  example: []
  syntax:
    content: public void AddObject(MapObject obj)
    parameters:
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object to add to this map
    content.vb: Public Sub AddObject(obj As MapObject)
  overload: TinyLife.World.Map.AddObject*
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  id: RemoveObject(TinyLife.Objects.MapObject)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveObject(MapObject)
  nameWithType: Map.RemoveObject(MapObject)
  fullName: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveObject
    path: ../TinyLife/World/Map.cs
    startLine: 1279
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given object from this map and its underlying <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref>.\nThis also calls <xref href=\"TinyLife.Objects.MapObject.OnRemoved\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nWhen removing a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> object from the world entirely, including when putting it into furniture storage, <xref href=\"TinyLife.Objects.Furniture.RemoveAndUnlink\" data-throw-if-not-resolved=\"false\"></xref> should be used instead, or <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref> should be called in addition to this method.\nAs all of those methods also sever the relationships between furniture items and their parents (which is equivalent to calling <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref>), they are usually preferred over this method, since parent-child relationships should not persist in many cases.\n"
  example: []
  syntax:
    content: public void RemoveObject(MapObject obj)
    parameters:
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object to remove
    content.vb: Public Sub RemoveObject(obj As MapObject)
  overload: TinyLife.World.Map.RemoveObject*
- uid: TinyLife.World.Map.GetPeople
  commentId: M:TinyLife.World.Map.GetPeople
  id: GetPeople
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetPeople()
  nameWithType: Map.GetPeople()
  fullName: TinyLife.World.Map.GetPeople()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPeople
    path: ../TinyLife/World/Map.cs
    startLine: 1307
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects that are on this map, excluding dead people stored in gravestones.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetPeople()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: This map&apos;s people
    content.vb: Public Function GetPeople() As IEnumerable(Of Person)
  overload: TinyLife.World.Map.GetPeople*
- uid: TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  id: GetHousehold(TinyLife.Objects.Person)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHousehold(Person)
  nameWithType: Map.GetHousehold(Person)
  fullName: TinyLife.World.Map.GetHousehold(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHousehold
    path: ../TinyLife/World/Map.cs
    startLine: 1319
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the household that the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> lives in\n"
  example: []
  syntax:
    content: public Household GetHousehold(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query
    return:
      type: TinyLife.World.Household
      description: The person&apos;s household, or null if there is none
    content.vb: Public Function GetHousehold(person As Person) As Household
  overload: TinyLife.World.Map.GetHousehold*
- uid: TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  id: GetHousehold(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHousehold(Lot)
  nameWithType: Map.GetHousehold(Lot)
  fullName: TinyLife.World.Map.GetHousehold(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHousehold
    path: ../TinyLife/World/Map.cs
    startLine: 1332
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the household that lives on the given <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Household GetHousehold(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to query
    return:
      type: TinyLife.World.Household
      description: The household that lives on the lot, or null if none lives there
    content.vb: Public Function GetHousehold(lot As Lot) As Household
  overload: TinyLife.World.Map.GetHousehold*
- uid: TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  id: AddHousehold(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddHousehold(Lot)
  nameWithType: Map.AddHousehold(Lot)
  fullName: TinyLife.World.Map.AddHousehold(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddHousehold
    path: ../TinyLife/World/Map.cs
    startLine: 1345
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds a new household to this map by calling the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: public Household AddHousehold(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot that the household should live on
    return:
      type: TinyLife.World.Household
      description: The newly created household
    content.vb: Public Function AddHousehold(lot As Lot) As Household
  overload: TinyLife.World.Map.AddHousehold*
- uid: TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  commentId: M:TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  id: RemoveHousehold(TinyLife.World.Household)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveHousehold(Household)
  nameWithType: Map.RemoveHousehold(Household)
  fullName: TinyLife.World.Map.RemoveHousehold(TinyLife.World.Household)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveHousehold
    path: ../TinyLife/World/Map.cs
    startLine: 1355
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given household from this map\n"
  example: []
  syntax:
    content: public void RemoveHousehold(Household household)
    parameters:
    - id: household
      type: TinyLife.World.Household
      description: The household to remove
    content.vb: Public Sub RemoveHousehold(household As Household)
  overload: TinyLife.World.Map.RemoveHousehold*
- uid: TinyLife.World.Map.GetHouseholds
  commentId: M:TinyLife.World.Map.GetHouseholds
  id: GetHouseholds
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetHouseholds()
  nameWithType: Map.GetHouseholds()
  fullName: TinyLife.World.Map.GetHouseholds()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHouseholds
    path: ../TinyLife/World/Map.cs
    startLine: 1363
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref> instances that live on this map\n"
  example: []
  syntax:
    content: public IEnumerable<Household> GetHouseholds()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Household}
      description: This map&apos;s households
    content.vb: Public Function GetHouseholds() As IEnumerable(Of Household)
  overload: TinyLife.World.Map.GetHouseholds*
- uid: TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  id: GetSection(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSection(Point)
  nameWithType: Map.GetSection(Point)
  fullName: TinyLife.World.Map.GetSection(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSection
    path: ../TinyLife/World/Map.cs
    startLine: 1373
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> at the given tile position\n"
  example: []
  syntax:
    content: public MapSection GetSection(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The tile position
    return:
      type: TinyLife.World.MapSection
      description: The section at that position
    content.vb: Public Function GetSection(pos As Point) As MapSection
  overload: TinyLife.World.Map.GetSection*
- uid: TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetSections(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSections(Point, int)
  nameWithType: Map.GetSections(Point, int)
  fullName: TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSections
    path: ../TinyLife/World/Map.cs
    startLine: 1388
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of sections that are contained in (or intersect with) the given area\n"
  example: []
  syntax:
    content: public IEnumerable<MapSection> GetSections(Point point, int radiusIncrease)
    parameters:
    - id: point
      type: Microsoft.Xna.Framework.Point
      description: The position to find the section for, in tile coordinates
    - id: radiusIncrease
      type: System.Int32
      description: The radius, in sections, that the search area should be extended by
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
      description: A set of sections covered by this area
    content.vb: Public Function GetSections(point As Point, radiusIncrease As Integer) As IEnumerable(Of MapSection)
  overload: TinyLife.World.Map.GetSections*
  nameWithType.vb: Map.GetSections(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetSections(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetSections(Point, Integer)
- uid: TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  commentId: M:TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF,System.Int32)
  id: GetSections(MLEM.Misc.RectangleF,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetSections(RectangleF, int)
  nameWithType: Map.GetSections(RectangleF, int)
  fullName: TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSections
    path: ../TinyLife/World/Map.cs
    startLine: 1398
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of sections that are contained in (or intersect with) the given area\n"
  example: []
  syntax:
    content: public IEnumerable<MapSection> GetSections(RectangleF area, int radiusIncrease)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to find sections in, in tile coordinates
    - id: radiusIncrease
      type: System.Int32
      description: The radius, in sections, that the search area should be extended by
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
      description: A set of sections covered by this area
    content.vb: Public Function GetSections(area As RectangleF, radiusIncrease As Integer) As IEnumerable(Of MapSection)
  overload: TinyLife.World.Map.GetSections*
  nameWithType.vb: Map.GetSections(RectangleF, Integer)
  fullName.vb: TinyLife.World.Map.GetSections(MLEM.Misc.RectangleF, Integer)
  name.vb: GetSections(RectangleF, Integer)
- uid: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point,System.Int32)
  id: MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MarkDirtyForPathfinding(Point, int)
  nameWithType: Map.MarkDirtyForPathfinding(Point, int)
  fullName: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkDirtyForPathfinding
    path: ../TinyLife/World/Map.cs
    startLine: 1420
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given position dirty for pathfinding purposes.\nWhen a path is found again close to this position, its cost (<xref href=\"TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person%2cMicrosoft.Xna.Framework.Point%2cSystem.Int32%2cMicrosoft.Xna.Framework.Point%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>) will be re-calculated.\nThis method is called by <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> when it is placed for removed.\n"
  example: []
  syntax:
    content: public void MarkDirtyForPathfinding(Point pos, int floor)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to mark dirty
    - id: floor
      type: System.Int32
      description: The floor that the position is on.
    content.vb: Public Sub MarkDirtyForPathfinding(pos As Point, floor As Integer)
  overload: TinyLife.World.Map.MarkDirtyForPathfinding*
  nameWithType.vb: Map.MarkDirtyForPathfinding(Point, Integer)
  fullName.vb: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point, Integer)
  name.vb: MarkDirtyForPathfinding(Point, Integer)
- uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  id: GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetPathCost(Person, Point, int, Point, int)
  nameWithType: Map.GetPathCost(Person, Point, int, Point, int)
  fullName: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPathCost
    path: ../TinyLife/World/Map.cs
    startLine: 1443
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the cost to pathfind from the given current position to the given next position.\nNote that, for this method to return a proper result, <code data-dev-comment-type=\"paramref\" class=\"paramref\">nextPos</code> has to be directly or diagonally adjacent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">currPos</code>.\n"
  example: []
  syntax:
    content: public float GetPathCost(Person person, Point currPos, int currFloor, Point nextPos, int nextFloor)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the path cost for
    - id: currPos
      type: Microsoft.Xna.Framework.Point
      description: The current position
    - id: currFloor
      type: System.Int32
      description: The current position&apos;s floor.
    - id: nextPos
      type: Microsoft.Xna.Framework.Point
      description: The next, neighboring position
    - id: nextFloor
      type: System.Int32
      description: The next position&apos;s floor.
    return:
      type: System.Single
      description: The cost to path to this location
    content.vb: Public Function GetPathCost(person As Person, currPos As Point, currFloor As Integer, nextPos As Point, nextFloor As Integer) As Single
  overload: TinyLife.World.Map.GetPathCost*
  nameWithType.vb: Map.GetPathCost(Person, Point, Integer, Point, Integer)
  fullName.vb: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetPathCost(Person, Point, Integer, Point, Integer)
- uid: TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  id: CanWalkBetween(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: CanWalkBetween(Person, Point, int, Point, int)
  nameWithType: Map.CanWalkBetween(Person, Point, int, Point, int)
  fullName: TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanWalkBetween
    path: ../TinyLife/World/Map.cs
    startLine: 1467
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given person can walk between the two given positions.\nInternally, this method only queries whether <xref href=\"TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person%2cMicrosoft.Xna.Framework.Point%2cSystem.Int32%2cMicrosoft.Xna.Framework.Point%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is lower than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that, for this method to return a proper result, <code data-dev-comment-type=\"paramref\" class=\"paramref\">nextPos</code> has to be directly or diagonally adjacent to <code data-dev-comment-type=\"paramref\" class=\"paramref\">currPos</code>.\n"
  example: []
  syntax:
    content: public bool CanWalkBetween(Person person, Point currPos, int currFloor, Point nextPos, int nextFloor)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the path cost for
    - id: currPos
      type: Microsoft.Xna.Framework.Point
      description: The current position
    - id: currFloor
      type: System.Int32
      description: The current position&apos;s floor.
    - id: nextPos
      type: Microsoft.Xna.Framework.Point
      description: The next, neighboring position
    - id: nextFloor
      type: System.Int32
      description: The next position&apos;s floor.
    return:
      type: System.Boolean
      description: Whether the two locations can be walked between
    content.vb: Public Function CanWalkBetween(person As Person, currPos As Point, currFloor As Integer, nextPos As Point, nextFloor As Integer) As Boolean
  overload: TinyLife.World.Map.CanWalkBetween*
  nameWithType.vb: Map.CanWalkBetween(Person, Point, Integer, Point, Integer)
  fullName.vb: TinyLife.World.Map.CanWalkBetween(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Point, Integer)
  name.vb: CanWalkBetween(Person, Point, Integer, Point, Integer)
- uid: TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point,System.Int32)
  id: IsFreeSpot(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsFreeSpot(Point, int)
  nameWithType: Map.IsFreeSpot(Point, int)
  fullName: TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFreeSpot
    path: ../TinyLife/World/Map.cs
    startLine: 1477
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether or not the given position on the given map is free for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> to stand in\n"
  example: []
  syntax:
    content: public bool IsFreeSpot(Point pos, int floor)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to query
    - id: floor
      type: System.Int32
      description: The floor to query.
    return:
      type: System.Boolean
      description: Whether this position is free to stand on
    content.vb: Public Function IsFreeSpot(pos As Point, floor As Integer) As Boolean
  overload: TinyLife.World.Map.IsFreeSpot*
  nameWithType.vb: Map.IsFreeSpot(Point, Integer)
  fullName.vb: TinyLife.World.Map.IsFreeSpot(Microsoft.Xna.Framework.Point, Integer)
  name.vb: IsFreeSpot(Point, Integer)
- uid: TinyLife.World.Map.GetStoredDeadPeople
  commentId: M:TinyLife.World.Map.GetStoredDeadPeople
  id: GetStoredDeadPeople
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetStoredDeadPeople()
  nameWithType: Map.GetStoredDeadPeople()
  fullName: TinyLife.World.Map.GetStoredDeadPeople()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetStoredDeadPeople
    path: ../TinyLife/World/Map.cs
    startLine: 1486
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the dead people that are stored in <xref href=\"TinyLife.Objects.Gravestone\" data-throw-if-not-resolved=\"false\"></xref> furniture, both on this map and in the household storages of any of this map&apos;s households.\n"
  example: []
  syntax:
    content: public IEnumerable<(Gravestone Gravestone, Person Person)> GetStoredDeadPeople()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}}
      description: The stored dead people on this map.
    content.vb: Public Function GetStoredDeadPeople() As IEnumerable(Of (Gravestone As Gravestone, Person As Person))
  overload: TinyLife.World.Map.GetStoredDeadPeople*
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  id: PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PlaySound(SoundEffect, Vector2, float, float, float, bool, bool)
  nameWithType: Map.PlaySound(SoundEffect, Vector2, float, float, float, bool, bool)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, Microsoft.Xna.Framework.Vector2, float, float, float, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlaySound
    path: ../TinyLife/World/Map.cs
    startLine: 1508
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nPlays a sound at the given location (in world space) statically.\nIf the sound should move while being played, use <xref href=\"TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect%2cTinyLife.World.MapAudioEmitter%2cSystem.Single%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> instead.\nNote that the returned <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> does not need to be disposed when it is finished playing.\n"
  example: []
  syntax:
    content: public SoundEffectInstance PlaySound(SoundEffect sound, Vector2 pos, float floor, float volume = 1, float pitch = 0, bool loop = false, bool applyWorldSoundVolume = true)
    parameters:
    - id: sound
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: The sound effect to play
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space, to play the sound at
    - id: floor
      type: System.Single
      description: The floor to play the sound based on.
    - id: volume
      type: System.Single
      description: The sound&apos;s volume, between 0 and 1 (default)
    - id: pitch
      type: System.Single
      description: The sound&apos;s pitch, between -1, 0 (default) and 1
    - id: loop
      type: System.Boolean
      description: Whether or not the sound should loop
    - id: applyWorldSoundVolume
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Options.WorldSoundVolume" data-throw-if-not-resolved="false"></xref> should be applied to the passed <code data-dev-comment-type="paramref" class="paramref">volume</code>
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffectInstance
      description: The sound effect instance that is responsible for playing this sound, which can be stopped or paused
    content.vb: Public Function PlaySound(sound As SoundEffect, pos As Vector2, floor As Single, volume As Single = 1, pitch As Single = 0, [loop] As Boolean = False, applyWorldSoundVolume As Boolean = True) As SoundEffectInstance
  overload: TinyLife.World.Map.PlaySound*
  nameWithType.vb: Map.PlaySound(SoundEffect, Vector2, Single, Single, Single, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, Microsoft.Xna.Framework.Vector2, Single, Single, Single, Boolean, Boolean)
  name.vb: PlaySound(SoundEffect, Vector2, Single, Single, Single, Boolean, Boolean)
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  id: PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PlaySound(SoundEffect, MapAudioEmitter, float, float, bool, bool)
  nameWithType: Map.PlaySound(SoundEffect, MapAudioEmitter, float, float, bool, bool)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, TinyLife.World.MapAudioEmitter, float, float, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlaySound
    path: ../TinyLife/World/Map.cs
    startLine: 1524
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nPlays a sound at the given location (in world space) with the given <xref href=\"TinyLife.World.MapAudioEmitter\" data-throw-if-not-resolved=\"false\"></xref>, whose <xref href=\"TinyLife.World.MapAudioEmitter.WorldPosition\" data-throw-if-not-resolved=\"false\"></xref> can be updated by the caller.\nIf the sound should move in a static locatdion, use <xref href=\"TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Single%2cSystem.Single%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> instead.\nNote that the returned <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffectInstance\" data-throw-if-not-resolved=\"false\"></xref> does not need to be disposed when it is finished playing.\n"
  example: []
  syntax:
    content: public SoundEffectInstance PlaySound(SoundEffect sound, MapAudioEmitter emitter, float volume = 1, float pitch = 0, bool loop = false, bool applyWorldSoundVolume = true)
    parameters:
    - id: sound
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: The sound effect to play
    - id: emitter
      type: TinyLife.World.MapAudioEmitter
      description: The audio emitter, whose <xref href="TinyLife.World.MapAudioEmitter.WorldPosition" data-throw-if-not-resolved="false"></xref> should be set by the caller
    - id: volume
      type: System.Single
      description: The sound&apos;s volume, between 0 and 1 (default)
    - id: pitch
      type: System.Single
      description: The sound&apos;s pitch, between -1, 0 (default) and 1
    - id: loop
      type: System.Boolean
      description: Whether or not the sound should loop
    - id: applyWorldSoundVolume
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Options.WorldSoundVolume" data-throw-if-not-resolved="false"></xref> should be applied to the passed <code data-dev-comment-type="paramref" class="paramref">volume</code>
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffectInstance
      description: The sound effect instance that is responsible for playing this sound, which can be stopped or paused
    content.vb: Public Function PlaySound(sound As SoundEffect, emitter As MapAudioEmitter, volume As Single = 1, pitch As Single = 0, [loop] As Boolean = False, applyWorldSoundVolume As Boolean = True) As SoundEffectInstance
  overload: TinyLife.World.Map.PlaySound*
  nameWithType.vb: Map.PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, TinyLife.World.MapAudioEmitter, Single, Single, Boolean, Boolean)
  name.vb: PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
- uid: TinyLife.World.Map.GetClosestFreeExitPoint(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Map.GetClosestFreeExitPoint(Microsoft.Xna.Framework.Vector2)
  id: GetClosestFreeExitPoint(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetClosestFreeExitPoint(Vector2)
  nameWithType: Map.GetClosestFreeExitPoint(Vector2)
  fullName: TinyLife.World.Map.GetClosestFreeExitPoint(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClosestFreeExitPoint
    path: ../TinyLife/World/Map.cs
    startLine: 1544
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the closest exit point on the map to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">position</code>, out of all of the points returned by <xref href=\"TinyLife.World.Map.GetExitPoints\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Point GetClosestFreeExitPoint(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the exit point should be close to.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The closest exit point to the given position.
    content.vb: Public Function GetClosestFreeExitPoint(position As Vector2) As Point
  overload: TinyLife.World.Map.GetClosestFreeExitPoint*
- uid: TinyLife.World.Map.GetExitPoints
  commentId: M:TinyLife.World.Map.GetExitPoints
  id: GetExitPoints
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetExitPoints()
  nameWithType: Map.GetExitPoints()
  fullName: TinyLife.World.Map.GetExitPoints()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetExitPoints
    path: ../TinyLife/World/Map.cs
    startLine: 1554
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all exit points on the map, which are locations on the map&apos;s border that Tinies can exit from either on foot or using their car.\n"
  example: []
  syntax:
    content: public IEnumerable<(Point Position, Direction2 Dir)> GetExitPoints()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
      description: All exit points on this map.
    content.vb: Public Function GetExitPoints() As IEnumerable(Of (Position As Point, Dir As Direction2))
  overload: TinyLife.World.Map.GetExitPoints*
- uid: TinyLife.World.Map.GetWalls``1(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetWalls``1(MLEM.Misc.RectangleF)
  id: GetWalls``1(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetWalls<T>(RectangleF)
  nameWithType: Map.GetWalls<T>(RectangleF)
  fullName: TinyLife.World.Map.GetWalls<T>(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalls
    path: ../TinyLife/World/Map.cs
    startLine: 1583
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of walls in the given area.\nAll <xref href=\"TinyLife.Objects.WallLike\" data-throw-if-not-resolved=\"false\"></xref> objects for which at least one <xref href=\"TinyLife.Objects.WallLike.Positions\" data-throw-if-not-resolved=\"false\"></xref> entry is contained in the area are returned.\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetWalls<T>(RectangleF area) where T : WallLike'
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to query for walls
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of walls in the area
    content.vb: Public Function GetWalls(Of T As WallLike)(area As RectangleF) As IEnumerable(Of T)
  overload: TinyLife.World.Map.GetWalls*
  nameWithType.vb: Map.GetWalls(Of T)(RectangleF)
  fullName.vb: TinyLife.World.Map.GetWalls(Of T)(MLEM.Misc.RectangleF)
  name.vb: GetWalls(Of T)(RectangleF)
- uid: TinyLife.World.Map.GetStairs(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetStairs(MLEM.Misc.RectangleF)
  id: GetStairs(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetStairs(RectangleF)
  nameWithType: Map.GetStairs(RectangleF)
  fullName: TinyLife.World.Map.GetStairs(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetStairs
    path: ../TinyLife/World/Map.cs
    startLine: 1603
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the stairs in the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">area</code>, including stairs that partly intersect, on all floors.\n"
  example: []
  syntax:
    content: public IEnumerable<Stairs> GetStairs(RectangleF area)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
      description: The stairs in the area.
    content.vb: Public Function GetStairs(area As RectangleF) As IEnumerable(Of Stairs)
  overload: TinyLife.World.Map.GetStairs*
- uid: TinyLife.World.Map.GetStairs(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetStairs(Microsoft.Xna.Framework.Point,System.Int32)
  id: GetStairs(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetStairs(Point, int)
  nameWithType: Map.GetStairs(Point, int)
  fullName: TinyLife.World.Map.GetStairs(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetStairs
    path: ../TinyLife/World/Map.cs
    startLine: 1618
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the stairs that are accessible from the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">entryPosition</code>, both walking upstairs and downstairs.\n"
  example: []
  syntax:
    content: public IEnumerable<Stairs> GetStairs(Point entryPosition, int floor)
    parameters:
    - id: entryPosition
      type: Microsoft.Xna.Framework.Point
      description: The entry position.
    - id: floor
      type: System.Int32
      description: The floor.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
      description: All stairs that are accessible for traversal from the given location.
    content.vb: Public Function GetStairs(entryPosition As Point, floor As Integer) As IEnumerable(Of Stairs)
  overload: TinyLife.World.Map.GetStairs*
  nameWithType.vb: Map.GetStairs(Point, Integer)
  fullName.vb: TinyLife.World.Map.GetStairs(Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetStairs(Point, Integer)
- uid: TinyLife.World.Map.AddStairs(TinyLife.World.Stairs)
  commentId: M:TinyLife.World.Map.AddStairs(TinyLife.World.Stairs)
  id: AddStairs(TinyLife.World.Stairs)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddStairs(Stairs)
  nameWithType: Map.AddStairs(Stairs)
  fullName: TinyLife.World.Map.AddStairs(TinyLife.World.Stairs)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddStairs
    path: ../TinyLife/World/Map.cs
    startLine: 1631
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given stairs to this map, additionally marking all involved locations dirty for pathfinding.\n"
  example: []
  syntax:
    content: public void AddStairs(Stairs stairs)
    parameters:
    - id: stairs
      type: TinyLife.World.Stairs
      description: The stairs to add.
    content.vb: Public Sub AddStairs(stairs As Stairs)
  overload: TinyLife.World.Map.AddStairs*
- uid: TinyLife.World.Map.RemoveStairs(TinyLife.World.Stairs)
  commentId: M:TinyLife.World.Map.RemoveStairs(TinyLife.World.Stairs)
  id: RemoveStairs(TinyLife.World.Stairs)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveStairs(Stairs)
  nameWithType: Map.RemoveStairs(Stairs)
  fullName: TinyLife.World.Map.RemoveStairs(TinyLife.World.Stairs)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveStairs
    path: ../TinyLife/World/Map.cs
    startLine: 1643
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given stairs from this map entirely, additionally marking all involved locations dirty for pathfinding.\n"
  example: []
  syntax:
    content: public bool RemoveStairs(Stairs stairs)
    parameters:
    - id: stairs
      type: TinyLife.World.Stairs
      description: The stairs to remove.
    return:
      type: System.Boolean
      description: Whether the stairs existed on the map, and were successfully removed.
    content.vb: Public Function RemoveStairs(stairs As Stairs) As Boolean
  overload: TinyLife.World.Map.RemoveStairs*
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ApplyCameraRotation(Vector2, bool, Direction2?)
  nameWithType: Map.ApplyCameraRotation(Vector2, bool, Direction2?)
  fullName: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, bool, MLEM.Misc.Direction2?)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ApplyCameraRotation
    path: ../TinyLife/World/Map.cs
    startLine: 1660
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nApplies the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> to the given position in world space\n"
  example: []
  syntax:
    content: public Vector2 ApplyCameraRotation(Vector2 worldPos, bool borderOffset = false, Direction2? cameraRotation = null)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space
    - id: borderOffset
      type: System.Boolean
      description: Whether a border offset should be applied. This is useful for tiles and other objects that aren&apos;t centered in the middle of their tiles, but that use the top-left corner of a tile for positioning.
    - id: cameraRotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: An optional override camera rotation which should be used in favor of <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The position in world space, but with camera rotation appplied
    content.vb: Public Function ApplyCameraRotation(worldPos As Vector2, borderOffset As Boolean = False, cameraRotation As Direction2? = Nothing) As Vector2
  overload: TinyLife.World.Map.ApplyCameraRotation*
  nameWithType.vb: Map.ApplyCameraRotation(Vector2, Boolean, Direction2?)
  fullName.vb: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, Boolean, MLEM.Misc.Direction2?)
  name.vb: ApplyCameraRotation(Vector2, Boolean, Direction2?)
- uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  id: ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ApplyInverseCameraRotation(Vector2, Direction2?)
  nameWithType: Map.ApplyInverseCameraRotation(Vector2, Direction2?)
  fullName: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2, MLEM.Misc.Direction2?)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ApplyInverseCameraRotation
    path: ../TinyLife/World/Map.cs
    startLine: 1676
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nApplies the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> to the given position in world space in reverse, undoing the action done by <xref href=\"TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Vector2 ApplyInverseCameraRotation(Vector2 worldPos, Direction2? cameraRotation = null)
    parameters:
    - id: worldPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space
    - id: cameraRotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: An optional override camera rotation which should be used in favor of <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The position in world space, but without camera rotation appplied
    content.vb: Public Function ApplyInverseCameraRotation(worldPos As Vector2, cameraRotation As Direction2? = Nothing) As Vector2
  overload: TinyLife.World.Map.ApplyInverseCameraRotation*
- uid: TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  id: OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: Map.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.World.Map.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCameraRotationChanged
    path: ../TinyLife/World/Map.cs
    startLine: 1691
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA method that is called when <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref> is changed.\nWhen changing camera rotation manually, this method should be called along with the change.\n"
  example: []
  syntax:
    content: public void OnCameraRotationChanged(Direction2 oldRotation, Direction2 newRotation)
    parameters:
    - id: oldRotation
      type: MLEM.Misc.Direction2
      description: ''
    - id: newRotation
      type: MLEM.Misc.Direction2
      description: ''
    content.vb: Public Sub OnCameraRotationChanged(oldRotation As Direction2, newRotation As Direction2)
  overload: TinyLife.World.Map.OnCameraRotationChanged*
- uid: TinyLife.World.Map.OnCurrentGameMapChanged(TinyLife.World.Map,TinyLife.World.Map)
  commentId: M:TinyLife.World.Map.OnCurrentGameMapChanged(TinyLife.World.Map,TinyLife.World.Map)
  id: OnCurrentGameMapChanged(TinyLife.World.Map,TinyLife.World.Map)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: OnCurrentGameMapChanged(Map, Map)
  nameWithType: Map.OnCurrentGameMapChanged(Map, Map)
  fullName: TinyLife.World.Map.OnCurrentGameMapChanged(TinyLife.World.Map, TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCurrentGameMapChanged
    path: ../TinyLife/World/Map.cs
    startLine: 1715
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is invoked when the game&apos;s <xref href=\"TinyLife.GameImpl.CurrentMap\" data-throw-if-not-resolved=\"false\"></xref> is changed, ie when the camera is moved to a different map.\n"
  example: []
  syntax:
    content: public void OnCurrentGameMapChanged(Map oldMap, Map newMap)
    parameters:
    - id: oldMap
      type: TinyLife.World.Map
      description: The previous map.
    - id: newMap
      type: TinyLife.World.Map
      description: The new map.
    content.vb: Public Sub OnCurrentGameMapChanged(oldMap As Map, newMap As Map)
  overload: TinyLife.World.Map.OnCurrentGameMapChanged*
- uid: TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  commentId: M:TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  id: AddLight(TinyLife.Objects.Light)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: AddLight(Light)
  nameWithType: Map.AddLight(Light)
  fullName: TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddLight
    path: ../TinyLife/World/Map.cs
    startLine: 1733
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given light to the world at its <xref href=\"TinyLife.Objects.Light.Position\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void AddLight(Light light)
    parameters:
    - id: light
      type: TinyLife.Objects.Light
      description: The light to add
    content.vb: Public Sub AddLight(light As Light)
  overload: TinyLife.World.Map.AddLight*
- uid: TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  commentId: M:TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  id: RemoveLight(TinyLife.Objects.Light)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: RemoveLight(Light)
  nameWithType: Map.RemoveLight(Light)
  fullName: TinyLife.World.Map.RemoveLight(TinyLife.Objects.Light)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveLight
    path: ../TinyLife/World/Map.cs
    startLine: 1744
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given light from the world\n"
  example: []
  syntax:
    content: public bool RemoveLight(Light light)
    parameters:
    - id: light
      type: TinyLife.Objects.Light
      description: The light to remove
    return:
      type: System.Boolean
    content.vb: Public Function RemoveLight(light As Light) As Boolean
  overload: TinyLife.World.Map.RemoveLight*
- uid: TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean,TinyLife.World.Tile)
  commentId: M:TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean,TinyLife.World.Tile)
  id: MoveEverything(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle,System.Boolean,TinyLife.World.Tile)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MoveEverything(Point, Rectangle, bool, Tile)
  nameWithType: Map.MoveEverything(Point, Rectangle, bool, Tile)
  fullName: TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Rectangle, bool, TinyLife.World.Tile)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MoveEverything
    path: ../TinyLife/World/Map.cs
    startLine: 1756
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMoves all of the objects, walls, tiles and roofs in the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">area</code> in the world, optionally moving the lots as well\n"
  example: []
  syntax:
    content: public void MoveEverything(Point offset, Rectangle area, bool moveLots, Tile defaultTile = null)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Point
      description: The offset to move things by
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area to move
    - id: moveLots
      type: System.Boolean
      description: Whether lots should be moved as well. The content of lots will be moved regardless of this parameter
    - id: defaultTile
      type: TinyLife.World.Tile
      description: The default tile to replace the moved ground with.
    content.vb: Public Sub MoveEverything(offset As Point, area As Rectangle, moveLots As Boolean, defaultTile As Tile = Nothing)
  overload: TinyLife.World.Map.MoveEverything*
  nameWithType.vb: Map.MoveEverything(Point, Rectangle, Boolean, Tile)
  fullName.vb: TinyLife.World.Map.MoveEverything(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Rectangle, Boolean, TinyLife.World.Tile)
  name.vb: MoveEverything(Point, Rectangle, Boolean, Tile)
- uid: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point,System.Int32)
  id: ValidateRooms(Microsoft.Xna.Framework.Point,System.Int32)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: ValidateRooms(Point, int)
  nameWithType: Map.ValidateRooms(Point, int)
  fullName: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidateRooms
    path: ../TinyLife/World/Map.cs
    startLine: 1852
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds new <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref> objects to the given positions if there are valid rooms present, and validates additional rooms, checking for whether they should still exist.\n"
  example: []
  syntax:
    content: public Room ValidateRooms(Point position, int floor)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position that should be inspected for possible rooms.
    - id: floor
      type: System.Int32
      description: The floor that should be inspected for possible rooms.
    return:
      type: TinyLife.World.Room
      description: If a new room was added, the added room, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    content.vb: Public Function ValidateRooms(position As Point, floor As Integer) As Room
  overload: TinyLife.World.Map.ValidateRooms*
  nameWithType.vb: Map.ValidateRooms(Point, Integer)
  fullName.vb: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point, Integer)
  name.vb: ValidateRooms(Point, Integer)
- uid: TinyLife.World.Map.GetRegularVisitors
  commentId: M:TinyLife.World.Map.GetRegularVisitors
  id: GetRegularVisitors
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetRegularVisitors()
  nameWithType: Map.GetRegularVisitors()
  fullName: TinyLife.World.Map.GetRegularVisitors()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRegularVisitors
    path: ../TinyLife/World/Map.cs
    startLine: 1901
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the set of <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances in the world that are regular visitors.\nThis method is a shorthand for <xref href=\"TinyLife.World.Map.GetPeople\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.IsRegularVisitor\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that dead regular visitors are not returned.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetRegularVisitors()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: This map&apos;s regular visitors
    content.vb: Public Function GetRegularVisitors() As IEnumerable(Of Person)
  overload: TinyLife.World.Map.GetRegularVisitors*
- uid: TinyLife.World.Map.GetAllLotEmployments
  commentId: M:TinyLife.World.Map.GetAllLotEmployments
  id: GetAllLotEmployments
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetAllLotEmployments()
  nameWithType: Map.GetAllLotEmployments()
  fullName: TinyLife.World.Map.GetAllLotEmployments()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAllLotEmployments
    path: ../TinyLife/World/Map.cs
    startLine: 1911
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> instances and their <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> on the map.\nNote that <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref> are also returned, with their <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> component being set to null.\n"
  example: []
  syntax:
    content: public IEnumerable<(LotEmployment Employment, Lot Lot)> GetAllLotEmployments()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
      description: All lot employments on this map
    content.vb: Public Function GetAllLotEmployments() As IEnumerable(Of (Employment As LotEmployment, Lot As Lot))
  overload: TinyLife.World.Map.GetAllLotEmployments*
- uid: TinyLife.World.Map.MarkGroundTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.MarkGroundTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  id: MarkGroundTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MarkGroundTileDirtyForDrawing(Point)
  nameWithType: Map.MarkGroundTileDirtyForDrawing(Point)
  fullName: TinyLife.World.Map.MarkGroundTileDirtyForDrawing(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkGroundTileDirtyForDrawing
    path: ../TinyLife/World/Map.cs
    startLine: 1924
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given position dirty for drawing, which causes the underlying <xref href=\"MLEM.Graphics.StaticSpriteBatch\" data-throw-if-not-resolved=\"false\"></xref> to re-render the tile.\nThis method is used automatically by <xref href=\"TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point%2cSystem.Int32%2cTinyLife.World.Tile)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.AutoTile\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void MarkGroundTileDirtyForDrawing(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to mark dirty.
    content.vb: Public Sub MarkGroundTileDirtyForDrawing(pos As Point)
  overload: TinyLife.World.Map.MarkGroundTileDirtyForDrawing*
- uid: TinyLife.World.Map.MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject,TinyLife.World.MapSection,System.Boolean)
  commentId: M:TinyLife.World.Map.MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject,TinyLife.World.MapSection,System.Boolean)
  id: MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject,TinyLife.World.MapSection,System.Boolean)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: MarkObjectDirtyForDrawing(MapObject, MapSection, bool)
  nameWithType: Map.MarkObjectDirtyForDrawing(MapObject, MapSection, bool)
  fullName: TinyLife.World.Map.MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject, TinyLife.World.MapSection, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkObjectDirtyForDrawing
    path: ../TinyLife/World/Map.cs
    startLine: 1940
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> dirty for drawing, which causes the underlying <xref href=\"MLEM.Graphics.StaticSpriteBatch\" data-throw-if-not-resolved=\"false\"></xref> to re-render the object if its visibility is <xref href=\"TinyLife.Objects.Visibility.Static\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is used automatically by <xref href=\"TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>, as well as when a static object&apos;s <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> changes.\n"
  example: []
  syntax:
    content: public void MarkObjectDirtyForDrawing(MapObject obj, MapSection section = null, bool removedFromSection = false)
    parameters:
    - id: obj
      type: TinyLife.Objects.MapObject
      description: The object to mark dirty.
    - id: section
      type: TinyLife.World.MapSection
      description: The section that the object is expected to be in, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to determine the section automatically.
    - id: removedFromSection
      type: System.Boolean
      description: Whether the object was removed, and should not be redrawn in the <code data-dev-comment-type="paramref" class="paramref">section</code>.
    content.vb: Public Sub MarkObjectDirtyForDrawing(obj As MapObject, section As MapSection = Nothing, removedFromSection As Boolean = False)
  overload: TinyLife.World.Map.MarkObjectDirtyForDrawing*
  nameWithType.vb: Map.MarkObjectDirtyForDrawing(MapObject, MapSection, Boolean)
  fullName.vb: TinyLife.World.Map.MarkObjectDirtyForDrawing(TinyLife.Objects.MapObject, TinyLife.World.MapSection, Boolean)
  name.vb: MarkObjectDirtyForDrawing(MapObject, MapSection, Boolean)
- uid: TinyLife.World.Map.PrepareForPermanentRemoval
  commentId: M:TinyLife.World.Map.PrepareForPermanentRemoval
  id: PrepareForPermanentRemoval
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: PrepareForPermanentRemoval()
  nameWithType: Map.PrepareForPermanentRemoval()
  fullName: TinyLife.World.Map.PrepareForPermanentRemoval()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PrepareForPermanentRemoval
    path: ../TinyLife/World/Map.cs
    startLine: 1971
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nPrepares this map for permanent removal, moving all people on this map to their original positions (including their home location if it is on another map and their lot employment map if they have one), and calls <xref href=\"TinyLife.Objects.Person.PrepareForPermanentRemoval\" data-throw-if-not-resolved=\"false\"></xref> on all remaining people.\n"
  example: []
  syntax:
    content: public void PrepareForPermanentRemoval()
    content.vb: Public Sub PrepareForPermanentRemoval()
  overload: TinyLife.World.Map.PrepareForPermanentRemoval*
- uid: TinyLife.World.Map.LoadStaticMap(TinyLife.PerSaveOptions.MapInfo)
  commentId: M:TinyLife.World.Map.LoadStaticMap(TinyLife.PerSaveOptions.MapInfo)
  id: LoadStaticMap(TinyLife.PerSaveOptions.MapInfo)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: LoadStaticMap(MapInfo)
  nameWithType: Map.LoadStaticMap(PerSaveOptions.MapInfo)
  fullName: TinyLife.World.Map.LoadStaticMap(TinyLife.PerSaveOptions.MapInfo)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LoadStaticMap
    path: ../TinyLife/World/Map.cs
    startLine: 2563
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nLoads a static map with the given name from the game&apos;s content directory.\nNote that no validation steps (<xref href=\"TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo%2cSystem.Collections.Generic.Dictionary%7bSystem.String%2cTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.Map.Validate(System.Boolean%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.Map.PostValidate(System.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>) have taken place when the map is returned.\n"
  example: []
  syntax:
    content: public static Map LoadStaticMap(PerSaveOptions.MapInfo info)
    parameters:
    - id: info
      type: TinyLife.PerSaveOptions.MapInfo
      description: The <xref href="TinyLife.PerSaveOptions.MapInfo" data-throw-if-not-resolved="false"></xref> of the static map to load.
    return:
      type: TinyLife.World.Map
      description: The static map that was loaded.
    content.vb: Public Shared Function LoadStaticMap(info As PerSaveOptions.MapInfo) As Map
  overload: TinyLife.World.Map.LoadStaticMap*
- uid: TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  id: IsLotHidden(TinyLife.World.Lot)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: IsLotHidden(Lot)
  nameWithType: Map.IsLotHidden(Lot)
  fullName: TinyLife.World.Map.IsLotHidden(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsLotHidden
    path: ../TinyLife/World/Map.cs
    startLine: 2607
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether the given lot is hidden from the camera.\nNote that the result of this method will be different from <xref href=\"TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref>, since this method also checks for the ShowAllLots cheat.\nFor ease of use, this method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">false</a> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">lot</code> is null.\n"
  example: []
  syntax:
    content: public static bool IsLotHidden(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function IsLotHidden(lot As Lot) As Boolean
  overload: TinyLife.World.Map.IsLotHidden*
- uid: TinyLife.World.Map.GetMapSampler
  commentId: M:TinyLife.World.Map.GetMapSampler
  id: GetMapSampler
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetMapSampler()
  nameWithType: Map.GetMapSampler()
  fullName: TinyLife.World.Map.GetMapSampler()
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMapSampler
    path: ../TinyLife/World/Map.cs
    startLine: 2625
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"Microsoft.Xna.Framework.Graphics.SamplerState\" data-throw-if-not-resolved=\"false\"></xref> to use when rendering the map.\nThis value is determined by <xref href=\"TinyLife.Options.BlurZoomedOut\" data-throw-if-not-resolved=\"false\"></xref>, as well as the <xref href=\"TinyLife.GameImpl.Camera\" data-throw-if-not-resolved=\"false\"></xref>&apos;s scale.\n"
  example: []
  syntax:
    content: public static SamplerState GetMapSampler()
    return:
      type: Microsoft.Xna.Framework.Graphics.SamplerState
      description: The sampler state to use when rendering the map.
    content.vb: Public Shared Function GetMapSampler() As SamplerState
  overload: TinyLife.World.Map.GetMapSampler*
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  id: UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  nameWithType: Map.UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection<TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpdateExternalPeople
    path: ../TinyLife/World/Map.cs
    startLine: 2636
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nUpdates the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">maps</code>&apos; regular visitors, based on the <xref href=\"TinyLife.PerSaveOptions.MaxRegularVisitors\" data-throw-if-not-resolved=\"false\"></xref> value, and also assigns random people to empty <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> slots.\nThis method does three things: It removes visitors that have been added into the world by the player (through household imports),\nit removes visitors if the current number of visitors is greater than the maximum,\nand it attempts to add new visitors if it is lower than the maximum and <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> people in empty slots.\nThis method is called automatically in various locations.\n"
  example: []
  syntax:
    content: public static void UpdateExternalPeople(ICollection<Map> maps, Action<string> setState = null, Action<float> setProgress = null)
    parameters:
    - id: maps
      type: System.Collections.Generic.ICollection{TinyLife.World.Map}
    - id: setState
      type: System.Action{System.String}
    - id: setProgress
      type: System.Action{System.Single}
    content.vb: Public Shared Sub UpdateExternalPeople(maps As ICollection(Of Map), setState As Action(Of String) = Nothing, setProgress As Action(Of Single) = Nothing)
  overload: TinyLife.World.Map.UpdateExternalPeople*
  nameWithType.vb: Map.UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection(Of TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
- uid: TinyLife.World.Map.GetVisibleWorldArea(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetVisibleWorldArea(MLEM.Misc.RectangleF)
  id: GetVisibleWorldArea(MLEM.Misc.RectangleF)
  parent: TinyLife.World.Map
  langs:
  - csharp
  - vb
  name: GetVisibleWorldArea(RectangleF)
  nameWithType: Map.GetVisibleWorldArea(RectangleF)
  fullName: TinyLife.World.Map.GetVisibleWorldArea(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/World/Map.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisibleWorldArea
    path: ../TinyLife/World/Map.cs
    startLine: 2730
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a rectangle, in world space, that encompasses all tile positions on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that are currently visible, based on the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">cameraArea</code>, which is expected to be the value of a camera&apos;s <xref href=\"MLEM.Cameras.Camera.GetVisibleRectangle\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that, due to the fact that maps are in isometric perspective, the returned rectangle contains additional tile positions in each corner of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">cameraArea</code> that aren&apos;t actually visible.\n"
  example: []
  syntax:
    content: public static RectangleF GetVisibleWorldArea(RectangleF cameraArea)
    parameters:
    - id: cameraArea
      type: MLEM.Misc.RectangleF
      description: The camera area, in camera space.
    return:
      type: MLEM.Misc.RectangleF
      description: The visible area, in world space.
    content.vb: Public Shared Function GetVisibleWorldArea(cameraArea As RectangleF) As RectangleF
  overload: TinyLife.World.Map.GetVisibleWorldArea*
references:
- uid: TinyLife.World.MapSection
  commentId: T:TinyLife.World.MapSection
  parent: TinyLife.World
  name: MapSection
  nameWithType: MapSection
  fullName: TinyLife.World.MapSection
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Map.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Map>(Map)
  nameWithType: Extensions.JsonCopy<Map>(Map)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Map>(TinyLife.World.Map)
  nameWithType.vb: Extensions.JsonCopy(Of Map)(Map)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Map)(TinyLife.World.Map)
  name.vb: JsonCopy(Of Map)(Map)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Map)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Map)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Objects.IUpdatingObject
  commentId: T:TinyLife.Objects.IUpdatingObject
  parent: TinyLife.Objects
  name: IUpdatingObject
  nameWithType: IUpdatingObject
  fullName: TinyLife.Objects.IUpdatingObject
- uid: TinyLife.Objects.IUpdatingObject.UpdateMode.Minor
  commentId: F:TinyLife.Objects.IUpdatingObject.UpdateMode.Minor
  name: Minor
  nameWithType: IUpdatingObject.UpdateMode.Minor
  fullName: TinyLife.Objects.IUpdatingObject.UpdateMode.Minor
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: TinyLife.Objects.IUpdatingObject.UpdateMode.MajorIfActive
  commentId: F:TinyLife.Objects.IUpdatingObject.UpdateMode.MajorIfActive
  name: MajorIfActive
  nameWithType: IUpdatingObject.UpdateMode.MajorIfActive
  fullName: TinyLife.Objects.IUpdatingObject.UpdateMode.MajorIfActive
- uid: TinyLife.World.Map.IsActive
  commentId: P:TinyLife.World.Map.IsActive
  name: IsActive
  nameWithType: Map.IsActive
  fullName: TinyLife.World.Map.IsActive
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: PostValidate(Action<string>, Action<float>)
  nameWithType: Map.PostValidate(Action<string>, Action<float>)
  fullName: TinyLife.World.Map.PostValidate(System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.PostValidate(Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.PostValidate(System.Action(Of String), System.Action(Of Single))
  name.vb: PostValidate(Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
    name: PostValidate
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.PostValidate(System.Action{System.String},System.Action{System.Single})
    name: PostValidate
  - name: (
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: System.Action{TinyLife.World.Map}
  commentId: T:System.Action{TinyLife.World.Map}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Map>
  nameWithType: Action<Map>
  fullName: System.Action<TinyLife.World.Map>
  nameWithType.vb: Action(Of Map)
  fullName.vb: System.Action(Of TinyLife.World.Map)
  name.vb: Action(Of Map)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Map.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: Map.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.World.Map.OnEventsAttachable
  commentId: E:TinyLife.World.Map.OnEventsAttachable
  name: OnEventsAttachable
  nameWithType: Map.OnEventsAttachable
  fullName: TinyLife.World.Map.OnEventsAttachable
- uid: TinyLife.World.UpdateDelegate
  commentId: T:TinyLife.World.UpdateDelegate
  parent: TinyLife.World
  name: UpdateDelegate
  nameWithType: UpdateDelegate
  fullName: TinyLife.World.UpdateDelegate
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  name: AddObject(MapObject)
  nameWithType: Map.AddObject(MapObject)
  fullName: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
    name: AddObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
    name: AddObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: System.Action{TinyLife.Objects.MapObject}
  commentId: T:System.Action{TinyLife.Objects.MapObject}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<MapObject>
  nameWithType: Action<MapObject>
  fullName: System.Action<TinyLife.Objects.MapObject>
  nameWithType.vb: Action(Of MapObject)
  fullName.vb: System.Action(Of TinyLife.Objects.MapObject)
  name.vb: Action(Of MapObject)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  name: RemoveObject(MapObject)
  nameWithType: Map.RemoveObject(MapObject)
  fullName: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
    name: RemoveObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
    name: RemoveObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.World.Mail
  commentId: T:TinyLife.World.Mail
  parent: TinyLife.World
  name: Mail
  nameWithType: Mail
  fullName: TinyLife.World.Mail
- uid: System.Collections.Generic.List{TinyLife.World.Mail}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Mail}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Mail>
  nameWithType: List<Mail>
  fullName: System.Collections.Generic.List<TinyLife.World.Mail>
  nameWithType.vb: List(Of Mail)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Mail)
  name.vb: List(Of Mail)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Mail
    name: Mail
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Mail
    name: Mail
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.ActionType.AdoptChild
  commentId: F:TinyLife.Actions.ActionType.AdoptChild
  name: AdoptChild
  nameWithType: ActionType.AdoptChild
  fullName: TinyLife.Actions.ActionType.AdoptChild
- uid: TinyLife.World.Map.AdoptableChildren*
  commentId: Overload:TinyLife.World.Map.AdoptableChildren
  name: AdoptableChildren
  nameWithType: Map.AdoptableChildren
  fullName: TinyLife.World.Map.AdoptableChildren
- uid: System.Collections.Generic.List{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Person>
  nameWithType: List<Person>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Person>
  nameWithType.vb: List(Of Person)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Person)
  name.vb: List(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.World.Map.SizeInSections*
  commentId: Overload:TinyLife.World.Map.SizeInSections
  name: SizeInSections
  nameWithType: Map.SizeInSections
  fullName: TinyLife.World.Map.SizeInSections
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.Map.SizeInSections
  commentId: P:TinyLife.World.Map.SizeInSections
  name: SizeInSections
  nameWithType: Map.SizeInSections
  fullName: TinyLife.World.Map.SizeInSections
- uid: TinyLife.World.MapSection.Size
  commentId: F:TinyLife.World.MapSection.Size
  name: Size
  nameWithType: MapSection.Size
  fullName: TinyLife.World.MapSection.Size
- uid: TinyLife.World.Map.Size*
  commentId: Overload:TinyLife.World.Map.Size
  name: Size
  nameWithType: Map.Size
  fullName: TinyLife.World.Map.Size
- uid: TinyLife.World.Map.StaticVersion*
  commentId: Overload:TinyLife.World.Map.StaticVersion
  name: StaticVersion
  nameWithType: Map.StaticVersion
  fullName: TinyLife.World.Map.StaticVersion
- uid: TinyLife.World.Map.Time*
  commentId: Overload:TinyLife.World.Map.Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.PerSaveOptions.MapInfo
  commentId: T:TinyLife.PerSaveOptions.MapInfo
  parent: TinyLife
  name: PerSaveOptions.MapInfo
  nameWithType: PerSaveOptions.MapInfo
  fullName: TinyLife.PerSaveOptions.MapInfo
  spec.csharp:
  - uid: TinyLife.PerSaveOptions
    name: PerSaveOptions
  - name: .
  - uid: TinyLife.PerSaveOptions.MapInfo
    name: MapInfo
  spec.vb:
  - uid: TinyLife.PerSaveOptions
    name: PerSaveOptions
  - name: .
  - uid: TinyLife.PerSaveOptions.MapInfo
    name: MapInfo
- uid: TinyLife.World.Map.Info*
  commentId: Overload:TinyLife.World.Map.Info
  name: Info
  nameWithType: Map.Info
  fullName: TinyLife.World.Map.Info
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.GameImpl.CurrentMaps
  commentId: P:TinyLife.GameImpl.CurrentMaps
  name: CurrentMaps
  nameWithType: GameImpl.CurrentMaps
  fullName: TinyLife.GameImpl.CurrentMaps
- uid: TinyLife.World.Map.Neighborhood*
  commentId: Overload:TinyLife.World.Map.Neighborhood
  name: Neighborhood
  nameWithType: Map.Neighborhood
  fullName: TinyLife.World.Map.Neighborhood
- uid: System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, Map>
  nameWithType: Dictionary<string, Map>
  fullName: System.Collections.Generic.Dictionary<string, TinyLife.World.Map>
  nameWithType.vb: Dictionary(Of String, Map)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, TinyLife.World.Map)
  name.vb: Dictionary(Of String, Map)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TinyLife.GameImpl.CurrentMap
  commentId: P:TinyLife.GameImpl.CurrentMap
  name: CurrentMap
  nameWithType: GameImpl.CurrentMap
  fullName: TinyLife.GameImpl.CurrentMap
- uid: TinyLife.World.Map.IsCurrent*
  commentId: Overload:TinyLife.World.Map.IsCurrent
  name: IsCurrent
  nameWithType: Map.IsCurrent
  fullName: TinyLife.World.Map.IsCurrent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.Map.IsCurrent
  commentId: P:TinyLife.World.Map.IsCurrent
  name: IsCurrent
  nameWithType: Map.IsCurrent
  fullName: TinyLife.World.Map.IsCurrent
- uid: TinyLife.GameImpl.CurrentHousehold
  commentId: P:TinyLife.GameImpl.CurrentHousehold
  name: CurrentHousehold
  nameWithType: GameImpl.CurrentHousehold
  fullName: TinyLife.GameImpl.CurrentHousehold
- uid: TinyLife.World.Map.IsActive*
  commentId: Overload:TinyLife.World.Map.IsActive
  name: IsActive
  nameWithType: Map.IsActive
  fullName: TinyLife.World.Map.IsActive
- uid: TinyLife.World.Map.#ctor*
  commentId: Overload:TinyLife.World.Map.#ctor
  name: Map
  nameWithType: Map.Map
  fullName: TinyLife.World.Map.Map
  nameWithType.vb: Map.New
  fullName.vb: TinyLife.World.Map.New
  name.vb: New
- uid: TinyLife.World.Map.Finalize*
  commentId: Overload:TinyLife.World.Map.Finalize
  name: ~Map
  nameWithType: Map.~Map
  fullName: TinyLife.World.Map.~Map
  spec.csharp:
  - name: "~"
  - uid: TinyLife.World.Map.Finalize*
    name: Map
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.World.Map.Update*
  commentId: Overload:TinyLife.World.Map.Update
  name: Update
  nameWithType: Map.Update
  fullName: TinyLife.World.Map.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.RenderTarget2D
  commentId: T:Microsoft.Xna.Framework.Graphics.RenderTarget2D
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: RenderTarget2D
  nameWithType: RenderTarget2D
  fullName: Microsoft.Xna.Framework.Graphics.RenderTarget2D
- uid: MLEM.Cameras.Camera.GetVisibleRectangle
  commentId: M:MLEM.Cameras.Camera.GetVisibleRectangle
  isExternal: true
  name: GetVisibleRectangle()
  nameWithType: Camera.GetVisibleRectangle()
  fullName: MLEM.Cameras.Camera.GetVisibleRectangle()
  spec.csharp:
  - uid: MLEM.Cameras.Camera.GetVisibleRectangle
    name: GetVisibleRectangle
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Cameras.Camera.GetVisibleRectangle
    name: GetVisibleRectangle
    isExternal: true
  - name: (
  - name: )
- uid: TinyLife.Objects.MapObject.Visibility
  commentId: P:TinyLife.Objects.MapObject.Visibility
  parent: TinyLife.Objects.MapObject
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
- uid: TinyLife.World.Map.Draw*
  commentId: Overload:TinyLife.World.Map.Draw
  name: Draw
  nameWithType: Map.Draw
  fullName: TinyLife.World.Map.Draw
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: System.Nullable{MLEM.Misc.RectangleF}
  commentId: T:System.Nullable{MLEM.Misc.RectangleF}
  parent: System
  definition: System.Nullable`1
  name: RectangleF?
  nameWithType: RectangleF?
  fullName: MLEM.Misc.RectangleF?
  spec.csharp:
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: '?'
- uid: System.Nullable{Microsoft.Xna.Framework.Matrix}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Matrix}
  parent: System
  definition: System.Nullable`1
  name: Matrix?
  nameWithType: Matrix?
  fullName: Microsoft.Xna.Framework.Matrix?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Matrix
    name: Matrix
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Matrix
    name: Matrix
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: ApplyCameraRotation(Vector2, bool, Direction2?)
  nameWithType: Map.ApplyCameraRotation(Vector2, bool, Direction2?)
  fullName: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, bool, MLEM.Misc.Direction2?)
  nameWithType.vb: Map.ApplyCameraRotation(Vector2, Boolean, Direction2?)
  fullName.vb: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2, Boolean, MLEM.Misc.Direction2?)
  name.vb: ApplyCameraRotation(Vector2, Boolean, Direction2?)
  spec.csharp:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
    name: ApplyCameraRotation
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
    name: ApplyCameraRotation
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  - name: )
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  name: CameraRotation
  nameWithType: Options.CameraRotation
  fullName: TinyLife.Options.CameraRotation
- uid: TinyLife.World.Map.GetDepth*
  commentId: Overload:TinyLife.World.Map.GetDepth
  name: GetDepth
  nameWithType: Map.GetDepth
  fullName: TinyLife.World.Map.GetDepth
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: TinyLife.World.Map.Size
  commentId: P:TinyLife.World.Map.Size
  name: Size
  nameWithType: Map.Size
  fullName: TinyLife.World.Map.Size
- uid: TinyLife.World.Map.IsInBounds*
  commentId: Overload:TinyLife.World.Map.IsInBounds
  name: IsInBounds
  nameWithType: Map.IsInBounds
  fullName: TinyLife.World.Map.IsInBounds
- uid: TinyLife.World.Map.AddRoad*
  commentId: Overload:TinyLife.World.Map.AddRoad
  name: AddRoad
  nameWithType: Map.AddRoad
  fullName: TinyLife.World.Map.AddRoad
- uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  isExternal: true
  name: AddRoad(Point)
  nameWithType: Map.AddRoad(Point)
  fullName: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
    name: AddRoad
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.AddRoad(Microsoft.Xna.Framework.Point)
    name: AddRoad
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.World.Map.IsRoad*
  commentId: Overload:TinyLife.World.Map.IsRoad
  name: IsRoad
  nameWithType: Map.IsRoad
  fullName: TinyLife.World.Map.IsRoad
- uid: TinyLife.World.Map.GetClosestRoads*
  commentId: Overload:TinyLife.World.Map.GetClosestRoads
  name: GetClosestRoads
  nameWithType: Map.GetClosestRoads
  fullName: TinyLife.World.Map.GetClosestRoads
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Map.GetRoads*
  commentId: Overload:TinyLife.World.Map.GetRoads
  name: GetRoads
  nameWithType: Map.GetRoads
  fullName: TinyLife.World.Map.GetRoads
- uid: TinyLife.World.Map.GetClosestRoadsidePosition*
  commentId: Overload:TinyLife.World.Map.GetClosestRoadsidePosition
  name: GetClosestRoadsidePosition
  nameWithType: Map.GetClosestRoadsidePosition
  fullName: TinyLife.World.Map.GetClosestRoadsidePosition
- uid: System.Nullable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Point}
  parent: System
  definition: System.Nullable`1
  name: Point?
  nameWithType: Point?
  fullName: Microsoft.Xna.Framework.Point?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '?'
- uid: TinyLife.World.Map.GetTilesAround*
  commentId: Overload:TinyLife.World.Map.GetTilesAround
  name: GetTilesAround
  nameWithType: Map.GetTilesAround
  fullName: TinyLife.World.Map.GetTilesAround
- uid: System.Predicate{Microsoft.Xna.Framework.Point}
  commentId: T:System.Predicate{Microsoft.Xna.Framework.Point}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<Point>
  nameWithType: Predicate<Point>
  fullName: System.Predicate<Microsoft.Xna.Framework.Point>
  nameWithType.vb: Predicate(Of Point)
  fullName.vb: System.Predicate(Of Microsoft.Xna.Framework.Point)
  name.vb: Predicate(Of Point)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Map.GetClosestEmptyTile*
  commentId: Overload:TinyLife.World.Map.GetClosestEmptyTile
  name: GetClosestEmptyTile
  nameWithType: Map.GetClosestEmptyTile
  fullName: TinyLife.World.Map.GetClosestEmptyTile
- uid: TinyLife.World.Map.GetRandomTile*
  commentId: Overload:TinyLife.World.Map.GetRandomTile
  name: GetRandomTile
  nameWithType: Map.GetRandomTile
  fullName: TinyLife.World.Map.GetRandomTile
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Validate(bool, Action<string>, Action<float>)
  nameWithType: Map.Validate(bool, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.Validate(bool, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.Validate(Boolean, Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.Validate(Boolean, System.Action(Of String), System.Action(Of Single))
  name.vb: Validate(Boolean, Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
    name: Validate
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.Validate(System.Boolean,System.Action{System.String},System.Action{System.Single})
    name: Validate
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: TinyLife.World.Map.Neighborhood
  commentId: P:TinyLife.World.Map.Neighborhood
  name: Neighborhood
  nameWithType: Map.Neighborhood
  fullName: TinyLife.World.Map.Neighborhood
- uid: TinyLife.World.Map.ValidateEarly*
  commentId: Overload:TinyLife.World.Map.ValidateEarly
  name: ValidateEarly
  nameWithType: Map.ValidateEarly
  fullName: TinyLife.World.Map.ValidateEarly
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Action{System.Single}
  commentId: T:System.Action{System.Single}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<float>
  nameWithType: Action<float>
  fullName: System.Action<float>
  nameWithType.vb: Action(Of Single)
  fullName.vb: System.Action(Of Single)
  name.vb: Action(Of Single)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: ValidateEarly(MapInfo, Dictionary<string, Map>, Action<string>, Action<float>)
  nameWithType: Map.ValidateEarly(PerSaveOptions.MapInfo, Dictionary<string, Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo, System.Collections.Generic.Dictionary<string, TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.ValidateEarly(PerSaveOptions.MapInfo, Dictionary(Of String, Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo, System.Collections.Generic.Dictionary(Of String, TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: ValidateEarly(MapInfo, Dictionary(Of String, Map), Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: ValidateEarly
  - name: (
  - uid: TinyLife.PerSaveOptions.MapInfo
    name: MapInfo
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.ValidateEarly(TinyLife.PerSaveOptions.MapInfo,System.Collections.Generic.Dictionary{System.String,TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: ValidateEarly
  - name: (
  - uid: TinyLife.PerSaveOptions.MapInfo
    name: MapInfo
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: TinyLife.World.Map.Validate*
  commentId: Overload:TinyLife.World.Map.Validate
  name: Validate
  nameWithType: Map.Validate
  fullName: TinyLife.World.Map.Validate
- uid: TinyLife.World.Map.PostValidate*
  commentId: Overload:TinyLife.World.Map.PostValidate
  name: PostValidate
  nameWithType: Map.PostValidate
  fullName: TinyLife.World.Map.PostValidate
- uid: TinyLife.World.Map.GetRoom*
  commentId: Overload:TinyLife.World.Map.GetRoom
  name: GetRoom
  nameWithType: Map.GetRoom
  fullName: TinyLife.World.Map.GetRoom
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.World.Lot.Id
  commentId: F:TinyLife.World.Lot.Id
  name: Id
  nameWithType: Lot.Id
  fullName: TinyLife.World.Lot.Id
- uid: TinyLife.World.Map.GetLot*
  commentId: Overload:TinyLife.World.Map.GetLot
  name: GetLot
  nameWithType: Map.GetLot
  fullName: TinyLife.World.Map.GetLot
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: TinyLife.World.Map.AddLot*
  commentId: Overload:TinyLife.World.Map.AddLot
  name: AddLot
  nameWithType: Map.AddLot
  fullName: TinyLife.World.Map.AddLot
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: TinyLife.World.Map.RemoveLot*
  commentId: Overload:TinyLife.World.Map.RemoveLot
  name: RemoveLot
  nameWithType: Map.RemoveLot
  fullName: TinyLife.World.Map.RemoveLot
- uid: TinyLife.World.Map.GetLots*
  commentId: Overload:TinyLife.World.Map.GetLots
  name: GetLots
  nameWithType: Map.GetLots
  fullName: TinyLife.World.Map.GetLots
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Lot}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Lot>
  nameWithType: IEnumerable<Lot>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Lot>
  nameWithType.vb: IEnumerable(Of Lot)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Lot)
  name.vb: IEnumerable(Of Lot)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Lot
    name: Lot
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: TinyLife.World.Map.AddWall*
  commentId: Overload:TinyLife.World.Map.AddWall
  name: AddWall
  nameWithType: Map.AddWall
  fullName: TinyLife.World.Map.AddWall
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Map.RemoveWall*
  commentId: Overload:TinyLife.World.Map.RemoveWall
  name: RemoveWall
  nameWithType: Map.RemoveWall
  fullName: TinyLife.World.Map.RemoveWall
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  parent: TinyLife.Objects.WallLike
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
- uid: TinyLife.World.Map.GetWallBetween*
  commentId: Overload:TinyLife.World.Map.GetWallBetween
  name: GetWallBetween
  nameWithType: Map.GetWallBetween
  fullName: TinyLife.World.Map.GetWallBetween
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.World.Map.GetTile*
  commentId: Overload:TinyLife.World.Map.GetTile
  name: GetTile
  nameWithType: Map.GetTile
  fullName: TinyLife.World.Map.GetTile
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.Map.SetTile*
  commentId: Overload:TinyLife.World.Map.SetTile
  name: SetTile
  nameWithType: Map.SetTile
  fullName: TinyLife.World.Map.SetTile
- uid: TinyLife.World.Map.AddRoof*
  commentId: Overload:TinyLife.World.Map.AddRoof
  name: AddRoof
  nameWithType: Map.AddRoof
  fullName: TinyLife.World.Map.AddRoof
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Map.GetRoof*
  commentId: Overload:TinyLife.World.Map.GetRoof
  name: GetRoof
  nameWithType: Map.GetRoof
  fullName: TinyLife.World.Map.GetRoof
- uid: TinyLife.World.Map.GetRoofs*
  commentId: Overload:TinyLife.World.Map.GetRoofs
  name: GetRoofs
  nameWithType: Map.GetRoofs
  fullName: TinyLife.World.Map.GetRoofs
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Roof>
  nameWithType: IEnumerable<Roof>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Roof>
  nameWithType.vb: IEnumerable(Of Roof)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Roof)
  name.vb: IEnumerable(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Roof
    name: Roof
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Roof
    name: Roof
  - name: )
- uid: TinyLife.World.Map.RemoveRoof*
  commentId: Overload:TinyLife.World.Map.RemoveRoof
  name: RemoveRoof
  nameWithType: Map.RemoveRoof
  fullName: TinyLife.World.Map.RemoveRoof
- uid: TinyLife.World.Map.GetObjects*
  commentId: Overload:TinyLife.World.Map.GetObjects
  name: GetObjects
  nameWithType: Map.GetObjects
  fullName: TinyLife.World.Map.GetObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Map.GetObject*
  commentId: Overload:TinyLife.World.Map.GetObject
  name: GetObject
  nameWithType: Map.GetObject
  fullName: TinyLife.World.Map.GetObject
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.World.Map.AddObject*
  commentId: Overload:TinyLife.World.Map.AddObject
  name: AddObject
  nameWithType: Map.AddObject
  fullName: TinyLife.World.Map.AddObject
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  parent: TinyLife.Objects.MapObject
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink
  commentId: M:TinyLife.Objects.Furniture.RemoveAndUnlink
  parent: TinyLife.Objects.Furniture
  name: RemoveAndUnlink()
  nameWithType: Furniture.RemoveAndUnlink()
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.RemoveAndUnlink
    name: RemoveAndUnlink
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.RemoveAndUnlink
    name: RemoveAndUnlink
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
  - name: (
  - name: )
- uid: TinyLife.World.Map.RemoveObject*
  commentId: Overload:TinyLife.World.Map.RemoveObject
  name: RemoveObject
  nameWithType: Map.RemoveObject
  fullName: TinyLife.World.Map.RemoveObject
- uid: TinyLife.World.Map.GetPeople*
  commentId: Overload:TinyLife.World.Map.GetPeople
  name: GetPeople
  nameWithType: Map.GetPeople
  fullName: TinyLife.World.Map.GetPeople
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.World.Map.GetHousehold*
  commentId: Overload:TinyLife.World.Map.GetHousehold
  name: GetHousehold
  nameWithType: Map.GetHousehold
  fullName: TinyLife.World.Map.GetHousehold
- uid: TinyLife.World.Map.AddHousehold*
  commentId: Overload:TinyLife.World.Map.AddHousehold
  name: AddHousehold
  nameWithType: Map.AddHousehold
  fullName: TinyLife.World.Map.AddHousehold
- uid: TinyLife.World.Map.RemoveHousehold*
  commentId: Overload:TinyLife.World.Map.RemoveHousehold
  name: RemoveHousehold
  nameWithType: Map.RemoveHousehold
  fullName: TinyLife.World.Map.RemoveHousehold
- uid: TinyLife.World.Map.GetHouseholds*
  commentId: Overload:TinyLife.World.Map.GetHouseholds
  name: GetHouseholds
  nameWithType: Map.GetHouseholds
  fullName: TinyLife.World.Map.GetHouseholds
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Household}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Household}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Household>
  nameWithType: IEnumerable<Household>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Household>
  nameWithType.vb: IEnumerable(Of Household)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Household)
  name.vb: IEnumerable(Of Household)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Household
    name: Household
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Household
    name: Household
  - name: )
- uid: TinyLife.World.Map.GetSection*
  commentId: Overload:TinyLife.World.Map.GetSection
  name: GetSection
  nameWithType: Map.GetSection
  fullName: TinyLife.World.Map.GetSection
- uid: TinyLife.World.Map.GetSections*
  commentId: Overload:TinyLife.World.Map.GetSections
  name: GetSections
  nameWithType: Map.GetSections
  fullName: TinyLife.World.Map.GetSections
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.MapSection}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<MapSection>
  nameWithType: IEnumerable<MapSection>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.MapSection>
  nameWithType.vb: IEnumerable(Of MapSection)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.MapSection)
  name.vb: IEnumerable(Of MapSection)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.MapSection
    name: MapSection
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.MapSection
    name: MapSection
  - name: )
- uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  commentId: M:TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: GetPathCost(Person, Point, int, Point, int)
  nameWithType: Map.GetPathCost(Person, Point, int, Point, int)
  fullName: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, int, Microsoft.Xna.Framework.Point, int)
  nameWithType.vb: Map.GetPathCost(Person, Point, Integer, Point, Integer)
  fullName.vb: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person, Microsoft.Xna.Framework.Point, Integer, Microsoft.Xna.Framework.Point, Integer)
  name.vb: GetPathCost(Person, Point, Integer, Point, Integer)
  spec.csharp:
  - uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
    name: GetPathCost
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetPathCost(TinyLife.Objects.Person,Microsoft.Xna.Framework.Point,System.Int32,Microsoft.Xna.Framework.Point,System.Int32)
    name: GetPathCost
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.World.Map.MarkDirtyForPathfinding*
  commentId: Overload:TinyLife.World.Map.MarkDirtyForPathfinding
  name: MarkDirtyForPathfinding
  nameWithType: Map.MarkDirtyForPathfinding
  fullName: TinyLife.World.Map.MarkDirtyForPathfinding
- uid: TinyLife.World.Map.GetPathCost*
  commentId: Overload:TinyLife.World.Map.GetPathCost
  name: GetPathCost
  nameWithType: Map.GetPathCost
  fullName: TinyLife.World.Map.GetPathCost
- uid: System.Single.MaxValue
  commentId: F:System.Single.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single.maxvalue
  name: MaxValue
  nameWithType: float.MaxValue
  fullName: float.MaxValue
  nameWithType.vb: Single.MaxValue
  fullName.vb: Single.MaxValue
- uid: System.Single.PositiveInfinity
  commentId: F:System.Single.PositiveInfinity
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single.positiveinfinity
  name: PositiveInfinity
  nameWithType: float.PositiveInfinity
  fullName: float.PositiveInfinity
  nameWithType.vb: Single.PositiveInfinity
  fullName.vb: Single.PositiveInfinity
- uid: TinyLife.World.Map.CanWalkBetween*
  commentId: Overload:TinyLife.World.Map.CanWalkBetween
  name: CanWalkBetween
  nameWithType: Map.CanWalkBetween
  fullName: TinyLife.World.Map.CanWalkBetween
- uid: TinyLife.World.Map.IsFreeSpot*
  commentId: Overload:TinyLife.World.Map.IsFreeSpot
  name: IsFreeSpot
  nameWithType: Map.IsFreeSpot
  fullName: TinyLife.World.Map.IsFreeSpot
- uid: TinyLife.Objects.Gravestone
  commentId: T:TinyLife.Objects.Gravestone
  name: Gravestone
  nameWithType: Gravestone
  fullName: TinyLife.Objects.Gravestone
- uid: TinyLife.World.Map.GetStoredDeadPeople*
  commentId: Overload:TinyLife.World.Map.GetStoredDeadPeople
  name: GetStoredDeadPeople
  nameWithType: Map.GetStoredDeadPeople
  fullName: TinyLife.World.Map.GetStoredDeadPeople
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Gravestone Gravestone, Person Person)>
  nameWithType: IEnumerable<(Gravestone Gravestone, Person Person)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.Objects.Gravestone Gravestone, TinyLife.Objects.Person Person)>
  nameWithType.vb: IEnumerable(Of (Gravestone As Gravestone, Person As Person))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Gravestone As TinyLife.Objects.Gravestone, Person As TinyLife.Objects.Person))
  name.vb: IEnumerable(Of (Gravestone As Gravestone, Person As Person))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.Gravestone
    name: Gravestone
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}.Gravestone
    name: Gravestone
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.gravestone,tinylife.objects.person-.gravestone
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.gravestone,tinylife.objects.person-.person
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}.Gravestone
    name: Gravestone
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.gravestone,tinylife.objects.person-.gravestone
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Gravestone
    name: Gravestone
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Gravestone,TinyLife.Objects.Person}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.gravestone,tinylife.objects.person-.person
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  - name: )
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: PlaySound(SoundEffect, MapAudioEmitter, float, float, bool, bool)
  nameWithType: Map.PlaySound(SoundEffect, MapAudioEmitter, float, float, bool, bool)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, TinyLife.World.MapAudioEmitter, float, float, bool, bool)
  nameWithType.vb: Map.PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, TinyLife.World.MapAudioEmitter, Single, Single, Boolean, Boolean)
  name.vb: PlaySound(SoundEffect, MapAudioEmitter, Single, Single, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
    name: PlaySound
  - name: (
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyLife.World.MapAudioEmitter
    name: MapAudioEmitter
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,TinyLife.World.MapAudioEmitter,System.Single,System.Single,System.Boolean,System.Boolean)
    name: PlaySound
  - name: (
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    isExternal: true
  - name: ','
  - name: " "
  - uid: TinyLife.World.MapAudioEmitter
    name: MapAudioEmitter
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Microsoft.Xna.Framework.Audio.SoundEffectInstance
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffectInstance
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffectInstance
  nameWithType: SoundEffectInstance
  fullName: Microsoft.Xna.Framework.Audio.SoundEffectInstance
- uid: TinyLife.Options.WorldSoundVolume
  commentId: F:TinyLife.Options.WorldSoundVolume
  name: WorldSoundVolume
  nameWithType: Options.WorldSoundVolume
  fullName: TinyLife.Options.WorldSoundVolume
- uid: TinyLife.World.Map.PlaySound*
  commentId: Overload:TinyLife.World.Map.PlaySound
  name: PlaySound
  nameWithType: Map.PlaySound
  fullName: TinyLife.World.Map.PlaySound
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: true
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Audio
    name: Audio
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Audio
    name: Audio
    isExternal: true
- uid: TinyLife.World.MapAudioEmitter
  commentId: T:TinyLife.World.MapAudioEmitter
  parent: TinyLife.World
  name: MapAudioEmitter
  nameWithType: MapAudioEmitter
  fullName: TinyLife.World.MapAudioEmitter
- uid: TinyLife.World.MapAudioEmitter.WorldPosition
  commentId: P:TinyLife.World.MapAudioEmitter.WorldPosition
  name: WorldPosition
  nameWithType: MapAudioEmitter.WorldPosition
  fullName: TinyLife.World.MapAudioEmitter.WorldPosition
- uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: PlaySound(SoundEffect, Vector2, float, float, float, bool, bool)
  nameWithType: Map.PlaySound(SoundEffect, Vector2, float, float, float, bool, bool)
  fullName: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, Microsoft.Xna.Framework.Vector2, float, float, float, bool, bool)
  nameWithType.vb: Map.PlaySound(SoundEffect, Vector2, Single, Single, Single, Boolean, Boolean)
  fullName.vb: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect, Microsoft.Xna.Framework.Vector2, Single, Single, Single, Boolean, Boolean)
  name.vb: PlaySound(SoundEffect, Vector2, Single, Single, Single, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
    name: PlaySound
  - name: (
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.PlaySound(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
    name: PlaySound
  - name: (
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.Map.GetExitPoints
  commentId: M:TinyLife.World.Map.GetExitPoints
  name: GetExitPoints()
  nameWithType: Map.GetExitPoints()
  fullName: TinyLife.World.Map.GetExitPoints()
  spec.csharp:
  - uid: TinyLife.World.Map.GetExitPoints
    name: GetExitPoints
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetExitPoints
    name: GetExitPoints
  - name: (
  - name: )
- uid: TinyLife.World.Map.GetClosestFreeExitPoint*
  commentId: Overload:TinyLife.World.Map.GetClosestFreeExitPoint
  name: GetClosestFreeExitPoint
  nameWithType: Map.GetClosestFreeExitPoint
  fullName: TinyLife.World.Map.GetClosestFreeExitPoint
- uid: TinyLife.World.Map.GetExitPoints*
  commentId: Overload:TinyLife.World.Map.GetExitPoints
  name: GetExitPoints
  nameWithType: Map.GetExitPoints
  fullName: TinyLife.World.Map.GetExitPoints
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Point Position, Direction2 Dir)>
  nameWithType: IEnumerable<(Point Position, Direction2 Dir)>
  fullName: System.Collections.Generic.IEnumerable<(Microsoft.Xna.Framework.Point Position, MLEM.Misc.Direction2 Dir)>
  nameWithType.vb: IEnumerable(Of (Position As Point, Dir As Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Position As Microsoft.Xna.Framework.Point, Dir As MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (Position As Point, Dir As Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}.Position
    name: Position
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,mlem.misc.direction2-.position
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,mlem.misc.direction2-.dir
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}.Position
    name: Position
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,mlem.misc.direction2-.position
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,mlem.misc.direction2-.dir
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.World.Map.GetWalls*
  commentId: Overload:TinyLife.World.Map.GetWalls
  name: GetWalls
  nameWithType: Map.GetWalls
  fullName: TinyLife.World.Map.GetWalls
- uid: TinyLife.World.Map.GetStairs*
  commentId: Overload:TinyLife.World.Map.GetStairs
  name: GetStairs
  nameWithType: Map.GetStairs
  fullName: TinyLife.World.Map.GetStairs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Stairs>
  nameWithType: IEnumerable<Stairs>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Stairs>
  nameWithType.vb: IEnumerable(Of Stairs)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Stairs)
  name.vb: IEnumerable(Of Stairs)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
- uid: TinyLife.World.Map.AddStairs*
  commentId: Overload:TinyLife.World.Map.AddStairs
  name: AddStairs
  nameWithType: Map.AddStairs
  fullName: TinyLife.World.Map.AddStairs
- uid: TinyLife.World.Stairs
  commentId: T:TinyLife.World.Stairs
  parent: TinyLife.World
  name: Stairs
  nameWithType: Stairs
  fullName: TinyLife.World.Stairs
- uid: TinyLife.World.Map.RemoveStairs*
  commentId: Overload:TinyLife.World.Map.RemoveStairs
  name: RemoveStairs
  nameWithType: Map.RemoveStairs
  fullName: TinyLife.World.Map.RemoveStairs
- uid: TinyLife.World.Map.ApplyCameraRotation*
  commentId: Overload:TinyLife.World.Map.ApplyCameraRotation
  name: ApplyCameraRotation
  nameWithType: Map.ApplyCameraRotation
  fullName: TinyLife.World.Map.ApplyCameraRotation
- uid: System.Nullable{MLEM.Misc.Direction2}
  commentId: T:System.Nullable{MLEM.Misc.Direction2}
  parent: System
  definition: System.Nullable`1
  name: Direction2?
  nameWithType: Direction2?
  fullName: MLEM.Misc.Direction2?
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: '?'
- uid: TinyLife.World.Map.ApplyInverseCameraRotation*
  commentId: Overload:TinyLife.World.Map.ApplyInverseCameraRotation
  name: ApplyInverseCameraRotation
  nameWithType: Map.ApplyInverseCameraRotation
  fullName: TinyLife.World.Map.ApplyInverseCameraRotation
- uid: TinyLife.World.Map.OnCameraRotationChanged*
  commentId: Overload:TinyLife.World.Map.OnCameraRotationChanged
  name: OnCameraRotationChanged
  nameWithType: Map.OnCameraRotationChanged
  fullName: TinyLife.World.Map.OnCameraRotationChanged
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.World.Map.OnCurrentGameMapChanged*
  commentId: Overload:TinyLife.World.Map.OnCurrentGameMapChanged
  name: OnCurrentGameMapChanged
  nameWithType: Map.OnCurrentGameMapChanged
  fullName: TinyLife.World.Map.OnCurrentGameMapChanged
- uid: TinyLife.Objects.Light.Position
  commentId: P:TinyLife.Objects.Light.Position
  name: Position
  nameWithType: Light.Position
  fullName: TinyLife.Objects.Light.Position
- uid: TinyLife.World.Map.AddLight*
  commentId: Overload:TinyLife.World.Map.AddLight
  name: AddLight
  nameWithType: Map.AddLight
  fullName: TinyLife.World.Map.AddLight
- uid: TinyLife.Objects.Light
  commentId: T:TinyLife.Objects.Light
  parent: TinyLife.Objects
  name: Light
  nameWithType: Light
  fullName: TinyLife.Objects.Light
- uid: TinyLife.World.Map.RemoveLight*
  commentId: Overload:TinyLife.World.Map.RemoveLight
  name: RemoveLight
  nameWithType: Map.RemoveLight
  fullName: TinyLife.World.Map.RemoveLight
- uid: TinyLife.World.Map.MoveEverything*
  commentId: Overload:TinyLife.World.Map.MoveEverything
  name: MoveEverything
  nameWithType: Map.MoveEverything
  fullName: TinyLife.World.Map.MoveEverything
- uid: TinyLife.World.Map.ValidateRooms*
  commentId: Overload:TinyLife.World.Map.ValidateRooms
  name: ValidateRooms
  nameWithType: Map.ValidateRooms
  fullName: TinyLife.World.Map.ValidateRooms
- uid: TinyLife.World.Map.GetPeople
  commentId: M:TinyLife.World.Map.GetPeople
  name: GetPeople()
  nameWithType: Map.GetPeople()
  fullName: TinyLife.World.Map.GetPeople()
  spec.csharp:
  - uid: TinyLife.World.Map.GetPeople
    name: GetPeople
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetPeople
    name: GetPeople
  - name: (
  - name: )
- uid: TinyLife.Objects.Person.IsRegularVisitor
  commentId: P:TinyLife.Objects.Person.IsRegularVisitor
  name: IsRegularVisitor
  nameWithType: Person.IsRegularVisitor
  fullName: TinyLife.Objects.Person.IsRegularVisitor
- uid: TinyLife.World.Map.GetRegularVisitors*
  commentId: Overload:TinyLife.World.Map.GetRegularVisitors
  name: GetRegularVisitors
  nameWithType: Map.GetRegularVisitors
  fullName: TinyLife.World.Map.GetRegularVisitors
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
- uid: TinyLife.World.Map.GetAllLotEmployments*
  commentId: Overload:TinyLife.World.Map.GetAllLotEmployments
  name: GetAllLotEmployments
  nameWithType: Map.GetAllLotEmployments
  fullName: TinyLife.World.Map.GetAllLotEmployments
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(LotEmployment Employment, Lot Lot)>
  nameWithType: IEnumerable<(LotEmployment Employment, Lot Lot)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.World.LotEmployment Employment, TinyLife.World.Lot Lot)>
  nameWithType.vb: IEnumerable(Of (Employment As LotEmployment, Lot As Lot))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Employment As TinyLife.World.LotEmployment, Lot As TinyLife.World.Lot))
  name.vb: IEnumerable(Of (Employment As LotEmployment, Lot As Lot))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}.Employment
    name: Employment
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.lotemployment,tinylife.world.lot-.employment
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.lotemployment,tinylife.world.lot-.lot
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}.Employment
    name: Employment
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.lotemployment,tinylife.world.lot-.employment
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.LotEmployment,TinyLife.World.Lot}.Lot
    name: Lot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.lotemployment,tinylife.world.lot-.lot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  - name: )
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
  name: StaticSpriteBatch
  nameWithType: StaticSpriteBatch
  fullName: MLEM.Graphics.StaticSpriteBatch
- uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  commentId: M:TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: SetTile(Point, int, Tile)
  nameWithType: Map.SetTile(Point, int, Tile)
  fullName: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point, int, TinyLife.World.Tile)
  nameWithType.vb: Map.SetTile(Point, Integer, Tile)
  fullName.vb: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point, Integer, TinyLife.World.Tile)
  name.vb: SetTile(Point, Integer, Tile)
  spec.csharp:
  - uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
    name: SetTile
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.SetTile(Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile)
    name: SetTile
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: )
- uid: TinyLife.World.AutoTile
  commentId: T:TinyLife.World.AutoTile
  parent: TinyLife.World
  name: AutoTile
  nameWithType: AutoTile
  fullName: TinyLife.World.AutoTile
- uid: TinyLife.World.Map.MarkGroundTileDirtyForDrawing*
  commentId: Overload:TinyLife.World.Map.MarkGroundTileDirtyForDrawing
  name: MarkGroundTileDirtyForDrawing
  nameWithType: Map.MarkGroundTileDirtyForDrawing
  fullName: TinyLife.World.Map.MarkGroundTileDirtyForDrawing
- uid: TinyLife.Objects.Visibility.Static
  commentId: F:TinyLife.Objects.Visibility.Static
  name: Static
  nameWithType: Visibility.Static
  fullName: TinyLife.Objects.Visibility.Static
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.World.Map.MarkObjectDirtyForDrawing*
  commentId: Overload:TinyLife.World.Map.MarkObjectDirtyForDrawing
  name: MarkObjectDirtyForDrawing
  nameWithType: Map.MarkObjectDirtyForDrawing
  fullName: TinyLife.World.Map.MarkObjectDirtyForDrawing
- uid: TinyLife.Objects.Person.PrepareForPermanentRemoval
  commentId: M:TinyLife.Objects.Person.PrepareForPermanentRemoval
  name: PrepareForPermanentRemoval()
  nameWithType: Person.PrepareForPermanentRemoval()
  fullName: TinyLife.Objects.Person.PrepareForPermanentRemoval()
  spec.csharp:
  - uid: TinyLife.Objects.Person.PrepareForPermanentRemoval
    name: PrepareForPermanentRemoval
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.PrepareForPermanentRemoval
    name: PrepareForPermanentRemoval
  - name: (
  - name: )
- uid: TinyLife.World.Map.PrepareForPermanentRemoval*
  commentId: Overload:TinyLife.World.Map.PrepareForPermanentRemoval
  name: PrepareForPermanentRemoval
  nameWithType: Map.PrepareForPermanentRemoval
  fullName: TinyLife.World.Map.PrepareForPermanentRemoval
- uid: TinyLife.World.Map.LoadStaticMap*
  commentId: Overload:TinyLife.World.Map.LoadStaticMap
  name: LoadStaticMap
  nameWithType: Map.LoadStaticMap
  fullName: TinyLife.World.Map.LoadStaticMap
- uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  name: IsLotVisible(Lot)
  nameWithType: GameImpl.IsLotVisible(Lot)
  fullName: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  spec.csharp:
  - uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
    name: IsLotVisible
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  spec.vb:
  - uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
    name: IsLotVisible
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: TinyLife.World.Map.IsLotHidden*
  commentId: Overload:TinyLife.World.Map.IsLotHidden
  name: IsLotHidden
  nameWithType: Map.IsLotHidden
  fullName: TinyLife.World.Map.IsLotHidden
- uid: Microsoft.Xna.Framework.Graphics.SamplerState
  commentId: T:Microsoft.Xna.Framework.Graphics.SamplerState
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SamplerState
  nameWithType: SamplerState
  fullName: Microsoft.Xna.Framework.Graphics.SamplerState
- uid: TinyLife.Options.BlurZoomedOut
  commentId: F:TinyLife.Options.BlurZoomedOut
  name: BlurZoomedOut
  nameWithType: Options.BlurZoomedOut
  fullName: TinyLife.Options.BlurZoomedOut
- uid: TinyLife.GameImpl.Camera
  commentId: P:TinyLife.GameImpl.Camera
  name: Camera
  nameWithType: GameImpl.Camera
  fullName: TinyLife.GameImpl.Camera
- uid: TinyLife.World.Map.GetMapSampler*
  commentId: Overload:TinyLife.World.Map.GetMapSampler
  name: GetMapSampler
  nameWithType: Map.GetMapSampler
  fullName: TinyLife.World.Map.GetMapSampler
- uid: TinyLife.PerSaveOptions.MaxRegularVisitors
  commentId: F:TinyLife.PerSaveOptions.MaxRegularVisitors
  name: MaxRegularVisitors
  nameWithType: PerSaveOptions.MaxRegularVisitors
  fullName: TinyLife.PerSaveOptions.MaxRegularVisitors
- uid: TinyLife.World.Map.UpdateExternalPeople*
  commentId: Overload:TinyLife.World.Map.UpdateExternalPeople
  name: UpdateExternalPeople
  nameWithType: Map.UpdateExternalPeople
  fullName: TinyLife.World.Map.UpdateExternalPeople
- uid: System.Collections.Generic.ICollection{TinyLife.World.Map}
  commentId: T:System.Collections.Generic.ICollection{TinyLife.World.Map}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<Map>
  nameWithType: ICollection<Map>
  fullName: System.Collections.Generic.ICollection<TinyLife.World.Map>
  nameWithType.vb: ICollection(Of Map)
  fullName.vb: System.Collections.Generic.ICollection(Of TinyLife.World.Map)
  name.vb: ICollection(Of Map)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Map.GetVisibleWorldArea*
  commentId: Overload:TinyLife.World.Map.GetVisibleWorldArea
  name: GetVisibleWorldArea
  nameWithType: Map.GetVisibleWorldArea
  fullName: TinyLife.World.Map.GetVisibleWorldArea

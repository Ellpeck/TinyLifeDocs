### YamlMime:ManagedReference
items:
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  id: ExportedLot
  parent: TinyLife.World
  children:
  - TinyLife.World.ExportedLot.Area
  - TinyLife.World.ExportedLot.ExportedVersion
  - TinyLife.World.ExportedLot.Furniture
  - TinyLife.World.ExportedLot.GetCoveredArea
  - TinyLife.World.ExportedLot.GetPrice
  - TinyLife.World.ExportedLot.OtherFloorTiles
  - TinyLife.World.ExportedLot.Roofs
  - TinyLife.World.ExportedLot.Stairs
  - TinyLife.World.ExportedLot.Tiles
  - TinyLife.World.ExportedLot.Type
  - TinyLife.World.ExportedLot.WallLikes
  - TinyLife.World.ExportedLot.Walls
  langs:
  - csharp
  - vb
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedLot
    path: ../TinyLife/World/Lot.cs
    startLine: 497
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn exported lot is all of the relevant data of a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that should be exported to a file when clicking the &quot;Export&quot; button in the build menu.\nTo create an exported lot from a lot, use <xref href=\"TinyLife.World.Lot.Export\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public class ExportedLot
    content.vb: Public Class ExportedLot
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.ExportedLot.ExportedVersion
  commentId: F:TinyLife.World.ExportedLot.ExportedVersion
  id: ExportedVersion
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: ExportedVersion
  nameWithType: ExportedLot.ExportedVersion
  fullName: TinyLife.World.ExportedLot.ExportedVersion
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedVersion
    path: ../TinyLife/World/Lot.cs
    startLine: 502
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe game version that this lot was exported with\n"
  example: []
  syntax:
    content: public string ExportedVersion
    return:
      type: System.String
    content.vb: Public ExportedVersion As String
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  id: Area
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: ExportedLot.Area
  fullName: TinyLife.World.ExportedLot.Area
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: ../TinyLife/World/Lot.cs
    startLine: 506
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe area that this lot covers in the world\n"
  example: []
  syntax:
    content: public Rectangle Area
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: Public Area As Rectangle
- uid: TinyLife.World.ExportedLot.Type
  commentId: F:TinyLife.World.ExportedLot.Type
  id: Type
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExportedLot.Type
  fullName: TinyLife.World.ExportedLot.Type
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/Lot.cs
    startLine: 510
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis lot&apos;s <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public LotType Type
    return:
      type: TinyLife.World.LotType
    content.vb: Public Type As LotType
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  id: Furniture
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Furniture
  nameWithType: ExportedLot.Furniture
  fullName: TinyLife.World.ExportedLot.Furniture
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Furniture
    path: ../TinyLife/World/Lot.cs
    startLine: 514
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.ExportedLot.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that is present on this lot\n"
  example: []
  syntax:
    content: public List<Furniture> Furniture
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Furniture}
    content.vb: Public Furniture As List(Of Furniture)
- uid: TinyLife.World.ExportedLot.Walls
  commentId: F:TinyLife.World.ExportedLot.Walls
  id: Walls
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Walls
  nameWithType: ExportedLot.Walls
  fullName: TinyLife.World.ExportedLot.Walls
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Walls
    path: ../TinyLife/World/Lot.cs
    startLine: 519
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe walls that are present on this lot\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the new WallLikes instead")]

      public List<Wall> Walls
    return:
      type: System.Collections.Generic.List{TinyLife.World.Wall}
    content.vb: >-
      <Obsolete("Use the new WallLikes instead")>

      Public Walls As List(Of Wall)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the new WallLikes instead
- uid: TinyLife.World.ExportedLot.WallLikes
  commentId: F:TinyLife.World.ExportedLot.WallLikes
  id: WallLikes
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: WallLikes
  nameWithType: ExportedLot.WallLikes
  fullName: TinyLife.World.ExportedLot.WallLikes
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WallLikes
    path: ../TinyLife/World/Lot.cs
    startLine: 524
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe walls that are present on this lot.\n"
  example: []
  syntax:
    content: public List<WallLike> WallLikes
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.WallLike}
    content.vb: Public WallLikes As List(Of WallLike)
- uid: TinyLife.World.ExportedLot.Roofs
  commentId: F:TinyLife.World.ExportedLot.Roofs
  id: Roofs
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Roofs
  nameWithType: ExportedLot.Roofs
  fullName: TinyLife.World.ExportedLot.Roofs
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Roofs
    path: ../TinyLife/World/Lot.cs
    startLine: 528
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe roofs that are present on this lot\n"
  example: []
  syntax:
    content: public List<Roof> Roofs
    return:
      type: System.Collections.Generic.List{TinyLife.World.Roof}
    content.vb: Public Roofs As List(Of Roof)
- uid: TinyLife.World.ExportedLot.Stairs
  commentId: F:TinyLife.World.ExportedLot.Stairs
  id: Stairs
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Stairs
  nameWithType: ExportedLot.Stairs
  fullName: TinyLife.World.ExportedLot.Stairs
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Stairs
    path: ../TinyLife/World/Lot.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe stairs that are present on this lot.\n"
  example: []
  syntax:
    content: public List<Stairs> Stairs
    return:
      type: System.Collections.Generic.List{TinyLife.World.Stairs}
    content.vb: Public Stairs As List(Of Stairs)
- uid: TinyLife.World.ExportedLot.Tiles
  commentId: F:TinyLife.World.ExportedLot.Tiles
  id: Tiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: ExportedLot.Tiles
  fullName: TinyLife.World.ExportedLot.Tiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tiles
    path: ../TinyLife/World/Lot.cs
    startLine: 537
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe ground tiles of this lot\n"
  example: []
  syntax:
    content: public Tile[,] Tiles
    return:
      type: TinyLife.World.Tile[,]
    content.vb: Public Tiles As Tile(,)
- uid: TinyLife.World.ExportedLot.OtherFloorTiles
  commentId: F:TinyLife.World.ExportedLot.OtherFloorTiles
  id: OtherFloorTiles
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: OtherFloorTiles
  nameWithType: ExportedLot.OtherFloorTiles
  fullName: TinyLife.World.ExportedLot.OtherFloorTiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OtherFloorTiles
    path: ../TinyLife/World/Lot.cs
    startLine: 542
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of tiles on additional floors beside the ground floor. Note that array entries may contain <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> tiles.\n"
  example: []
  syntax:
    content: public Dictionary<int, Tile[,]> OtherFloorTiles
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
    content.vb: Public OtherFloorTiles As Dictionary(Of Integer, Tile(,))
- uid: TinyLife.World.ExportedLot.GetPrice
  commentId: M:TinyLife.World.ExportedLot.GetPrice
  id: GetPrice
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: ExportedLot.GetPrice()
  fullName: TinyLife.World.ExportedLot.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Lot.cs
    startLine: 548
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns this exported lot&apos;s current price, including the prices of all <xref href=\"TinyLife.World.ExportedLot.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, <xref href=\"TinyLife.World.ExportedLot.WallLikes\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.ExportedLot.Roofs\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.ExportedLot.Tiles\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: This exported lot&apos;s total price.
    content.vb: Public Function GetPrice() As Single
  overload: TinyLife.World.ExportedLot.GetPrice*
- uid: TinyLife.World.ExportedLot.GetCoveredArea
  commentId: M:TinyLife.World.ExportedLot.GetCoveredArea
  id: GetCoveredArea
  parent: TinyLife.World.ExportedLot
  langs:
  - csharp
  - vb
  name: GetCoveredArea()
  nameWithType: ExportedLot.GetCoveredArea()
  fullName: TinyLife.World.ExportedLot.GetCoveredArea()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCoveredArea
    path: ../TinyLife/World/Lot.cs
    startLine: 561
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this lot actually covers.\nThe area covered by this lot is always bounded by its <xref href=\"TinyLife.World.ExportedLot.Area\" data-throw-if-not-resolved=\"false\"></xref>, but will be smaller if there are fewer objects on the lot.\n"
  example: []
  syntax:
    content: public RectangleF GetCoveredArea()
    return:
      type: MLEM.Misc.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea() As RectangleF
  overload: TinyLife.World.ExportedLot.GetCoveredArea*
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  name: Export()
  nameWithType: Lot.Export()
  fullName: TinyLife.World.Lot.Export()
  spec.csharp:
  - uid: TinyLife.World.Lot.Export
    name: Export
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Lot.Export
    name: Export
  - name: (
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.ExportedLot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ExportedLot>(ExportedLot)
  nameWithType: Extensions.JsonCopy<ExportedLot>(ExportedLot)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedLot>(TinyLife.World.ExportedLot)
  nameWithType.vb: Extensions.JsonCopy(Of ExportedLot)(ExportedLot)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedLot)(TinyLife.World.ExportedLot)
  name.vb: JsonCopy(Of ExportedLot)(ExportedLot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.ExportedLot)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
  - name: '>'
  - name: (
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.ExportedLot)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
  - name: )
  - name: (
  - uid: TinyLife.World.ExportedLot
    name: ExportedLot
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World.ExportedLot.Furniture
  commentId: F:TinyLife.World.ExportedLot.Furniture
  name: Furniture
  nameWithType: ExportedLot.Furniture
  fullName: TinyLife.World.ExportedLot.Furniture
- uid: System.Collections.Generic.List{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Furniture>
  nameWithType: List<Furniture>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Furniture>
  nameWithType.vb: List(Of Furniture)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Furniture)
  name.vb: List(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.List{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Wall>
  nameWithType: List<Wall>
  fullName: System.Collections.Generic.List<TinyLife.World.Wall>
  nameWithType.vb: List(Of Wall)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Wall)
  name.vb: List(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Wall
    name: Wall
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Wall
    name: Wall
  - name: )
- uid: System.Collections.Generic.List{TinyLife.Objects.WallLike}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.WallLike}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<WallLike>
  nameWithType: List<WallLike>
  fullName: System.Collections.Generic.List<TinyLife.Objects.WallLike>
  nameWithType.vb: List(Of WallLike)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.WallLike)
  name.vb: List(Of WallLike)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: )
- uid: System.Collections.Generic.List{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Roof>
  nameWithType: List<Roof>
  fullName: System.Collections.Generic.List<TinyLife.World.Roof>
  nameWithType.vb: List(Of Roof)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Roof)
  name.vb: List(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Roof
    name: Roof
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Roof
    name: Roof
  - name: )
- uid: System.Collections.Generic.List{TinyLife.World.Stairs}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Stairs}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Stairs>
  nameWithType: List<Stairs>
  fullName: System.Collections.Generic.List<TinyLife.World.Stairs>
  nameWithType.vb: List(Of Stairs)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Stairs)
  name.vb: List(Of Stairs)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
- uid: TinyLife.World.Tile[,]
  isExternal: true
  name: Tile[,]
  nameWithType: Tile[,]
  fullName: TinyLife.World.Tile[,]
  nameWithType.vb: Tile(,)
  fullName.vb: TinyLife.World.Tile(,)
  name.vb: Tile(,)
  spec.csharp:
  - uid: TinyLife.World.Tile
    name: Tile
  - name: '['
  - name: ','
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.Tile
    name: Tile
  - name: (
  - name: ','
  - name: )
- uid: System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,TinyLife.World.Tile[0:,0:]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, Tile[,]>
  nameWithType: Dictionary<int, Tile[,]>
  fullName: System.Collections.Generic.Dictionary<int, TinyLife.World.Tile[,]>
  nameWithType.vb: Dictionary(Of Integer, Tile(,))
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, TinyLife.World.Tile(,))
  name.vb: Dictionary(Of Integer, Tile(,))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: '['
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: (
  - name: ','
  - name: )
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TinyLife.World.ExportedLot.WallLikes
  commentId: F:TinyLife.World.ExportedLot.WallLikes
  name: WallLikes
  nameWithType: ExportedLot.WallLikes
  fullName: TinyLife.World.ExportedLot.WallLikes
- uid: TinyLife.World.ExportedLot.Roofs
  commentId: F:TinyLife.World.ExportedLot.Roofs
  name: Roofs
  nameWithType: ExportedLot.Roofs
  fullName: TinyLife.World.ExportedLot.Roofs
- uid: TinyLife.World.ExportedLot.Tiles
  commentId: F:TinyLife.World.ExportedLot.Tiles
  name: Tiles
  nameWithType: ExportedLot.Tiles
  fullName: TinyLife.World.ExportedLot.Tiles
- uid: TinyLife.World.ExportedLot.GetPrice*
  commentId: Overload:TinyLife.World.ExportedLot.GetPrice
  name: GetPrice
  nameWithType: ExportedLot.GetPrice
  fullName: TinyLife.World.ExportedLot.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.World.ExportedLot.Area
  commentId: F:TinyLife.World.ExportedLot.Area
  name: Area
  nameWithType: ExportedLot.Area
  fullName: TinyLife.World.ExportedLot.Area
- uid: TinyLife.World.ExportedLot.GetCoveredArea*
  commentId: Overload:TinyLife.World.ExportedLot.GetCoveredArea
  name: GetCoveredArea
  nameWithType: ExportedLot.GetCoveredArea
  fullName: TinyLife.World.ExportedLot.GetCoveredArea
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true

### YamlMime:ManagedReference
items:
- uid: TinyLife.Mods.ModInfo
  commentId: T:TinyLife.Mods.ModInfo
  id: ModInfo
  parent: TinyLife.Mods
  children:
  - TinyLife.Mods.ModInfo.Content
  - TinyLife.Mods.ModInfo.Dispose
  - TinyLife.Mods.ModInfo.Finalize
  - TinyLife.Mods.ModInfo.Id
  - TinyLife.Mods.ModInfo.Logger
  - TinyLife.Mods.ModInfo.Mod
  langs:
  - csharp
  - vb
  name: ModInfo
  nameWithType: ModInfo
  fullName: TinyLife.Mods.ModInfo
  type: Class
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ModInfo
    path: Mods/ModLoader.cs
    startLine: 100
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA mod info is a set of properties that every <xref href=\"TinyLife.Mods.ModInfo.Mod\" data-throw-if-not-resolved=\"false\"></xref> instance is assigned\n"
  example: []
  syntax:
    content: 'public class ModInfo : IDisposable'
    content.vb: >-
      Public Class ModInfo
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Mods.ModInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Mods.ModInfo.Id
  commentId: F:TinyLife.Mods.ModInfo.Id
  id: Id
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ModInfo.Id
  fullName: TinyLife.Mods.ModInfo.Id
  type: Field
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: Mods/ModLoader.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe id of the mod, which is based on the <xref href=\"TinyLife.Mods.ModInfo.Mod\" data-throw-if-not-resolved=\"false\"></xref>&apos;s class name\n"
  example: []
  syntax:
    content: public readonly string Id
    return:
      type: System.String
    content.vb: Public ReadOnly Id As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Mods.ModInfo.Mod
  commentId: F:TinyLife.Mods.ModInfo.Mod
  id: Mod
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Mod
  nameWithType: ModInfo.Mod
  fullName: TinyLife.Mods.ModInfo.Mod
  type: Field
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Mod
    path: Mods/ModLoader.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe actual mod instance\n"
  example: []
  syntax:
    content: public readonly Mod Mod
    return:
      type: TinyLife.Mods.Mod
    content.vb: 'Public ReadOnly Mod As '
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Mods.ModInfo.Logger
  commentId: F:TinyLife.Mods.ModInfo.Logger
  id: Logger
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ModInfo.Logger
  fullName: TinyLife.Mods.ModInfo.Logger
  type: Field
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Logger
    path: Mods/ModLoader.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe <xref href=\"TinyLife.Mods.ModInfo.Logger\" data-throw-if-not-resolved=\"false\"></xref> that this mod can use to log information about itself.\nBy default, this logger has the same sinks as the game&apos;s logger.\n"
  example: []
  syntax:
    content: public readonly Logger Logger
    return:
      type: ExtremelySimpleLogger.Logger
    content.vb: Public ReadOnly Logger As Logger
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Mods.ModInfo.Content
  commentId: F:TinyLife.Mods.ModInfo.Content
  id: Content
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: ModInfo.Content
  fullName: TinyLife.Mods.ModInfo.Content
  type: Field
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Content
    path: Mods/ModLoader.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA <xref href=\"MLEM.Data.Content.RawContentManager\" data-throw-if-not-resolved=\"false\"></xref> that this mod can use to load its content.\nThis content manager&apos;s base directory automatically points to the mod&apos;s Content folder.\n"
  example: []
  syntax:
    content: public readonly RawContentManager Content
    return:
      type: MLEM.Data.Content.RawContentManager
    content.vb: Public ReadOnly Content As RawContentManager
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Mods.ModInfo.Finalize
  commentId: M:TinyLife.Mods.ModInfo.Finalize
  id: Finalize
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ModInfo.Finalize()
  fullName: TinyLife.Mods.ModInfo.Finalize()
  type: Method
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Finalize
    path: Mods/ModLoader.cs
    startLine: 131
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: TinyLife.Mods.ModInfo.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Mods.ModInfo.Dispose
  commentId: M:TinyLife.Mods.ModInfo.Dispose
  id: Dispose
  parent: TinyLife.Mods.ModInfo
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ModInfo.Dispose()
  fullName: TinyLife.Mods.ModInfo.Dispose()
  type: Method
  source:
    remote:
      path: TinyLife/Mods/ModLoader.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Dispose
    path: Mods/ModLoader.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: TinyLife.Mods.ModInfo.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Mods.ModInfo.Mod
  commentId: F:TinyLife.Mods.ModInfo.Mod
  isExternal: true
- uid: TinyLife.Mods
  commentId: N:TinyLife.Mods
  name: TinyLife.Mods
  nameWithType: TinyLife.Mods
  fullName: TinyLife.Mods
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Mods.ModInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ModInfo>()
  nameWithType: Extensions.JsonCopy<ModInfo>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.ModInfo>()
  nameWithType.vb: Extensions.JsonCopy(Of ModInfo)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.ModInfo)()
  name.vb: JsonCopy(Of ModInfo)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ModInfo>
    nameWithType: Extensions.JsonCopy<ModInfo>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.ModInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ModInfo)
    nameWithType: Extensions.JsonCopy(Of ModInfo)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.ModInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Mods.Mod
  commentId: T:TinyLife.Mods.Mod
  parent: TinyLife.Mods
  name: Mod
  nameWithType: Mod
  fullName: TinyLife.Mods.Mod
- uid: TinyLife.Mods.ModInfo.Logger
  commentId: F:TinyLife.Mods.ModInfo.Logger
  isExternal: true
- uid: ExtremelySimpleLogger.Logger
  commentId: T:ExtremelySimpleLogger.Logger
  parent: ExtremelySimpleLogger
  isExternal: true
  name: Logger
  nameWithType: Logger
  fullName: ExtremelySimpleLogger.Logger
- uid: ExtremelySimpleLogger
  commentId: N:ExtremelySimpleLogger
  isExternal: true
  name: ExtremelySimpleLogger
  nameWithType: ExtremelySimpleLogger
  fullName: ExtremelySimpleLogger
- uid: MLEM.Data.Content.RawContentManager
  commentId: T:MLEM.Data.Content.RawContentManager
  parent: MLEM.Data.Content
  isExternal: true
  name: RawContentManager
  nameWithType: RawContentManager
  fullName: MLEM.Data.Content.RawContentManager
- uid: MLEM.Data.Content
  commentId: N:MLEM.Data.Content
  isExternal: true
  name: MLEM.Data.Content
  nameWithType: MLEM.Data.Content
  fullName: MLEM.Data.Content
- uid: TinyLife.Mods.ModInfo.Finalize*
  commentId: Overload:TinyLife.Mods.ModInfo.Finalize
  name: Finalize
  nameWithType: ModInfo.Finalize
  fullName: TinyLife.Mods.ModInfo.Finalize
- uid: TinyLife.Mods.ModInfo.Dispose*
  commentId: Overload:TinyLife.Mods.ModInfo.Dispose
  name: Dispose
  nameWithType: ModInfo.Dispose
  fullName: TinyLife.Mods.ModInfo.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )

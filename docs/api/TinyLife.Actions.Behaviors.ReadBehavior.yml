### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Behaviors.ReadBehavior
  commentId: T:TinyLife.Actions.Behaviors.ReadBehavior
  id: ReadBehavior
  parent: TinyLife.Actions.Behaviors
  children:
  - TinyLife.Actions.Behaviors.ReadBehavior.#ctor(TinyLife.Actions.Action,System.Func{TinyLife.Objects.FurnitureType},System.Int32[],System.Func{TinyLife.Objects.Furniture,System.Boolean})
  - TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
  - TinyLife.Actions.Behaviors.ReadBehavior.Initialize
  langs:
  - csharp
  - vb
  name: ReadBehavior
  nameWithType: ReadBehavior
  fullName: TinyLife.Actions.Behaviors.ReadBehavior
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ReadBehavior.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ReadBehavior
    path: ../TinyLife/Actions/Behaviors/ReadBehavior.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nAn action behavior that is used for any kind of action that involves reading a book or other type of media.\nA <xref href=\"TinyLife.Actions.BehaviorAction%601\" data-throw-if-not-resolved=\"false\"></xref> using this behavior will cause the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> to sit down after using the underlying <xref href=\"TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior\" data-throw-if-not-resolved=\"false\"></xref> behavior to pick up or spawn the book.\n"
  example: []
  syntax:
    content: 'public class ReadBehavior : PickUpOrSpawnBehavior'
    content.vb: >-
      Public Class ReadBehavior
          Inherits PickUpOrSpawnBehavior
  inheritance:
  - System.Object
  - TinyLife.Actions.Behaviors.ActionBehavior
  - TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  inheritedMembers:
  - TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
  - TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.Action
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  - TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  - TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Behaviors.ReadBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
  commentId: P:TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
  id: FullyInProgress
  parent: TinyLife.Actions.Behaviors.ReadBehavior
  langs:
  - csharp
  - vb
  name: FullyInProgress
  nameWithType: ReadBehavior.FullyInProgress
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ReadBehavior.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullyInProgress
    path: ../TinyLife/Actions/Behaviors/ReadBehavior.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns whether this action behavior is fully in progress.\nThis is the action behavior version of <xref href=\"TinyLife.Actions.Action.FullyInProgress\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool FullyInProgress { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property FullyInProgress As Boolean
  overridden: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  overload: TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: TinyLife.Actions.Behaviors.ReadBehavior.#ctor(TinyLife.Actions.Action,System.Func{TinyLife.Objects.FurnitureType},System.Int32[],System.Func{TinyLife.Objects.Furniture,System.Boolean})
  commentId: M:TinyLife.Actions.Behaviors.ReadBehavior.#ctor(TinyLife.Actions.Action,System.Func{TinyLife.Objects.FurnitureType},System.Int32[],System.Func{TinyLife.Objects.Furniture,System.Boolean})
  id: '#ctor(TinyLife.Actions.Action,System.Func{TinyLife.Objects.FurnitureType},System.Int32[],System.Func{TinyLife.Objects.Furniture,System.Boolean})'
  parent: TinyLife.Actions.Behaviors.ReadBehavior
  langs:
  - csharp
  - vb
  name: ReadBehavior(Action, Func<FurnitureType>, Int32[], Func<Furniture, Boolean>)
  nameWithType: ReadBehavior.ReadBehavior(Action, Func<FurnitureType>, Int32[], Func<Furniture, Boolean>)
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.ReadBehavior(TinyLife.Actions.Action, System.Func<TinyLife.Objects.FurnitureType>, System.Int32[], System.Func<TinyLife.Objects.Furniture, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ReadBehavior.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Behaviors/ReadBehavior.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a new pick up or spawn behavior with the given settings.\n"
  example: []
  syntax:
    content: public ReadBehavior(Action action, Func<FurnitureType> itemToSpawn, int[] colorsToSpawn = null, Func<Furniture, bool> isValid = null)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action.
    - id: itemToSpawn
      type: System.Func{TinyLife.Objects.FurnitureType}
      description: The item to spawn, or pick up.
    - id: colorsToSpawn
      type: System.Int32[]
      description: The colors to spawn.
    - id: isValid
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: Whether the item that we&apos;re trying to pick up is valid. If this is null, the item is checked against the <code data-dev-comment-type="paramref" class="paramref">itemToSpawn</code>.
    content.vb: Public Sub New(action As Action, itemToSpawn As Func(Of FurnitureType), colorsToSpawn As Integer() = Nothing, isValid As Func(Of Furniture, Boolean) = Nothing)
  overload: TinyLife.Actions.Behaviors.ReadBehavior.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if the <code data-dev-comment-type="paramref" class="paramref">itemToSpawn</code> is null.
  nameWithType.vb: ReadBehavior.ReadBehavior(Action, Func(Of FurnitureType), Int32(), Func(Of Furniture, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.Behaviors.ReadBehavior.ReadBehavior(TinyLife.Actions.Action, System.Func(Of TinyLife.Objects.FurnitureType), System.Int32(), System.Func(Of TinyLife.Objects.Furniture, System.Boolean))
  name.vb: ReadBehavior(Action, Func(Of FurnitureType), Int32(), Func(Of Furniture, Boolean))
- uid: TinyLife.Actions.Behaviors.ReadBehavior.Initialize
  commentId: M:TinyLife.Actions.Behaviors.ReadBehavior.Initialize
  id: Initialize
  parent: TinyLife.Actions.Behaviors.ReadBehavior
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: ReadBehavior.Initialize()
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ReadBehavior.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Behaviors/ReadBehavior.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nInitializes this action behavior.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.MultiAction.AndThenInitialize\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void Initialize()
    content.vb: Public Overrides Sub Initialize
  overridden: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  overload: TinyLife.Actions.Behaviors.ReadBehavior.Initialize*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ReadBehavior
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: ReadBehavior.CanMultitask(Action)
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ReadBehavior.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanMultitask
    path: ../TinyLife/Actions/Behaviors/ReadBehavior.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturn true on this method if this action can be multi-tasked along with the passed <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nA multi-tasking is an action that is currently active along with another action.\nBy default, multi-tasking is disallowed for any action.\n"
  example: []
  syntax:
    content: public override bool CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: System.Boolean
      description: Whether this action can be multi-tasked
    content.vb: Public Overrides Function CanMultitask(other As Action) As Boolean
  overridden: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  overload: TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TinyLife.Actions.BehaviorAction`1
  commentId: T:TinyLife.Actions.BehaviorAction`1
  name: BehaviorAction<T>
  nameWithType: BehaviorAction<T>
  fullName: TinyLife.Actions.BehaviorAction<T>
  nameWithType.vb: BehaviorAction(Of T)
  fullName.vb: TinyLife.Actions.BehaviorAction(Of T)
  name.vb: BehaviorAction(Of T)
  spec.csharp:
  - uid: TinyLife.Actions.BehaviorAction`1
    name: BehaviorAction
    nameWithType: BehaviorAction
    fullName: TinyLife.Actions.BehaviorAction
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TinyLife.Actions.BehaviorAction`1
    name: BehaviorAction
    nameWithType: BehaviorAction
    fullName: TinyLife.Actions.BehaviorAction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  commentId: T:TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  parent: TinyLife.Actions.Behaviors
  name: PickUpOrSpawnBehavior
  nameWithType: PickUpOrSpawnBehavior
  fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
- uid: TinyLife.Actions.Behaviors
  commentId: N:TinyLife.Actions.Behaviors
  name: TinyLife.Actions.Behaviors
  nameWithType: TinyLife.Actions.Behaviors
  fullName: TinyLife.Actions.Behaviors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  parent: TinyLife.Actions.Behaviors
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
- uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
  commentId: M:TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
  parent: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  name: CreateFirstActions()
  nameWithType: PickUpOrSpawnBehavior.CreateFirstActions()
  fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions()
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
    name: CreateFirstActions
    nameWithType: PickUpOrSpawnBehavior.CreateFirstActions
    fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
    name: CreateFirstActions
    nameWithType: PickUpOrSpawnBehavior.CreateFirstActions
    fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.CreateFirstActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  name: GetNextAction(CompletionType)
  nameWithType: PickUpOrSpawnBehavior.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: PickUpOrSpawnBehavior.GetNextAction
    fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: PickUpOrSpawnBehavior.GetNextAction
    fullName: TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Action
  commentId: F:TinyLife.Actions.Behaviors.ActionBehavior.Action
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: Action
  nameWithType: ActionBehavior.Action
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Action
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: CreateLastActions()
  nameWithType: ActionBehavior.CreateLastActions()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions()
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
    name: CreateLastActions
    nameWithType: ActionBehavior.CreateLastActions
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
    name: CreateLastActions
    nameWithType: ActionBehavior.CreateLastActions
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: ActionBehavior.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: ActionBehavior.Update
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: ActionBehavior.Update
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: GetIconObject()
  nameWithType: ActionBehavior.GetIconObject()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
    name: GetIconObject
    nameWithType: ActionBehavior.GetIconObject
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
    name: GetIconObject
    nameWithType: ActionBehavior.GetIconObject
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: OnCompleted(CompletionType)
  nameWithType: ActionBehavior.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: ActionBehavior.OnCompleted
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: ActionBehavior.OnCompleted
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  isExternal: true
  name: CreateDefaultInstance(Type, Action)
  nameWithType: ActionBehavior.CreateDefaultInstance(Type, Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
    name: CreateDefaultInstance
    nameWithType: ActionBehavior.CreateDefaultInstance
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
    name: CreateDefaultInstance
    nameWithType: ActionBehavior.CreateDefaultInstance
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ReadBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ReadBehavior>()
  nameWithType: Extensions.JsonCopy<ReadBehavior>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Behaviors.ReadBehavior>()
  nameWithType.vb: Extensions.JsonCopy(Of ReadBehavior)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Behaviors.ReadBehavior)()
  name.vb: JsonCopy(Of ReadBehavior)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ReadBehavior>
    nameWithType: Extensions.JsonCopy<ReadBehavior>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Behaviors.ReadBehavior>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ReadBehavior)
    nameWithType: Extensions.JsonCopy(Of ReadBehavior)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Behaviors.ReadBehavior)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  commentId: P:TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: FullyInProgress
  nameWithType: ActionBehavior.FullyInProgress
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
- uid: TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress*
  commentId: Overload:TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
  name: FullyInProgress
  nameWithType: ReadBehavior.FullyInProgress
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.FullyInProgress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.Behaviors.ReadBehavior.#ctor*
  commentId: Overload:TinyLife.Actions.Behaviors.ReadBehavior.#ctor
  name: ReadBehavior
  nameWithType: ReadBehavior.ReadBehavior
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.ReadBehavior
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: System.Func{TinyLife.Objects.FurnitureType}
  commentId: T:System.Func{TinyLife.Objects.FurnitureType}
  parent: System
  definition: System.Func`1
  name: Func<FurnitureType>
  nameWithType: Func<FurnitureType>
  fullName: System.Func<TinyLife.Objects.FurnitureType>
  nameWithType.vb: Func(Of FurnitureType)
  fullName.vb: System.Func(Of TinyLife.Objects.FurnitureType)
  name.vb: Func(Of FurnitureType)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{TinyLife.Objects.Furniture,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Furniture, Boolean>
  nameWithType: Func<Furniture, Boolean>
  fullName: System.Func<TinyLife.Objects.Furniture, System.Boolean>
  nameWithType.vb: Func(Of Furniture, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, System.Boolean)
  name.vb: Func(Of Furniture, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: Initialize()
  nameWithType: ActionBehavior.Initialize()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
    name: Initialize
    nameWithType: ActionBehavior.Initialize
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
    name: Initialize
    nameWithType: ActionBehavior.Initialize
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ReadBehavior.Initialize*
  commentId: Overload:TinyLife.Actions.Behaviors.ReadBehavior.Initialize
  name: Initialize
  nameWithType: ReadBehavior.Initialize
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.Initialize
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: CanMultitask(Action)
  nameWithType: ActionBehavior.CanMultitask(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: ActionBehavior.CanMultitask
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: ActionBehavior.CanMultitask
    fullName: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask*
  commentId: Overload:TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask
  name: CanMultitask
  nameWithType: ReadBehavior.CanMultitask
  fullName: TinyLife.Actions.Behaviors.ReadBehavior.CanMultitask

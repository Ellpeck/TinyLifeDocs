### YamlMime:ManagedReference
items:
- uid: TinyLife.Tools.UndoableAction
  commentId: T:TinyLife.Tools.UndoableAction
  id: UndoableAction
  parent: TinyLife.Tools
  children:
  - TinyLife.Tools.UndoableAction.#ctor(System.Boolean)
  - TinyLife.Tools.UndoableAction.Add(System.Action,System.Action)
  - TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  - TinyLife.Tools.UndoableAction.ExecuteAction
  - TinyLife.Tools.UndoableAction.ExecuteUndo
  langs:
  - csharp
  - vb
  name: UndoableAction
  nameWithType: UndoableAction
  fullName: TinyLife.Tools.UndoableAction
  type: Class
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UndoableAction
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn undoable action is an action used by a <xref href=\"TinyLife.Tools.UndoRedoStack\" data-throw-if-not-resolved=\"false\"></xref>.\nOptionally, using the <xref href=\"TinyLife.Tools.UndoableAction.%23ctor(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor, an undoable action can be set to be executed immediately, rather than being able to be undone and redone.\n"
  example: []
  syntax:
    content: public class UndoableAction
    content.vb: Public Class UndoableAction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Tools.UndoableAction.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Tools.UndoableAction.#ctor(System.Boolean)
  commentId: M:TinyLife.Tools.UndoableAction.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: TinyLife.Tools.UndoableAction
  langs:
  - csharp
  - vb
  name: UndoableAction(Boolean)
  nameWithType: UndoableAction.UndoableAction(Boolean)
  fullName: TinyLife.Tools.UndoableAction.UndoableAction(System.Boolean)
  type: Constructor
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCreates a new undoable action.\n"
  example: []
  syntax:
    content: public UndoableAction(bool immediate = false)
    parameters:
    - id: immediate
      type: System.Boolean
      description: Determines whether this undoable action should be executed immediately, or if the action added to it should be executed as part of an <xref href="TinyLife.Tools.UndoRedoStack" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(immediate As Boolean = False)
  overload: TinyLife.Tools.UndoableAction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.UndoableAction.Add(System.Action,System.Action)
  commentId: M:TinyLife.Tools.UndoableAction.Add(System.Action,System.Action)
  id: Add(System.Action,System.Action)
  parent: TinyLife.Tools.UndoableAction
  langs:
  - csharp
  - vb
  name: Add(Action, Action)
  nameWithType: UndoableAction.Add(Action, Action)
  fullName: TinyLife.Tools.UndoableAction.Add(System.Action, System.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Add
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAdds the given sub-action and undo action to this undoable action.\nNote that undo actions are executed in reverse order that they are added to maintain proper ordering.\n"
  example: []
  syntax:
    content: public void Add(Action action, Action undo)
    parameters:
    - id: action
      type: System.Action
      description: The action to add.
    - id: undo
      type: System.Action
      description: The action that undoes the added <code data-dev-comment-type="paramref" class="paramref">action</code>.
    content.vb: Public Sub Add(action As Action, undo As Action)
  overload: TinyLife.Tools.UndoableAction.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  commentId: M:TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  id: AddBothAfter(System.Action)
  parent: TinyLife.Tools.UndoableAction
  langs:
  - csharp
  - vb
  name: AddBothAfter(Action)
  nameWithType: UndoableAction.AddBothAfter(Action)
  fullName: TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddBothAfter
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 116
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAdds the given sub-action to this undoable action in a way that causes it to be executed after the action is done, undone, or redone.\nActions added this way are usually validation steps, like marking an object dirty.\n"
  example: []
  syntax:
    content: public void AddBothAfter(Action after)
    parameters:
    - id: after
      type: System.Action
      description: The action to add.
    content.vb: Public Sub AddBothAfter(after As Action)
  overload: TinyLife.Tools.UndoableAction.AddBothAfter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.UndoableAction.ExecuteAction
  commentId: M:TinyLife.Tools.UndoableAction.ExecuteAction
  id: ExecuteAction
  parent: TinyLife.Tools.UndoableAction
  langs:
  - csharp
  - vb
  name: ExecuteAction()
  nameWithType: UndoableAction.ExecuteAction()
  fullName: TinyLife.Tools.UndoableAction.ExecuteAction()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExecuteAction
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 127
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nExecutes this undoable action, executing every action added using <xref href=\"TinyLife.Tools.UndoableAction.Add(System.Action%2cSystem.Action)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void ExecuteAction()
    content.vb: Public Sub ExecuteAction
  overload: TinyLife.Tools.UndoableAction.ExecuteAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.UndoableAction.ExecuteUndo
  commentId: M:TinyLife.Tools.UndoableAction.ExecuteUndo
  id: ExecuteUndo
  parent: TinyLife.Tools.UndoableAction
  langs:
  - csharp
  - vb
  name: ExecuteUndo()
  nameWithType: UndoableAction.ExecuteUndo()
  fullName: TinyLife.Tools.UndoableAction.ExecuteUndo()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/UndoRedoStack.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExecuteUndo
    path: ../TinyLife/Tools/UndoRedoStack.cs
    startLine: 135
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nUndoes this undoable action, executing every undone action added using <xref href=\"TinyLife.Tools.UndoableAction.Add(System.Action%2cSystem.Action)\" data-throw-if-not-resolved=\"false\"></xref> and every action added using <xref href=\"TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void ExecuteUndo()
    content.vb: Public Sub ExecuteUndo
  overload: TinyLife.Tools.UndoableAction.ExecuteUndo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Tools.UndoRedoStack
  commentId: T:TinyLife.Tools.UndoRedoStack
  name: UndoRedoStack
  nameWithType: UndoRedoStack
  fullName: TinyLife.Tools.UndoRedoStack
- uid: TinyLife.Tools.UndoableAction.#ctor(System.Boolean)
  commentId: M:TinyLife.Tools.UndoableAction.#ctor(System.Boolean)
  isExternal: true
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.UndoableAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<UndoableAction>()
  nameWithType: Extensions.JsonCopy<UndoableAction>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.UndoableAction>()
  nameWithType.vb: Extensions.JsonCopy(Of UndoableAction)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.UndoableAction)()
  name.vb: JsonCopy(Of UndoableAction)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<UndoableAction>
    nameWithType: Extensions.JsonCopy<UndoableAction>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.UndoableAction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of UndoableAction)
    nameWithType: Extensions.JsonCopy(Of UndoableAction)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.UndoableAction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Tools.UndoableAction.#ctor*
  commentId: Overload:TinyLife.Tools.UndoableAction.#ctor
  name: UndoableAction
  nameWithType: UndoableAction.UndoableAction
  fullName: TinyLife.Tools.UndoableAction.UndoableAction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Tools.UndoableAction.Add*
  commentId: Overload:TinyLife.Tools.UndoableAction.Add
  name: Add
  nameWithType: UndoableAction.Add
  fullName: TinyLife.Tools.UndoableAction.Add
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: TinyLife.Tools.UndoableAction.AddBothAfter*
  commentId: Overload:TinyLife.Tools.UndoableAction.AddBothAfter
  name: AddBothAfter
  nameWithType: UndoableAction.AddBothAfter
  fullName: TinyLife.Tools.UndoableAction.AddBothAfter
- uid: TinyLife.Tools.UndoableAction.Add(System.Action,System.Action)
  commentId: M:TinyLife.Tools.UndoableAction.Add(System.Action,System.Action)
  isExternal: true
- uid: TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  commentId: M:TinyLife.Tools.UndoableAction.AddBothAfter(System.Action)
  isExternal: true
- uid: TinyLife.Tools.UndoableAction.ExecuteAction*
  commentId: Overload:TinyLife.Tools.UndoableAction.ExecuteAction
  name: ExecuteAction
  nameWithType: UndoableAction.ExecuteAction
  fullName: TinyLife.Tools.UndoableAction.ExecuteAction
- uid: TinyLife.Tools.UndoableAction.ExecuteUndo*
  commentId: Overload:TinyLife.Tools.UndoableAction.ExecuteUndo
  name: ExecuteUndo
  nameWithType: UndoableAction.ExecuteUndo
  fullName: TinyLife.Tools.UndoableAction.ExecuteUndo

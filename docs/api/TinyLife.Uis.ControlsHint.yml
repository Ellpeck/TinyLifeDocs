### YamlMime:ManagedReference
items:
- uid: TinyLife.Uis.ControlsHint
  commentId: T:TinyLife.Uis.ControlsHint
  id: ControlsHint
  parent: TinyLife.Uis
  children:
  - TinyLife.Uis.ControlsHint.#ctor(System.String,System.Func{TinyLife.Options,System.Boolean,System.Object},System.Func{TinyLife.GameImpl,System.Boolean})
  - TinyLife.Uis.ControlsHint.Hints
  - TinyLife.Uis.ControlsHint.Keybind
  - TinyLife.Uis.ControlsHint.Name
  - TinyLife.Uis.ControlsHint.Register(TinyLife.Uis.ControlsHint)
  - TinyLife.Uis.ControlsHint.ShouldDisplay
  langs:
  - csharp
  - vb
  name: ControlsHint
  nameWithType: ControlsHint
  fullName: TinyLife.Uis.ControlsHint
  type: Class
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ControlsHint
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nA controls hint is a set of information that is displayed in the bottom-right corner of the game that is supposed to help the player with the game&apos;s controls.\nEach controls hint has a condition as well as a set of bindings and a string that it should display.\n"
  example: []
  syntax:
    content: public class ControlsHint
    content.vb: Public Class ControlsHint
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Uis.ControlsHint.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Uis.ControlsHint.Hints
  commentId: F:TinyLife.Uis.ControlsHint.Hints
  id: Hints
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: Hints
  nameWithType: ControlsHint.Hints
  fullName: TinyLife.Uis.ControlsHint.Hints
  type: Field
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Hints
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nA set of registered hints, both by mods and by the game itself.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyCollection<ControlsHint> Hints
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{TinyLife.Uis.ControlsHint}
    content.vb: Public Shared ReadOnly Hints As ReadOnlyCollection(Of ControlsHint)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Uis.ControlsHint.Name
  commentId: F:TinyLife.Uis.ControlsHint.Name
  id: Name
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ControlsHint.Name
  fullName: TinyLife.Uis.ControlsHint.Name
  type: Field
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nThe name of this controls hint.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Uis.ControlsHint.Keybind
  commentId: F:TinyLife.Uis.ControlsHint.Keybind
  id: Keybind
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: Keybind
  nameWithType: ControlsHint.Keybind
  fullName: TinyLife.Uis.ControlsHint.Keybind
  type: Field
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Keybind
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nA function that returns the keybind that should be displayed, based on the current <xref href=\"TinyLife.Options\" data-throw-if-not-resolved=\"false\"></xref> instance, and whether <xref href=\"MLEM.Ui.UiControls.IsAutoNavMode\" data-throw-if-not-resolved=\"false\"></xref> is true.\nReturned bindings can be of type <xref href=\"Microsoft.Xna.Framework.Input.Keys\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"MLEM.Input.MouseButton\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Xna.Framework.Input.Buttons\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"MLEM.Input.GenericInput\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"MLEM.Input.ModifierKey\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Uis.ControlsHint.Keybind\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly Func<Options, bool, object> Keybind
    return:
      type: System.Func{TinyLife.Options,System.Boolean,System.Object}
    content.vb: Public ReadOnly Keybind As Func(Of Options, Boolean, Object)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Uis.ControlsHint.ShouldDisplay
  commentId: F:TinyLife.Uis.ControlsHint.ShouldDisplay
  id: ShouldDisplay
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: ShouldDisplay
  nameWithType: ControlsHint.ShouldDisplay
  fullName: TinyLife.Uis.ControlsHint.ShouldDisplay
  type: Field
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldDisplay
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nWhether this controls hint should currently be displayed, based on the current <xref href=\"TinyLife.Options\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public readonly Func<GameImpl, bool> ShouldDisplay
    return:
      type: System.Func{TinyLife.GameImpl,System.Boolean}
    content.vb: Public ReadOnly ShouldDisplay As Func(Of GameImpl, Boolean)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Uis.ControlsHint.#ctor(System.String,System.Func{TinyLife.Options,System.Boolean,System.Object},System.Func{TinyLife.GameImpl,System.Boolean})
  commentId: M:TinyLife.Uis.ControlsHint.#ctor(System.String,System.Func{TinyLife.Options,System.Boolean,System.Object},System.Func{TinyLife.GameImpl,System.Boolean})
  id: '#ctor(System.String,System.Func{TinyLife.Options,System.Boolean,System.Object},System.Func{TinyLife.GameImpl,System.Boolean})'
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: ControlsHint(String, Func<Options, Boolean, Object>, Func<GameImpl, Boolean>)
  nameWithType: ControlsHint.ControlsHint(String, Func<Options, Boolean, Object>, Func<GameImpl, Boolean>)
  fullName: TinyLife.Uis.ControlsHint.ControlsHint(System.String, System.Func<TinyLife.Options, System.Boolean, System.Object>, System.Func<TinyLife.GameImpl, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 85
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nCreates a new controls hint with the given settings.\n"
  example: []
  syntax:
    content: public ControlsHint(string name, Func<Options, bool, object> keybind, Func<GameImpl, bool> shouldDisplay)
    parameters:
    - id: name
      type: System.String
      description: The name of this controls hint.
    - id: keybind
      type: System.Func{TinyLife.Options,System.Boolean,System.Object}
      description: A function that returns the keybind that should be displayed, based on the current <xref href="TinyLife.Options" data-throw-if-not-resolved="false"></xref> instance, and whether <xref href="MLEM.Ui.UiControls.IsAutoNavMode" data-throw-if-not-resolved="false"></xref> is true. Returned bindings can be of type <xref href="Microsoft.Xna.Framework.Input.Keys" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.MouseButton" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Xna.Framework.Input.Buttons" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.GenericInput" data-throw-if-not-resolved="false"></xref>, <xref href="MLEM.Input.ModifierKey" data-throw-if-not-resolved="false"></xref> or <xref href="TinyLife.Uis.ControlsHint.Keybind" data-throw-if-not-resolved="false"></xref>.
    - id: shouldDisplay
      type: System.Func{TinyLife.GameImpl,System.Boolean}
      description: Whether this controls hint should currently be displayed, based on the current <xref href="TinyLife.Options" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Sub New(name As String, keybind As Func(Of Options, Boolean, Object), shouldDisplay As Func(Of GameImpl, Boolean))
  overload: TinyLife.Uis.ControlsHint.#ctor*
  nameWithType.vb: ControlsHint.ControlsHint(String, Func(Of Options, Boolean, Object), Func(Of GameImpl, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Uis.ControlsHint.ControlsHint(System.String, System.Func(Of TinyLife.Options, System.Boolean, System.Object), System.Func(Of TinyLife.GameImpl, System.Boolean))
  name.vb: ControlsHint(String, Func(Of Options, Boolean, Object), Func(Of GameImpl, Boolean))
- uid: TinyLife.Uis.ControlsHint.Register(TinyLife.Uis.ControlsHint)
  commentId: M:TinyLife.Uis.ControlsHint.Register(TinyLife.Uis.ControlsHint)
  id: Register(TinyLife.Uis.ControlsHint)
  parent: TinyLife.Uis.ControlsHint
  langs:
  - csharp
  - vb
  name: Register(ControlsHint)
  nameWithType: ControlsHint.Register(ControlsHint)
  fullName: TinyLife.Uis.ControlsHint.Register(TinyLife.Uis.ControlsHint)
  type: Method
  source:
    remote:
      path: TinyLife/Uis/ControlsHint.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Uis/ControlsHint.cs
    startLine: 96
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nRegisters the given controls hint to the <xref href=\"TinyLife.Uis.ControlsHint.Hints\" data-throw-if-not-resolved=\"false\"></xref> registry.\n"
  example: []
  syntax:
    content: public static ControlsHint Register(ControlsHint hint)
    parameters:
    - id: hint
      type: TinyLife.Uis.ControlsHint
      description: The hint to register.
    return:
      type: TinyLife.Uis.ControlsHint
      description: The passed <code data-dev-comment-type="paramref" class="paramref">hint</code>, for chaining.
    content.vb: Public Shared Function Register(hint As ControlsHint) As ControlsHint
  overload: TinyLife.Uis.ControlsHint.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.ControlsHint.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ControlsHint>()
  nameWithType: Extensions.JsonCopy<ControlsHint>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Uis.ControlsHint>()
  nameWithType.vb: Extensions.JsonCopy(Of ControlsHint)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Uis.ControlsHint)()
  name.vb: JsonCopy(Of ControlsHint)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ControlsHint>
    nameWithType: Extensions.JsonCopy<ControlsHint>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Uis.ControlsHint>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ControlsHint)
    nameWithType: Extensions.JsonCopy(Of ControlsHint)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Uis.ControlsHint)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.ObjectModel.ReadOnlyCollection{TinyLife.Uis.ControlsHint}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{TinyLife.Uis.ControlsHint}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ControlsHint>
  nameWithType: ReadOnlyCollection<ControlsHint>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TinyLife.Uis.ControlsHint>
  nameWithType.vb: ReadOnlyCollection(Of ControlsHint)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TinyLife.Uis.ControlsHint)
  name.vb: ReadOnlyCollection(Of ControlsHint)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Uis.ControlsHint
    name: ControlsHint
    nameWithType: ControlsHint
    fullName: TinyLife.Uis.ControlsHint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Uis.ControlsHint
    name: ControlsHint
    nameWithType: ControlsHint
    fullName: TinyLife.Uis.ControlsHint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Options
  commentId: T:TinyLife.Options
  parent: TinyLife
  name: Options
  nameWithType: Options
  fullName: TinyLife.Options
- uid: MLEM.Ui.UiControls.IsAutoNavMode
  commentId: P:MLEM.Ui.UiControls.IsAutoNavMode
  isExternal: true
- uid: Microsoft.Xna.Framework.Input.Keys
  commentId: T:Microsoft.Xna.Framework.Input.Keys
  isExternal: true
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  isExternal: true
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: MLEM.Input.GenericInput
  commentId: T:MLEM.Input.GenericInput
  isExternal: true
- uid: MLEM.Input.ModifierKey
  commentId: T:MLEM.Input.ModifierKey
  isExternal: true
- uid: TinyLife.Uis.ControlsHint.Keybind
  commentId: F:TinyLife.Uis.ControlsHint.Keybind
  isExternal: true
- uid: System.Func{TinyLife.Options,System.Boolean,System.Object}
  commentId: T:System.Func{TinyLife.Options,System.Boolean,System.Object}
  parent: System
  definition: System.Func`3
  name: Func<Options, Boolean, Object>
  nameWithType: Func<Options, Boolean, Object>
  fullName: System.Func<TinyLife.Options, System.Boolean, System.Object>
  nameWithType.vb: Func(Of Options, Boolean, Object)
  fullName.vb: System.Func(Of TinyLife.Options, System.Boolean, System.Object)
  name.vb: Func(Of Options, Boolean, Object)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Options
    name: Options
    nameWithType: Options
    fullName: TinyLife.Options
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Options
    name: Options
    nameWithType: Options
    fullName: TinyLife.Options
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: MLEM.Input
  commentId: N:MLEM.Input
  isExternal: true
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.GameImpl,System.Boolean}
  commentId: T:System.Func{TinyLife.GameImpl,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<GameImpl, Boolean>
  nameWithType: Func<GameImpl, Boolean>
  fullName: System.Func<TinyLife.GameImpl, System.Boolean>
  nameWithType.vb: Func(Of GameImpl, Boolean)
  fullName.vb: System.Func(Of TinyLife.GameImpl, System.Boolean)
  name.vb: Func(Of GameImpl, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.GameImpl
    name: GameImpl
    nameWithType: GameImpl
    fullName: TinyLife.GameImpl
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.GameImpl
    name: GameImpl
    nameWithType: GameImpl
    fullName: TinyLife.GameImpl
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.ControlsHint.#ctor*
  commentId: Overload:TinyLife.Uis.ControlsHint.#ctor
  name: ControlsHint
  nameWithType: ControlsHint.ControlsHint
  fullName: TinyLife.Uis.ControlsHint.ControlsHint
- uid: TinyLife.Uis.ControlsHint.Hints
  commentId: F:TinyLife.Uis.ControlsHint.Hints
  isExternal: true
- uid: TinyLife.Uis.ControlsHint.Register*
  commentId: Overload:TinyLife.Uis.ControlsHint.Register
  name: Register
  nameWithType: ControlsHint.Register
  fullName: TinyLife.Uis.ControlsHint.Register
- uid: TinyLife.Uis.ControlsHint
  commentId: T:TinyLife.Uis.ControlsHint
  parent: TinyLife.Uis
  name: ControlsHint
  nameWithType: ControlsHint
  fullName: TinyLife.Uis.ControlsHint

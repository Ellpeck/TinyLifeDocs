### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  id: MultiActionHandler
  parent: TinyLife.Actions.Handlers
  children:
  - TinyLife.Actions.Handlers.MultiActionHandler.Actions
  - TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction},System.Boolean)
  - TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  - TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MultiActionHandler
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nA multi action handler is a handler that is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref>, which handles a set of underlying actions that should be executed in a row.\nNote that, when using this class, <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> and especially <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> have to be called in the appropriate places.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class MultiActionHandler
    content.vb: >-
      <DataContract>

      Public Class MultiActionHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Handlers.MultiActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  commentId: P:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  id: Actions
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Actions
  nameWithType: MultiActionHandler.Actions
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Actions
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nThe actions that still have to be completed.\nThe head of this queue is the action that is currently being executed.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Queue<TypelessAction> Actions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Queue{TinyLife.Actions.Typeless.TypelessAction}
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Actions As Queue(Of TypelessAction)
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Actions*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction},System.Boolean)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction},System.Boolean)
  id: Initialize(System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction},System.Boolean)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Initialize(IEnumerable<TypelessAction>, Boolean)
  nameWithType: MultiActionHandler.Initialize(IEnumerable<TypelessAction>, Boolean)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.IEnumerable<TinyLife.Actions.Typeless.TypelessAction>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nInitializes this multi action handler with the given set of actions.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">actions</code> is empty, the initialization fails and <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref> is returned in <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\nIf a null action is returned as the first item, no first actions will be executed and <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> is returned in <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CompletionType Initialize(IEnumerable<TypelessAction> actions, bool automatic = false)
    parameters:
    - id: actions
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
      description: The actions to initialize
    - id: automatic
      type: System.Boolean
      description: Whether the action should be considered <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Actions.CompletionType
      description: The completion type that this multi action handler has after initialization
    content.vb: Public Function Initialize(actions As IEnumerable(Of TypelessAction), automatic As Boolean = False) As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Initialize*
  nameWithType.vb: MultiActionHandler.Initialize(IEnumerable(Of TypelessAction), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Typeless.TypelessAction), System.Boolean)
  name.vb: Initialize(IEnumerable(Of TypelessAction), Boolean)
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: MultiActionHandler.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nUpdates this multi action handler, advancing all of the <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref>, if there are any\nThis action should be called at the end of <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> or any derived methods.\n"
  example: []
  syntax:
    content: public CompletionType Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game since the last time this method was called
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Actions.CompletionType
      description: The completion type that this multi action handler has after this update
    content.vb: Public Function Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single) As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: MultiActionHandler.Validate(Person)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nValidates this multi action handler and all of the <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> it hosts\nThis method should be called in <xref href=\"TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: MultiActionHandler.IsCompleted()
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nReturns a <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> that determines whether this multi action handler has completed.\nIf <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> is not (yet) initialized, <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref> is returned. Otherwise, the current action&apos;s <xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref> result is returned.\nIf all <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> are completed, <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: This multi action handler&apos;s completion state
    content.vb: Public Function IsCompleted As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: MultiActionHandler.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 124
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nCalls this underlying <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref>&apos; currently executing action&apos;s <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThis should be called for any completion type that the action that uses this underlying action experiences, even <xref href=\"TinyLife.Actions.CompletionType.Canceled\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the underlying <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> are null or already completed, this method has no effect.\n"
  example: []
  syntax:
    content: public bool OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion type
    return:
      type: System.Boolean
      description: Whether the completion type was consumed by this multi action handler
    content.vb: Public Function OnCompleted(type As CompletionType) As Boolean
  overload: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  isExternal: true
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MultiActionHandler>()
  nameWithType: Extensions.JsonCopy<MultiActionHandler>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Handlers.MultiActionHandler>()
  nameWithType.vb: Extensions.JsonCopy(Of MultiActionHandler)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Handlers.MultiActionHandler)()
  name.vb: JsonCopy(Of MultiActionHandler)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<MultiActionHandler>
    nameWithType: Extensions.JsonCopy<MultiActionHandler>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Handlers.MultiActionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of MultiActionHandler)
    nameWithType: Extensions.JsonCopy(Of MultiActionHandler)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Handlers.MultiActionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  name: Actions
  nameWithType: MultiActionHandler.Actions
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Actions
- uid: System.Collections.Generic.Queue{TinyLife.Actions.Typeless.TypelessAction}
  commentId: T:System.Collections.Generic.Queue{TinyLife.Actions.Typeless.TypelessAction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Queue`1
  name: Queue<TypelessAction>
  nameWithType: Queue<TypelessAction>
  fullName: System.Collections.Generic.Queue<TinyLife.Actions.Typeless.TypelessAction>
  nameWithType.vb: Queue(Of TypelessAction)
  fullName.vb: System.Collections.Generic.Queue(Of TinyLife.Actions.Typeless.TypelessAction)
  name.vb: Queue(Of TypelessAction)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  isExternal: true
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    nameWithType: Queue
    fullName: System.Collections.Generic.Queue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.CompletionType.Failed
  commentId: F:TinyLife.Actions.CompletionType.Failed
  isExternal: true
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  isExternal: true
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Initialize
  name: Initialize
  nameWithType: MultiActionHandler.Initialize
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Initialize
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypelessAction>
  nameWithType: IEnumerable<TypelessAction>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Typeless.TypelessAction>
  nameWithType.vb: IEnumerable(Of TypelessAction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Typeless.TypelessAction)
  name.vb: IEnumerable(Of TypelessAction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  commentId: P:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  isExternal: true
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Action.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Update
  name: Update
  nameWithType: MultiActionHandler.Update
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Validate
  name: Validate
  nameWithType: MultiActionHandler.Validate
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Validate
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: IsCompleted()
  nameWithType: TypelessAction.IsCompleted()
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  name: IsCompleted
  nameWithType: MultiActionHandler.IsCompleted
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CompletionType.Canceled
  commentId: F:TinyLife.Actions.CompletionType.Canceled
  isExternal: true
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted
  name: OnCompleted
  nameWithType: MultiActionHandler.OnCompleted
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted

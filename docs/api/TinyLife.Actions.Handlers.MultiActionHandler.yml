### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  id: MultiActionHandler
  parent: TinyLife.Actions.Handlers
  children:
  - TinyLife.Actions.Handlers.MultiActionHandler.#ctor(TinyLife.Actions.Action)
  - TinyLife.Actions.Handlers.MultiActionHandler.Actions
  - TinyLife.Actions.Handlers.MultiActionHandler.Current
  - TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  - TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  - TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MultiActionHandler
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nA multi action handler is a handler that is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref>, which handles a set of underlying actions that should be executed in a row.\nNote that, when using this class, <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action%2cTinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> and especially <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> have to be called in the appropriate places.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class MultiActionHandler
    content.vb: >-
      <DataContract>

      Public Class MultiActionHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Handlers.MultiActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  commentId: P:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  id: Actions
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Actions
  nameWithType: MultiActionHandler.Actions
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Actions
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nThe actions that still have to be completed.\nThe head of this queue is the action that is currently being executed.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Queue<Action> Actions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Queue{TinyLife.Actions.Action}
    content.vb: >-
      <DataMember>

      Public Property Actions As Queue(Of Action)
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Actions*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Current
  commentId: P:TinyLife.Actions.Handlers.MultiActionHandler.Current
  id: Current
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: MultiActionHandler.Current
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Current
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Current
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nThe action that this multi-action handler is currently executing, which is always the first entry of its <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> queue.\n"
  example: []
  syntax:
    content: public Action Current { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Action
    content.vb: Public ReadOnly Property Current As Action
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Current*
- uid: TinyLife.Actions.Handlers.MultiActionHandler.#ctor(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.#ctor(TinyLife.Actions.Action)
  id: '#ctor(TinyLife.Actions.Action)'
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: MultiActionHandler(Action)
  nameWithType: MultiActionHandler.MultiActionHandler(Action)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.MultiActionHandler(TinyLife.Actions.Action)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nCreates a new <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref> with the given containing action.\n"
  example: []
  syntax:
    content: public MultiActionHandler(Action containingAction)
    parameters:
    - id: containingAction
      type: TinyLife.Actions.Action
      description: The action that contains this <xref href="TinyLife.Actions.Handlers.MultiActionHandler" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(containingAction As Action)
  overload: TinyLife.Actions.Handlers.MultiActionHandler.#ctor*
  nameWithType.vb: MultiActionHandler.New(Action)
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.New(TinyLife.Actions.Action)
  name.vb: New(Action)
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  id: Initialize(System.Collections.Generic.ICollection{TinyLife.Actions.Action})
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Initialize(ICollection<Action>)
  nameWithType: MultiActionHandler.Initialize(ICollection<Action>)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection<TinyLife.Actions.Action>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nInitializes this multi action handler with the given set of actions.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">actions</code> is empty, the initialization fails and <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref> is returned in <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the collection only contains <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> items, no first actions will be executed and <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> is returned in <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CompletionType Initialize(ICollection<Action> actions)
    parameters:
    - id: actions
      type: System.Collections.Generic.ICollection{TinyLife.Actions.Action}
      description: The actions to initialize
    return:
      type: TinyLife.Actions.CompletionType
      description: The completion type that this multi action handler has after initialization
    content.vb: Public Function Initialize(actions As ICollection(Of Action)) As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Initialize*
  nameWithType.vb: MultiActionHandler.Initialize(ICollection(Of Action))
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.Initialize(System.Collections.Generic.ICollection(Of TinyLife.Actions.Action))
  name.vb: Initialize(ICollection(Of Action))
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: MultiActionHandler.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nUpdates this multi action handler, advancing all of the <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref>, if there are any\nThis action should be called at the end of <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> or any derived methods.\n"
  example: []
  syntax:
    content: public CompletionType Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game since the last time this method was called
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Actions.CompletionType
      description: The completion type that this multi action handler has after this update
    content.vb: Public Function Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single) As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Update*
  nameWithType.vb: MultiActionHandler.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  id: Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: Validate(Action, Person)
  nameWithType: MultiActionHandler.Validate(Action, Person)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nValidates this multi action handler and all of the <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> it hosts\nThis method should be called in <xref href=\"TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Validate(Action containingAction, Person person)
    parameters:
    - id: containingAction
      type: TinyLife.Actions.Action
      description: The action that contains this multi action handler.
    - id: person
      type: TinyLife.Objects.Person
      description: The person that is passed to the <code data-dev-comment-type="paramref" class="paramref">containingAction</code>&apos;s <xref href="TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)" data-throw-if-not-resolved="false"></xref> method.
    return:
      type: System.Boolean
      description: Whether this multi action handler is still valid.
    content.vb: Public Function Validate(containingAction As Action, person As Person) As Boolean
  overload: TinyLife.Actions.Handlers.MultiActionHandler.Validate*
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: MultiActionHandler.IsCompleted()
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 115
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nReturns a <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> that determines whether this multi action handler has completed.\nIf <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> is not (yet) initialized, <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref> is returned. Otherwise, the current action&apos;s <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref> result is returned.\nIf all <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> are completed, <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: This multi action handler&apos;s completion state
    content.vb: Public Function IsCompleted() As CompletionType
  overload: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted*
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Handlers.MultiActionHandler
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: MultiActionHandler.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/MultiActionHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Handlers/MultiActionHandler.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nCalls this underlying <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref>&apos; currently executing action&apos;s <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThis should be called for any completion type that the action that uses this underlying action experiences, even <xref href=\"TinyLife.Actions.CompletionType.Canceled\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the underlying <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler.Actions\" data-throw-if-not-resolved=\"false\"></xref> are null or already completed, this method has no effect.\n"
  example: []
  syntax:
    content: public bool OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion type
    return:
      type: System.Boolean
      description: Whether the completion type was consumed by this multi action handler
    content.vb: Public Function OnCompleted(type As CompletionType) As Boolean
  overload: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted*
references:
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: MultiActionHandler.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: MultiActionHandler.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
  name: Validate(Action, Person)
  nameWithType: MultiActionHandler.Validate(Action, Person)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action, TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate(TinyLife.Actions.Action,TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  name: OnCompleted(CompletionType)
  nameWithType: MultiActionHandler.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MultiActionHandler>(MultiActionHandler)
  nameWithType: Extensions.JsonCopy<MultiActionHandler>(MultiActionHandler)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Handlers.MultiActionHandler>(TinyLife.Actions.Handlers.MultiActionHandler)
  nameWithType.vb: Extensions.JsonCopy(Of MultiActionHandler)(MultiActionHandler)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Handlers.MultiActionHandler)(TinyLife.Actions.Handlers.MultiActionHandler)
  name.vb: JsonCopy(Of MultiActionHandler)(MultiActionHandler)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Handlers.MultiActionHandler)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Actions.Handlers.MultiActionHandler
    name: MultiActionHandler
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.Handlers.MultiActionHandler
    name: MultiActionHandler
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Handlers.MultiActionHandler)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Handlers.MultiActionHandler
    name: MultiActionHandler
  - name: )
  - name: (
  - uid: TinyLife.Actions.Handlers.MultiActionHandler
    name: MultiActionHandler
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  name: Actions
  nameWithType: MultiActionHandler.Actions
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Actions
- uid: System.Collections.Generic.Queue{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.Queue{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Queue`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  name: Queue<Action>
  nameWithType: Queue<Action>
  fullName: System.Collections.Generic.Queue<TinyLife.Actions.Action>
  nameWithType.vb: Queue(Of Action)
  fullName.vb: System.Collections.Generic.Queue(Of TinyLife.Actions.Action)
  name.vb: Queue(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: System.Collections.Generic.Queue`1
  commentId: T:System.Collections.Generic.Queue`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  nameWithType.vb: Queue(Of T)
  fullName.vb: System.Collections.Generic.Queue(Of T)
  name.vb: Queue(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Queue`1
    name: Queue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.queue-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Actions
  commentId: P:TinyLife.Actions.Handlers.MultiActionHandler.Actions
  name: Actions
  nameWithType: MultiActionHandler.Actions
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Actions
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Current*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Current
  name: Current
  nameWithType: MultiActionHandler.Current
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Current
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  parent: TinyLife.Actions.Handlers
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
- uid: TinyLife.Actions.Handlers.MultiActionHandler.#ctor*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.#ctor
  name: MultiActionHandler
  nameWithType: MultiActionHandler.MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.MultiActionHandler
  nameWithType.vb: MultiActionHandler.New
  fullName.vb: TinyLife.Actions.Handlers.MultiActionHandler.New
  name.vb: New
- uid: TinyLife.Actions.CompletionType.Failed
  commentId: F:TinyLife.Actions.CompletionType.Failed
  name: Failed
  nameWithType: CompletionType.Failed
  fullName: TinyLife.Actions.CompletionType.Failed
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  commentId: M:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  name: IsCompleted()
  nameWithType: MultiActionHandler.IsCompleted()
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  name: Completed
  nameWithType: CompletionType.Completed
  fullName: TinyLife.Actions.CompletionType.Completed
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Initialize*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Initialize
  name: Initialize
  nameWithType: MultiActionHandler.Initialize
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Initialize
- uid: System.Collections.Generic.ICollection{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.ICollection{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<Action>
  nameWithType: ICollection<Action>
  fullName: System.Collections.Generic.ICollection<TinyLife.Actions.Action>
  nameWithType.vb: ICollection(Of Action)
  fullName.vb: System.Collections.Generic.ICollection(Of TinyLife.Actions.Action)
  name.vb: ICollection(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Update*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Update
  name: Update
  nameWithType: MultiActionHandler.Update
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.Validate*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.Validate
  name: Validate
  nameWithType: MultiActionHandler.Validate
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.Validate
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  parent: TinyLife.Actions.Action
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
  name: IsCompleted
  nameWithType: MultiActionHandler.IsCompleted
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.IsCompleted
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.CompletionType.Canceled
  commentId: F:TinyLife.Actions.CompletionType.Canceled
  name: Canceled
  nameWithType: CompletionType.Canceled
  fullName: TinyLife.Actions.CompletionType.Canceled
- uid: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted
  name: OnCompleted
  nameWithType: MultiActionHandler.OnCompleted
  fullName: TinyLife.Actions.Handlers.MultiActionHandler.OnCompleted

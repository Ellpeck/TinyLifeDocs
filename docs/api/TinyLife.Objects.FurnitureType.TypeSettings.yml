### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.FurnitureType.TypeSettings
  commentId: T:TinyLife.Objects.FurnitureType.TypeSettings
  id: FurnitureType.TypeSettings
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.FurnitureType.TypeSettings.#ctor(System.String,Point,TinyLife.Objects.ObjectCategory,System.Single,TinyLife.Utilities.ColorScheme[])
  - TinyLife.Objects.FurnitureType.TypeSettings.ActionSpots
  - TinyLife.Objects.FurnitureType.TypeSettings.BrokenBehavior
  - TinyLife.Objects.FurnitureType.TypeSettings.BuyableVariations
  - TinyLife.Objects.FurnitureType.TypeSettings.CanExecuteAction
  - TinyLife.Objects.FurnitureType.TypeSettings.Categories
  - TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  - TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  - TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  - TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  - TinyLife.Objects.FurnitureType.TypeSettings.DefaultColors
  - TinyLife.Objects.FurnitureType.TypeSettings.DefaultRotation
  - TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  - TinyLife.Objects.FurnitureType.TypeSettings.DistanceFromObstructions
  - TinyLife.Objects.FurnitureType.TypeSettings.EfficiencyModifier
  - TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  - TinyLife.Objects.FurnitureType.TypeSettings.GetData``1(System.String)
  - TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys
  - TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  - TinyLife.Objects.FurnitureType.TypeSettings.HeldPivot
  - TinyLife.Objects.FurnitureType.TypeSettings.HeldScale
  - TinyLife.Objects.FurnitureType.TypeSettings.Icon
  - TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  - TinyLife.Objects.FurnitureType.TypeSettings.Name
  - TinyLife.Objects.FurnitureType.TypeSettings.ObjectSpots
  - TinyLife.Objects.FurnitureType.TypeSettings.Price
  - TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  - TinyLife.Objects.FurnitureType.TypeSettings.RestoreNeedModifier
  - TinyLife.Objects.FurnitureType.TypeSettings.SetData(System.String,System.Object)
  - TinyLife.Objects.FurnitureType.TypeSettings.Size
  - TinyLife.Objects.FurnitureType.TypeSettings.Tab
  - TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  - TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  - TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  langs:
  - csharp
  - vb
  name: FurnitureType.TypeSettings
  nameWithType: FurnitureType.TypeSettings
  fullName: TinyLife.Objects.FurnitureType.TypeSettings
  type: Struct
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TypeSettings
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 416
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of settings that define the properties of a <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public struct TypeSettings : IGenericDataHolder'
    content.vb: >-
      Public Structure TypeSettings
          Implements IGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.FurnitureType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Name
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Name
  id: Name
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FurnitureType.TypeSettings.Name
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Name
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 421
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe name of the furniture type. Should be unique across all game content, including all mods.\n"
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Size
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Size
  id: Size
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: FurnitureType.TypeSettings.Size
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Size
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Size
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 425
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe size, in full tiles, that this furniture should take up\n"
  example: []
  syntax:
    content: public Point Size
    return:
      type: Point
    content.vb: Public Size As Point
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Categories
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Categories
  id: Categories
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: FurnitureType.TypeSettings.Categories
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Categories
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Categories
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 429
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this furniture should have\n"
  example: []
  syntax:
    content: public ObjectCategory Categories
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Categories As ObjectCategory
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ActionSpots
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ActionSpots
  id: ActionSpots
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ActionSpots
  nameWithType: FurnitureType.TypeSettings.ActionSpots
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ActionSpots
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionSpots
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 434
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn array of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances that this furniture type should have.\nBy default, every tile that this furniture covers has an action spot reachable from all sides.\n"
  example: []
  syntax:
    content: public ActionSpot[] ActionSpots
    return:
      type: TinyLife.Objects.ActionSpot[]
    content.vb: Public ActionSpots As ActionSpot()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ObjectSpots
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ObjectSpots
  id: ObjectSpots
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ObjectSpots
  nameWithType: FurnitureType.TypeSettings.ObjectSpots
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ObjectSpots
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ObjectSpots
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 439
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn array of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances that this furniture type should have.\nBy default, there are no object spots.\n"
  example: []
  syntax:
    content: public ObjectSpot[] ObjectSpots
    return:
      type: TinyLife.Objects.ObjectSpot[]
    content.vb: Public ObjectSpots As ObjectSpot()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  id: ColorSchemes
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ColorSchemes
  nameWithType: FurnitureType.TypeSettings.ColorSchemes
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSchemes
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 444
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn array of color schemes that this furniture type should have.\nIf <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ColorMap\" data-throw-if-not-resolved=\"false\"></xref> is not set, its value is determined automatically by the amount of color schemes supplied.\n"
  example: []
  syntax:
    content: public ColorScheme[] ColorSchemes
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ColorSchemes As ColorScheme()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  id: ColorMap
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ColorMap
  nameWithType: FurnitureType.TypeSettings.ColorMap
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorMap
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 449
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn array of indices that determines which layers should use which color schemes.\nA furniture will always have the same amount of layers as there are color map entries.\n"
  example: []
  syntax:
    content: public int[] ColorMap
    return:
      type: System.Int32[]
    content.vb: Public ColorMap As Integer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DefaultColors
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DefaultColors
  id: DefaultColors
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: DefaultColors
  nameWithType: FurnitureType.TypeSettings.DefaultColors
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DefaultColors
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DefaultColors
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 454
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe default color selection for this furniture type.\nIf not specified, this defaults to the first entries in each of the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int[] DefaultColors
    return:
      type: System.Int32[]
    content.vb: Public DefaultColors As Integer()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DefaultRotation
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DefaultRotation
  id: DefaultRotation
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: DefaultRotation
  nameWithType: FurnitureType.TypeSettings.DefaultRotation
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DefaultRotation
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DefaultRotation
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 458
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe rotation that this furniture type should have when picked from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"MLEM.Misc.Direction2.Up\" data-throw-if-not-resolved=\"false\"></xref> by default.\n"
  example: []
  syntax:
    content: public Direction2 DefaultRotation
    return:
      type: MLEM.Misc.Direction2
    content.vb: Public DefaultRotation As Direction2
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  id: ConstructedType
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: FurnitureType.TypeSettings.ConstructedType
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedType
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 464
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA delegate to a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that is constructed when this furniture type is instantiated using <xref href=\"TinyLife.Objects.FurnitureType.Construct(System.Int32%5b%5d%2cTinyLife.World.Map%2cVector2%2cSystem.Nullable%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe type needs to have a constructor with the same signature as <xref href=\"TinyLife.Objects.Furniture.%23ctor(System.Guid%2cTinyLife.Objects.FurnitureType%2cSystem.Int32%5b%5d%2cTinyLife.World.Map%2cVector2)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this value is null, a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance will be constructed from this type if its <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Reliability\" data-throw-if-not-resolved=\"false\"></xref> is null, or a <xref href=\"TinyLife.Objects.BreakableFurniture\" data-throw-if-not-resolved=\"false\"></xref> instance if it is non-null.\n"
  example: []
  syntax:
    content: public Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ConstructedType As Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Price
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Price
  id: Price
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: FurnitureType.TypeSettings.Price
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Price
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 468
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe price that this furniture should have\n"
  example: []
  syntax:
    content: public float Price
    return:
      type: System.Single
    content.vb: Public Price As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.BuyableVariations
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.BuyableVariations
  id: BuyableVariations
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: BuyableVariations
  nameWithType: FurnitureType.TypeSettings.BuyableVariations
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.BuyableVariations
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BuyableVariations
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 474
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn array of actions that can modify the passed <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance to allow for multiple variations of it to be displayed as a group in the furniture tool similarly.\nThis is used, for example, for <xref href=\"TinyLife.Objects.FurnitureType.FoodPlate\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.CustomPainting\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is null or empty (the former of which it is by default), this furniture item will have no variations.\n"
  example: []
  syntax:
    content: public Action<Furniture>[] BuyableVariations
    return:
      type: System.Action{TinyLife.Objects.Furniture}[]
    content.vb: Public BuyableVariations As Action(Of Furniture)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.HeldScale
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.HeldScale
  id: HeldScale
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: HeldScale
  nameWithType: FurnitureType.TypeSettings.HeldScale
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.HeldScale
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HeldScale
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 478
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe scale that this furniture should be drawn with when held by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public float HeldScale
    return:
      type: System.Single
    content.vb: Public HeldScale As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.HeldPivot
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.HeldPivot
  id: HeldPivot
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: HeldPivot
  nameWithType: FurnitureType.TypeSettings.HeldPivot
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.HeldPivot
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HeldPivot
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 483
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether, when this object is held by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, its textures should maintain their defined pivot points.\nIf this value is false, the item is centered, meaning that its center is in the person&apos;s hand.\n"
  example: []
  syntax:
    content: public bool HeldPivot
    return:
      type: System.Boolean
    content.vb: Public HeldPivot As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  id: DecorativeRating
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: DecorativeRating
  nameWithType: FurnitureType.TypeSettings.DecorativeRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DecorativeRating
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 490
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that returns an integer for a given <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance of this type.\nThe integer represents the decoration (or prettiness) rating of the object. The rating determines some <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> values.\nA negative return value makes the object be perceived as ugly, whereas a positive rating makes the object be perceived as pretty.\nBy default, this function returns 0.\n"
  example: []
  syntax:
    content: public Func<Furniture, int> DecorativeRating
    return:
      type: System.Func{TinyLife.Objects.Furniture,System.Int32}
    content.vb: Public DecorativeRating As Func(Of Furniture, Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Icon
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Icon
  id: Icon
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: FurnitureType.TypeSettings.Icon
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Icon
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 495
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe build mode icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.\n"
  example: []
  syntax:
    content: public TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Icon As TextureRegion
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  id: Reliability
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Reliability
  nameWithType: FurnitureType.TypeSettings.Reliability
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Reliability
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 501
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe reliability of this furniture item, which should be a value between 1 and 10.\nThis value defaults to null, menaing this object is non-breakable.\nNote that, if this value is non-null, <xref href=\"TinyLife.Objects.FurnitureType.Construct(System.Int32%5b%5d%2cTinyLife.World.Map%2cVector2%2cSystem.Nullable%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref> will construct a <xref href=\"TinyLife.Objects.BreakableFurniture\" data-throw-if-not-resolved=\"false\"></xref> by default.\n"
  example: []
  syntax:
    content: public int? Reliability
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Reliability As Integer?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.BrokenBehavior
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.BrokenBehavior
  id: BrokenBehavior
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: BrokenBehavior
  nameWithType: FurnitureType.TypeSettings.BrokenBehavior
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.BrokenBehavior
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BrokenBehavior
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 506
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of <xref href=\"TinyLife.Objects.BreakableFurniture.BrokenBehavior\" data-throw-if-not-resolved=\"false\"></xref> that this object should have if it is broken.\nThis is only relevant if <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Reliability\" data-throw-if-not-resolved=\"false\"></xref> is non-null.\n"
  example: []
  syntax:
    content: public BreakableFurniture.BrokenBehavior BrokenBehavior
    return:
      type: TinyLife.Objects.BreakableFurniture.BrokenBehavior
    content.vb: Public BrokenBehavior As BreakableFurniture.BrokenBehavior
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  id: ElectricityRating
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: ElectricityRating
  nameWithType: FurnitureType.TypeSettings.ElectricityRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ElectricityRating
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 511
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis object&apos;s electricity rating. A higher electricity rating means the bills for the lot this object is on will be higher.\nThe electricity rating is also displayed in the furniture tool menu.\n"
  example: []
  syntax:
    content: public float ElectricityRating
    return:
      type: System.Single
    content.vb: Public ElectricityRating As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  id: WaterRating
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: WaterRating
  nameWithType: FurnitureType.TypeSettings.WaterRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WaterRating
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 516
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis object&apos;s water consumption rating. A higher water consumption rating means the bills for the lot this object is on will be higher.\nThe water consumption rating is also displayed in the furniture tool menu.\n"
  example: []
  syntax:
    content: public float WaterRating
    return:
      type: System.Single
    content.vb: Public WaterRating As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.EfficiencyModifier
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.EfficiencyModifier
  id: EfficiencyModifier
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: EfficiencyModifier
  nameWithType: FurnitureType.TypeSettings.EfficiencyModifier
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.EfficiencyModifier
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EfficiencyModifier
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 521
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis object&apos;s efficiency modifier, which is multiplied with a person&apos;s efficiency if this object is an involved object in a person&apos;s current action.\nThis value is used in <xref href=\"TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float EfficiencyModifier
    return:
      type: System.Single
    content.vb: Public EfficiencyModifier As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.RestoreNeedModifier
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.RestoreNeedModifier
  id: RestoreNeedModifier
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: RestoreNeedModifier
  nameWithType: FurnitureType.TypeSettings.RestoreNeedModifier
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.RestoreNeedModifier
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RestoreNeedModifier
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 526
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis object&apos;s need restoration modifier, which is multiplied with a person&apos;s need restoration speed if this object is an involved object in a person&apos;s current action.\nThis value is used in <xref href=\"TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cTinyLife.NeedType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float RestoreNeedModifier
    return:
      type: System.Single
    content.vb: Public RestoreNeedModifier As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  id: Visibility
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Visibility
  nameWithType: FurnitureType.TypeSettings.Visibility
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Visibility
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 532
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe visibility settings for this furniture type.\nThe visibility determines whether this object gets culled if the camera is far away, etc.\nThis value defaults to <xref href=\"TinyLife.Objects.Visibility.WhenVisible\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Visibility Visibility
    return:
      type: TinyLife.Objects.Visibility
    content.vb: Public Visibility As Visibility
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Tab
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Tab
  id: Tab
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: Tab
  nameWithType: FurnitureType.TypeSettings.Tab
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Tab
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tab
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 537
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> tab that this object should display in.\nThis value defaults to the tab returned by <xref href=\"TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public FurnitureTool.Tab Tab
    return:
      type: TinyLife.Tools.FurnitureTool.Tab
    content.vb: Public Tab As FurnitureTool.Tab
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  id: TextureName
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: TextureName
  nameWithType: FurnitureType.TypeSettings.TextureName
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TextureName
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 542
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe name of the base texture that this furniture type should use.\nIf this is not explicitly set, it defaults to this furniture type&apos;s <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string TextureName
    return:
      type: System.String
    content.vb: Public TextureName As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  id: LightSettings
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: LightSettings
  nameWithType: FurnitureType.TypeSettings.LightSettings
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LightSettings
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 547
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe light settings for an instance of this furniture type.\nNote that, if this value is set, <xref href=\"TinyLife.Objects.FurnitureType.Construct(System.Int32%5b%5d%2cTinyLife.World.Map%2cVector2%2cSystem.Nullable%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref> will automatically construct an instance of <xref href=\"TinyLife.Objects.LightFurniture\" data-throw-if-not-resolved=\"false\"></xref>, and any custom <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType\" data-throw-if-not-resolved=\"false\"></xref> should extend <xref href=\"TinyLife.Objects.LightFurniture\" data-throw-if-not-resolved=\"false\"></xref> as well.\n"
  example: []
  syntax:
    content: public LightFurniture.Settings LightSettings
    return:
      type: TinyLife.Objects.LightFurniture.Settings
    content.vb: Public LightSettings As LightFurniture.Settings
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  id: DirtyOverlayTextureName
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: DirtyOverlayTextureName
  nameWithType: FurnitureType.TypeSettings.DirtyOverlayTextureName
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DirtyOverlayTextureName
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 554
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe name of an overlay texture that should be drawn on top of this object if it is <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>.\nGiving this field a value will automatically allow the object to get dirty after a while of being used.\nThe textures loaded through this texture name act similarly to the ones loaded through <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.TextureName\" data-throw-if-not-resolved=\"false\"></xref>, in that they adhere to the object&apos;s possible rotations, and have the same amount of layers as <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ColorMap\" data-throw-if-not-resolved=\"false\"></xref> has entries.\nBy default, the texture to use is &quot;approximated&quot; using <xref href=\"TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string DirtyOverlayTextureName
    return:
      type: System.String
    content.vb: Public DirtyOverlayTextureName As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DistanceFromObstructions
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DistanceFromObstructions
  id: DistanceFromObstructions
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: DistanceFromObstructions
  nameWithType: FurnitureType.TypeSettings.DistanceFromObstructions
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DistanceFromObstructions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DistanceFromObstructions
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 560
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA minimum distance from obstructions (walls and roofs) that this object has to have to be placed.\nThis value is used in <xref href=\"TinyLife.Objects.FurnitureType.GetWallsInTheWay(TinyLife.World.Map%2cVector2%2cMLEM.Misc.Direction2%2cSystem.Collections.Generic.ICollection%7bTinyLife.World.Wall%7d)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.GetRoofingInTheWay(TinyLife.World.Map%2cVector2%2cMLEM.Misc.Direction2%2cSystem.Collections.Generic.ICollection%7bTinyLife.World.Roof%7d)\" data-throw-if-not-resolved=\"false\"></xref> by inflating the object&apos;s <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Size\" data-throw-if-not-resolved=\"false\"></xref>.\nThis value defaults to 0, and it is used by objects like trees.\n"
  example: []
  syntax:
    content: public int DistanceFromObstructions
    return:
      type: System.Int32
    content.vb: Public DistanceFromObstructions As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDisplayName
  nameWithType: FurnitureType.TypeSettings.GetDisplayName
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayName
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 565
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that is used in <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName\" data-throw-if-not-resolved=\"false\"></xref> to determine the display name that this furniture type&apos;s instances should have.\nNote that, when this function is invoked, the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance passed may be null.\n"
  example: []
  syntax:
    content: public Func<string, Furniture, string> GetDisplayName
    return:
      type: System.Func{System.String,TinyLife.Objects.Furniture,System.String}
    content.vb: Public GetDisplayName As Func(Of String, Furniture, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.CanExecuteAction
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.CanExecuteAction
  id: CanExecuteAction
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: CanExecuteAction
  nameWithType: FurnitureType.TypeSettings.CanExecuteAction
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.CanExecuteAction
  type: Field
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteAction
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 570
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that can be used to allow or disallow certain <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> instances to execute or not.\nBy default, this function is null, meaning no special conditions are created by this <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref>, and all actions that themselves are valid can be executed on this furniture item.\n"
  example: []
  syntax:
    content: public Func<(ActionType Type, ActionInfo Info, bool Automatic, bool IsAuxiliary), CanExecuteResult> CanExecuteAction
    return:
      type: System.Func{System.ValueTuple{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean},TinyLife.Actions.CanExecuteResult}
    content.vb: Public CanExecuteAction As Func(Of(Type As ActionType, Info As ActionInfo, Automatic As Boolean, IsAuxiliary As Boolean)(Of ActionType , ActionInfo, Boolean, Boolean), CanExecuteResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.#ctor(System.String,Point,TinyLife.Objects.ObjectCategory,System.Single,TinyLife.Utilities.ColorScheme[])
  commentId: M:TinyLife.Objects.FurnitureType.TypeSettings.#ctor(System.String,Point,TinyLife.Objects.ObjectCategory,System.Single,TinyLife.Utilities.ColorScheme[])
  id: '#ctor(System.String,Point,TinyLife.Objects.ObjectCategory,System.Single,TinyLife.Utilities.ColorScheme[])'
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: TypeSettings(String, Point, ObjectCategory, Single, ColorScheme[])
  nameWithType: FurnitureType.TypeSettings.TypeSettings(String, Point, ObjectCategory, Single, ColorScheme[])
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.TypeSettings(System.String, Point, TinyLife.Objects.ObjectCategory, System.Single, TinyLife.Utilities.ColorScheme[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 582
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nInitializes a new <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings\" data-throw-if-not-resolved=\"false\"></xref> instance with the given data\n"
  example: []
  syntax:
    content: public TypeSettings(string name, Point size, ObjectCategory categories, float price, params ColorScheme[] colorSchemes)
    parameters:
    - id: name
      type: System.String
      description: The name that this furniture type should have
    - id: size
      type: Point
      description: The size that this furniture type should have
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that this furniture type should have
    - id: price
      type: System.Single
      description: The price of this furniture type
    - id: colorSchemes
      type: TinyLife.Utilities.ColorScheme[]
      description: The color schemes that this furniture type should have. Cannot be empty.
    content.vb: Public Sub New(name As String, size As Point, categories As ObjectCategory, price As Single, ParamArray colorSchemes As ColorScheme())
  overload: TinyLife.Objects.FurnitureType.TypeSettings.#ctor*
  nameWithType.vb: FurnitureType.TypeSettings.TypeSettings(String, Point, ObjectCategory, Single, ColorScheme())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.FurnitureType.TypeSettings.TypeSettings(System.String, Point, TinyLife.Objects.ObjectCategory, System.Single, TinyLife.Utilities.ColorScheme())
  name.vb: TypeSettings(String, Point, ObjectCategory, Single, ColorScheme())
- uid: TinyLife.Objects.FurnitureType.TypeSettings.SetData(System.String,System.Object)
  commentId: M:TinyLife.Objects.FurnitureType.TypeSettings.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: SetData(String, Object)
  nameWithType: FurnitureType.TypeSettings.SetData(String, Object)
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.SetData(System.String, System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetData
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 604
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: public void SetData(string key, object data)
    parameters:
    - id: key
      type: System.String
    - id: data
      type: System.Object
    content.vb: Public Sub SetData(key As String, data As Object)
  overload: TinyLife.Objects.FurnitureType.TypeSettings.SetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetData``1(System.String)
  commentId: M:TinyLife.Objects.FurnitureType.TypeSettings.GetData``1(System.String)
  id: GetData``1(System.String)
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetData<T>(String)
  nameWithType: FurnitureType.TypeSettings.GetData<T>(String)
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.GetData<T>(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetData
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 610
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: public T GetData<T>(string key)
    parameters:
    - id: key
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetData(Of T)(key As String) As T
  overload: TinyLife.Objects.FurnitureType.TypeSettings.GetData*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  nameWithType.vb: FurnitureType.TypeSettings.GetData(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.FurnitureType.TypeSettings.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys
  commentId: M:TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys
  id: GetDataKeys
  parent: TinyLife.Objects.FurnitureType.TypeSettings
  langs:
  - csharp
  - vb
  name: GetDataKeys()
  nameWithType: FurnitureType.TypeSettings.GetDataKeys()
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/FurnitureType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDataKeys
    path: ../TinyLife/Objects/FurnitureType.cs
    startLine: 615
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: public IReadOnlyCollection<string> GetDataKeys()
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.String}
    content.vb: Public Function GetDataKeys As IReadOnlyCollection(Of String)
  overload: TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys*
  implements:
  - MLEM.Misc.IGenericDataHolder.GetDataKeys
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.FurnitureType.TypeSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<FurnitureType.TypeSettings>()
  nameWithType: Extensions.JsonCopy<FurnitureType.TypeSettings>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.FurnitureType.TypeSettings>()
  nameWithType.vb: Extensions.JsonCopy(Of FurnitureType.TypeSettings)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.FurnitureType.TypeSettings)()
  name.vb: JsonCopy(Of FurnitureType.TypeSettings)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<FurnitureType.TypeSettings>
    nameWithType: Extensions.JsonCopy<FurnitureType.TypeSettings>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.FurnitureType.TypeSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of FurnitureType.TypeSettings)
    nameWithType: Extensions.JsonCopy(Of FurnitureType.TypeSettings)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.FurnitureType.TypeSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Point
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Point
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.ActionSpot[]
  isExternal: true
  name: ActionSpot[]
  nameWithType: ActionSpot[]
  fullName: TinyLife.Objects.ActionSpot[]
  nameWithType.vb: ActionSpot()
  fullName.vb: TinyLife.Objects.ActionSpot()
  name.vb: ActionSpot()
  spec.csharp:
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.ObjectSpot[]
  isExternal: true
  name: ObjectSpot[]
  nameWithType: ObjectSpot[]
  fullName: TinyLife.Objects.ObjectSpot[]
  nameWithType.vb: ObjectSpot()
  fullName.vb: TinyLife.Objects.ObjectSpot()
  name.vb: ObjectSpot()
  spec.csharp:
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorMap
  isExternal: true
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  isExternal: true
- uid: TinyLife.Tools.FurnitureTool
  commentId: T:TinyLife.Tools.FurnitureTool
  name: FurnitureTool
  nameWithType: FurnitureTool
  fullName: TinyLife.Tools.FurnitureTool
- uid: MLEM.Misc.Direction2.Up
  commentId: F:MLEM.Misc.Direction2.Up
  isExternal: true
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Objects.FurnitureType.Construct(System.Int32[],TinyLife.World.Map,Vector2,System.Nullable{System.Guid})
  commentId: M:TinyLife.Objects.FurnitureType.Construct(System.Int32[],TinyLife.World.Map,Vector2,System.Nullable{System.Guid})
  isExternal: true
- uid: TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Vector2)
  commentId: M:TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Vector2)
  isExternal: true
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Reliability
  isExternal: true
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.FurnitureType.FoodPlate
  commentId: F:TinyLife.Objects.FurnitureType.FoodPlate
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.CustomPainting
  commentId: F:TinyLife.Objects.FurnitureType.CustomPainting
  isExternal: true
- uid: System.Action{TinyLife.Objects.Furniture}[]
  isExternal: true
  name: Action<Furniture>[]
  nameWithType: Action<Furniture>[]
  fullName: System.Action<TinyLife.Objects.Furniture>[]
  nameWithType.vb: Action(Of Furniture)()
  fullName.vb: System.Action(Of TinyLife.Objects.Furniture)()
  name.vb: Action(Of Furniture)()
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Emotions.EmotionModifier
  commentId: T:TinyLife.Emotions.EmotionModifier
  parent: TinyLife.Emotions
  name: EmotionModifier
  nameWithType: EmotionModifier
  fullName: TinyLife.Emotions.EmotionModifier
- uid: System.Func{TinyLife.Objects.Furniture,System.Int32}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<Furniture, Int32>
  nameWithType: Func<Furniture, Int32>
  fullName: System.Func<TinyLife.Objects.Furniture, System.Int32>
  nameWithType.vb: Func(Of Furniture, Int32)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, System.Int32)
  name.vb: Func(Of Furniture, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.BreakableFurniture.BrokenBehavior
  commentId: T:TinyLife.Objects.BreakableFurniture.BrokenBehavior
  parent: TinyLife.Objects
  name: BreakableFurniture.BrokenBehavior
  nameWithType: BreakableFurniture.BrokenBehavior
  fullName: TinyLife.Objects.BreakableFurniture.BrokenBehavior
- uid: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  nameWithType: Furniture.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Skills.SkillType, System.Single)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: Furniture.GetEfficiencyModifier
    fullName: TinyLife.Objects.Furniture.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: Furniture.GetEfficiencyModifier
    fullName: TinyLife.Objects.Furniture.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  nameWithType: Furniture.GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  fullName: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.NeedType)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
    nameWithType: Furniture.GetRestoreNeedModifier
    fullName: TinyLife.Objects.Furniture.GetRestoreNeedModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
    nameWithType: Furniture.GetRestoreNeedModifier
    fullName: TinyLife.Objects.Furniture.GetRestoreNeedModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Visibility.WhenVisible
  commentId: F:TinyLife.Objects.Visibility.WhenVisible
  isExternal: true
- uid: TinyLife.Objects.Visibility
  commentId: T:TinyLife.Objects.Visibility
  parent: TinyLife.Objects
  name: Visibility
  nameWithType: Visibility
  fullName: TinyLife.Objects.Visibility
- uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
    name: GetDefaultTab
    nameWithType: Extensions.GetDefaultTab
    fullName: TinyLife.Utilities.Extensions.GetDefaultTab
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.FurnitureTool.Tab
  commentId: T:TinyLife.Tools.FurnitureTool.Tab
  parent: TinyLife.Tools
  name: FurnitureTool.Tab
  nameWithType: FurnitureTool.Tab
  fullName: TinyLife.Tools.FurnitureTool.Tab
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Name
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Name
  isExternal: true
- uid: TinyLife.Objects.LightFurniture
  commentId: T:TinyLife.Objects.LightFurniture
  parent: TinyLife.Objects
  name: LightFurniture
  nameWithType: LightFurniture
  fullName: TinyLife.Objects.LightFurniture
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ConstructedType
  isExternal: true
- uid: TinyLife.Objects.LightFurniture.Settings
  commentId: T:TinyLife.Objects.LightFurniture.Settings
  parent: TinyLife.Objects
  name: LightFurniture.Settings
  nameWithType: LightFurniture.Settings
  fullName: TinyLife.Objects.LightFurniture.Settings
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  parent: TinyLife.Objects.Furniture
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
- uid: TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.TextureName
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
    name: GetDefaultDirtyOverlayTextureName
    nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
    fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.FurnitureType.GetWallsInTheWay(TinyLife.World.Map,Vector2,MLEM.Misc.Direction2,System.Collections.Generic.ICollection{TinyLife.World.Wall})
  commentId: M:TinyLife.Objects.FurnitureType.GetWallsInTheWay(TinyLife.World.Map,Vector2,MLEM.Misc.Direction2,System.Collections.Generic.ICollection{TinyLife.World.Wall})
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.GetRoofingInTheWay(TinyLife.World.Map,Vector2,MLEM.Misc.Direction2,System.Collections.Generic.ICollection{TinyLife.World.Roof})
  commentId: M:TinyLife.Objects.FurnitureType.GetRoofingInTheWay(TinyLife.World.Map,Vector2,MLEM.Misc.Direction2,System.Collections.Generic.ICollection{TinyLife.World.Roof})
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Size
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Size
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.GetDisplayName
  isExternal: true
- uid: System.Func{System.String,TinyLife.Objects.Furniture,System.String}
  commentId: T:System.Func{System.String,TinyLife.Objects.Furniture,System.String}
  parent: System
  definition: System.Func`3
  name: Func<String, Furniture, String>
  nameWithType: Func<String, Furniture, String>
  fullName: System.Func<System.String, TinyLife.Objects.Furniture, System.String>
  nameWithType.vb: Func(Of String, Furniture, String)
  fullName.vb: System.Func(Of System.String, TinyLife.Objects.Furniture, System.String)
  name.vb: Func(Of String, Furniture, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: System.Func{System.ValueTuple{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean},TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean},TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2, T3, T4)<ActionType, ActionInfo, Boolean, Boolean>, CanExecuteResult>
  nameWithType: Func<(T1, T2, T3, T4)<ActionType, ActionInfo, Boolean, Boolean>, CanExecuteResult>
  fullName: System.Func<System.ValueTuple<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean>, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of (T1, T2, T3, T4)(Of ActionType, ActionInfo, Boolean, Boolean), CanExecuteResult)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean), TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of (T1, T2, T3, T4)(Of ActionType, ActionInfo, Boolean, Boolean), CanExecuteResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Objects.FurnitureType.TypeSettings
  commentId: T:TinyLife.Objects.FurnitureType.TypeSettings
  parent: TinyLife.Objects
  name: FurnitureType.TypeSettings
  nameWithType: FurnitureType.TypeSettings
  fullName: TinyLife.Objects.FurnitureType.TypeSettings
- uid: TinyLife.Objects.FurnitureType.TypeSettings.#ctor*
  commentId: Overload:TinyLife.Objects.FurnitureType.TypeSettings.#ctor
  name: TypeSettings
  nameWithType: FurnitureType.TypeSettings.TypeSettings
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.TypeSettings
- uid: TinyLife.Objects.FurnitureType.TypeSettings.SetData*
  commentId: Overload:TinyLife.Objects.FurnitureType.TypeSettings.SetData
  name: SetData
  nameWithType: FurnitureType.TypeSettings.SetData
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.SetData
- uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: IGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.IGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: IGenericDataHolder.SetData
    fullName: MLEM.Misc.IGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: IGenericDataHolder.SetData
    fullName: MLEM.Misc.IGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetData*
  commentId: Overload:TinyLife.Objects.FurnitureType.TypeSettings.GetData
  name: GetData
  nameWithType: FurnitureType.TypeSettings.GetData
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.GetData
- uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: IGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.IGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: IGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.IGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: IGenericDataHolder.GetData<T>
    fullName: MLEM.Misc.IGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: IGenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.IGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys*
  commentId: Overload:TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys
  name: GetDataKeys
  nameWithType: FurnitureType.TypeSettings.GetDataKeys
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.GetDataKeys
- uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.IGenericDataHolder.GetDataKeys
  parent: MLEM.Misc.IGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: IGenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: IGenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.IGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: IGenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.IGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

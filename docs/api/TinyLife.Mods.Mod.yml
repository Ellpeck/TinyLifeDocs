### YamlMime:ManagedReference
items:
- uid: TinyLife.Mods.Mod
  commentId: T:TinyLife.Mods.Mod
  id: Mod
  parent: TinyLife.Mods
  children:
  - TinyLife.Mods.Mod.AddGameContent(TinyLife.GameImpl,TinyLife.Mods.ModInfo)
  - TinyLife.Mods.Mod.Description
  - TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  - TinyLife.Mods.Mod.Icon
  - TinyLife.Mods.Mod.Initialize(ExtremelySimpleLogger.Logger,MLEM.Data.Content.RawContentManager,MLEM.Data.RuntimeTexturePacker,TinyLife.Mods.ModInfo)
  - TinyLife.Mods.Mod.Name
  langs:
  - csharp
  - vb
  name: Mod
  nameWithType: Mod
  fullName: TinyLife.Mods.Mod
  type: Class
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Mod
    path: ../TinyLife/Mods/Mod.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe base class for all Tiny Life mods.\nFor an example mod, see https://github.com/Ellpeck/TinyLifeExampleMod.\nMods are uniquely identified by their ID. The id is the name of the class that extends <xref href=\"TinyLife.Mods.Mod\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class Mod
    content.vb: Public MustInherit Class Mod
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Mods.Mod.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Mods.Mod.Name
  commentId: P:TinyLife.Mods.Mod.Name
  id: Name
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Mod.Name
  fullName: TinyLife.Mods.Mod.Name
  type: Property
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Mods/Mod.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe display name of this mod, which will be visible in the options menu\n"
  example: []
  syntax:
    content: public abstract string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property Name As String
  overload: TinyLife.Mods.Mod.Name*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: TinyLife.Mods.Mod.Description
  commentId: P:TinyLife.Mods.Mod.Description
  id: Description
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Mod.Description
  fullName: TinyLife.Mods.Mod.Description
  type: Property
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Description
    path: ../TinyLife/Mods/Mod.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe description of this mod, which will be visible in the options menu.\nTo localize the description, use <xref href=\"TinyLife.Localization\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property Description As String
  overload: TinyLife.Mods.Mod.Description*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: TinyLife.Mods.Mod.Icon
  commentId: P:TinyLife.Mods.Mod.Icon
  id: Icon
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Mod.Icon
  fullName: TinyLife.Mods.Mod.Icon
  type: Property
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Mods/Mod.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nThe icon texture region of this mod, which will be visible in the options menu\n"
  example: []
  syntax:
    content: public virtual TextureRegion Icon { get; }
    parameters: []
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Overridable ReadOnly Property Icon As TextureRegion
  overload: TinyLife.Mods.Mod.Icon*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: TinyLife.Mods.Mod.Initialize(ExtremelySimpleLogger.Logger,MLEM.Data.Content.RawContentManager,MLEM.Data.RuntimeTexturePacker,TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.Initialize(ExtremelySimpleLogger.Logger,MLEM.Data.Content.RawContentManager,MLEM.Data.RuntimeTexturePacker,TinyLife.Mods.ModInfo)
  id: Initialize(ExtremelySimpleLogger.Logger,MLEM.Data.Content.RawContentManager,MLEM.Data.RuntimeTexturePacker,TinyLife.Mods.ModInfo)
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: Initialize(Logger, RawContentManager, RuntimeTexturePacker, ModInfo)
  nameWithType: Mod.Initialize(Logger, RawContentManager, RuntimeTexturePacker, ModInfo)
  fullName: TinyLife.Mods.Mod.Initialize(ExtremelySimpleLogger.Logger, MLEM.Data.Content.RawContentManager, MLEM.Data.RuntimeTexturePacker, TinyLife.Mods.ModInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Mods/Mod.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nInitialize the data for this mod, including textures, sounds and other data.\nThe <xref href=\"MLEM.Data.Content.RawContentManager\" data-throw-if-not-resolved=\"false\"></xref> is a variation of MonoGame&apos;s <xref href=\"Microsoft.Xna.Framework.Content.ContentManager\" data-throw-if-not-resolved=\"false\"></xref> and should be used to load mod content.\n"
  example: []
  syntax:
    content: public abstract void Initialize(Logger logger, RawContentManager content, RuntimeTexturePacker texturePacker, ModInfo info)
    parameters:
    - id: logger
      type: ExtremelySimpleLogger.Logger
      description: The logger that can be used to write info about this mod to the console
    - id: content
      type: MLEM.Data.Content.RawContentManager
      description: The content manager for this mod
    - id: texturePacker
      type: MLEM.Data.RuntimeTexturePacker
      description: The texture packer that packs added textures into one big texture
    - id: info
      type: TinyLife.Mods.ModInfo
      description: The <xref href="TinyLife.Mods.ModInfo" data-throw-if-not-resolved="false"></xref> of this mod.
    content.vb: Public MustOverride Sub Initialize(logger As Logger, content As RawContentManager, texturePacker As RuntimeTexturePacker, info As ModInfo)
  overload: TinyLife.Mods.Mod.Initialize*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: TinyLife.Mods.Mod.AddGameContent(TinyLife.GameImpl,TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.AddGameContent(TinyLife.GameImpl,TinyLife.Mods.ModInfo)
  id: AddGameContent(TinyLife.GameImpl,TinyLife.Mods.ModInfo)
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: AddGameContent(GameImpl, ModInfo)
  nameWithType: Mod.AddGameContent(GameImpl, ModInfo)
  fullName: TinyLife.Mods.Mod.AddGameContent(TinyLife.GameImpl, TinyLife.Mods.ModInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddGameContent
    path: ../TinyLife/Mods/Mod.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nAdd the content that this mod provides for the given <xref href=\"TinyLife.GameImpl\" data-throw-if-not-resolved=\"false\"></xref> instance. Some of the supported things to register are:\n<xref href=\"TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref> to register furniture types,\n<xref href=\"TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref> to register action types,\n<xref href=\"TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)\" data-throw-if-not-resolved=\"false\"></xref> to register clothes (and hair),\n<xref href=\"TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)\" data-throw-if-not-resolved=\"false\"></xref> to register skills,\n<xref href=\"TinyLife.World.Wallpaper.Register(System.String%2cSystem.Int32%2cMLEM.Textures.UniformTextureAtlas%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%5b%5d%2cMLEM.Textures.TextureRegion%2cSystem.Int32%5b%5d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref> to register wallpapers,\n<xref href=\"TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cMLEM.Textures.TextureRegion%2cTinyLife.Utilities.ColorScheme%5b%5d%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Misc.Direction2%2cMLEM.Textures.TextureRegion%7d%2cSystem.Int32%5b%5d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref> to register tiles.\nNote that there are a lot of additional things that can be registered in this method.\n"
  example: []
  syntax:
    content: public abstract void AddGameContent(GameImpl game, ModInfo info)
    parameters:
    - id: game
      type: TinyLife.GameImpl
      description: The game instance.
    - id: info
      type: TinyLife.Mods.ModInfo
      description: The <xref href="TinyLife.Mods.ModInfo" data-throw-if-not-resolved="false"></xref> of this mod.
    content.vb: Public MustOverride Sub AddGameContent(game As GameImpl, info As ModInfo)
  overload: TinyLife.Mods.Mod.AddGameContent*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  id: GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  parent: TinyLife.Mods.Mod
  langs:
  - csharp
  - vb
  name: GetCustomFurnitureTextures(ModInfo)
  nameWithType: Mod.GetCustomFurnitureTextures(ModInfo)
  fullName: TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Mods/Mod.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCustomFurnitureTextures
    path: ../TinyLife/Mods/Mod.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nReturn a list of paths (relative to this mod&apos;s Content directory) to textures that contain the texture regions used by this mod&apos;s custom <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref>s.\nNote that the furniture texture needs to have an associated <xref href=\"MLEM.Data.DataTextureAtlas\" data-throw-if-not-resolved=\"false\"></xref> file in the same location, but with the .atlas file extension.\nBy default, an empty <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<string> GetCustomFurnitureTextures(ModInfo info)
    parameters:
    - id: info
      type: TinyLife.Mods.ModInfo
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The custom data texture atlases for this mod&apos;s furniture
    content.vb: Public Overridable Function GetCustomFurnitureTextures(info As ModInfo) As IEnumerable(Of String)
  overload: TinyLife.Mods.Mod.GetCustomFurnitureTextures*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Mods.Mod
  commentId: T:TinyLife.Mods.Mod
  parent: TinyLife.Mods
  name: Mod
  nameWithType: Mod
  fullName: TinyLife.Mods.Mod
- uid: TinyLife.Mods
  commentId: N:TinyLife.Mods
  name: TinyLife.Mods
  nameWithType: TinyLife.Mods
  fullName: TinyLife.Mods
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Mods.Mod.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Mod>()
  nameWithType: Extensions.JsonCopy<Mod>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.Mod>()
  nameWithType.vb: Extensions.JsonCopy(Of Mod)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.Mod)()
  name.vb: JsonCopy(Of Mod)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Mod>
    nameWithType: Extensions.JsonCopy<Mod>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.Mod>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Mod)
    nameWithType: Extensions.JsonCopy(Of Mod)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.Mod)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Mods.Mod.Name*
  commentId: Overload:TinyLife.Mods.Mod.Name
  name: Name
  nameWithType: Mod.Name
  fullName: TinyLife.Mods.Mod.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Localization
  commentId: T:TinyLife.Localization
  name: Localization
  nameWithType: Localization
  fullName: TinyLife.Localization
- uid: TinyLife.Mods.Mod.Description*
  commentId: Overload:TinyLife.Mods.Mod.Description
  name: Description
  nameWithType: Mod.Description
  fullName: TinyLife.Mods.Mod.Description
- uid: TinyLife.Mods.Mod.Icon*
  commentId: Overload:TinyLife.Mods.Mod.Icon
  name: Icon
  nameWithType: Mod.Icon
  fullName: TinyLife.Mods.Mod.Icon
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: MLEM.Data.Content.RawContentManager
  commentId: T:MLEM.Data.Content.RawContentManager
  parent: MLEM.Data.Content
  isExternal: true
  name: RawContentManager
  nameWithType: RawContentManager
  fullName: MLEM.Data.Content.RawContentManager
- uid: Microsoft.Xna.Framework.Content.ContentManager
  commentId: T:Microsoft.Xna.Framework.Content.ContentManager
  isExternal: true
- uid: TinyLife.Mods.ModInfo
  commentId: T:TinyLife.Mods.ModInfo
  parent: TinyLife.Mods
  name: ModInfo
  nameWithType: ModInfo
  fullName: TinyLife.Mods.ModInfo
- uid: TinyLife.Mods.Mod.Initialize*
  commentId: Overload:TinyLife.Mods.Mod.Initialize
  name: Initialize
  nameWithType: Mod.Initialize
  fullName: TinyLife.Mods.Mod.Initialize
- uid: ExtremelySimpleLogger.Logger
  commentId: T:ExtremelySimpleLogger.Logger
  parent: ExtremelySimpleLogger
  isExternal: true
  name: Logger
  nameWithType: Logger
  fullName: ExtremelySimpleLogger.Logger
- uid: MLEM.Data.RuntimeTexturePacker
  commentId: T:MLEM.Data.RuntimeTexturePacker
  parent: MLEM.Data
  isExternal: true
  name: RuntimeTexturePacker
  nameWithType: RuntimeTexturePacker
  fullName: MLEM.Data.RuntimeTexturePacker
- uid: MLEM.Data.Content
  commentId: N:MLEM.Data.Content
  isExternal: true
  name: MLEM.Data.Content
  nameWithType: MLEM.Data.Content
  fullName: MLEM.Data.Content
- uid: ExtremelySimpleLogger
  commentId: N:ExtremelySimpleLogger
  isExternal: true
  name: ExtremelySimpleLogger
  nameWithType: ExtremelySimpleLogger
  fullName: ExtremelySimpleLogger
- uid: MLEM.Data
  commentId: N:MLEM.Data
  isExternal: true
  name: MLEM.Data
  nameWithType: MLEM.Data
  fullName: MLEM.Data
- uid: TinyLife.GameImpl
  commentId: T:TinyLife.GameImpl
  parent: TinyLife
  name: GameImpl
  nameWithType: GameImpl
  fullName: TinyLife.GameImpl
- uid: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  commentId: M:TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  isExternal: true
- uid: TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  commentId: M:TinyLife.Actions.ActionType.Register(TinyLife.Actions.ActionType.TypeSettings)
  isExternal: true
- uid: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  commentId: M:TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  isExternal: true
- uid: TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  isExternal: true
- uid: TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  commentId: M:TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  isExternal: true
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Int32[],System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Int32[],System.Type)
  parent: TinyLife.World.Tile
  isExternal: true
  name: Register(String, Int32, TextureRegion, ColorScheme[], Single, Boolean, Boolean, TextureRegion, Func<Direction2, TextureRegion>, Int32[], Type)
  nameWithType: Tile.Register(String, Int32, TextureRegion, ColorScheme[], Single, Boolean, Boolean, TextureRegion, Func<Direction2, TextureRegion>, Int32[], Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, MLEM.Textures.TextureRegion, TinyLife.Utilities.ColorScheme[], System.Single, System.Boolean, System.Boolean, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, MLEM.Textures.TextureRegion>, System.Int32[], System.Type)
  nameWithType.vb: Tile.Register(String, Int32, TextureRegion, ColorScheme(), Single, Boolean, Boolean, TextureRegion, Func(Of Direction2, TextureRegion), Int32(), Type)
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, MLEM.Textures.TextureRegion, TinyLife.Utilities.ColorScheme(), System.Single, System.Boolean, System.Boolean, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, MLEM.Textures.TextureRegion), System.Int32(), System.Type)
  name.vb: Register(String, Int32, TextureRegion, ColorScheme(), Single, Boolean, Boolean, TextureRegion, Func(Of Direction2, TextureRegion), Int32(), Type)
  spec.csharp:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Int32[],System.Type)
    name: Register
    nameWithType: Tile.Register
    fullName: TinyLife.World.Tile.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Int32[],System.Type)
    name: Register
    nameWithType: Tile.Register
    fullName: TinyLife.World.Tile.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Mods.Mod.AddGameContent*
  commentId: Overload:TinyLife.Mods.Mod.AddGameContent
  name: AddGameContent
  nameWithType: Mod.AddGameContent
  fullName: TinyLife.Mods.Mod.AddGameContent
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: MLEM.Data.DataTextureAtlas
  commentId: T:MLEM.Data.DataTextureAtlas
  parent: MLEM.Data
  isExternal: true
  name: DataTextureAtlas
  nameWithType: DataTextureAtlas
  fullName: MLEM.Data.DataTextureAtlas
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Mods.Mod.GetCustomFurnitureTextures*
  commentId: Overload:TinyLife.Mods.Mod.GetCustomFurnitureTextures
  name: GetCustomFurnitureTextures
  nameWithType: Mod.GetCustomFurnitureTextures
  fullName: TinyLife.Mods.Mod.GetCustomFurnitureTextures
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  id: AbstractSpot
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  - TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  - TinyLife.Objects.AbstractSpot.DrawLayer
  - TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  - TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Misc.Direction2)
  - TinyLife.Objects.AbstractSpot.Group
  - TinyLife.Objects.AbstractSpot.IsOnGround
  - TinyLife.Objects.AbstractSpot.Offset
  - TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  - TinyLife.Objects.AbstractSpot.ValidDirections
  - TinyLife.Objects.AbstractSpot.VisualDirection
  - TinyLife.Objects.AbstractSpot.VisualOffset
  - TinyLife.Objects.AbstractSpot.YOffset
  langs:
  - csharp
  - vb
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
  type: Class
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AbstractSpot
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> is a base class for <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class AbstractSpot
    content.vb: Public MustInherit Class AbstractSpot
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.Objects.ActionSpot
  - TinyLife.Objects.ObjectSpot
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.AbstractSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  id: YOffset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
  type: Property
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: YOffset
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe offset on the visual y axis that the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> slotted into this spot should render with\n"
  example: []
  syntax:
    content: public float YOffset { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property YOffset As Single
  overload: TinyLife.Objects.AbstractSpot.YOffset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: P:TinyLife.Objects.AbstractSpot.Group
  id: Group
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
  type: Property
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Group
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe groups that this spot has, which is interpreted as a bit flag.\nTwo action spots with overlapping groups ((g1 AND g2) != 0) cannot both be occupied by two different people.\nThis is used by things lke <xref href=\"TinyLife.Objects.FurnitureType.ModernBed\" data-throw-if-not-resolved=\"false\"></xref> to stop people from sitting on a side there someone is already sleeping.\nBy default, this is set to 0, meaning there is no group set.\n"
  example: []
  syntax:
    content: public int Group { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Group As Integer
  overload: TinyLife.Objects.AbstractSpot.Group*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.VisualDirection
  commentId: P:TinyLife.Objects.AbstractSpot.VisualDirection
  id: VisualDirection
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
  type: Property
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisualDirection
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe visual direction that this action spot has.\nThe visual direction is the direction used by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> when occupying this action spot for actions like sitting.\nBy default, this value is set to the first <xref href=\"TinyLife.Objects.AbstractSpot.ValidDirections\" data-throw-if-not-resolved=\"false\"></xref> entry in the constructor.\n"
  example: []
  syntax:
    content: public Direction2 VisualDirection { get; set; }
    parameters: []
    return:
      type: MLEM.Misc.Direction2
    content.vb: Public Property VisualDirection As Direction2
  overload: TinyLife.Objects.AbstractSpot.VisualDirection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  id: DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
  type: Field
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawLayer
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe layer that a person slotted into this action spot using <xref href=\"TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref> is drawn on.\nBy default, this is set to return 0, meaning it will be drawn on top of the first layer of this furniture.\n"
  example: []
  syntax:
    content: public Func<Furniture, float> DrawLayer
    return:
      type: System.Func{TinyLife.Objects.Furniture,System.Single}
    content.vb: Public DrawLayer As Func(Of Furniture, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.IsOnGround
  commentId: P:TinyLife.Objects.AbstractSpot.IsOnGround
  id: IsOnGround
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: IsOnGround
  nameWithType: AbstractSpot.IsOnGround
  fullName: TinyLife.Objects.AbstractSpot.IsOnGround
  type: Property
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsOnGround
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this action spot is on the ground.\nThis is a sort of heuristic that returns true when <xref href=\"TinyLife.Objects.AbstractSpot.YOffset\" data-throw-if-not-resolved=\"false\"></xref> is 0 and the <xref href=\"TinyLife.Objects.AbstractSpot.VisualOffset\" data-throw-if-not-resolved=\"false\"></xref> is the same as the <xref href=\"TinyLife.Objects.AbstractSpot.Offset\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsOnGround { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOnGround As Boolean
  overload: TinyLife.Objects.AbstractSpot.IsOnGround*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  id: ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
  type: Field
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidDirections
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> values that this spot can be accessed from.\nThese directions are relative to the owning <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"MLEM.Misc.Direction2.Up\" data-throw-if-not-resolved=\"false\"></xref> direction.\n"
  example: []
  syntax:
    content: protected readonly Direction2[] ValidDirections
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Protected ReadOnly ValidDirections As Direction2()
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  id: Offset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
  type: Field
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Offset
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe offset on both the x and y axis that this spot has from the position of the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> it belongs to\n"
  example: []
  syntax:
    content: protected Vector2 Offset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Protected Offset As Vector2
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  id: VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
  type: Field
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisualOffset
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe visual offset on both the x and y axis that this spot has from the position of the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> it belongs to.\nBy default, this gets set to the same value as <xref href=\"TinyLife.Objects.AbstractSpot.Offset\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Vector2 VisualOffset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Protected VisualOffset As Vector2
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.AbstractSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: AbstractSpot(Vector2, Vector2, Single, Direction2[])
  nameWithType: AbstractSpot.AbstractSpot(Vector2, Vector2, Single, Direction2[])
  fullName: TinyLife.Objects.AbstractSpot.AbstractSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new spot with the given data.\nThis is called by <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected AbstractSpot(Vector2 offset, Vector2 visualOffset, float yOffset, Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: visualOffset
      type: Microsoft.Xna.Framework.Vector2
      description: The visual offset on both the x and y axis that this spot has
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Protected Sub New(offset As Vector2, visualOffset As Vector2, yOffset As Single, validDirections As Direction2())
  overload: TinyLife.Objects.AbstractSpot.#ctor*
  nameWithType.vb: AbstractSpot.AbstractSpot(Vector2, Vector2, Single, Direction2())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Objects.AbstractSpot.AbstractSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2())
  name.vb: AbstractSpot(Vector2, Vector2, Single, Direction2())
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  id: GetValidDirections(MLEM.Misc.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetValidDirections(Direction2)
  nameWithType: AbstractSpot.GetValidDirections(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetValidDirections
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Objects.AbstractSpot.ValidDirections\" data-throw-if-not-resolved=\"false\"></xref> of this spot, but rotated by the given <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerable<Direction2> GetValidDirections(Direction2 rotation)
    parameters:
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
      description: The rotations that are valid for this spot
    content.vb: Public Function GetValidDirections(rotation As Direction2) As IEnumerable(Of Direction2)
  overload: TinyLife.Objects.AbstractSpot.GetValidDirections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Misc.Direction2)
  id: GetVisualDirection(MLEM.Misc.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetVisualDirection(Direction2)
  nameWithType: AbstractSpot.GetVisualDirection(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetVisualDirection(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisualDirection
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Objects.AbstractSpot.VisualDirection\" data-throw-if-not-resolved=\"false\"></xref> that this action spot has, rotated by the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">rotation</code>.\nThe visual direction is the direction used by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> when occupying this action spot for actions like sitting.\n"
  example: []
  syntax:
    content: public Direction2 GetVisualDirection(Direction2 rotation)
    parameters:
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation of the containing furniture.
    return:
      type: MLEM.Misc.Direction2
      description: The visual direction for this spot.
    content.vb: Public Function GetVisualDirection(rotation As Direction2) As Direction2
  overload: TinyLife.Objects.AbstractSpot.GetVisualDirection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  id: GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: GetLocation(Furniture, Boolean)
  nameWithType: AbstractSpot.GetLocation(Furniture, Boolean)
  fullName: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLocation
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the location that this spot has in world space, based on the given <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and its position and rotation.\n"
  example: []
  syntax:
    content: public Vector2 GetLocation(Furniture furniture, bool visual)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture that this spot belongs to
    - id: visual
      type: System.Boolean
      description: Whetehr the <xref href="TinyLife.Objects.AbstractSpot.VisualOffset" data-throw-if-not-resolved="false"></xref> should be used instead of the <xref href="TinyLife.Objects.AbstractSpot.Offset" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: This spot&apos;s location in world space
    content.vb: Public Function GetLocation(furniture As Furniture, visual As Boolean) As Vector2
  overload: TinyLife.Objects.AbstractSpot.GetLocation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  id: DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: DoGroupsOverlap(AbstractSpot)
  nameWithType: AbstractSpot.DoGroupsOverlap(AbstractSpot)
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DoGroupsOverlap
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 110
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the passed <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.AbstractSpot.Group\" data-throw-if-not-resolved=\"false\"></xref> and this spot&apos;s Group overlap.\nTwo overlapping groups are groups for which (g1 AND g2) != 0.\n"
  example: []
  syntax:
    content: public bool DoGroupsOverlap(AbstractSpot other)
    parameters:
    - id: other
      type: TinyLife.Objects.AbstractSpot
      description: The action spot whose groups to compare
    return:
      type: System.Boolean
      description: Whether at least one group overlaps
    content.vb: Public Function DoGroupsOverlap(other As AbstractSpot) As Boolean
  overload: TinyLife.Objects.AbstractSpot.DoGroupsOverlap*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  commentId: M:TinyLife.Objects.AbstractSpot.SortDrawLayers``1(``0[])
  id: SortDrawLayers``1(``0[])
  parent: TinyLife.Objects.AbstractSpot
  langs:
  - csharp
  - vb
  name: SortDrawLayers<T>(T[])
  nameWithType: AbstractSpot.SortDrawLayers<T>(T[])
  fullName: TinyLife.Objects.AbstractSpot.SortDrawLayers<T>(T[])
  type: Method
  source:
    remote:
      path: TinyLife/Objects/AbstractSpot.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SortDrawLayers
    path: ../TinyLife/Objects/AbstractSpot.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that sorts the given <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> instances by depth when drawing by modifying their <xref href=\"TinyLife.Objects.AbstractSpot.DrawLayer\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method can be used for more complex objects like wide desks, that have smaller and bigger objects visually overlappying, to mitigate z-fighting.\n"
  example: []
  syntax:
    content: >-
      public static T[] SortDrawLayers<T>(T[] spots)
          where T : AbstractSpot
    parameters:
    - id: spots
      type: '{T}[]'
      description: The spots to sort.
    typeParameters:
    - id: T
      description: The type of spot.
    return:
      type: '{T}[]'
      description: The same <code data-dev-comment-type="paramref" class="paramref">spots</code>, for chaining.
    content.vb: Public Shared Function SortDrawLayers(Of T As AbstractSpot)(spots As T()) As T()
  overload: TinyLife.Objects.AbstractSpot.SortDrawLayers*
  nameWithType.vb: AbstractSpot.SortDrawLayers(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.AbstractSpot.SortDrawLayers(Of T)(T())
  name.vb: SortDrawLayers(Of T)(T())
references:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<AbstractSpot>()
  nameWithType: Extensions.JsonCopy<AbstractSpot>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.AbstractSpot>()
  nameWithType.vb: Extensions.JsonCopy(Of AbstractSpot)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.AbstractSpot)()
  name.vb: JsonCopy(Of AbstractSpot)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<AbstractSpot>
    nameWithType: Extensions.JsonCopy<AbstractSpot>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.AbstractSpot>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of AbstractSpot)
    nameWithType: Extensions.JsonCopy(Of AbstractSpot)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.AbstractSpot)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.AbstractSpot.YOffset*
  commentId: Overload:TinyLife.Objects.AbstractSpot.YOffset
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.FurnitureType.ModernBed
  commentId: F:TinyLife.Objects.FurnitureType.ModernBed
  isExternal: true
- uid: TinyLife.Objects.AbstractSpot.Group*
  commentId: Overload:TinyLife.Objects.AbstractSpot.Group
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
- uid: TinyLife.Objects.AbstractSpot.VisualDirection*
  commentId: Overload:TinyLife.Objects.AbstractSpot.VisualDirection
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: System.Func{TinyLife.Objects.Furniture,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<Furniture, Single>
  nameWithType: Func<Furniture, Single>
  fullName: System.Func<TinyLife.Objects.Furniture, System.Single>
  nameWithType.vb: Func(Of Furniture, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, System.Single)
  name.vb: Func(Of Furniture, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  parent: TinyLife.Objects.AbstractSpot
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  parent: TinyLife.Objects.AbstractSpot
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
- uid: TinyLife.Objects.AbstractSpot.IsOnGround*
  commentId: Overload:TinyLife.Objects.AbstractSpot.IsOnGround
  name: IsOnGround
  nameWithType: AbstractSpot.IsOnGround
  fullName: TinyLife.Objects.AbstractSpot.IsOnGround
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MLEM.Misc.Direction2.Up
  commentId: F:MLEM.Misc.Direction2.Up
  isExternal: true
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Objects.AbstractSpot.#ctor*
  commentId: Overload:TinyLife.Objects.AbstractSpot.#ctor
  name: AbstractSpot
  nameWithType: AbstractSpot.AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot.AbstractSpot
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetValidDirections
  name: GetValidDirections
  nameWithType: AbstractSpot.GetValidDirections
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
- uid: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Direction2>
  nameWithType: IEnumerable<Direction2>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Misc.Direction2>
  nameWithType.vb: IEnumerable(Of Direction2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Misc.Direction2)
  name.vb: IEnumerable(Of Direction2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.AbstractSpot.VisualDirection
  commentId: P:TinyLife.Objects.AbstractSpot.VisualDirection
  parent: TinyLife.Objects.AbstractSpot
  name: VisualDirection
  nameWithType: AbstractSpot.VisualDirection
  fullName: TinyLife.Objects.AbstractSpot.VisualDirection
- uid: TinyLife.Objects.AbstractSpot.GetVisualDirection*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetVisualDirection
  name: GetVisualDirection
  nameWithType: AbstractSpot.GetVisualDirection
  fullName: TinyLife.Objects.AbstractSpot.GetVisualDirection
- uid: TinyLife.Objects.AbstractSpot.GetLocation*
  commentId: Overload:TinyLife.Objects.AbstractSpot.GetLocation
  name: GetLocation
  nameWithType: AbstractSpot.GetLocation
  fullName: TinyLife.Objects.AbstractSpot.GetLocation
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: P:TinyLife.Objects.AbstractSpot.Group
  parent: TinyLife.Objects.AbstractSpot
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap*
  commentId: Overload:TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  name: DoGroupsOverlap
  nameWithType: AbstractSpot.DoGroupsOverlap
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
- uid: TinyLife.Objects.AbstractSpot.SortDrawLayers*
  commentId: Overload:TinyLife.Objects.AbstractSpot.SortDrawLayers
  name: SortDrawLayers
  nameWithType: AbstractSpot.SortDrawLayers
  fullName: TinyLife.Objects.AbstractSpot.SortDrawLayers
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()

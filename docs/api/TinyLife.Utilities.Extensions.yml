### YamlMime:ManagedReference
items:
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  id: Extensions
  parent: TinyLife.Utilities
  children:
  - TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  - TinyLife.Utilities.Extensions.BothCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  - TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  - TinyLife.Utilities.Extensions.CanTakeOff(TinyLife.Objects.ClothesLayer)
  - TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Color,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single})
  - TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  - TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  - TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  - TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  - TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention)
  - TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  - TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Objects.Person)
  - TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  - TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  - TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  - TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  - TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  - TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  - TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Misc.Direction2)
  - TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  - TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  - TinyLife.Utilities.Extensions.IsVertical(MLEM.Misc.Direction2)
  - TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  - TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  - TinyLife.Utilities.Extensions.OneCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  - TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  - TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  - TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  - TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  - TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  - TinyLife.Utilities.Extensions.ToWallSide(MLEM.Misc.Direction2)
  - TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Person.Pose)
  - TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Boolean)
  - TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
  type: Class
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Extensions
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nA set of extensions for dealing with various things required by Tiny Life.\n"
  example: []
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean)
  id: ToScreenPos(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToScreenPos(Vector2, Boolean, Boolean, Boolean)
  nameWithType: Extensions.ToScreenPos(Vector2, Boolean, Boolean, Boolean)
  fullName: TinyLife.Utilities.Extensions.ToScreenPos(Microsoft.Xna.Framework.Vector2, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToScreenPos
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nConverts the given world-space position into a draw-space position\n"
  example: []
  syntax:
    content: public static Vector2 ToScreenPos(this Vector2 position, bool center = false, bool applyCameraRotation = true, bool borderOffset = false)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to convert
    - id: center
      type: System.Boolean
      description: If this is true, the position will be offset by half a tile, centering it on the screen
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game&apos;s current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    - id: borderOffset
      type: System.Boolean
      description: Whether the map border offset should be applied to the camera rotation using <xref href="TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>. This value only has an effect if <code data-dev-comment-type="paramref" class="paramref">applyCameraRotation</code> is true
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The draw-space position
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToScreenPos(position As Vector2, center As Boolean = False, applyCameraRotation As Boolean = True, borderOffset As Boolean = False) As Vector2
  overload: TinyLife.Utilities.Extensions.ToScreenPos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Boolean)
  id: ToWorldPos(Microsoft.Xna.Framework.Vector2,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToWorldPos(Vector2, Boolean)
  nameWithType: Extensions.ToWorldPos(Vector2, Boolean)
  fullName: TinyLife.Utilities.Extensions.ToWorldPos(Microsoft.Xna.Framework.Vector2, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToWorldPos
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nConverts the given draw-space position into a world-space position\n"
  example: []
  syntax:
    content: public static Vector2 ToWorldPos(this Vector2 position, bool applyCameraRotation = true)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to convert
    - id: applyCameraRotation
      type: System.Boolean
      description: Whether the game&apos;s current <xref href="TinyLife.Options.CameraRotation" data-throw-if-not-resolved="false"></xref> should be applied using <xref href="TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The world-space position
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToWorldPos(position As Vector2, applyCameraRotation As Boolean = True) As Vector2
  overload: TinyLife.Utilities.Extensions.ToWorldPos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  id: ToVisualY(Microsoft.Xna.Framework.Vector2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToVisualY(Vector2)
  nameWithType: Extensions.ToVisualY(Vector2)
  fullName: TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToVisualY
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the given offset, but translated based on the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref>.\nFor any vector that is passed to this method, the translation that it represents will not be based on cardinal directions, but on directions related to the screen&apos;s orientation.\n"
  example: []
  syntax:
    content: public static Vector2 ToVisualY(this Vector2 pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to turn into a visual y position
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The given position translated into virtual y space
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVisualY(pos As Vector2) As Vector2
  overload: TinyLife.Utilities.Extensions.ToVisualY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToWallSide(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Utilities.Extensions.ToWallSide(MLEM.Misc.Direction2)
  id: ToWallSide(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToWallSide(Direction2)
  nameWithType: Extensions.ToWallSide(Direction2)
  fullName: TinyLife.Utilities.Extensions.ToWallSide(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToWallSide
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns an integer that represents the given <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> as a side of a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>.\nSpecifically, <xref href=\"MLEM.Misc.Direction2.Up\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"MLEM.Misc.Direction2.Left\" data-throw-if-not-resolved=\"false\"></xref> return 0, any other directions return 1.\n"
  example: []
  syntax:
    content: public static int ToWallSide(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
      description: The direction to convert into a wall side
    return:
      type: System.Int32
      description: The corresponding wall side
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToWallSide(dir As Direction2) As Integer
  overload: TinyLife.Utilities.Extensions.ToWallSide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.IsVertical(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Utilities.Extensions.IsVertical(MLEM.Misc.Direction2)
  id: IsVertical(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsVertical(Direction2)
  nameWithType: Extensions.IsVertical(Direction2)
  fullName: TinyLife.Utilities.Extensions.IsVertical(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsVertical
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the passed direction is considered vertical.\nA vertical direction is <xref href=\"MLEM.Misc.Direction2.Up\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"MLEM.Misc.Direction2.Down\" data-throw-if-not-resolved=\"false\"></xref>. All other directions return false.\n"
  example: []
  syntax:
    content: public static bool IsVertical(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
      description: The direction to check verticalness for
    return:
      type: System.Boolean
      description: Whether or not the direction is vertical
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsVertical(dir As Direction2) As Boolean
  overload: TinyLife.Utilities.Extensions.IsVertical*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Misc.Direction2)
  id: IsHorizontal(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsHorizontal(Direction2)
  nameWithType: Extensions.IsHorizontal(Direction2)
  fullName: TinyLife.Utilities.Extensions.IsHorizontal(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsHorizontal
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the passed direction is considered horizontal.\nA horizontal direction is <xref href=\"MLEM.Misc.Direction2.Left\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"MLEM.Misc.Direction2.Right\" data-throw-if-not-resolved=\"false\"></xref>. All other directions return false.\n"
  example: []
  syntax:
    content: public static bool IsHorizontal(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
      description: The direction to check horizontalness for
    return:
      type: System.Boolean
      description: Whether or not the direction is horizontal
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsHorizontal(dir As Direction2) As Boolean
  overload: TinyLife.Utilities.Extensions.IsHorizontal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  id: JsonCopy``1(``0)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: JsonCopy
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 118
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nCopies the given object using a <xref href=\"Newtonsoft.Json.JsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> created using <xref href=\"TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler%7bNewtonsoft.Json.Serialization.ErrorEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static T JsonCopy<T>(this T obj)
    parameters:
    - id: obj
      type: '{T}'
      description: The object to copy
    typeParameters:
    - id: T
      description: The type of the object
    return:
      type: '{T}'
      description: A copy of the object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function JsonCopy(Of T)(obj As T) As T
  overload: TinyLife.Utilities.Extensions.JsonCopy*
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
- uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  id: GetPriceModifier(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetPriceModifier(Quality)
  nameWithType: Extensions.GetPriceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPriceModifier
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 139
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a multiplier that an object&apos;s price should be multiplied with based on the given <xref href=\"TinyLife.Skills.Quality\" data-throw-if-not-resolved=\"false\"></xref>.\nThe returned values are as follows:\n<xref href=\"TinyLife.Skills.Quality.Terrible\" data-throw-if-not-resolved=\"false\"></xref>: 0.5,\n<xref href=\"TinyLife.Skills.Quality.Good\" data-throw-if-not-resolved=\"false\"></xref>: 1.5,\n<xref href=\"TinyLife.Skills.Quality.Great\" data-throw-if-not-resolved=\"false\"></xref>: 2,\n<xref href=\"TinyLife.Skills.Quality.Perfect\" data-throw-if-not-resolved=\"false\"></xref>: 3,\n<xref href=\"TinyLife.Skills.Quality.Masterpiece\" data-throw-if-not-resolved=\"false\"></xref>: 5,\nElse: 1.\n"
  example: []
  syntax:
    content: public static float GetPriceModifier(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Single
      description: The price modifier for the object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPriceModifier(quality As Quality) As Single
  overload: TinyLife.Utilities.Extensions.GetPriceModifier*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  id: GetDecorativeRating(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDecorativeRating(Quality)
  nameWithType: Extensions.GetDecorativeRating(Quality)
  fullName: TinyLife.Utilities.Extensions.GetDecorativeRating(TinyLife.Skills.Quality)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDecorativeRating
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 162
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the decorative rating of an object with the given <xref href=\"TinyLife.Skills.Quality\" data-throw-if-not-resolved=\"false\"></xref>.\nThe returned values are as follows:\n<xref href=\"TinyLife.Skills.Quality.Terrible\" data-throw-if-not-resolved=\"false\"></xref>: -2,\n<xref href=\"TinyLife.Skills.Quality.Good\" data-throw-if-not-resolved=\"false\"></xref>: 1,\n<xref href=\"TinyLife.Skills.Quality.Great\" data-throw-if-not-resolved=\"false\"></xref>: 1,\n<xref href=\"TinyLife.Skills.Quality.Perfect\" data-throw-if-not-resolved=\"false\"></xref>: 2,\n<xref href=\"TinyLife.Skills.Quality.Masterpiece\" data-throw-if-not-resolved=\"false\"></xref>: 3,\nElse: 0.\n"
  example: []
  syntax:
    content: public static int GetDecorativeRating(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Int32
      description: The decorative rating for this quality
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDecorativeRating(quality As Quality) As Integer
  overload: TinyLife.Utilities.Extensions.GetDecorativeRating*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  id: GetChanceModifier(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetChanceModifier(Quality)
  nameWithType: Extensions.GetChanceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetChanceModifier(TinyLife.Skills.Quality)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetChanceModifier
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a chance modifier for the given <xref href=\"TinyLife.Skills.Quality\" data-throw-if-not-resolved=\"false\"></xref>, which is always greater than 0 and less than or equal to 1.\nThis is useful for calculating the chance of something happening based on the quality of an object.\nThe returned values are as follows:\n<xref href=\"TinyLife.Skills.Quality.Terrible\" data-throw-if-not-resolved=\"false\"></xref>: 0.05,\n<xref href=\"TinyLife.Skills.Quality.Good\" data-throw-if-not-resolved=\"false\"></xref>: 0.55,\n<xref href=\"TinyLife.Skills.Quality.Great\" data-throw-if-not-resolved=\"false\"></xref>: 0.75,\n<xref href=\"TinyLife.Skills.Quality.Perfect\" data-throw-if-not-resolved=\"false\"></xref>: 0.9,\n<xref href=\"TinyLife.Skills.Quality.Masterpiece\" data-throw-if-not-resolved=\"false\"></xref>: 1,\nElse: 0.4.\n"
  example: []
  syntax:
    content: public static float GetChanceModifier(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality to query
    return:
      type: System.Single
      description: The chance modifier for this quality
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetChanceModifier(quality As Quality) As Single
  overload: TinyLife.Utilities.Extensions.GetChanceModifier*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  id: ToLocalizedString(TinyLife.Skills.Quality)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToLocalizedString(Quality)
  nameWithType: Extensions.ToLocalizedString(Quality)
  fullName: TinyLife.Utilities.Extensions.ToLocalizedString(TinyLife.Skills.Quality)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToLocalizedString
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 202
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a localized string for the given <xref href=\"TinyLife.Skills.Quality\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string ToLocalizedString(this Quality quality)
    parameters:
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality
    return:
      type: System.String
      description: A localized string representing the quality
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLocalizedString(quality As Quality) As String
  overload: TinyLife.Utilities.Extensions.ToLocalizedString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  commentId: M:TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  id: ToSellingPriceString(System.Single)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToSellingPriceString(Single)
  nameWithType: Extensions.ToSellingPriceString(Single)
  fullName: TinyLife.Utilities.Extensions.ToSellingPriceString(System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToSellingPriceString
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 212
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a localized string that says &quot;Sells for&quot;, followed by the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> in tiny bucks\n"
  example: []
  syntax:
    content: public static string ToSellingPriceString(this float value)
    parameters:
    - id: value
      type: System.Single
      description: The value to display
    return:
      type: System.String
      description: A selling price string that contains the value, in tiny bucks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSellingPriceString(value As Single) As String
  overload: TinyLife.Utilities.Extensions.ToSellingPriceString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  id: BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: BothValid(CanExecuteResult, Func<CanExecuteResult>)
  nameWithType: Extensions.BothValid(CanExecuteResult, Func<CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func<TinyLife.Actions.CanExecuteResult>)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BothValid
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 223
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nA helper method to return <see cref=\"!:CanExecuteResult.Valid\"></see> only if both passed <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> values are <see cref=\"!:CanExecuteResult.Valid\"></see>.\nIf this is not the case, the validity of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">result</code> is returned if it is not <see cref=\"!:CanExecuteResult.Valid\"></see>, and otherwise, the validity of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> is returned.\n"
  example: []
  syntax:
    content: public static CanExecuteResult BothValid(this CanExecuteResult result, Func<CanExecuteResult> other)
    parameters:
    - id: result
      type: TinyLife.Actions.CanExecuteResult
      description: The first result
    - id: other
      type: System.Func{TinyLife.Actions.CanExecuteResult}
      description: The second result
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: The validity of both results
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BothValid(result As CanExecuteResult, other As Func(Of CanExecuteResult)) As CanExecuteResult
  overload: TinyLife.Utilities.Extensions.BothValid*
  nameWithType.vb: Extensions.BothValid(CanExecuteResult, Func(Of CanExecuteResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func(Of TinyLife.Actions.CanExecuteResult))
  name.vb: BothValid(CanExecuteResult, Func(Of CanExecuteResult))
- uid: TinyLife.Utilities.Extensions.BothCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  commentId: M:TinyLife.Utilities.Extensions.BothCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  id: BothCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: BothCompleted(CompletionType, Func<CompletionType>)
  nameWithType: Extensions.BothCompleted(CompletionType, Func<CompletionType>)
  fullName: TinyLife.Utilities.Extensions.BothCompleted(TinyLife.Actions.CompletionType, System.Func<TinyLife.Actions.CompletionType>)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BothCompleted
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 234
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nA helper method to return <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> if one of the completion types is <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is not the case, the first completion type that is different is returned.\n"
  example: []
  syntax:
    content: public static CompletionType BothCompleted(this CompletionType type, Func<CompletionType> other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: System.Func{TinyLife.Actions.CompletionType}
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if one of the completion types is <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>, or the <code data-dev-comment-type="paramref" class="paramref">other</code>&apos;s completion type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BothCompleted(type As CompletionType, other As Func(Of CompletionType)) As CompletionType
  overload: TinyLife.Utilities.Extensions.BothCompleted*
  nameWithType.vb: Extensions.BothCompleted(CompletionType, Func(Of CompletionType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Utilities.Extensions.BothCompleted(TinyLife.Actions.CompletionType, System.Func(Of TinyLife.Actions.CompletionType))
  name.vb: BothCompleted(CompletionType, Func(Of CompletionType))
- uid: TinyLife.Utilities.Extensions.OneCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  commentId: M:TinyLife.Utilities.Extensions.OneCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  id: OneCompleted(TinyLife.Actions.CompletionType,System.Func{TinyLife.Actions.CompletionType})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: OneCompleted(CompletionType, Func<CompletionType>)
  nameWithType: Extensions.OneCompleted(CompletionType, Func<CompletionType>)
  fullName: TinyLife.Utilities.Extensions.OneCompleted(TinyLife.Actions.CompletionType, System.Func<TinyLife.Actions.CompletionType>)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OneCompleted
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 245
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nA helper method to return <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> if both of the completion types are <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is not the case, the first completion type that is different is returned.\n"
  example: []
  syntax:
    content: public static CompletionType OneCompleted(this CompletionType type, Func<CompletionType> other)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The first completion type
    - id: other
      type: System.Func{TinyLife.Actions.CompletionType}
      description: A function to gather the second completion type
    return:
      type: TinyLife.Actions.CompletionType
      description: The first non-active completion type, or <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> if there is none
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OneCompleted(type As CompletionType, other As Func(Of CompletionType)) As CompletionType
  overload: TinyLife.Utilities.Extensions.OneCompleted*
  nameWithType.vb: Extensions.OneCompleted(CompletionType, Func(Of CompletionType))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Utilities.Extensions.OneCompleted(TinyLife.Actions.CompletionType, System.Func(Of TinyLife.Actions.CompletionType))
  name.vb: OneCompleted(CompletionType, Func(Of CompletionType))
- uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  id: GetOpposite(TinyLife.GenealogyType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetOpposite(GenealogyType)
  nameWithType: Extensions.GetOpposite(GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetOpposite
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 256
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the opposite of the given <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref>.\nThe &quot;opposite&quot; is the relationship that the other partner of this <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> will have.\nFor example, the opposite of <xref href=\"TinyLife.GenealogyType.Parent\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"TinyLife.GenealogyType.Child\" data-throw-if-not-resolved=\"false\"></xref> and vice versa.\n"
  example: []
  syntax:
    content: public static GenealogyType GetOpposite(this GenealogyType type)
    parameters:
    - id: type
      type: TinyLife.GenealogyType
      description: The genealogy type
    return:
      type: TinyLife.GenealogyType
      description: The genealogy type&apos;s opposite
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOpposite(type As GenealogyType) As GenealogyType
  overload: TinyLife.Utilities.Extensions.GetOpposite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  id: GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetTransitive(GenealogyType, GenealogyType)
  nameWithType: Extensions.GetTransitive(GenealogyType, GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType, TinyLife.GenealogyType)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTransitive
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 279
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nGiven the <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> of two relationships, returns the transitive genealogy that results from the two given genealogies.\nThe given genealogies are the ones in relationships between <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> A and B, and B and C, respectively. The returned <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> is the genealogy between <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> A and C.\nIf <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned, the transitive genealogy cannot reliably be gathered from the given information.\n"
  example: []
  syntax:
    content: public static GenealogyType? GetTransitive(this GenealogyType aToB, GenealogyType bToC)
    parameters:
    - id: aToB
      type: TinyLife.GenealogyType
      description: The genealogy between A and B.
    - id: bToC
      type: TinyLife.GenealogyType
      description: The genealogy between B and C.
    return:
      type: System.Nullable{TinyLife.GenealogyType}
      description: The genealogy between A and C, or <xref uid="langword_csharp_null" name="null" href=""></xref> if the genealogy cannot be reliably gathered.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTransitive(aToB As GenealogyType, bToC As GenealogyType) As GenealogyType?
  overload: TinyLife.Utilities.Extensions.GetTransitive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: If any undefined <xref href="TinyLife.GenealogyType" data-throw-if-not-resolved="false"></xref> is passed as a parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  id: IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsAgeAppropriate(GenealogyType, AgeGroup)
  nameWithType: Extensions.IsAgeAppropriate(GenealogyType, AgeGroup)
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType, TinyLife.Objects.AgeGroup)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsAgeAppropriate
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 359
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the given <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> is approriate for a person with the given <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this method returns false, the genealogy type should not be applied to a <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref> whose main person has the given age.\n"
  example: []
  syntax:
    content: public static bool IsAgeAppropriate(this GenealogyType type, AgeGroup age)
    parameters:
    - id: type
      type: TinyLife.GenealogyType
      description: The genealogy type in question
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The age group in question
    return:
      type: System.Boolean
      description: Whether the given genealogy type is appropriate for the given age
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAgeAppropriate(type As GenealogyType, age As AgeGroup) As Boolean
  overload: TinyLife.Utilities.Extensions.IsAgeAppropriate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Person.Pose)
  commentId: M:TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Person.Pose)
  id: ToWorking(TinyLife.Objects.Person.Pose)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToWorking(Person.Pose)
  nameWithType: Extensions.ToWorking(Person.Pose)
  fullName: TinyLife.Utilities.Extensions.ToWorking(TinyLife.Objects.Person.Pose)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToWorking
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 373
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nConverts the given <xref href=\"TinyLife.Objects.Person.Pose\" data-throw-if-not-resolved=\"false\"></xref> to a version in which a person is looking as if they were working on something.\nFor all standing poses, this returns <xref href=\"TinyLife.Objects.Person.Pose.WorkingStanding\" data-throw-if-not-resolved=\"false\"></xref>, and for all sitting poses, <xref href=\"TinyLife.Objects.Person.Pose.WorkingSitting\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nIf a pose has no working variant, the pose itself is returned.\n"
  example: []
  syntax:
    content: public static Person.Pose ToWorking(this Person.Pose pose)
    parameters:
    - id: pose
      type: TinyLife.Objects.Person.Pose
      description: The pose to convert to a working pose
    return:
      type: TinyLife.Objects.Person.Pose
      description: The working version of the given pose
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToWorking(pose As Person.Pose) As Person.Pose
  overload: TinyLife.Utilities.Extensions.ToWorking*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  commentId: M:TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  id: AddHoverAnimation(MLEM.Ui.Elements.Button)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: AddHoverAnimation(Button)
  nameWithType: Extensions.AddHoverAnimation(Button)
  fullName: TinyLife.Utilities.Extensions.AddHoverAnimation(MLEM.Ui.Elements.Button)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddHoverAnimation
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 395
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nAdds a hover animation to the given <xref href=\"MLEM.Ui.Elements.Button\" data-throw-if-not-resolved=\"false\"></xref>.\nThe hover animation will automatically start playing when the mouse enters the button.\n"
  example: []
  syntax:
    content: public static Button AddHoverAnimation(this Button button)
    parameters:
    - id: button
      type: MLEM.Ui.Elements.Button
      description: The button to add the hover animation to
    return:
      type: MLEM.Ui.Elements.Button
      description: The button, for chaining
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddHoverAnimation(button As Button) As Button
  overload: TinyLife.Utilities.Extensions.AddHoverAnimation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  id: ToSimpleLocalizedString(System.TimeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: ToSimpleLocalizedString(TimeSpan)
  nameWithType: Extensions.ToSimpleLocalizedString(TimeSpan)
  fullName: TinyLife.Utilities.Extensions.ToSimpleLocalizedString(System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToSimpleLocalizedString
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 416
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a string, localized using <xref href=\"TinyLife.Localization\" data-throw-if-not-resolved=\"false\"></xref>, that represents the largest value of the time span.\nIf the time span includes multiple days, a string representing just days is returned. Otherwise, the full hours are returned, and otherwise, the full minutes are returned.\n"
  example: []
  syntax:
    content: public static string ToSimpleLocalizedString(this TimeSpan time)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The time to localize
    return:
      type: System.String
      description: A simple localized string for the time span
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSimpleLocalizedString(time As TimeSpan) As String
  overload: TinyLife.Utilities.Extensions.ToSimpleLocalizedString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  id: GetDefaultTab(TinyLife.Objects.ObjectCategory)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDefaultTab(ObjectCategory)
  nameWithType: Extensions.GetDefaultTab(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab(TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDefaultTab
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 429
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the default <xref href=\"TinyLife.Tools.FurnitureTool.Tab\" data-throw-if-not-resolved=\"false\"></xref> flags that the given <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flag combination should be sorted into\n"
  example: []
  syntax:
    content: public static FurnitureTool.Tab GetDefaultTab(this ObjectCategory categories)
    parameters:
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that an object has
    return:
      type: TinyLife.Tools.FurnitureTool.Tab
      description: The tabs most fitting for the object
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDefaultTab(categories As ObjectCategory) As FurnitureTool.Tab
  overload: TinyLife.Utilities.Extensions.GetDefaultTab*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  id: GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDefaultDirtyOverlayTextureName(ObjectCategory)
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName(ObjectCategory)
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName(TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDefaultDirtyOverlayTextureName
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 462
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the default <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName\" data-throw-if-not-resolved=\"false\"></xref> to use for the given set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags.\nIf none of the flags match a default overlay texture, this method will return null.\n"
  example: []
  syntax:
    content: public static string GetDefaultDirtyOverlayTextureName(this ObjectCategory category)
    parameters:
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: The categories to get the default texture for
    return:
      type: System.String
      description: The default texture
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDefaultDirtyOverlayTextureName(category As ObjectCategory) As String
  overload: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  commentId: M:TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  id: IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsLockedFor(LockType, Person, Lot)
  nameWithType: Extensions.IsLockedFor(LockType, Person, Lot)
  fullName: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType, TinyLife.Objects.Person, TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsLockedFor
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 481
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the given <xref href=\"TinyLife.World.LockType\" data-throw-if-not-resolved=\"false\"></xref> is considered &quot;locked&quot; for the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> on the given <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool IsLockedFor(this LockType type, Person person, Lot lot)
    parameters:
    - id: type
      type: TinyLife.World.LockType
      description: The lock type to query
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query
    - id: lot
      type: TinyLife.World.Lot
      description: The lot that the object locked with the given <code data-dev-comment-type="paramref" class="paramref">type</code> is on
    return:
      type: System.Boolean
      description: Whether the lock type is considered locked for the person
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLockedFor(type As LockType, person As Person, lot As Lot) As Boolean
  overload: TinyLife.Utilities.Extensions.IsLockedFor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Color,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single})
  commentId: M:TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Color,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single})
  id: DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Misc.RectangleF,Microsoft.Xna.Framework.Color,System.Boolean,System.Func{Microsoft.Xna.Framework.Vector2,System.Single})
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: DrawIsoArea(SpriteBatch, RectangleF, Color, Boolean, Func<Vector2, Single>)
  nameWithType: Extensions.DrawIsoArea(SpriteBatch, RectangleF, Color, Boolean, Func<Vector2, Single>)
  fullName: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Misc.RectangleF, Microsoft.Xna.Framework.Color, System.Boolean, System.Func<Microsoft.Xna.Framework.Vector2, System.Single>)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawIsoArea
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 505
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nDraws an isometric rectangle with the given data using a pixelated tile texture.\n"
  example: []
  syntax:
    content: public static void DrawIsoArea(this SpriteBatch batch, RectangleF area, Color color, bool showSize = false, Func<Vector2, float> depth = null)
    parameters:
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area, in world space, to draw a rectangle around
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color that the rectangle should have
    - id: showSize
      type: System.Boolean
      description: Whether the rectangle&apos;s size in world tiles should be displayed on the screen as a string in the center of the drawn rectangle
    - id: depth
      type: System.Func{Microsoft.Xna.Framework.Vector2,System.Single}
      description: An optional function that returns depth that each position should have.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DrawIsoArea(batch As SpriteBatch, area As RectangleF, color As Color, showSize As Boolean = False, depth As Func(Of Vector2, Single) = Nothing)
  overload: TinyLife.Utilities.Extensions.DrawIsoArea*
  nameWithType.vb: Extensions.DrawIsoArea(SpriteBatch, RectangleF, Color, Boolean, Func(Of Vector2, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Utilities.Extensions.DrawIsoArea(Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Misc.RectangleF, Microsoft.Xna.Framework.Color, System.Boolean, System.Func(Of Microsoft.Xna.Framework.Vector2, System.Single))
  name.vb: DrawIsoArea(SpriteBatch, RectangleF, Color, Boolean, Func(Of Vector2, Single))
- uid: TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  id: IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsPartOfPerson(ClothesLayer)
  nameWithType: Extensions.IsPartOfPerson(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.IsPartOfPerson(TinyLife.Objects.ClothesLayer)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsPartOfPerson
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 534
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the given <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> is part of a person physically.\nThis methdo returns true for <xref href=\"TinyLife.Objects.ClothesLayer.Body\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.ClothesLayer.Arms\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.ClothesLayer.Eyes\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool IsPartOfPerson(this ClothesLayer layer)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The clothes layer
    return:
      type: System.Boolean
      description: Whether the clothes layer is part of the person
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPartOfPerson(layer As ClothesLayer) As Boolean
  overload: TinyLife.Utilities.Extensions.IsPartOfPerson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.CanTakeOff(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.CanTakeOff(TinyLife.Objects.ClothesLayer)
  id: CanTakeOff(TinyLife.Objects.ClothesLayer)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: CanTakeOff(ClothesLayer)
  nameWithType: Extensions.CanTakeOff(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.CanTakeOff(TinyLife.Objects.ClothesLayer)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanTakeOff
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 543
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the given <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> can be taken off in the character creator.\n"
  example: []
  syntax:
    content: public static bool CanTakeOff(this ClothesLayer layer)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The clothes layer
    return:
      type: System.Boolean
      description: Whether the clothes layer can be taken off
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CanTakeOff(layer As ClothesLayer) As Boolean
  overload: TinyLife.Utilities.Extensions.CanTakeOff*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  id: GetDepth(TinyLife.Objects.ClothesLayer)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDepth(ClothesLayer)
  nameWithType: Extensions.GetDepth(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDepth
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 553
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the default depth for the <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> when rendering.\nThe default value is the index of the layer in the <xref href=\"TinyLife.Objects.Clothes.Layers\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public static float GetDepth(this ClothesLayer layer)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The clothes layer
    return:
      type: System.Single
      description: The default render depth
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDepth(layer As ClothesLayer) As Single
  overload: TinyLife.Utilities.Extensions.GetDepth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  commentId: M:TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  id: SetPauseGame(MLEM.Ui.RootElement,System.Boolean)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: SetPauseGame(RootElement, Boolean)
  nameWithType: Extensions.SetPauseGame(RootElement, Boolean)
  fullName: TinyLife.Utilities.Extensions.SetPauseGame(MLEM.Ui.RootElement, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetPauseGame
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 563
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nSets a flag for a <xref href=\"MLEM.Ui.RootElement\" data-throw-if-not-resolved=\"false\"></xref> that causes it to pause the game if it is displayed\n"
  example: []
  syntax:
    content: public static RootElement SetPauseGame(this RootElement root, bool value = true)
    parameters:
    - id: root
      type: MLEM.Ui.RootElement
      description: The root element that should pause the game
    - id: value
      type: System.Boolean
      description: Whether the element should pause the game
    return:
      type: MLEM.Ui.RootElement
      description: The root element passed, for chaining
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetPauseGame(root As RootElement, value As Boolean = True) As RootElement
  overload: TinyLife.Utilities.Extensions.SetPauseGame*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  commentId: M:TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  id: IsActiveRoot(MLEM.Ui.Elements.Element)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: IsActiveRoot(Element)
  nameWithType: Extensions.IsActiveRoot(Element)
  fullName: TinyLife.Utilities.Extensions.IsActiveRoot(MLEM.Ui.Elements.Element)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsActiveRoot
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 573
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns whether the given <xref href=\"MLEM.Ui.Elements.Element\" data-throw-if-not-resolved=\"false\"></xref> is currently considered to be part of the active <xref href=\"MLEM.Ui.RootElement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool IsActiveRoot(this Element element)
    parameters:
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The element to query.
    return:
      type: System.Boolean
      description: Whether the element is part of the active root.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsActiveRoot(element As Element) As Boolean
  overload: TinyLife.Utilities.Extensions.IsActiveRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  id: GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetRequiredMatchPercentage(ClothesIntention)
  nameWithType: Extensions.GetRequiredMatchPercentage(ClothesIntention)
  fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRequiredMatchPercentage
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 583
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the percentage that an <xref href=\"TinyLife.Objects.Outfit\" data-throw-if-not-resolved=\"false\"></xref> has to match the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> for it to be allowed to be used for an outfit.\nTo find the current percentage of an <xref href=\"TinyLife.Objects.Outfit\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static float GetRequiredMatchPercentage(this ClothesIntention intention)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to query.
    return:
      type: System.Single
      description: The percentage that the intention needs to match for it to be allowed.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRequiredMatchPercentage(intention As ClothesIntention) As Single
  overload: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  commentId: M:TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  id: Weekday(System.TimeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Weekday(TimeSpan)
  nameWithType: Extensions.Weekday(TimeSpan)
  fullName: TinyLife.Utilities.Extensions.Weekday(System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Weekday
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 598
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> that the given in-game time represents.\n"
  example: []
  syntax:
    content: public static DayOfWeek Weekday(this TimeSpan time)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The in-game time to query.
    return:
      type: System.DayOfWeek
      description: The weekday.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Weekday(time As TimeSpan) As DayOfWeek
  overload: TinyLife.Utilities.Extensions.Weekday*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  id: Icon(Microsoft.Xna.Framework.Input.Buttons)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Icon(Buttons)
  nameWithType: Extensions.Icon(Buttons)
  fullName: TinyLife.Utilities.Extensions.Icon(Microsoft.Xna.Framework.Input.Buttons)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 608
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a texture region that contains the icon that the given <xref href=\"Microsoft.Xna.Framework.Input.Buttons\" data-throw-if-not-resolved=\"false\"></xref> should display.\nThis method is used by <xref href=\"TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor%2cSystem.Func%7bTinyLife.Options%2cMicrosoft.Xna.Framework.Input.Buttons%7d%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Func%7bSystem.Boolean%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static TextureRegion Icon(this Buttons button)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The button whose icon to return.
    return:
      type: MLEM.Textures.TextureRegion
      description: The button&apos;s icon, or null if the button is invalid or has no icon.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Icon(button As Buttons) As TextureRegion
  overload: TinyLife.Utilities.Extensions.Icon*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  commentId: M:TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  id: Icon(MLEM.Input.MouseButton)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Icon(MouseButton)
  nameWithType: Extensions.Icon(MouseButton)
  fullName: TinyLife.Utilities.Extensions.Icon(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 637
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a texture region that contains the icon that the given <xref href=\"MLEM.Input.MouseButton\" data-throw-if-not-resolved=\"false\"></xref> should display.\n"
  example: []
  syntax:
    content: public static TextureRegion Icon(this MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button whose icon to return.
    return:
      type: MLEM.Textures.TextureRegion
      description: The button&apos;s icon, or null if the button is invalid or has no icon.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Icon(button As MouseButton) As TextureRegion
  overload: TinyLife.Utilities.Extensions.Icon*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Objects.Person)
  commentId: M:TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Objects.Person)
  id: GetPersonality(TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Objects.Person)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetPersonality(FoodType.FoodIntolerance, Person)
  nameWithType: Extensions.GetPersonality(FoodType.FoodIntolerance, Person)
  fullName: TinyLife.Utilities.Extensions.GetPersonality(TinyLife.Skills.FoodType.FoodIntolerance, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPersonality
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 655
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> that matches the given <xref href=\"TinyLife.Skills.FoodType.FoodIntolerance\" data-throw-if-not-resolved=\"false\"></xref> flag. If multiple values are set, the personality that is considered most important is returned.\nIf the <code data-dev-comment-type=\"paramref\" class=\"paramref\">person</code> is set, a personality will only be returned if the person has it.\n"
  example: []
  syntax:
    content: public static PersonalityType GetPersonality(this FoodType.FoodIntolerance intolerance, Person person = null)
    parameters:
    - id: intolerance
      type: TinyLife.Skills.FoodType.FoodIntolerance
      description: The intolerance whose personality to return.
    - id: person
      type: TinyLife.Objects.Person
      description: The person who needs to have the personality for it to be returned. If this is null, the most important personality is always returned.
    return:
      type: TinyLife.PersonalityType
      description: The matching personality for the given food intolerance flag.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPersonality(intolerance As FoodType.FoodIntolerance, person As Person = Nothing) As PersonalityType
  overload: TinyLife.Utilities.Extensions.GetPersonality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention)
  id: GetDescription(TinyLife.Objects.ClothesIntention)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDescription(ClothesIntention)
  nameWithType: Extensions.GetDescription(ClothesIntention)
  fullName: TinyLife.Utilities.Extensions.GetDescription(TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDescription
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 671
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns a set of strings (split into multiple lines) that describes the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> flags in a localized fashion.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetDescription(this ClothesIntention intentions)
    parameters:
    - id: intentions
      type: TinyLife.Objects.ClothesIntention
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: This clothes item&apos;s intention description
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDescription(intentions As ClothesIntention) As IEnumerable(Of String)
  overload: TinyLife.Utilities.Extensions.GetDescription*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  commentId: M:TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  id: Multiplier(TinyLife.Objects.LifeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: Multiplier(LifeSpan)
  nameWithType: Extensions.Multiplier(LifeSpan)
  fullName: TinyLife.Utilities.Extensions.Multiplier(TinyLife.Objects.LifeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Multiplier
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 684
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the multiplier that the given <xref href=\"TinyLife.Objects.LifeSpan\" data-throw-if-not-resolved=\"false\"></xref> applies to a person&apos;s life span.\n"
  example: []
  syntax:
    content: public static float Multiplier(this LifeSpan lifeSpan)
    parameters:
    - id: lifeSpan
      type: TinyLife.Objects.LifeSpan
      description: The life span whose multiplier to retrieve.
    return:
      type: System.Single
      description: The life span&apos;s multiplier.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiplier(lifeSpan As LifeSpan) As Single
  overload: TinyLife.Utilities.Extensions.Multiplier*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the given <code data-dev-comment-type="paramref" class="paramref">lifeSpan</code> is not defined, or <xref href="TinyLife.Objects.LifeSpan.Infinite" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  commentId: M:TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  id: GetDaysBeforeAging(TinyLife.Objects.AgeGroup,TinyLife.Objects.LifeSpan)
  isExtensionMethod: true
  parent: TinyLife.Utilities.Extensions
  langs:
  - csharp
  - vb
  name: GetDaysBeforeAging(AgeGroup, LifeSpan)
  nameWithType: Extensions.GetDaysBeforeAging(AgeGroup, LifeSpan)
  fullName: TinyLife.Utilities.Extensions.GetDaysBeforeAging(TinyLife.Objects.AgeGroup, TinyLife.Objects.LifeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Utilities/Extensions.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDaysBeforeAging
    path: ../TinyLife/Utilities/Extensions.cs
    startLine: 702
  assemblies:
  - Tiny Life
  namespace: TinyLife.Utilities
  summary: "\nReturns the amount of days that have to pass until a person in the given <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"TinyLife.Objects.LifeSpan\" data-throw-if-not-resolved=\"false\"></xref> ages up.\n"
  example: []
  syntax:
    content: public static int GetDaysBeforeAging(this AgeGroup group, LifeSpan lifeSpan)
    parameters:
    - id: group
      type: TinyLife.Objects.AgeGroup
      description: The age group whose days before aging to retrieve.
    - id: lifeSpan
      type: TinyLife.Objects.LifeSpan
      description: The life span whose multiplier to use.
    return:
      type: System.Int32
      description: The amount of days before a person ages up.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDaysBeforeAging(group As AgeGroup, lifeSpan As LifeSpan) As Integer
  overload: TinyLife.Utilities.Extensions.GetDaysBeforeAging*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the given <code data-dev-comment-type="paramref" class="paramref">lifeSpan</code> is not defined.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  isExternal: true
- uid: TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyCameraRotation(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: TinyLife.Utilities.Extensions.ToScreenPos*
  commentId: Overload:TinyLife.Utilities.Extensions.ToScreenPos
  name: ToScreenPos
  nameWithType: Extensions.ToScreenPos
  fullName: TinyLife.Utilities.Extensions.ToScreenPos
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.World.Map.ApplyInverseCameraRotation(Microsoft.Xna.Framework.Vector2,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: TinyLife.Utilities.Extensions.ToWorldPos*
  commentId: Overload:TinyLife.Utilities.Extensions.ToWorldPos
  name: ToWorldPos
  nameWithType: Extensions.ToWorldPos
  fullName: TinyLife.Utilities.Extensions.ToWorldPos
- uid: TinyLife.Utilities.Extensions.ToVisualY*
  commentId: Overload:TinyLife.Utilities.Extensions.ToVisualY
  name: ToVisualY
  nameWithType: Extensions.ToVisualY
  fullName: TinyLife.Utilities.Extensions.ToVisualY
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: MLEM.Misc.Direction2.Up
  commentId: F:MLEM.Misc.Direction2.Up
  isExternal: true
- uid: MLEM.Misc.Direction2.Left
  commentId: F:MLEM.Misc.Direction2.Left
  isExternal: true
- uid: TinyLife.Utilities.Extensions.ToWallSide*
  commentId: Overload:TinyLife.Utilities.Extensions.ToWallSide
  name: ToWallSide
  nameWithType: Extensions.ToWallSide
  fullName: TinyLife.Utilities.Extensions.ToWallSide
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: MLEM.Misc.Direction2.Down
  commentId: F:MLEM.Misc.Direction2.Down
  isExternal: true
- uid: TinyLife.Utilities.Extensions.IsVertical*
  commentId: Overload:TinyLife.Utilities.Extensions.IsVertical
  name: IsVertical
  nameWithType: Extensions.IsVertical
  fullName: TinyLife.Utilities.Extensions.IsVertical
- uid: MLEM.Misc.Direction2.Right
  commentId: F:MLEM.Misc.Direction2.Right
  isExternal: true
- uid: TinyLife.Utilities.Extensions.IsHorizontal*
  commentId: Overload:TinyLife.Utilities.Extensions.IsHorizontal
  name: IsHorizontal
  nameWithType: Extensions.IsHorizontal
  fullName: TinyLife.Utilities.Extensions.IsHorizontal
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  commentId: M:TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  isExternal: true
- uid: TinyLife.Utilities.Extensions.JsonCopy*
  commentId: Overload:TinyLife.Utilities.Extensions.JsonCopy
  name: JsonCopy
  nameWithType: Extensions.JsonCopy
  fullName: TinyLife.Utilities.Extensions.JsonCopy
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: TinyLife.Skills.Quality.Terrible
  commentId: F:TinyLife.Skills.Quality.Terrible
  isExternal: true
- uid: TinyLife.Skills.Quality.Good
  commentId: F:TinyLife.Skills.Quality.Good
  isExternal: true
- uid: TinyLife.Skills.Quality.Great
  commentId: F:TinyLife.Skills.Quality.Great
  isExternal: true
- uid: TinyLife.Skills.Quality.Perfect
  commentId: F:TinyLife.Skills.Quality.Perfect
  isExternal: true
- uid: TinyLife.Skills.Quality.Masterpiece
  commentId: F:TinyLife.Skills.Quality.Masterpiece
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetPriceModifier*
  commentId: Overload:TinyLife.Utilities.Extensions.GetPriceModifier
  name: GetPriceModifier
  nameWithType: Extensions.GetPriceModifier
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Utilities.Extensions.GetDecorativeRating*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDecorativeRating
  name: GetDecorativeRating
  nameWithType: Extensions.GetDecorativeRating
  fullName: TinyLife.Utilities.Extensions.GetDecorativeRating
- uid: TinyLife.Utilities.Extensions.GetChanceModifier*
  commentId: Overload:TinyLife.Utilities.Extensions.GetChanceModifier
  name: GetChanceModifier
  nameWithType: Extensions.GetChanceModifier
  fullName: TinyLife.Utilities.Extensions.GetChanceModifier
- uid: TinyLife.Utilities.Extensions.ToLocalizedString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToLocalizedString
  name: ToLocalizedString
  nameWithType: Extensions.ToLocalizedString
  fullName: TinyLife.Utilities.Extensions.ToLocalizedString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Utilities.Extensions.ToSellingPriceString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToSellingPriceString
  name: ToSellingPriceString
  nameWithType: Extensions.ToSellingPriceString
  fullName: TinyLife.Utilities.Extensions.ToSellingPriceString
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Utilities.Extensions.BothValid*
  commentId: Overload:TinyLife.Utilities.Extensions.BothValid
  name: BothValid
  nameWithType: Extensions.BothValid
  fullName: TinyLife.Utilities.Extensions.BothValid
- uid: System.Func{TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`1
  name: Func<CanExecuteResult>
  nameWithType: Func<CanExecuteResult>
  fullName: System.Func<TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of CanExecuteResult)
  fullName.vb: System.Func(Of TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of CanExecuteResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CompletionType.Active
  commentId: F:TinyLife.Actions.CompletionType.Active
  isExternal: true
- uid: TinyLife.Utilities.Extensions.BothCompleted*
  commentId: Overload:TinyLife.Utilities.Extensions.BothCompleted
  name: BothCompleted
  nameWithType: Extensions.BothCompleted
  fullName: TinyLife.Utilities.Extensions.BothCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: System.Func{TinyLife.Actions.CompletionType}
  commentId: T:System.Func{TinyLife.Actions.CompletionType}
  parent: System
  definition: System.Func`1
  name: Func<CompletionType>
  nameWithType: Func<CompletionType>
  fullName: System.Func<TinyLife.Actions.CompletionType>
  nameWithType.vb: Func(Of CompletionType)
  fullName.vb: System.Func(Of TinyLife.Actions.CompletionType)
  name.vb: Func(Of CompletionType)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.OneCompleted*
  commentId: Overload:TinyLife.Utilities.Extensions.OneCompleted
  name: OneCompleted
  nameWithType: Extensions.OneCompleted
  fullName: TinyLife.Utilities.Extensions.OneCompleted
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
- uid: TinyLife.GenealogyType.Parent
  commentId: F:TinyLife.GenealogyType.Parent
  isExternal: true
- uid: TinyLife.GenealogyType.Child
  commentId: F:TinyLife.GenealogyType.Child
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetOpposite*
  commentId: Overload:TinyLife.Utilities.Extensions.GetOpposite
  name: GetOpposite
  nameWithType: Extensions.GetOpposite
  fullName: TinyLife.Utilities.Extensions.GetOpposite
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetTransitive*
  commentId: Overload:TinyLife.Utilities.Extensions.GetTransitive
  name: GetTransitive
  nameWithType: Extensions.GetTransitive
  fullName: TinyLife.Utilities.Extensions.GetTransitive
- uid: System.Nullable{TinyLife.GenealogyType}
  commentId: T:System.Nullable{TinyLife.GenealogyType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<GenealogyType>
  nameWithType: Nullable<GenealogyType>
  fullName: System.Nullable<TinyLife.GenealogyType>
  nameWithType.vb: Nullable(Of GenealogyType)
  fullName.vb: System.Nullable(Of TinyLife.GenealogyType)
  name.vb: Nullable(Of GenealogyType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  parent: TinyLife
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
- uid: TinyLife.Utilities.Extensions.IsAgeAppropriate*
  commentId: Overload:TinyLife.Utilities.Extensions.IsAgeAppropriate
  name: IsAgeAppropriate
  nameWithType: Extensions.IsAgeAppropriate
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
- uid: TinyLife.Objects.Person.Pose
  commentId: T:TinyLife.Objects.Person.Pose
  parent: TinyLife.Objects
  name: Person.Pose
  nameWithType: Person.Pose
  fullName: TinyLife.Objects.Person.Pose
- uid: TinyLife.Objects.Person.Pose.WorkingStanding
  commentId: F:TinyLife.Objects.Person.Pose.WorkingStanding
  isExternal: true
- uid: TinyLife.Objects.Person.Pose.WorkingSitting
  commentId: F:TinyLife.Objects.Person.Pose.WorkingSitting
  isExternal: true
- uid: TinyLife.Utilities.Extensions.ToWorking*
  commentId: Overload:TinyLife.Utilities.Extensions.ToWorking
  name: ToWorking
  nameWithType: Extensions.ToWorking
  fullName: TinyLife.Utilities.Extensions.ToWorking
- uid: MLEM.Ui.Elements.Button
  commentId: T:MLEM.Ui.Elements.Button
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Button
  nameWithType: Button
  fullName: MLEM.Ui.Elements.Button
- uid: TinyLife.Utilities.Extensions.AddHoverAnimation*
  commentId: Overload:TinyLife.Utilities.Extensions.AddHoverAnimation
  name: AddHoverAnimation
  nameWithType: Extensions.AddHoverAnimation
  fullName: TinyLife.Utilities.Extensions.AddHoverAnimation
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Localization
  commentId: T:TinyLife.Localization
  name: Localization
  nameWithType: Localization
  fullName: TinyLife.Localization
- uid: TinyLife.Utilities.Extensions.ToSimpleLocalizedString*
  commentId: Overload:TinyLife.Utilities.Extensions.ToSimpleLocalizedString
  name: ToSimpleLocalizedString
  nameWithType: Extensions.ToSimpleLocalizedString
  fullName: TinyLife.Utilities.Extensions.ToSimpleLocalizedString
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Tools.FurnitureTool.Tab
  commentId: T:TinyLife.Tools.FurnitureTool.Tab
  parent: TinyLife.Tools
  name: FurnitureTool.Tab
  nameWithType: FurnitureTool.Tab
  fullName: TinyLife.Tools.FurnitureTool.Tab
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Utilities.Extensions.GetDefaultTab*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDefaultTab
  name: GetDefaultTab
  nameWithType: Extensions.GetDefaultTab
  fullName: TinyLife.Utilities.Extensions.GetDefaultTab
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DirtyOverlayTextureName
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
  name: GetDefaultDirtyOverlayTextureName
  nameWithType: Extensions.GetDefaultDirtyOverlayTextureName
  fullName: TinyLife.Utilities.Extensions.GetDefaultDirtyOverlayTextureName
- uid: TinyLife.World.LockType
  commentId: T:TinyLife.World.LockType
  parent: TinyLife.World
  name: LockType
  nameWithType: LockType
  fullName: TinyLife.World.LockType
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Utilities.Extensions.IsLockedFor*
  commentId: Overload:TinyLife.Utilities.Extensions.IsLockedFor
  name: IsLockedFor
  nameWithType: Extensions.IsLockedFor
  fullName: TinyLife.Utilities.Extensions.IsLockedFor
- uid: TinyLife.Utilities.Extensions.DrawIsoArea*
  commentId: Overload:TinyLife.Utilities.Extensions.DrawIsoArea
  name: DrawIsoArea
  nameWithType: Extensions.DrawIsoArea
  fullName: TinyLife.Utilities.Extensions.DrawIsoArea
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: System.Func{Microsoft.Xna.Framework.Vector2,System.Single}
  commentId: T:System.Func{Microsoft.Xna.Framework.Vector2,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<Vector2, Single>
  nameWithType: Func<Vector2, Single>
  fullName: System.Func<Microsoft.Xna.Framework.Vector2, System.Single>
  nameWithType.vb: Func(Of Vector2, Single)
  fullName.vb: System.Func(Of Microsoft.Xna.Framework.Vector2, System.Single)
  name.vb: Func(Of Vector2, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: TinyLife.Objects.ClothesLayer.Body
  commentId: F:TinyLife.Objects.ClothesLayer.Body
  isExternal: true
- uid: TinyLife.Objects.ClothesLayer.Arms
  commentId: F:TinyLife.Objects.ClothesLayer.Arms
  isExternal: true
- uid: TinyLife.Objects.ClothesLayer.Eyes
  commentId: F:TinyLife.Objects.ClothesLayer.Eyes
  isExternal: true
- uid: TinyLife.Utilities.Extensions.IsPartOfPerson*
  commentId: Overload:TinyLife.Utilities.Extensions.IsPartOfPerson
  name: IsPartOfPerson
  nameWithType: Extensions.IsPartOfPerson
  fullName: TinyLife.Utilities.Extensions.IsPartOfPerson
- uid: TinyLife.Utilities.Extensions.CanTakeOff*
  commentId: Overload:TinyLife.Utilities.Extensions.CanTakeOff
  name: CanTakeOff
  nameWithType: Extensions.CanTakeOff
  fullName: TinyLife.Utilities.Extensions.CanTakeOff
- uid: TinyLife.Objects.Clothes.Layers
  commentId: F:TinyLife.Objects.Clothes.Layers
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetDepth*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDepth
  name: GetDepth
  nameWithType: Extensions.GetDepth
  fullName: TinyLife.Utilities.Extensions.GetDepth
- uid: MLEM.Ui.RootElement
  commentId: T:MLEM.Ui.RootElement
  parent: MLEM.Ui
  isExternal: true
  name: RootElement
  nameWithType: RootElement
  fullName: MLEM.Ui.RootElement
- uid: TinyLife.Utilities.Extensions.SetPauseGame*
  commentId: Overload:TinyLife.Utilities.Extensions.SetPauseGame
  name: SetPauseGame
  nameWithType: Extensions.SetPauseGame
  fullName: TinyLife.Utilities.Extensions.SetPauseGame
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  isExternal: true
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.Utilities.Extensions.IsActiveRoot*
  commentId: Overload:TinyLife.Utilities.Extensions.IsActiveRoot
  name: IsActiveRoot
  nameWithType: Extensions.IsActiveRoot
  fullName: TinyLife.Utilities.Extensions.IsActiveRoot
- uid: TinyLife.Objects.Outfit
  commentId: T:TinyLife.Objects.Outfit
  parent: TinyLife.Objects
  name: Outfit
  nameWithType: Outfit
  fullName: TinyLife.Objects.Outfit
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage*
  commentId: Overload:TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
  name: GetRequiredMatchPercentage
  nameWithType: Extensions.GetRequiredMatchPercentage
  fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
- uid: System.DayOfWeek
  commentId: T:System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: TinyLife.Utilities.Extensions.Weekday*
  commentId: Overload:TinyLife.Utilities.Extensions.Weekday
  name: Weekday
  nameWithType: Extensions.Weekday
  fullName: TinyLife.Utilities.Extensions.Weekday
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
  commentId: M:TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Microsoft.Xna.Framework.Input.Buttons},Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Func{System.Boolean})
  isExternal: true
- uid: TinyLife.Utilities.Extensions.Icon*
  commentId: Overload:TinyLife.Utilities.Extensions.Icon
  name: Icon
  nameWithType: Extensions.Icon
  fullName: TinyLife.Utilities.Extensions.Icon
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  isExternal: true
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: MLEM.Input
  commentId: N:MLEM.Input
  isExternal: true
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Skills.FoodType.FoodIntolerance
  commentId: T:TinyLife.Skills.FoodType.FoodIntolerance
  parent: TinyLife.Skills
  name: FoodType.FoodIntolerance
  nameWithType: FoodType.FoodIntolerance
  fullName: TinyLife.Skills.FoodType.FoodIntolerance
- uid: TinyLife.Utilities.Extensions.GetPersonality*
  commentId: Overload:TinyLife.Utilities.Extensions.GetPersonality
  name: GetPersonality
  nameWithType: Extensions.GetPersonality
  fullName: TinyLife.Utilities.Extensions.GetPersonality
- uid: TinyLife.Utilities.Extensions.GetDescription*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDescription
  name: GetDescription
  nameWithType: Extensions.GetDescription
  fullName: TinyLife.Utilities.Extensions.GetDescription
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.LifeSpan
  commentId: T:TinyLife.Objects.LifeSpan
  parent: TinyLife.Objects
  name: LifeSpan
  nameWithType: LifeSpan
  fullName: TinyLife.Objects.LifeSpan
- uid: TinyLife.Objects.LifeSpan.Infinite
  commentId: F:TinyLife.Objects.LifeSpan.Infinite
  isExternal: true
- uid: TinyLife.Utilities.Extensions.Multiplier*
  commentId: Overload:TinyLife.Utilities.Extensions.Multiplier
  name: Multiplier
  nameWithType: Extensions.Multiplier
  fullName: TinyLife.Utilities.Extensions.Multiplier
- uid: TinyLife.Utilities.Extensions.GetDaysBeforeAging*
  commentId: Overload:TinyLife.Utilities.Extensions.GetDaysBeforeAging
  name: GetDaysBeforeAging
  nameWithType: Extensions.GetDaysBeforeAging
  fullName: TinyLife.Utilities.Extensions.GetDaysBeforeAging

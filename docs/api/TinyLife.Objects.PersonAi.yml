### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  id: PersonAi
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.PersonAi.GetAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Objects.PersonAi.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  - TinyLife.Objects.PersonAi.StartAutomatically(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  langs:
  - csharp
  - vb
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
  type: Class
  source:
    remote:
      path: TinyLife/Objects/PersonAi.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonAi
    path: ../TinyLife/Objects/PersonAi.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis class holds the artificial intelligence implementation for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThe AI automatically selects actions based on their <xref href=\"TinyLife.Actions.ActionType.AiSettings\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class PersonAi
    content.vb: Public Class PersonAi
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.PersonAi.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.PersonAi.StartAutomatically(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Objects.PersonAi.StartAutomatically(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  id: StartAutomatically(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Objects.PersonAi
  langs:
  - csharp
  - vb
  name: StartAutomatically(Person, ActionType)
  nameWithType: PersonAi.StartAutomatically(Person, ActionType)
  fullName: TinyLife.Objects.PersonAi.StartAutomatically(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/PersonAi.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StartAutomatically
    path: ../TinyLife/Objects/PersonAi.cs
    startLine: 118
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses a person to start the given action automatically with the same behavior that it would have if started by the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static bool StartAutomatically(Person person, ActionType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who should start the action
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start
    return:
      type: System.Boolean
      description: Whether the action was successfully started
    content.vb: Public Shared Function StartAutomatically(person As Person, type As ActionType) As Boolean
  overload: TinyLife.Objects.PersonAi.StartAutomatically*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.PersonAi.GetAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Objects.PersonAi.GetAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  id: GetAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Objects.PersonAi
  langs:
  - csharp
  - vb
  name: GetAllActionObjects(Person, ActionType)
  nameWithType: PersonAi.GetAllActionObjects(Person, ActionType)
  fullName: TinyLife.Objects.PersonAi.GetAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/PersonAi.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAllActionObjects
    path: ../TinyLife/Objects/PersonAi.cs
    startLine: 150
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns all <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that are available to the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> for the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>.\nThe objects returned are the ones that would also be considered by the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> when starting an action.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionInfo> GetAllActionObjects(Person person, ActionType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: A set of action infos that the given action can be started with
    content.vb: Public Shared Function GetAllActionObjects(person As Person, type As ActionType) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Objects.PersonAi.GetAllActionObjects*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.PersonAi.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Objects.PersonAi.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  id: GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  parent: TinyLife.Objects.PersonAi
  langs:
  - csharp
  - vb
  name: GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  nameWithType: PersonAi.GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  fullName: TinyLife.Objects.PersonAi.GetRandomVariety(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>, TinyLife.Actions.ActionInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/PersonAi.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomVariety
    path: ../TinyLife/Objects/PersonAi.cs
    startLine: 184
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a random action variety from the given set of action varieties based on their <xref href=\"TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe returned variety is guaranteed to be executable in this scenario (<xref href=\"TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public static ActionVariety? GetRandomVariety(IEnumerable<ActionVariety> varieties, ActionInfo info)
    parameters:
    - id: varieties
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: The action varieties to choose from
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action infos
    return:
      type: System.Nullable{TinyLife.Actions.ActionVariety}
      description: A random, executable action variety
    content.vb: Public Shared Function GetRandomVariety(varieties As IEnumerable(Of ActionVariety), info As ActionInfo) As ActionVariety?
  overload: TinyLife.Objects.PersonAi.GetRandomVariety*
  nameWithType.vb: PersonAi.GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.PersonAi.GetRandomVariety(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety), TinyLife.Actions.ActionInfo)
  name.vb: GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.ActionType.AiSettings
  commentId: T:TinyLife.Actions.ActionType.AiSettings
  parent: TinyLife.Actions
  name: ActionType.AiSettings
  nameWithType: ActionType.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.PersonAi.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<PersonAi>()
  nameWithType: Extensions.JsonCopy<PersonAi>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.PersonAi>()
  nameWithType.vb: Extensions.JsonCopy(Of PersonAi)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.PersonAi)()
  name.vb: JsonCopy(Of PersonAi)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<PersonAi>
    nameWithType: Extensions.JsonCopy<PersonAi>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.PersonAi>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of PersonAi)
    nameWithType: Extensions.JsonCopy(Of PersonAi)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.PersonAi)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Objects.PersonAi.StartAutomatically*
  commentId: Overload:TinyLife.Objects.PersonAi.StartAutomatically
  name: StartAutomatically
  nameWithType: PersonAi.StartAutomatically
  fullName: TinyLife.Objects.PersonAi.StartAutomatically
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.PersonAi.GetAllActionObjects*
  commentId: Overload:TinyLife.Objects.PersonAi.GetAllActionObjects
  name: GetAllActionObjects
  nameWithType: PersonAi.GetAllActionObjects
  fullName: TinyLife.Objects.PersonAi.GetAllActionObjects
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionInfo>
  nameWithType: IEnumerable<ActionInfo>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionInfo>
  nameWithType.vb: IEnumerable(Of ActionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionInfo)
  name.vb: IEnumerable(Of ActionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.PersonAi.GetRandomVariety*
  commentId: Overload:TinyLife.Objects.PersonAi.GetRandomVariety
  name: GetRandomVariety
  nameWithType: PersonAi.GetRandomVariety
  fullName: TinyLife.Objects.PersonAi.GetRandomVariety
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Nullable{TinyLife.Actions.ActionVariety}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ActionVariety>
  nameWithType: Nullable<ActionVariety>
  fullName: System.Nullable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: Nullable(Of ActionVariety)
  fullName.vb: System.Nullable(Of TinyLife.Actions.ActionVariety)
  name.vb: Nullable(Of ActionVariety)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

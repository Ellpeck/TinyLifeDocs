### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  id: Wallpaper
  parent: TinyLife.World
  children:
  - TinyLife.World.Wallpaper.#ctor(System.String,System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,System.Int32[],TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[])
  - TinyLife.World.Wallpaper.BaseName
  - TinyLife.World.Wallpaper.Colors
  - TinyLife.World.Wallpaper.ColorSchemes
  - TinyLife.World.Wallpaper.DefaultColors
  - TinyLife.World.Wallpaper.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,TinyLife.World.WallMode,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Wallpaper.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Single)
  - TinyLife.World.Wallpaper.GetPrice
  - TinyLife.World.Wallpaper.Icon
  - TinyLife.World.Wallpaper.Name
  - TinyLife.World.Wallpaper.Price
  - TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  - TinyLife.World.Wallpaper.Wallpapers
  langs:
  - csharp
  - vb
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
  type: Class
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wallpaper
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA wallpaper is a single-instanced object that can be attached to a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, which makes the wall render a different texture.\nTo register custom wallpapers, use <xref href=\"TinyLife.World.Wallpaper.Register(System.String%2cSystem.Int32%2cMLEM.Textures.UniformTextureAtlas%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%5b%5d%2cMLEM.Textures.TextureRegion%2cSystem.Int32%5b%5d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>. Note that registered wallpapers need to use a texture generated by <xref href=\"TinyLife.Utilities.TextureHandler.ApplyWallpaperMasks(Microsoft.Xna.Framework.Graphics.Texture2D%2cSystem.Int32%2cSystem.Int32%2cSystem.Action%7bMLEM.Textures.UniformTextureAtlas%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(Wallpaper.Converter))]

      public class Wallpaper : IPricedObject
    content.vb: >-
      <JsonConverter(GetType(Wallpaper.Converter))>

      Public Class Wallpaper
          Implements IPricedObject
  inheritance:
  - System.Object
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Wallpaper.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Wallpaper.Wallpapers
  commentId: F:TinyLife.World.Wallpaper.Wallpapers
  id: Wallpapers
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Wallpapers
  nameWithType: Wallpaper.Wallpapers
  fullName: TinyLife.World.Wallpaper.Wallpapers
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wallpapers
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe registry for all <xref href=\"TinyLife.World.Wallpaper\" data-throw-if-not-resolved=\"false\"></xref> objects in the game and mods.\nUse <xref href=\"TinyLife.World.Wallpaper.Register(System.String%2cSystem.Int32%2cMLEM.Textures.UniformTextureAtlas%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%5b%5d%2cMLEM.Textures.TextureRegion%2cSystem.Int32%5b%5d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref> to register custom wallpapers.\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, Wallpaper[]> Wallpapers
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.World.Wallpaper[]}
    content.vb: Public Shared ReadOnly Wallpapers As IDictionary(Of String, Wallpaper())
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Wallpaper.BaseName
  commentId: F:TinyLife.World.Wallpaper.BaseName
  id: BaseName
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: BaseName
  nameWithType: Wallpaper.BaseName
  fullName: TinyLife.World.Wallpaper.BaseName
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BaseName
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this type of wallpaper. Whereas <xref href=\"TinyLife.World.Wallpaper.Name\" data-throw-if-not-resolved=\"false\"></xref> has the index of its color scheme appended to it, this one is just the type&apos;s name.\n"
  example: []
  syntax:
    content: public readonly string BaseName
    return:
      type: System.String
    content.vb: Public ReadOnly BaseName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.Name
  commentId: F:TinyLife.World.Wallpaper.Name
  id: Name
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Wallpaper.Name
  fullName: TinyLife.World.Wallpaper.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this specific wallpaper. This is comprised of the <xref href=\"TinyLife.World.Wallpaper.BaseName\" data-throw-if-not-resolved=\"false\"></xref> with its color scheme index attached to it.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.Price
  commentId: F:TinyLife.World.Wallpaper.Price
  id: Price
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Wallpaper.Price
  fullName: TinyLife.World.Wallpaper.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of this wallpaper. Can be retrieved easily using <xref href=\"TinyLife.World.Wallpaper.GetPrice\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.ColorSchemes
  commentId: F:TinyLife.World.Wallpaper.ColorSchemes
  id: ColorSchemes
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: ColorSchemes
  nameWithType: Wallpaper.ColorSchemes
  fullName: TinyLife.World.Wallpaper.ColorSchemes
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSchemes
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn array of <xref href=\"TinyLife.Utilities.ColorScheme\" data-throw-if-not-resolved=\"false\"></xref> that this wallpaper type uses.\nIf this array has more than one entry, textures for the other layers will be gathered to the right of the texture region passed in the constructor.\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] ColorSchemes
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly ColorSchemes As ColorScheme()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.Colors
  commentId: F:TinyLife.World.Wallpaper.Colors
  id: Colors
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Wallpaper.Colors
  fullName: TinyLife.World.Wallpaper.Colors
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe set of colors applied to this wallpaper instance.\nEach entry represents an index in the <xref href=\"TinyLife.World.Wallpaper.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref> of this wallpaper.\n"
  example: []
  syntax:
    content: public readonly int[] Colors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly Colors As Integer()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.Icon
  commentId: F:TinyLife.World.Wallpaper.Icon
  id: Icon
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Wallpaper.Icon
  fullName: TinyLife.World.Wallpaper.Icon
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe build mode icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.DefaultColors
  commentId: F:TinyLife.World.Wallpaper.DefaultColors
  id: DefaultColors
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: DefaultColors
  nameWithType: Wallpaper.DefaultColors
  fullName: TinyLife.World.Wallpaper.DefaultColors
  type: Field
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DefaultColors
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe colors that this wallpaper should have by default.\n"
  example: []
  syntax:
    content: public readonly int[] DefaultColors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly DefaultColors As Integer()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wallpaper.#ctor(System.String,System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,System.Int32[],TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[])
  commentId: M:TinyLife.World.Wallpaper.#ctor(System.String,System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,System.Int32[],TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[])
  id: '#ctor(System.String,System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,System.Int32[],TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[])'
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Wallpaper(String, String, Int32, UniformTextureAtlas, Point, Int32[], ColorScheme[], TextureRegion, Int32[])
  nameWithType: Wallpaper.Wallpaper(String, String, Int32, UniformTextureAtlas, Point, Int32[], ColorScheme[], TextureRegion, Int32[])
  fullName: TinyLife.World.Wallpaper.Wallpaper(System.String, System.String, System.Int32, MLEM.Textures.UniformTextureAtlas, Microsoft.Xna.Framework.Point, System.Int32[], TinyLife.Utilities.ColorScheme[], MLEM.Textures.TextureRegion, System.Int32[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new wallpaper with the given settings.\nTo create an instance of a custom wallpaper class, use <xref href=\"TinyLife.World.Wallpaper.Register(System.String%2cSystem.Int32%2cMLEM.Textures.UniformTextureAtlas%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%5b%5d%2cMLEM.Textures.TextureRegion%2cSystem.Int32%5b%5d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Wallpaper(string baseName, string name, int price, UniformTextureAtlas texture, Point textureRegion, int[] colors, ColorScheme[] colorSchemes, TextureRegion icon, int[] defaultColors)
    parameters:
    - id: baseName
      type: System.String
    - id: name
      type: System.String
    - id: price
      type: System.Int32
    - id: texture
      type: MLEM.Textures.UniformTextureAtlas
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
    - id: colors
      type: System.Int32[]
    - id: colorSchemes
      type: TinyLife.Utilities.ColorScheme[]
    - id: icon
      type: MLEM.Textures.TextureRegion
    - id: defaultColors
      type: System.Int32[]
    content.vb: Protected Sub New(baseName As String, name As String, price As Integer, texture As UniformTextureAtlas, textureRegion As Point, colors As Integer(), colorSchemes As ColorScheme(), icon As TextureRegion, defaultColors As Integer())
  overload: TinyLife.World.Wallpaper.#ctor*
  nameWithType.vb: Wallpaper.Wallpaper(String, String, Int32, UniformTextureAtlas, Point, Int32(), ColorScheme(), TextureRegion, Int32())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.World.Wallpaper.Wallpaper(System.String, System.String, System.Int32, MLEM.Textures.UniformTextureAtlas, Microsoft.Xna.Framework.Point, System.Int32(), TinyLife.Utilities.ColorScheme(), MLEM.Textures.TextureRegion, System.Int32())
  name.vb: Wallpaper(String, String, Int32, UniformTextureAtlas, Point, Int32(), ColorScheme(), TextureRegion, Int32())
- uid: TinyLife.World.Wallpaper.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,TinyLife.World.WallMode,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Wallpaper.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,TinyLife.World.WallMode,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,TinyLife.World.WallMode,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, WallMode, Boolean, Boolean, Single, Single, Boolean, Nullable<Color>)
  nameWithType: Wallpaper.Draw(GameTime, SpriteBatch, Vector2, WallMode, Boolean, Boolean, Single, Single, Boolean, Nullable<Color>)
  fullName: TinyLife.World.Wallpaper.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, TinyLife.World.WallMode, System.Boolean, System.Boolean, System.Single, System.Single, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this wallpaper on the given wall with the given data.\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Vector2 drawPos, WallMode mode, bool isDown, bool vertical, float scale, float depth, bool shadow, Color? overrideColor = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch used for rendering
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen coordinates, that the wall should be drawn at
    - id: mode
      type: TinyLife.World.WallMode
      description: The <xref href="TinyLife.World.WallMode" data-throw-if-not-resolved="false"></xref> that the wall should be drawn with
    - id: isDown
      type: System.Boolean
      description: Whether or not the wall is rendering with a reduced height
    - id: vertical
      type: System.Boolean
      description: Whether or not the wall is vertical (or horizontal) in the world
    - id: scale
      type: System.Single
      description: The scale that the wall should be rendered with
    - id: depth
      type: System.Single
      description: The depth that the wall should be rendered with
    - id: shadow
      type: System.Boolean
      description: Whether or not the shadow texture should be applied on top of the texture
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, drawPos As Vector2, mode As WallMode, isDown As Boolean, vertical As Boolean, scale As Single, depth As Single, shadow As Boolean, overrideColor As Color? = Nothing)
  overload: TinyLife.World.Wallpaper.Draw*
  nameWithType.vb: Wallpaper.Draw(GameTime, SpriteBatch, Vector2, WallMode, Boolean, Boolean, Single, Single, Boolean, Nullable(Of Color))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.World.Wallpaper.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, TinyLife.World.WallMode, System.Boolean, System.Boolean, System.Single, System.Single, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, WallMode, Boolean, Boolean, Single, Single, Boolean, Nullable(Of Color))
- uid: TinyLife.World.Wallpaper.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Single)
  commentId: M:TinyLife.World.Wallpaper.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Single)
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: DrawUi(Element, SpriteBatch, GameTime, Single)
  nameWithType: Wallpaper.DrawUi(Element, SpriteBatch, GameTime, Single)
  fullName: TinyLife.World.Wallpaper.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 137
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this wallpaper on the given <xref href=\"MLEM.Ui.Elements.Element\" data-throw-if-not-resolved=\"false\"></xref> in ui space\n"
  example: []
  syntax:
    content: public virtual void DrawUi(Element e, SpriteBatch batch, GameTime time, float drawScale = 0.3F)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The element to draw on
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The batch to draw with
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: drawScale
      type: System.Single
      description: The scale to draw with. Defaults to 0.3.
    content.vb: Public Overridable Sub DrawUi(e As Element, batch As SpriteBatch, time As GameTime, drawScale As Single = 0.3F)
  overload: TinyLife.World.Wallpaper.DrawUi*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Wallpaper.GetPrice
  commentId: M:TinyLife.World.Wallpaper.GetPrice
  id: GetPrice
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Wallpaper.GetPrice()
  fullName: TinyLife.World.Wallpaper.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 145
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Overridable Function GetPrice As Single
  overload: TinyLife.World.Wallpaper.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  commentId: M:TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  id: Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  parent: TinyLife.World.Wallpaper
  langs:
  - csharp
  - vb
  name: Register(String, Int32, UniformTextureAtlas, Point, ColorScheme[], TextureRegion, Int32[], Type)
  nameWithType: Wallpaper.Register(String, Int32, UniformTextureAtlas, Point, ColorScheme[], TextureRegion, Int32[], Type)
  fullName: TinyLife.World.Wallpaper.Register(System.String, System.Int32, MLEM.Textures.UniformTextureAtlas, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme[], MLEM.Textures.TextureRegion, System.Int32[], System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wallpaper.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/Wallpaper.cs
    startLine: 161
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates and registers a new wallpaper with the given settings.\nNote that the <code data-dev-comment-type=\"paramref\" class=\"paramref\">texture</code> should be one generated using <xref href=\"TinyLife.Utilities.TextureHandler.ApplyWallpaperMasks(Microsoft.Xna.Framework.Graphics.Texture2D%2cSystem.Int32%2cSystem.Int32%2cSystem.Action%7bMLEM.Textures.UniformTextureAtlas%7d)\" data-throw-if-not-resolved=\"false\"></xref>, as otherwise, graphical issues will occur.\n"
  example: []
  syntax:
    content: public static void Register(string name, int price, UniformTextureAtlas texture, Point textureRegion, ColorScheme[] colors, TextureRegion icon = null, int[] defaultColors = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the wallpaper type
    - id: price
      type: System.Int32
      description: The price of a single wallpaper of this type
    - id: texture
      type: MLEM.Textures.UniformTextureAtlas
      description: The texture that this wallpaper should use. This needs to have been generated using <xref href="TinyLife.Utilities.TextureHandler.ApplyWallpaperMasks(Microsoft.Xna.Framework.Graphics.Texture2D%2cSystem.Int32%2cSystem.Int32%2cSystem.Action%7bMLEM.Textures.UniformTextureAtlas%7d)" data-throw-if-not-resolved="false"></xref>.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The top left texture region of this wallpaper (on the original texture, not the mask)
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color schemes for each layer of the wallpaper. If there is more than one entry, additional layers will automatically be gathered to the right of the passed <code data-dev-comment-type="paramref" class="paramref">textureRegion</code>.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object
    - id: defaultColors
      type: System.Int32[]
      description: The colors that this wallpaper should display with by default in the wallpaper tool.
    - id: constructedType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that should be constructed to create this wallpaper. Defaults to <xref href="TinyLife.World.Wallpaper" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Sub Register(name As String, price As Integer, texture As UniformTextureAtlas, textureRegion As Point, colors As ColorScheme(), icon As TextureRegion = Nothing, defaultColors As Integer() = Nothing, constructedType As Type = Nothing)
  overload: TinyLife.World.Wallpaper.Register*
  nameWithType.vb: Wallpaper.Register(String, Int32, UniformTextureAtlas, Point, ColorScheme(), TextureRegion, Int32(), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Wallpaper.Register(System.String, System.Int32, MLEM.Textures.UniformTextureAtlas, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme(), MLEM.Textures.TextureRegion, System.Int32(), System.Type)
  name.vb: Register(String, Int32, UniformTextureAtlas, Point, ColorScheme(), TextureRegion, Int32(), Type)
references:
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  commentId: M:TinyLife.World.Wallpaper.Register(System.String,System.Int32,MLEM.Textures.UniformTextureAtlas,Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],MLEM.Textures.TextureRegion,System.Int32[],System.Type)
  isExternal: true
- uid: TinyLife.Utilities.TextureHandler.ApplyWallpaperMasks(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Action{MLEM.Textures.UniformTextureAtlas})
  commentId: M:TinyLife.Utilities.TextureHandler.ApplyWallpaperMasks(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Action{MLEM.Textures.UniformTextureAtlas})
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wallpaper.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Wallpaper>()
  nameWithType: Extensions.JsonCopy<Wallpaper>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Wallpaper>()
  nameWithType.vb: Extensions.JsonCopy(Of Wallpaper)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Wallpaper)()
  name.vb: JsonCopy(Of Wallpaper)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Wallpaper>
    nameWithType: Extensions.JsonCopy<Wallpaper>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Wallpaper>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Wallpaper)
    nameWithType: Extensions.JsonCopy(Of Wallpaper)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Wallpaper)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  parent: TinyLife.World
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.World.Wallpaper[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.World.Wallpaper[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Wallpaper[]>
  nameWithType: IDictionary<String, Wallpaper[]>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.World.Wallpaper[]>
  nameWithType.vb: IDictionary(Of String, Wallpaper())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.World.Wallpaper())
  name.vb: IDictionary(Of String, Wallpaper())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
    nameWithType: Wallpaper
    fullName: TinyLife.World.Wallpaper
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
    nameWithType: Wallpaper
    fullName: TinyLife.World.Wallpaper
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.World.Wallpaper.Name
  commentId: F:TinyLife.World.Wallpaper.Name
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Wallpaper.BaseName
  commentId: F:TinyLife.World.Wallpaper.BaseName
  isExternal: true
- uid: TinyLife.World.Wallpaper.GetPrice
  commentId: M:TinyLife.World.Wallpaper.GetPrice
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.Wallpaper.ColorSchemes
  commentId: F:TinyLife.World.Wallpaper.ColorSchemes
  isExternal: true
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.World.Wallpaper.#ctor*
  commentId: Overload:TinyLife.World.Wallpaper.#ctor
  name: Wallpaper
  nameWithType: Wallpaper.Wallpaper
  fullName: TinyLife.World.Wallpaper.Wallpaper
- uid: MLEM.Textures.UniformTextureAtlas
  commentId: T:MLEM.Textures.UniformTextureAtlas
  parent: MLEM.Textures
  isExternal: true
  name: UniformTextureAtlas
  nameWithType: UniformTextureAtlas
  fullName: MLEM.Textures.UniformTextureAtlas
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.WallMode
  commentId: T:TinyLife.World.WallMode
  parent: TinyLife.World
  name: WallMode
  nameWithType: WallMode
  fullName: TinyLife.World.WallMode
- uid: TinyLife.World.Wallpaper.Draw*
  commentId: Overload:TinyLife.World.Wallpaper.Draw
  name: Draw
  nameWithType: Wallpaper.Draw
  fullName: TinyLife.World.Wallpaper.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.World.Wallpaper.DrawUi*
  commentId: Overload:TinyLife.World.Wallpaper.DrawUi
  name: DrawUi
  nameWithType: Wallpaper.DrawUi
  fullName: TinyLife.World.Wallpaper.DrawUi
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.World.Wallpaper.GetPrice*
  commentId: Overload:TinyLife.World.Wallpaper.GetPrice
  name: GetPrice
  nameWithType: Wallpaper.GetPrice
  fullName: TinyLife.World.Wallpaper.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.World.Wallpaper.Register*
  commentId: Overload:TinyLife.World.Wallpaper.Register
  name: Register
  nameWithType: Wallpaper.Register
  fullName: TinyLife.World.Wallpaper.Register

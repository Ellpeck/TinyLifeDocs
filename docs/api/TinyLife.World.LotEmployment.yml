### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  id: LotEmployment
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  - TinyLife.World.LotEmployment.Actions
  - TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  - TinyLife.World.LotEmployment.IdleObjects
  - TinyLife.World.LotEmployment.IdleTime
  - TinyLife.World.LotEmployment.IsFinished
  - TinyLife.World.LotEmployment.MapWideEmployments
  - TinyLife.World.LotEmployment.Name
  - TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  - TinyLife.World.LotEmployment.WorkHours
  langs:
  - csharp
  - vb
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
  type: Class
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotEmployment
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot employment is a job that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> executes somewhat perpetually.\nA person with a <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> does not live on a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> or in a <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>, but instead either works at their lot employment or &quot;leaves the city&quot; through an <xref href=\"TinyLife.Actions.BeAwayFromLotEmploymentAction\" data-throw-if-not-resolved=\"false\"></xref>.\nLot employments can be added to lots using <xref href=\"TinyLife.World.LotType.Employments\" data-throw-if-not-resolved=\"false\"></xref> or to a map using <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class LotEmployment
    content.vb: Public Class LotEmployment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  id: MapWideEmployments
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MapWideEmployments
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA list of lot employments that are map-wide, that is, that aren&apos;t bound to a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nTo add more map-wide lot employments, just add additional entries to this list.\n"
  example: []
  syntax:
    content: public static readonly List<LotEmployment> MapWideEmployments
    return:
      type: System.Collections.Generic.List{TinyLife.World.LotEmployment}
    content.vb: Public Shared ReadOnly MapWideEmployments As List(Of LotEmployment)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.LotEmployment.Name
  commentId: F:TinyLife.World.LotEmployment.Name
  id: Name
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotEmployment.Name
  fullName: TinyLife.World.LotEmployment.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot employment\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  id: Actions
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Actions
  nameWithType: LotEmployment.Actions
  fullName: TinyLife.World.LotEmployment.Actions
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Actions
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> instances that a person working in this employment should randomly execute.\nUsing actions with the <xref href=\"TinyLife.Objects.ObjectCategory.Nothing\" data-throw-if-not-resolved=\"false\"></xref> category will cause any instances of the action to act as if they had the <xref href=\"TinyLife.Objects.ObjectCategory.Self\" data-throw-if-not-resolved=\"false\"></xref> category instead.\nNote that, for an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> returned by this function to have an effect, its <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> needs to be greater than 0.\n"
  example: []
  syntax:
    content: public readonly Func<IEnumerable<ActionType>> Actions
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
    content.vb: Public ReadOnly Actions As Func(Of IEnumerable(Of ActionType))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  id: WorkHours
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WorkHours
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe range of hours that this lot employment is active in.\nDuring times outside of these hours, people with this employment will automatically enqueue and execute a <xref href=\"TinyLife.Actions.BeAwayFromLotEmploymentAction\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly (int Start, int End) WorkHours
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public ReadOnly WorkHours As(Start As Integer, End As Integer)(Of Integer , Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  id: IsFinished
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFinished
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA function that can be used to finish the lot employment&apos;s work hours before the current time is outside of <xref href=\"TinyLife.World.LotEmployment.WorkHours\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is used by the mail carrier to make them stop working once all mail is delivered.\n"
  example: []
  syntax:
    content: public Func<Person, bool> IsFinished { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Person,System.Boolean}
    content.vb: Public Property IsFinished As Func(Of Person, Boolean)
  overload: TinyLife.World.LotEmployment.IsFinished*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  id: IdleObjects
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IdleObjects
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that represent the item types that a person with this lot employment will idle around if they have nothing else to do.\nIf this is set to a non-<xref href=\"TinyLife.Objects.ObjectCategory.Nothing\" data-throw-if-not-resolved=\"false\"></xref> category, people with this lot employment will automatically enqueue the <xref href=\"TinyLife.Actions.ActionType.LotEmploymentIdle\" data-throw-if-not-resolved=\"false\"></xref> action if there is nothing else to do currently.\n"
  example: []
  syntax:
    content: public ObjectCategory IdleObjects { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Property IdleObjects As ObjectCategory
  overload: TinyLife.World.LotEmployment.IdleObjects*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.IdleTime
  commentId: P:TinyLife.World.LotEmployment.IdleTime
  id: IdleTime
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IdleTime
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe amount of in-game time that a person with this lot employment will idle at one of their <xref href=\"TinyLife.World.LotEmployment.IdleObjects\" data-throw-if-not-resolved=\"false\"></xref> for.\nDefaults to 5 minutes.\n"
  example: []
  syntax:
    content: public TimeSpan IdleTime { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property IdleTime As TimeSpan
  overload: TinyLife.World.LotEmployment.IdleTime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  commentId: M:TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  id: '#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})'
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: LotEmployment(String, (Int32 Start, Int32 End), Func<ActionType[]>)
  nameWithType: LotEmployment.LotEmployment(String, (Int32 Start, Int32 End), Func<ActionType[]>)
  fullName: TinyLife.World.LotEmployment.LotEmployment(System.String, System.ValueTuple<System.Int32, System.Int32>, System.Func<TinyLife.Actions.ActionType[]>)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot employment with the given settings\n"
  example: []
  syntax:
    content: public LotEmployment(string name, (int Start, int End) workHours, Func<ActionType[]> actions)
    parameters:
    - id: name
      type: System.String
      description: The lot employment&apos;s name
    - id: workHours
      type: System.ValueTuple{System.Int32,System.Int32}
      description: The lot employment&apos;s work hours
    - id: actions
      type: System.Func{TinyLife.Actions.ActionType[]}
      description: The <xref href="TinyLife.World.LotEmployment.Actions" data-throw-if-not-resolved="false"></xref> that lot employees should execute
    content.vb: Public Sub New(name As String, workHours As(Start As Integer, End As Integer)(Of Integer , Integer), actions As Func(Of ActionType()))
  overload: TinyLife.World.LotEmployment.#ctor*
  nameWithType.vb: LotEmployment.LotEmployment(String, (Start As Int32, End As Int32)(Of Int32, Int32), Func(Of ActionType()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.LotEmployment.LotEmployment(System.String, System.ValueTuple(Of System.Int32, System.Int32), System.Func(Of TinyLife.Actions.ActionType()))
  name.vb: LotEmployment(String, (Start As Int32, End As Int32)(Of Int32, Int32), Func(Of ActionType()))
- uid: TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  commentId: M:TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  id: GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: GetCurrentPerson(Map, Lot)
  nameWithType: LotEmployment.GetCurrentPerson(Map, Lot)
  fullName: TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCurrentPerson
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that is currently in charge of this lot employment\nTo check for <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref>, a null lot can be passed.\n"
  example: []
  syntax:
    content: public Person GetCurrentPerson(Map map, Lot lot)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: lot
      type: TinyLife.World.Lot
      description: The lot, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry
    return:
      type: TinyLife.Objects.Person
      description: The person that currently works in this lot employment, or null if there is none
    content.vb: Public Function GetCurrentPerson(map As Map, lot As Lot) As Person
  overload: TinyLife.World.LotEmployment.GetCurrentPerson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  id: SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: SetCurrentPerson(Map, Lot, Person, Boolean)
  nameWithType: LotEmployment.SetCurrentPerson(Map, Lot, Person, Boolean)
  fullName: TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCurrentPerson
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nSets the current person for this lot employment on the given <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this employment is a <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref> entry, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">lot</code> should be null.\n"
  example: []
  syntax:
    content: public void SetCurrentPerson(Map map, Lot lot, Person person, bool manual = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: lot
      type: TinyLife.World.Lot
      description: The lot, or null if this is a map wide employment
    - id: person
      type: TinyLife.Objects.Person
      description: The person to set, or null to remove the currently employed person.
    - id: manual
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub SetCurrentPerson(map As Map, lot As Lot, person As Person, manual As Boolean = True)
  overload: TinyLife.World.LotEmployment.SetCurrentPerson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  isExternal: true
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.Actions.BeAwayFromLotEmploymentAction
  commentId: T:TinyLife.Actions.BeAwayFromLotEmploymentAction
  isExternal: true
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  isExternal: true
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LotEmployment>()
  nameWithType: Extensions.JsonCopy<LotEmployment>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment>()
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment)()
  name.vb: JsonCopy(Of LotEmployment)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<LotEmployment>
    nameWithType: Extensions.JsonCopy<LotEmployment>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of LotEmployment)
    nameWithType: Extensions.JsonCopy(Of LotEmployment)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.Generic.List{TinyLife.World.LotEmployment}
  commentId: T:System.Collections.Generic.List{TinyLife.World.LotEmployment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<LotEmployment>
  nameWithType: List<LotEmployment>
  fullName: System.Collections.Generic.List<TinyLife.World.LotEmployment>
  nameWithType.vb: List(Of LotEmployment)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.LotEmployment)
  name.vb: List(Of LotEmployment)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
    nameWithType: LotEmployment
    fullName: TinyLife.World.LotEmployment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  isExternal: true
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  isExternal: true
- uid: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  parent: System
  definition: System.Func`1
  name: Func<IEnumerable<ActionType>>
  nameWithType: Func<IEnumerable<ActionType>>
  fullName: System.Func<System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType>>
  nameWithType.vb: Func(Of IEnumerable(Of ActionType))
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType))
  name.vb: Func(Of IEnumerable(Of ActionType))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Int32, Int32>
  nameWithType: (T1, T2)<Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32>
  nameWithType.vb: (T1, T2)(Of Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32)
  name.vb: (T1, T2)(Of Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  isExternal: true
- uid: TinyLife.World.LotEmployment.IsFinished*
  commentId: Overload:TinyLife.World.LotEmployment.IsFinished
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
- uid: System.Func{TinyLife.Objects.Person,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Person,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Person, Boolean>
  nameWithType: Func<Person, Boolean>
  fullName: System.Func<TinyLife.Objects.Person, System.Boolean>
  nameWithType.vb: Func(Of Person, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, System.Boolean)
  name.vb: Func(Of Person, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Actions.ActionType.LotEmploymentIdle
  commentId: F:TinyLife.Actions.ActionType.LotEmploymentIdle
  isExternal: true
- uid: TinyLife.World.LotEmployment.IdleObjects*
  commentId: Overload:TinyLife.World.LotEmployment.IdleObjects
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  isExternal: true
- uid: TinyLife.World.LotEmployment.IdleTime*
  commentId: Overload:TinyLife.World.LotEmployment.IdleTime
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  isExternal: true
- uid: TinyLife.World.LotEmployment.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.#ctor
  name: LotEmployment
  nameWithType: LotEmployment.LotEmployment
  fullName: TinyLife.World.LotEmployment.LotEmployment
- uid: System.Func{TinyLife.Actions.ActionType[]}
  commentId: T:System.Func{TinyLife.Actions.ActionType[]}
  parent: System
  definition: System.Func`1
  name: Func<ActionType[]>
  nameWithType: Func<ActionType[]>
  fullName: System.Func<TinyLife.Actions.ActionType[]>
  nameWithType.vb: Func(Of ActionType())
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType())
  name.vb: Func(Of ActionType())
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotEmployment.GetCurrentPerson*
  commentId: Overload:TinyLife.World.LotEmployment.GetCurrentPerson
  name: GetCurrentPerson
  nameWithType: LotEmployment.GetCurrentPerson
  fullName: TinyLife.World.LotEmployment.GetCurrentPerson
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Action{System.Single})
  isExternal: true
- uid: TinyLife.World.LotEmployment.SetCurrentPerson*
  commentId: Overload:TinyLife.World.LotEmployment.SetCurrentPerson
  name: SetCurrentPerson
  nameWithType: LotEmployment.SetCurrentPerson
  fullName: TinyLife.World.LotEmployment.SetCurrentPerson
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

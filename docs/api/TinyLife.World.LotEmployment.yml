### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  id: LotEmployment
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  - TinyLife.World.LotEmployment.Actions
  - TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  - TinyLife.World.LotEmployment.IdleObjects
  - TinyLife.World.LotEmployment.IdleTime
  - TinyLife.World.LotEmployment.IsFinished
  - TinyLife.World.LotEmployment.MapWideEmployments
  - TinyLife.World.LotEmployment.Name
  - TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  - TinyLife.World.LotEmployment.WorkHours
  langs:
  - csharp
  - vb
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
  type: Class
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotEmployment
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot employment is a job that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> executes somewhat perpetually.\nA person with a <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> does not live on a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> or in a <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>, but instead either works at their lot employment or &quot;leaves the city&quot; through an <xref href=\"TinyLife.Actions.BeAwayFromLotEmploymentAction\" data-throw-if-not-resolved=\"false\"></xref>.\nLot employments can be added to lots using <xref href=\"TinyLife.World.LotType.Employments\" data-throw-if-not-resolved=\"false\"></xref> or to a map using <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class LotEmployment
    content.vb: Public Class LotEmployment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  id: MapWideEmployments
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MapWideEmployments
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA list of lot employments that are map-wide, that is, that aren&apos;t bound to a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nTo add more map-wide lot employments, just add additional entries to this list.\n"
  example: []
  syntax:
    content: public static readonly List<LotEmployment> MapWideEmployments
    return:
      type: System.Collections.Generic.List{TinyLife.World.LotEmployment}
    content.vb: Public Shared ReadOnly MapWideEmployments As List(Of LotEmployment)
- uid: TinyLife.World.LotEmployment.Name
  commentId: F:TinyLife.World.LotEmployment.Name
  id: Name
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotEmployment.Name
  fullName: TinyLife.World.LotEmployment.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot employment\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  id: Actions
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: Actions
  nameWithType: LotEmployment.Actions
  fullName: TinyLife.World.LotEmployment.Actions
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Actions
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> instances that a person working in this employment should randomly execute.\nUsing actions with the <xref href=\"TinyLife.Objects.ObjectCategory.Nothing\" data-throw-if-not-resolved=\"false\"></xref> category will cause any instances of the action to act as if they had the <xref href=\"TinyLife.Objects.ObjectCategory.Self\" data-throw-if-not-resolved=\"false\"></xref> category instead.\nNote that, for an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> returned by this function to have an effect, its <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> needs to be greater than 0.\n"
  example: []
  syntax:
    content: public readonly Func<IEnumerable<ActionType>> Actions
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
    content.vb: Public ReadOnly Actions As Func(Of IEnumerable(Of ActionType))
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  id: WorkHours
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
  type: Field
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WorkHours
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe range of hours that this lot employment is active in.\nDuring times outside of these hours, people with this employment will automatically enqueue and execute a <xref href=\"TinyLife.Actions.BeAwayFromLotEmploymentAction\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly (int Start, int End) WorkHours
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public ReadOnly WorkHours As (Start As Integer, [End] As Integer)
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  id: IsFinished
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFinished
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA function that can be used to finish the lot employment&apos;s work hours before the current time is outside of <xref href=\"TinyLife.World.LotEmployment.WorkHours\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is used by the mail carrier to make them stop working once all mail is delivered.\n"
  example: []
  syntax:
    content: public Func<LotEmployment.Instance, Person, bool> IsFinished { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
    content.vb: Public Property IsFinished As Func(Of LotEmployment.Instance, Person, Boolean)
  overload: TinyLife.World.LotEmployment.IsFinished*
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  id: IdleObjects
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IdleObjects
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that represent the item types that a person with this lot employment will idle around if they have nothing else to do.\nIf this is set to a non-<xref href=\"TinyLife.Objects.ObjectCategory.Nothing\" data-throw-if-not-resolved=\"false\"></xref> category, people with this lot employment will automatically enqueue the <xref href=\"TinyLife.Actions.ActionType.LotEmploymentIdle\" data-throw-if-not-resolved=\"false\"></xref> action if there is nothing else to do currently.\n"
  example: []
  syntax:
    content: public ObjectCategory IdleObjects { get; init; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Property IdleObjects As ObjectCategory
  overload: TinyLife.World.LotEmployment.IdleObjects*
- uid: TinyLife.World.LotEmployment.IdleTime
  commentId: P:TinyLife.World.LotEmployment.IdleTime
  id: IdleTime
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IdleTime
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe amount of in-game time that a person with this lot employment will idle at one of their <xref href=\"TinyLife.World.LotEmployment.IdleObjects\" data-throw-if-not-resolved=\"false\"></xref> for.\nDefaults to 5 minutes.\n"
  example: []
  syntax:
    content: public TimeSpan IdleTime { get; init; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property IdleTime As TimeSpan
  overload: TinyLife.World.LotEmployment.IdleTime*
- uid: TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  commentId: M:TinyLife.World.LotEmployment.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})
  id: '#ctor(System.String,System.ValueTuple{System.Int32,System.Int32},System.Func{TinyLife.Actions.ActionType[]})'
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: LotEmployment(string, (int Start, int End), Func<ActionType[]>)
  nameWithType: LotEmployment.LotEmployment(string, (int Start, int End), Func<ActionType[]>)
  fullName: TinyLife.World.LotEmployment.LotEmployment(string, (int Start, int End), System.Func<TinyLife.Actions.ActionType[]>)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot employment with the given settings\n"
  example: []
  syntax:
    content: public LotEmployment(string name, (int Start, int End) workHours, Func<ActionType[]> actions)
    parameters:
    - id: name
      type: System.String
      description: The lot employment&apos;s name
    - id: workHours
      type: System.ValueTuple{System.Int32,System.Int32}
      description: The lot employment&apos;s work hours
    - id: actions
      type: System.Func{TinyLife.Actions.ActionType[]}
      description: The <xref href="TinyLife.World.LotEmployment.Actions" data-throw-if-not-resolved="false"></xref> that lot employees should execute
    content.vb: Public Sub New(name As String, workHours As (Start As Integer, [End] As Integer), actions As Func(Of ActionType()))
  overload: TinyLife.World.LotEmployment.#ctor*
  nameWithType.vb: LotEmployment.New(String, (Start As Integer, End As Integer), Func(Of ActionType()))
  fullName.vb: TinyLife.World.LotEmployment.New(String, (Start As Integer, End As Integer), System.Func(Of TinyLife.Actions.ActionType()))
  name.vb: New(String, (Start As Integer, End As Integer), Func(Of ActionType()))
- uid: TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  commentId: M:TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  id: GetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: GetCurrentPerson(Map, Lot)
  nameWithType: LotEmployment.GetCurrentPerson(Map, Lot)
  fullName: TinyLife.World.LotEmployment.GetCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCurrentPerson
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that is currently in charge of this lot employment\nTo check for <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref>, a null lot can be passed.\n"
  example: []
  syntax:
    content: public Person GetCurrentPerson(Map map, Lot lot)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: lot
      type: TinyLife.World.Lot
      description: The lot, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry
    return:
      type: TinyLife.Objects.Person
      description: The person that currently works in this lot employment, or null if there is none
    content.vb: Public Function GetCurrentPerson(map As Map, lot As Lot) As Person
  overload: TinyLife.World.LotEmployment.GetCurrentPerson*
- uid: TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  id: SetCurrentPerson(TinyLife.World.Map,TinyLife.World.Lot,TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.World.LotEmployment
  langs:
  - csharp
  - vb
  name: SetCurrentPerson(Map, Lot, Person, bool)
  nameWithType: LotEmployment.SetCurrentPerson(Map, Lot, Person, bool)
  fullName: TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: 0.36.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCurrentPerson
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nSets the current person for this lot employment on the given <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this employment is a <xref href=\"TinyLife.World.LotEmployment.MapWideEmployments\" data-throw-if-not-resolved=\"false\"></xref> entry, the <code data-dev-comment-type=\"paramref\" class=\"paramref\">lot</code> should be null.\n"
  example: []
  syntax:
    content: public void SetCurrentPerson(Map map, Lot lot, Person person, bool manual = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: lot
      type: TinyLife.World.Lot
      description: The lot, or null if this is a map wide employment
    - id: person
      type: TinyLife.Objects.Person
      description: The person to set, or null to remove the currently employed person.
    - id: manual
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub SetCurrentPerson(map As Map, lot As Lot, person As Person, manual As Boolean = True)
  overload: TinyLife.World.LotEmployment.SetCurrentPerson*
  nameWithType.vb: LotEmployment.SetCurrentPerson(Map, Lot, Person, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.SetCurrentPerson(TinyLife.World.Map, TinyLife.World.Lot, TinyLife.Objects.Person, Boolean)
  name.vb: SetCurrentPerson(Map, Lot, Person, Boolean)
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.Actions.BeAwayFromLotEmploymentAction
  commentId: T:TinyLife.Actions.BeAwayFromLotEmploymentAction
  name: BeAwayFromLotEmploymentAction
  nameWithType: BeAwayFromLotEmploymentAction
  fullName: TinyLife.Actions.BeAwayFromLotEmploymentAction
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotEmployment.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LotEmployment>(LotEmployment)
  nameWithType: Extensions.JsonCopy<LotEmployment>(LotEmployment)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment>(TinyLife.World.LotEmployment)
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment)(LotEmployment)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment)(TinyLife.World.LotEmployment)
  name.vb: JsonCopy(Of LotEmployment)(LotEmployment)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: )
  - name: (
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: System.Collections.Generic.List{TinyLife.World.LotEmployment}
  commentId: T:System.Collections.Generic.List{TinyLife.World.LotEmployment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<LotEmployment>
  nameWithType: List<LotEmployment>
  fullName: System.Collections.Generic.List<TinyLife.World.LotEmployment>
  nameWithType.vb: List(Of LotEmployment)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.LotEmployment)
  name.vb: List(Of LotEmployment)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
- uid: TinyLife.Objects.ObjectCategory.Self
  commentId: F:TinyLife.Objects.ObjectCategory.Self
  name: Self
  nameWithType: ObjectCategory.Self
  fullName: TinyLife.Objects.ObjectCategory.Self
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  name: PassivePriority
  nameWithType: ActionType.AiSettings.PassivePriority
  fullName: TinyLife.Actions.ActionType.AiSettings.PassivePriority
- uid: System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType}}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<IEnumerable<ActionType>>
  nameWithType: Func<IEnumerable<ActionType>>
  fullName: System.Func<System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType>>
  nameWithType.vb: Func(Of IEnumerable(Of ActionType))
  fullName.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType))
  name.vb: Func(Of IEnumerable(Of ActionType))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: (int Start, int End)
  nameWithType: (int Start, int End)
  fullName: (int Start, int End)
  nameWithType.vb: (Start As Integer, End As Integer)
  fullName.vb: (Start As Integer, End As Integer)
  name.vb: (Start As Integer, End As Integer)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32}.Start
    name: Start
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.start
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32}.End
    name: End
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32-.end
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.World.LotEmployment.WorkHours
  commentId: F:TinyLife.World.LotEmployment.WorkHours
  name: WorkHours
  nameWithType: LotEmployment.WorkHours
  fullName: TinyLife.World.LotEmployment.WorkHours
- uid: TinyLife.World.LotEmployment.IsFinished*
  commentId: Overload:TinyLife.World.LotEmployment.IsFinished
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
- uid: System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
  commentId: T:System.Func{TinyLife.World.LotEmployment.Instance,TinyLife.Objects.Person,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<LotEmployment.Instance, Person, bool>
  nameWithType: Func<LotEmployment.Instance, Person, bool>
  fullName: System.Func<TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person, bool>
  nameWithType.vb: Func(Of LotEmployment.Instance, Person, Boolean)
  fullName.vb: System.Func(Of TinyLife.World.LotEmployment.Instance, TinyLife.Objects.Person, Boolean)
  name.vb: Func(Of LotEmployment.Instance, Person, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: .
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Actions.ActionType.LotEmploymentIdle
  commentId: F:TinyLife.Actions.ActionType.LotEmploymentIdle
  name: LotEmploymentIdle
  nameWithType: ActionType.LotEmploymentIdle
  fullName: TinyLife.Actions.ActionType.LotEmploymentIdle
- uid: TinyLife.World.LotEmployment.IdleObjects*
  commentId: Overload:TinyLife.World.LotEmployment.IdleObjects
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
- uid: TinyLife.World.LotEmployment.IdleObjects
  commentId: P:TinyLife.World.LotEmployment.IdleObjects
  name: IdleObjects
  nameWithType: LotEmployment.IdleObjects
  fullName: TinyLife.World.LotEmployment.IdleObjects
- uid: TinyLife.World.LotEmployment.IdleTime*
  commentId: Overload:TinyLife.World.LotEmployment.IdleTime
  name: IdleTime
  nameWithType: LotEmployment.IdleTime
  fullName: TinyLife.World.LotEmployment.IdleTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.World.LotEmployment.Actions
  commentId: F:TinyLife.World.LotEmployment.Actions
  name: Actions
  nameWithType: LotEmployment.Actions
  fullName: TinyLife.World.LotEmployment.Actions
- uid: TinyLife.World.LotEmployment.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.#ctor
  name: LotEmployment
  nameWithType: LotEmployment.LotEmployment
  fullName: TinyLife.World.LotEmployment.LotEmployment
  nameWithType.vb: LotEmployment.New
  fullName.vb: TinyLife.World.LotEmployment.New
  name.vb: New
- uid: System.Func{TinyLife.Actions.ActionType[]}
  commentId: T:System.Func{TinyLife.Actions.ActionType[]}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<ActionType[]>
  nameWithType: Func<ActionType[]>
  fullName: System.Func<TinyLife.Actions.ActionType[]>
  nameWithType.vb: Func(Of ActionType())
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType())
  name.vb: Func(Of ActionType())
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: (
  - name: )
  - name: )
- uid: TinyLife.World.LotEmployment.GetCurrentPerson*
  commentId: Overload:TinyLife.World.LotEmployment.GetCurrentPerson
  name: GetCurrentPerson
  nameWithType: LotEmployment.GetCurrentPerson
  fullName: TinyLife.World.LotEmployment.GetCurrentPerson
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  nameWithType: Map.UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection<TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection(Of TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: TinyLife.World.LotEmployment.SetCurrentPerson*
  commentId: Overload:TinyLife.World.LotEmployment.SetCurrentPerson
  name: SetCurrentPerson
  nameWithType: LotEmployment.SetCurrentPerson
  fullName: TinyLife.World.LotEmployment.SetCurrentPerson
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean

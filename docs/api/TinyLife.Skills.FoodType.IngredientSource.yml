### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.FoodType.IngredientSource
  commentId: T:TinyLife.Skills.FoodType.IngredientSource
  id: FoodType.IngredientSource
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.FoodType.IngredientSource.#ctor(System.String,TinyLife.Skills.FoodType.ContainerType)
  - TinyLife.Skills.FoodType.IngredientSource.Barbecue
  - TinyLife.Skills.FoodType.IngredientSource.CafeDisplayCase
  - TinyLife.Skills.FoodType.IngredientSource.ChildStove
  - TinyLife.Skills.FoodType.IngredientSource.CoffeeMachine
  - TinyLife.Skills.FoodType.IngredientSource.Container
  - TinyLife.Skills.FoodType.IngredientSource.Fridge
  - TinyLife.Skills.FoodType.IngredientSource.Name
  - TinyLife.Skills.FoodType.IngredientSource.OnEaten
  - TinyLife.Skills.FoodType.IngredientSource.ProteinShakeMaker
  - TinyLife.Skills.FoodType.IngredientSource.Sink
  langs:
  - csharp
  - vb
  name: FoodType.IngredientSource
  nameWithType: FoodType.IngredientSource
  fullName: TinyLife.Skills.FoodType.IngredientSource
  type: Class
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IngredientSource
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 442
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn ingredient source represents a place that the ingredients for a <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> can be aquired from.\n"
  example: []
  syntax:
    content: public class IngredientSource
    content.vb: Public Class IngredientSource
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.FoodType.IngredientSource.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.FoodType.IngredientSource.Fridge
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Fridge
  id: Fridge
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: Fridge
  nameWithType: FoodType.IngredientSource.Fridge
  fullName: TinyLife.Skills.FoodType.IngredientSource.Fridge
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Fridge
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 447
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn ingredient source for objects that are created using the <xref href=\"TinyLife.Actions.ActionType.GetIngredientsSingle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.GetIngredientsFamily\" data-throw-if-not-resolved=\"false\"></xref> actions\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource Fridge
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly Fridge As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.ProteinShakeMaker
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.ProteinShakeMaker
  id: ProteinShakeMaker
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: ProteinShakeMaker
  nameWithType: FoodType.IngredientSource.ProteinShakeMaker
  fullName: TinyLife.Skills.FoodType.IngredientSource.ProteinShakeMaker
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ProteinShakeMaker
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 451
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn ingredient source for objects that are created using the <xref href=\"TinyLife.Actions.ActionType.MixProteinShake\" data-throw-if-not-resolved=\"false\"></xref> action\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource ProteinShakeMaker
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly ProteinShakeMaker As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.Barbecue
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Barbecue
  id: Barbecue
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: Barbecue
  nameWithType: FoodType.IngredientSource.Barbecue
  fullName: TinyLife.Skills.FoodType.IngredientSource.Barbecue
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Barbecue
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 455
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn ingredient source for objects that are created using the <xref href=\"TinyLife.Actions.ActionType.GrillFood\" data-throw-if-not-resolved=\"false\"></xref> action\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource Barbecue
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly Barbecue As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.ChildStove
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.ChildStove
  id: ChildStove
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: ChildStove
  nameWithType: FoodType.IngredientSource.ChildStove
  fullName: TinyLife.Skills.FoodType.IngredientSource.ChildStove
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChildStove
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 459
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA stove that children can cook at.\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource ChildStove
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly ChildStove As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.CoffeeMachine
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.CoffeeMachine
  id: CoffeeMachine
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: CoffeeMachine
  nameWithType: FoodType.IngredientSource.CoffeeMachine
  fullName: TinyLife.Skills.FoodType.IngredientSource.CoffeeMachine
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CoffeeMachine
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 463
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA coffee machine.\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource CoffeeMachine
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly CoffeeMachine As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.Sink
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Sink
  id: Sink
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: Sink
  nameWithType: FoodType.IngredientSource.Sink
  fullName: TinyLife.Skills.FoodType.IngredientSource.Sink
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Sink
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 467
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA sink, used for getting water.\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource Sink
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly Sink As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.CafeDisplayCase
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.CafeDisplayCase
  id: CafeDisplayCase
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: CafeDisplayCase
  nameWithType: FoodType.IngredientSource.CafeDisplayCase
  fullName: TinyLife.Skills.FoodType.IngredientSource.CafeDisplayCase
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CafeDisplayCase
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 471
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA cafe display case that a barista employee can get food out of for customers.\n"
  example: []
  syntax:
    content: public static readonly FoodType.IngredientSource CafeDisplayCase
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public Shared ReadOnly CafeDisplayCase As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.Name
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Name
  id: Name
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FoodType.IngredientSource.Name
  fullName: TinyLife.Skills.FoodType.IngredientSource.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 476
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe name of this ingredient source.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.Container
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Container
  id: Container
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: Container
  nameWithType: FoodType.IngredientSource.Container
  fullName: TinyLife.Skills.FoodType.IngredientSource.Container
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Container
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 480
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref> that this ingredient source creates by default.\n"
  example: []
  syntax:
    content: public readonly FoodType.ContainerType Container
    return:
      type: TinyLife.Skills.FoodType.ContainerType
    content.vb: Public ReadOnly Container As FoodType.ContainerType
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.IngredientSource.OnEaten
  commentId: P:TinyLife.Skills.FoodType.IngredientSource.OnEaten
  id: OnEaten
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: OnEaten
  nameWithType: FoodType.IngredientSource.OnEaten
  fullName: TinyLife.Skills.FoodType.IngredientSource.OnEaten
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 486
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn action that is invoked when this food type is eaten.\nThis action is invoked at the same time as <xref href=\"TinyLife.Skills.FoodType.OnEaten\" data-throw-if-not-resolved=\"false\"></xref>, but for any <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked in <xref href=\"TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action%2cTinyLife.Objects.FoodTypedItem)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Action<Action, FoodTypedItem> OnEaten { get; set; }
    parameters: []
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
    content.vb: Public Property OnEaten As Action(Of Action, FoodTypedItem)
  overload: TinyLife.Skills.FoodType.IngredientSource.OnEaten*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.IngredientSource.#ctor(System.String,TinyLife.Skills.FoodType.ContainerType)
  commentId: M:TinyLife.Skills.FoodType.IngredientSource.#ctor(System.String,TinyLife.Skills.FoodType.ContainerType)
  id: '#ctor(System.String,TinyLife.Skills.FoodType.ContainerType)'
  parent: TinyLife.Skills.FoodType.IngredientSource
  langs:
  - csharp
  - vb
  name: IngredientSource(String, FoodType.ContainerType)
  nameWithType: FoodType.IngredientSource.IngredientSource(String, FoodType.ContainerType)
  fullName: TinyLife.Skills.FoodType.IngredientSource.IngredientSource(System.String, TinyLife.Skills.FoodType.ContainerType)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 493
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new ingredient source with the given settings.\n"
  example: []
  syntax:
    content: public IngredientSource(string name, FoodType.ContainerType container = null)
    parameters:
    - id: name
      type: System.String
      description: The name of this ingredient source.
    - id: container
      type: TinyLife.Skills.FoodType.ContainerType
      description: he <xref href="TinyLife.Skills.FoodType.ContainerType" data-throw-if-not-resolved="false"></xref> that this ingredient source creates by default.
    content.vb: Public Sub New(name As String, container As FoodType.ContainerType = Nothing)
  overload: TinyLife.Skills.FoodType.IngredientSource.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  parent: TinyLife.Skills
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.IngredientSource.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<FoodType.IngredientSource>()
  nameWithType: Extensions.JsonCopy<FoodType.IngredientSource>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType.IngredientSource>()
  nameWithType.vb: Extensions.JsonCopy(Of FoodType.IngredientSource)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType.IngredientSource)()
  name.vb: JsonCopy(Of FoodType.IngredientSource)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<FoodType.IngredientSource>
    nameWithType: Extensions.JsonCopy<FoodType.IngredientSource>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType.IngredientSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of FoodType.IngredientSource)
    nameWithType: Extensions.JsonCopy(Of FoodType.IngredientSource)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType.IngredientSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.ActionType.GetIngredientsSingle
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsSingle
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetIngredientsFamily
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsFamily
  isExternal: true
- uid: TinyLife.Skills.FoodType.IngredientSource
  commentId: T:TinyLife.Skills.FoodType.IngredientSource
  parent: TinyLife.Skills
  name: FoodType.IngredientSource
  nameWithType: FoodType.IngredientSource
  fullName: TinyLife.Skills.FoodType.IngredientSource
- uid: TinyLife.Actions.ActionType.MixProteinShake
  commentId: F:TinyLife.Actions.ActionType.MixProteinShake
  isExternal: true
- uid: TinyLife.Actions.ActionType.GrillFood
  commentId: F:TinyLife.Actions.ActionType.GrillFood
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Skills.FoodType.ContainerType
  commentId: T:TinyLife.Skills.FoodType.ContainerType
  parent: TinyLife.Skills
  name: FoodType.ContainerType
  nameWithType: FoodType.ContainerType
  fullName: TinyLife.Skills.FoodType.ContainerType
- uid: TinyLife.Skills.FoodType.OnEaten
  commentId: P:TinyLife.Skills.FoodType.OnEaten
  isExternal: true
- uid: TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  commentId: M:TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  isExternal: true
- uid: TinyLife.Skills.FoodType.IngredientSource.OnEaten*
  commentId: Overload:TinyLife.Skills.FoodType.IngredientSource.OnEaten
  name: OnEaten
  nameWithType: FoodType.IngredientSource.OnEaten
  fullName: TinyLife.Skills.FoodType.IngredientSource.OnEaten
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
  parent: System
  definition: System.Action`2
  name: Action<Action, FoodTypedItem>
  nameWithType: Action<Action, FoodTypedItem>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem>
  nameWithType.vb: Action(Of Action, FoodTypedItem)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem)
  name.vb: Action(Of Action, FoodTypedItem)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.IngredientSource.#ctor*
  commentId: Overload:TinyLife.Skills.FoodType.IngredientSource.#ctor
  name: IngredientSource
  nameWithType: FoodType.IngredientSource.IngredientSource
  fullName: TinyLife.Skills.FoodType.IngredientSource.IngredientSource

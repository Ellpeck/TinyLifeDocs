### YamlMime:ManagedReference
items:
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  id: Relationship
  parent: TinyLife
  children:
  - TinyLife.Relationship.AddMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})
  - TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Relationship.Dating
  - TinyLife.Relationship.FriendDisplayString
  - TinyLife.Relationship.FriendLevel
  - TinyLife.Relationship.FriendPercentage
  - TinyLife.Relationship.Genealogy
  - TinyLife.Relationship.GetMemories``1(TinyLife.Goals.MemoryType,System.Boolean)
  - TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.GetTimeSinceMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  - TinyLife.Relationship.HadFirstKiss
  - TinyLife.Relationship.KnownJobType
  - TinyLife.Relationship.KnownPersonalityTypes
  - TinyLife.Relationship.Max
  - TinyLife.Relationship.MaxRecentSocialsAmount
  - TinyLife.Relationship.OnRelationshipPanel
  - TinyLife.Relationship.OnRelationshipTooltip
  - TinyLife.Relationship.OtherPerson
  - TinyLife.Relationship.Partner
  - TinyLife.Relationship.PassiveFriendReduction
  - TinyLife.Relationship.PassiveRomanceReduction
  - TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  - TinyLife.Relationship.RemoveMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  - TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  - TinyLife.Relationship.RomanceDisplayString
  - TinyLife.Relationship.RomanceLevel
  - TinyLife.Relationship.RomancePercentage
  - TinyLife.Relationship.RomanceType
  - TinyLife.Relationship.SetGenealogy(TinyLife.GenealogyType,System.Boolean)
  - TinyLife.Relationship.TryingForBaby
  - TinyLife.Relationship.Type
  - TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
  type: Class
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Relationship
    path: ../TinyLife/Relationship.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA relationship is a connection between two <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects.\nIt should be noted that a relationship is not always the same between a person and the linked <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref>.\nWhat this means is that A can have a good relationship to B, but B can have a less good relationship to A.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Relationship : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Relationship Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Relationship.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.OnRelationshipPanel
  commentId: E:TinyLife.Relationship.OnRelationshipPanel
  id: OnRelationshipPanel
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: OnRelationshipPanel
  nameWithType: Relationship.OnRelationshipPanel
  fullName: TinyLife.Relationship.OnRelationshipPanel
  type: Event
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRelationshipPanel
    path: ../TinyLife/Relationship.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn event that is raised when a relationship panel is created in <xref href=\"TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person%2cTinyLife.Objects.Person%2cTinyLife.Relationship%2cMicrosoft.Xna.Framework.Vector2)\" data-throw-if-not-resolved=\"false\"></xref>.\nUse this event to add custom information to a relationship panel.\n"
  example: []
  syntax:
    content: public static event Action<(Person Person, Person Other, Relationship Relationship, Group Group)> OnRelationshipPanel
    return:
      type: System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}}
    content.vb: Public Shared Event OnRelationshipPanel As Action(Of (Person As Person, Other As Person, Relationship As Relationship, Group As Group))
- uid: TinyLife.Relationship.OnRelationshipTooltip
  commentId: E:TinyLife.Relationship.OnRelationshipTooltip
  id: OnRelationshipTooltip
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: OnRelationshipTooltip
  nameWithType: Relationship.OnRelationshipTooltip
  fullName: TinyLife.Relationship.OnRelationshipTooltip
  type: Event
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRelationshipTooltip
    path: ../TinyLife/Relationship.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn event that is raised when a relationship tooltip is populated in <xref href=\"TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person%2cTinyLife.Objects.Person%2cTinyLife.Relationship%2cMLEM.Ui.Elements.Tooltip)\" data-throw-if-not-resolved=\"false\"></xref>.\nUse this event to add custom information to a relationship tooltip.\n"
  example: []
  syntax:
    content: public static event Action<(Person Person, Person Other, Relationship Relationship, Tooltip Tooltip)> OnRelationshipTooltip
    return:
      type: System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}}
    content.vb: Public Shared Event OnRelationshipTooltip As Action(Of (Person As Person, Other As Person, Relationship As Relationship, Tooltip As Tooltip))
- uid: TinyLife.Relationship.Max
  commentId: F:TinyLife.Relationship.Max
  id: Max
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Relationship.Max
  fullName: TinyLife.Relationship.Max
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Max
    path: ../TinyLife/Relationship.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe maximum value that a relationship level can have\n"
  example: []
  syntax:
    content: public const float Max = 100000
    return:
      type: System.Single
    content.vb: Public Const Max As Single = 100000
- uid: TinyLife.Relationship.PassiveFriendReduction
  commentId: F:TinyLife.Relationship.PassiveFriendReduction
  id: PassiveFriendReduction
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: PassiveFriendReduction
  nameWithType: Relationship.PassiveFriendReduction
  fullName: TinyLife.Relationship.PassiveFriendReduction
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassiveFriendReduction
    path: ../TinyLife/Relationship.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that are removed from each relationship&apos;s <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> each update frame\n"
  example: []
  syntax:
    content: public const float PassiveFriendReduction = 0.01
    return:
      type: System.Single
    content.vb: Public Const PassiveFriendReduction As Single = 0.01
- uid: TinyLife.Relationship.PassiveRomanceReduction
  commentId: F:TinyLife.Relationship.PassiveRomanceReduction
  id: PassiveRomanceReduction
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: PassiveRomanceReduction
  nameWithType: Relationship.PassiveRomanceReduction
  fullName: TinyLife.Relationship.PassiveRomanceReduction
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassiveRomanceReduction
    path: ../TinyLife/Relationship.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that are removed from each relationship&apos;s <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> each update frame\n"
  example: []
  syntax:
    content: public const float PassiveRomanceReduction = 0.015
    return:
      type: System.Single
    content.vb: Public Const PassiveRomanceReduction As Single = 0.015
- uid: TinyLife.Relationship.MaxRecentSocialsAmount
  commentId: F:TinyLife.Relationship.MaxRecentSocialsAmount
  id: MaxRecentSocialsAmount
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: MaxRecentSocialsAmount
  nameWithType: Relationship.MaxRecentSocialsAmount
  fullName: TinyLife.Relationship.MaxRecentSocialsAmount
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxRecentSocialsAmount
    path: ../TinyLife/Relationship.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe maximum amount of social actions that are &quot;remembered&quot; in this relationship.\nThis is equivalent to <xref href=\"TinyLife.Objects.Person.RecentActions\" data-throw-if-not-resolved=\"false\"></xref>, but related to this relationship only.\n"
  example: []
  syntax:
    content: public const int MaxRecentSocialsAmount = 10
    return:
      type: System.Int32
    content.vb: Public Const MaxRecentSocialsAmount As Integer = 10
- uid: TinyLife.Relationship.KnownPersonalityTypes
  commentId: F:TinyLife.Relationship.KnownPersonalityTypes
  id: KnownPersonalityTypes
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: KnownPersonalityTypes
  nameWithType: Relationship.KnownPersonalityTypes
  fullName: TinyLife.Relationship.KnownPersonalityTypes
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: KnownPersonalityTypes
    path: ../TinyLife/Relationship.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> objects that are known about this relationship&apos;s <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref>.\nThis collection is populated by <xref href=\"TinyLife.Actions.ActionType.AskAboutPersonality\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly HashSet<PersonalityType> KnownPersonalityTypes
    return:
      type: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
    content.vb: >-
      <DataMember>

      Public ReadOnly KnownPersonalityTypes As HashSet(Of PersonalityType)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.OtherPerson
  commentId: P:TinyLife.Relationship.OtherPerson
  id: OtherPerson
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: OtherPerson
  nameWithType: Relationship.OtherPerson
  fullName: TinyLife.Relationship.OtherPerson
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OtherPerson
    path: ../TinyLife/Relationship.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of the person that this relationship is linked to.\nTo easily retrieve the matching <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instance, see <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid OtherPerson { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public Property OtherPerson As Guid
  overload: TinyLife.Relationship.OtherPerson*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.Partner
  commentId: P:TinyLife.Relationship.Partner
  id: Partner
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Partner
  nameWithType: Relationship.Partner
  fullName: TinyLife.Relationship.Partner
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Partner
    path: ../TinyLife/Relationship.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe actual other person involved in the relationship.\nThis is a computed property that returns the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> on the map with the <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref> id.\n"
  example: []
  syntax:
    content: public Person Partner { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Partner As Person
  overload: TinyLife.Relationship.Partner*
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  id: FriendLevel
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: FriendLevel
  nameWithType: Relationship.FriendLevel
  fullName: TinyLife.Relationship.FriendLevel
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendLevel
    path: ../TinyLife/Relationship.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe current amount of friendship points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that this relationship has.\nThis value is automatically clamped between -<xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>.\nTo take skills, personalities and more into account, use <xref href=\"TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float FriendLevel { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property FriendLevel As Single
  overload: TinyLife.Relationship.FriendLevel*
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  id: RomanceLevel
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomanceLevel
  nameWithType: Relationship.RomanceLevel
  fullName: TinyLife.Relationship.RomanceLevel
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomanceLevel
    path: ../TinyLife/Relationship.cs
    startLine: 100
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe current amount of romance points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that this relationship has.\nThis value is automatically clamped between 0 and <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>.\nTo take skills, personalities and more into account, use <xref href=\"TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that, for aromantic people, getting and setting this value always gets and sets <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public float RomanceLevel { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property RomanceLevel As Single
  overload: TinyLife.Relationship.RomanceLevel*
- uid: TinyLife.Relationship.FriendPercentage
  commentId: P:TinyLife.Relationship.FriendPercentage
  id: FriendPercentage
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: FriendPercentage
  nameWithType: Relationship.FriendPercentage
  fullName: TinyLife.Relationship.FriendPercentage
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendPercentage
    path: ../TinyLife/Relationship.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> of this relationship, divided by <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>, yielding a percentage between -1 and 1 of how good this friendship is\n"
  example: []
  syntax:
    content: public float FriendPercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property FriendPercentage As Single
  overload: TinyLife.Relationship.FriendPercentage*
- uid: TinyLife.Relationship.RomancePercentage
  commentId: P:TinyLife.Relationship.RomancePercentage
  id: RomancePercentage
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomancePercentage
  nameWithType: Relationship.RomancePercentage
  fullName: TinyLife.Relationship.RomancePercentage
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomancePercentage
    path: ../TinyLife/Relationship.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> of this relationship, divided by <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>, yielding a percentage between 0 and 1 of how good this relationship&apos;s romance level is\n"
  example: []
  syntax:
    content: public float RomancePercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property RomancePercentage As Single
  overload: TinyLife.Relationship.RomancePercentage*
- uid: TinyLife.Relationship.Type
  commentId: P:TinyLife.Relationship.Type
  id: Type
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Relationship.Type
  fullName: TinyLife.Relationship.Type
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Relationship.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.RelationshipType\" data-throw-if-not-resolved=\"false\"></xref> that this relationship has, based on the current <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RelationshipType Type { get; set; }
    parameters: []
    return:
      type: TinyLife.RelationshipType
    content.vb: Public Property Type As RelationshipType
  overload: TinyLife.Relationship.Type*
- uid: TinyLife.Relationship.RomanceType
  commentId: P:TinyLife.Relationship.RomanceType
  id: RomanceType
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomanceType
  nameWithType: Relationship.RomanceType
  fullName: TinyLife.Relationship.RomanceType
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomanceType
    path: ../TinyLife/Relationship.cs
    startLine: 141
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Relationship.RomanceType\" data-throw-if-not-resolved=\"false\"></xref> that this relationship has, based on the current <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RomanceType RomanceType { get; set; }
    parameters: []
    return:
      type: TinyLife.RomanceType
    content.vb: Public Property RomanceType As RomanceType
  overload: TinyLife.Relationship.RomanceType*
- uid: TinyLife.Relationship.FriendDisplayString
  commentId: P:TinyLife.Relationship.FriendDisplayString
  id: FriendDisplayString
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: FriendDisplayString
  nameWithType: Relationship.FriendDisplayString
  fullName: TinyLife.Relationship.FriendDisplayString
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendDisplayString
    path: ../TinyLife/Relationship.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn (unlocalized) string that represents a written version of this relationship&apos;s <xref href=\"TinyLife.Relationship.Type\" data-throw-if-not-resolved=\"false\"></xref> status.\n"
  example: []
  syntax:
    content: public string FriendDisplayString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FriendDisplayString As String
  overload: TinyLife.Relationship.FriendDisplayString*
- uid: TinyLife.Relationship.RomanceDisplayString
  commentId: P:TinyLife.Relationship.RomanceDisplayString
  id: RomanceDisplayString
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomanceDisplayString
  nameWithType: Relationship.RomanceDisplayString
  fullName: TinyLife.Relationship.RomanceDisplayString
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomanceDisplayString
    path: ../TinyLife/Relationship.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn (unlocalized) string that represents a written version of this relationship&apos;s <xref href=\"TinyLife.Relationship.RomanceType\" data-throw-if-not-resolved=\"false\"></xref> status.\n"
  example: []
  syntax:
    content: public string RomanceDisplayString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property RomanceDisplayString As String
  overload: TinyLife.Relationship.RomanceDisplayString*
- uid: TinyLife.Relationship.Genealogy
  commentId: P:TinyLife.Relationship.Genealogy
  id: Genealogy
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Genealogy
  nameWithType: Relationship.Genealogy
  fullName: TinyLife.Relationship.Genealogy
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Genealogy
    path: ../TinyLife/Relationship.cs
    startLine: 169
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> of this relationship.\nNote that the genealogy&apos;s value works in the following direction: &quot;I am the [Genealogy] of [OtherPerson]&quot;.\nNote that <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref> will always have the <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public GenealogyType Genealogy { get; }
    parameters: []
    return:
      type: TinyLife.GenealogyType
    content.vb: >-
      <DataMember>

      Public Property Genealogy As GenealogyType
  overload: TinyLife.Relationship.Genealogy*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.Dating
  commentId: F:TinyLife.Relationship.Dating
  id: Dating
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Dating
  nameWithType: Relationship.Dating
  fullName: TinyLife.Relationship.Dating
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Dating
    path: ../TinyLife/Relationship.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis value is set to true if this relationship is a romantic relationship\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool Dating
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Dating As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.HadFirstKiss
  commentId: F:TinyLife.Relationship.HadFirstKiss
  id: HadFirstKiss
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: HadFirstKiss
  nameWithType: Relationship.HadFirstKiss
  fullName: TinyLife.Relationship.HadFirstKiss
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HadFirstKiss
    path: ../TinyLife/Relationship.cs
    startLine: 180
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis value is set to true if this relationship&apos;s partners have invoked the <xref href=\"TinyLife.Actions.ActionType.Kiss\" data-throw-if-not-resolved=\"false\"></xref> action at least once.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [Obsolete("Use the HadFirstKiss memory instead")]

      public bool HadFirstKiss
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      <Obsolete("Use the HadFirstKiss memory instead")>

      Public HadFirstKiss As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the HadFirstKiss memory instead
- uid: TinyLife.Relationship.KnownJobType
  commentId: F:TinyLife.Relationship.KnownJobType
  id: KnownJobType
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: KnownJobType
  nameWithType: Relationship.KnownJobType
  fullName: TinyLife.Relationship.KnownJobType
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: KnownJobType
    path: ../TinyLife/Relationship.cs
    startLine: 185
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nStores the <xref href=\"TinyLife.Goals.JobType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry name of the job type that this relationship&apos;s person currently knows about the relationship&apos;s <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>. If this is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>, no job type is known. If this value is set to <code>None</code>, the <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref> has no job.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string KnownJobType
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public KnownJobType As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Relationship.TryingForBaby
  commentId: F:TinyLife.Relationship.TryingForBaby
  id: TryingForBaby
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: TryingForBaby
  nameWithType: Relationship.TryingForBaby
  fullName: TinyLife.Relationship.TryingForBaby
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TryingForBaby
    path: ../TinyLife/Relationship.cs
    startLine: 191
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nStores whether the people involved in this relationship have agreed to try for a baby. If this is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">true</a>, fooling around has a chance to lead to a pregnancy.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool TryingForBaby
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public TryingForBaby As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  id: GetSocialEffectiveness(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetSocialEffectiveness(ActionType)
  nameWithType: Relationship.GetSocialEffectiveness(ActionType)
  fullName: TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSocialEffectiveness
    path: ../TinyLife/Relationship.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns the effectiveness percentage that the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> has right now, based on the amount of times that it has been used previously.\nIn <xref href=\"TinyLife.Actions.TalkAction\" data-throw-if-not-resolved=\"false\"></xref>, this effectiveness is used to reduce the friendship and romance gain based on the &quot;boringness&quot; of an action.\nNote that, if this relationship&apos;s main person is younger than a <xref href=\"TinyLife.Objects.AgeGroup.Child\" data-throw-if-not-resolved=\"false\"></xref>, the social effectiveness will always be 1.\n"
  example: []
  syntax:
    content: public float GetSocialEffectiveness(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action whose effectiveness to query
    return:
      type: System.Single
      description: The social effectiveness, which is a percentage between 0 and 1
    content.vb: Public Function GetSocialEffectiveness(action As ActionType) As Single
  overload: TinyLife.Relationship.GetSocialEffectiveness*
- uid: TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  id: GetRecentSocialAmount(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetRecentSocialAmount(ActionType)
  nameWithType: Relationship.GetRecentSocialAmount(ActionType)
  fullName: TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRecentSocialAmount
    path: ../TinyLife/Relationship.cs
    startLine: 228
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns the amount of times that the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> has been used out of the last <xref href=\"TinyLife.Relationship.MaxRecentSocialsAmount\" data-throw-if-not-resolved=\"false\"></xref> social actions in this relationship\n"
  example: []
  syntax:
    content: public int GetRecentSocialAmount(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetRecentSocialAmount(action As ActionType) As Integer
  overload: TinyLife.Relationship.GetRecentSocialAmount*
- uid: TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  id: AddRecentSocial(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: AddRecentSocial(ActionType)
  nameWithType: Relationship.AddRecentSocial(ActionType)
  fullName: TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRecentSocial
    path: ../TinyLife/Relationship.cs
    startLine: 238
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAdds the given action to the list of recent social actions for this relationship.\nIf the list&apos;s length exceeds <xref href=\"TinyLife.Relationship.MaxRecentSocialsAmount\" data-throw-if-not-resolved=\"false\"></xref>, the least recent socials will be removed.\nNote that this method is automatically invoked in <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void AddRecentSocial(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action to add to the recent socials list
    content.vb: Public Sub AddRecentSocial(action As ActionType)
  overload: TinyLife.Relationship.AddRecentSocial*
- uid: TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Relationship.Validate(Person)
  fullName: TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Relationship.cs
    startLine: 249
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nValidates this relationship, setting its internal person reference to the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is automatically called for all of their relationships in <xref href=\"TinyLife.Objects.Person.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this relationship belongs to
    content.vb: Public Sub Validate(person As Person)
  overload: TinyLife.Relationship.Validate*
- uid: TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  commentId: M:TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  id: ResetToStatic(System.Boolean,System.Boolean)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: ResetToStatic(bool, bool)
  nameWithType: Relationship.ResetToStatic(bool, bool)
  fullName: TinyLife.Relationship.ResetToStatic(bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ResetToStatic
    path: ../TinyLife/Relationship.cs
    startLine: 269
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nResets this relationship to a more basic, static version.\nThis method is used when a map or household is exported, and by the ExportHousehold cheat.\n"
  example: []
  syntax:
    content: public void ResetToStatic(bool thorough, bool sameHousehold)
    parameters:
    - id: thorough
      type: System.Boolean
      description: Whether the relationship should be reset thoroughly, causing the friendship level and romance level to be averaged out
    - id: sameHousehold
      type: System.Boolean
      description: Whether the two people that are part of this relationship are in the same household
    content.vb: Public Sub ResetToStatic(thorough As Boolean, sameHousehold As Boolean)
  overload: TinyLife.Relationship.ResetToStatic*
  nameWithType.vb: Relationship.ResetToStatic(Boolean, Boolean)
  fullName.vb: TinyLife.Relationship.ResetToStatic(Boolean, Boolean)
  name.vb: ResetToStatic(Boolean, Boolean)
- uid: TinyLife.Relationship.SetGenealogy(TinyLife.GenealogyType,System.Boolean)
  commentId: M:TinyLife.Relationship.SetGenealogy(TinyLife.GenealogyType,System.Boolean)
  id: SetGenealogy(TinyLife.GenealogyType,System.Boolean)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: SetGenealogy(GenealogyType, bool)
  nameWithType: Relationship.SetGenealogy(GenealogyType, bool)
  fullName: TinyLife.Relationship.SetGenealogy(TinyLife.GenealogyType, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetGenealogy
    path: ../TinyLife/Relationship.cs
    startLine: 299
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nSets this relationship&apos;s <xref href=\"TinyLife.Relationship.Genealogy\" data-throw-if-not-resolved=\"false\"></xref> and this <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>&apos;s relationship&apos;s <xref href=\"TinyLife.Relationship.Genealogy\" data-throw-if-not-resolved=\"false\"></xref>, additionally updating all transitive relationships&apos; genealogies using <xref href=\"TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType%2cTinyLife.GenealogyType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void SetGenealogy(GenealogyType genealogy, bool overwriteExistingTransitive)
    parameters:
    - id: genealogy
      type: TinyLife.GenealogyType
      description: The genealogy to use for this relationship.
    - id: overwriteExistingTransitive
      type: System.Boolean
      description: Whether the genealogies of existing transitive relationships should be updated, even if they are already set to a non-<xref href="TinyLife.GenealogyType.Unrelated" data-throw-if-not-resolved="false"></xref> relationship.
    content.vb: Public Sub SetGenealogy(genealogy As GenealogyType, overwriteExistingTransitive As Boolean)
  overload: TinyLife.Relationship.SetGenealogy*
  nameWithType.vb: Relationship.SetGenealogy(GenealogyType, Boolean)
  fullName.vb: TinyLife.Relationship.SetGenealogy(TinyLife.GenealogyType, Boolean)
  name.vb: SetGenealogy(GenealogyType, Boolean)
- uid: TinyLife.Relationship.AddMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Relationship.AddMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})
  id: AddMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: AddMemory<T>(MemoryType, bool, bool, TimeSpan?)
  nameWithType: Relationship.AddMemory<T>(MemoryType, bool, bool, TimeSpan?)
  fullName: TinyLife.Relationship.AddMemory<T>(TinyLife.Goals.MemoryType, bool, bool, System.TimeSpan?)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddMemory
    path: ../TinyLife/Relationship.cs
    startLine: 337
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAdds a <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> to this relationship&apos;s person&apos;s and <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.Person.Memories\" data-throw-if-not-resolved=\"false\"></xref> list of this person.\n"
  example: []
  syntax:
    content: 'public T AddMemory<T>(MemoryType type, bool addToBoth, bool replace = true, TimeSpan? timeOccured = null) where T : Memory'
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The type of memory to add.
    - id: addToBoth
      type: System.Boolean
      description: Whether the memory should be added to the <xref href="TinyLife.Relationship.Partner" data-throw-if-not-resolved="false"></xref> as well.
    - id: replace
      type: System.Boolean
      description: Whether all existing instances of the given <code data-dev-comment-type="paramref" class="paramref">type</code> related to this relationship should be replaced by this memory.
    - id: timeOccured
      type: System.Nullable{System.TimeSpan}
      description: The time that this memory occured on, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> to use <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The added memory.
    content.vb: Public Function AddMemory(Of T As Memory)(type As MemoryType, addToBoth As Boolean, replace As Boolean = True, timeOccured As TimeSpan? = Nothing) As T
  overload: TinyLife.Relationship.AddMemory*
  nameWithType.vb: Relationship.AddMemory(Of T)(MemoryType, Boolean, Boolean, TimeSpan?)
  fullName.vb: TinyLife.Relationship.AddMemory(Of T)(TinyLife.Goals.MemoryType, Boolean, Boolean, System.TimeSpan?)
  name.vb: AddMemory(Of T)(MemoryType, Boolean, Boolean, TimeSpan?)
- uid: TinyLife.Relationship.GetMemories``1(TinyLife.Goals.MemoryType,System.Boolean)
  commentId: M:TinyLife.Relationship.GetMemories``1(TinyLife.Goals.MemoryType,System.Boolean)
  id: GetMemories``1(TinyLife.Goals.MemoryType,System.Boolean)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetMemories<T>(MemoryType, bool)
  nameWithType: Relationship.GetMemories<T>(MemoryType, bool)
  fullName: TinyLife.Relationship.GetMemories<T>(TinyLife.Goals.MemoryType, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMemories
    path: ../TinyLife/Relationship.cs
    startLine: 352
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns all <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instances that this relationship&apos;s person and <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref> currently track that match the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetMemories<T>(MemoryType type, bool returnBoth) where T : Memory'
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to match.
    - id: returnBoth
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Relationship.Partner" data-throw-if-not-resolved="false"></xref>&apos;s memories should also be returned.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The memories of the given type.
    content.vb: Public Function GetMemories(Of T As Memory)(type As MemoryType, returnBoth As Boolean) As IEnumerable(Of T)
  overload: TinyLife.Relationship.GetMemories*
  nameWithType.vb: Relationship.GetMemories(Of T)(MemoryType, Boolean)
  fullName.vb: TinyLife.Relationship.GetMemories(Of T)(TinyLife.Goals.MemoryType, Boolean)
  name.vb: GetMemories(Of T)(MemoryType, Boolean)
- uid: TinyLife.Relationship.RemoveMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  commentId: M:TinyLife.Relationship.RemoveMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  id: RemoveMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RemoveMemory<T>(MemoryType, bool, Func<T, bool>)
  nameWithType: Relationship.RemoveMemory<T>(MemoryType, bool, Func<T, bool>)
  fullName: TinyLife.Relationship.RemoveMemory<T>(TinyLife.Goals.MemoryType, bool, System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveMemory
    path: ../TinyLife/Relationship.cs
    startLine: 366
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nRemoves all <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instances of the given type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> from this relationship&apos;s person&apos;s and <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.Person.Memories\" data-throw-if-not-resolved=\"false\"></xref> collections, and returns the amount of memories removed.\n"
  example: []
  syntax:
    content: 'public int RemoveMemory<T>(MemoryType type, bool removeFromBoth, Func<T, bool> condition = null) where T : Memory'
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to match.
    - id: removeFromBoth
      type: System.Boolean
      description: Wether the <xref href="TinyLife.Relationship.Partner" data-throw-if-not-resolved="false"></xref>&apos;s memories should also be removed.
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: An additional condition to determine whether memories should be included in the search.
    typeParameters:
    - id: T
    return:
      type: System.Int32
      description: How many memories were removed.
    content.vb: Public Function RemoveMemory(Of T As Memory)(type As MemoryType, removeFromBoth As Boolean, condition As Func(Of T, Boolean) = Nothing) As Integer
  overload: TinyLife.Relationship.RemoveMemory*
  nameWithType.vb: Relationship.RemoveMemory(Of T)(MemoryType, Boolean, Func(Of T, Boolean))
  fullName.vb: TinyLife.Relationship.RemoveMemory(Of T)(TinyLife.Goals.MemoryType, Boolean, System.Func(Of T, Boolean))
  name.vb: RemoveMemory(Of T)(MemoryType, Boolean, Func(Of T, Boolean))
- uid: TinyLife.Relationship.GetTimeSinceMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  commentId: M:TinyLife.Relationship.GetTimeSinceMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  id: GetTimeSinceMemory``1(TinyLife.Goals.MemoryType,System.Boolean,System.Func{``0,System.Boolean})
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetTimeSinceMemory<T>(MemoryType, bool, Func<T, bool>)
  nameWithType: Relationship.GetTimeSinceMemory<T>(MemoryType, bool, Func<T, bool>)
  fullName: TinyLife.Relationship.GetTimeSinceMemory<T>(TinyLife.Goals.MemoryType, bool, System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTimeSinceMemory
    path: ../TinyLife/Relationship.cs
    startLine: 381
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns the time since a memory of the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> has occured in this relationship&apos;s main person or <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>.\nIf there are multiple memories of the given type, the minimum time is returned. If there is no memory of the given type, <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> is returned.\n"
  example: []
  syntax:
    content: 'public TimeSpan? GetTimeSinceMemory<T>(MemoryType type, bool includeBoth, Func<T, bool> condition = null) where T : Memory'
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to query.
    - id: includeBoth
      type: System.Boolean
      description: Whether the <xref href="TinyLife.Relationship.Partner" data-throw-if-not-resolved="false"></xref>&apos;s memories should be included in the search.
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: An additional condition to determine whether memories should be included in the search.
    typeParameters:
    - id: T
    return:
      type: System.Nullable{System.TimeSpan}
      description: The time since the given memory type.
    content.vb: Public Function GetTimeSinceMemory(Of T As Memory)(type As MemoryType, includeBoth As Boolean, condition As Func(Of T, Boolean) = Nothing) As TimeSpan?
  overload: TinyLife.Relationship.GetTimeSinceMemory*
  nameWithType.vb: Relationship.GetTimeSinceMemory(Of T)(MemoryType, Boolean, Func(Of T, Boolean))
  fullName.vb: TinyLife.Relationship.GetTimeSinceMemory(Of T)(TinyLife.Goals.MemoryType, Boolean, System.Func(Of T, Boolean))
  name.vb: GetTimeSinceMemory(Of T)(MemoryType, Boolean, Func(Of T, Boolean))
- uid: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  id: CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: CreatePanel(Person, Person, Relationship, Vector2)
  nameWithType: Relationship.CreatePanel(Person, Person, Relationship, Vector2)
  fullName: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person, TinyLife.Objects.Person, TinyLife.Relationship, Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreatePanel
    path: ../TinyLife/Relationship.cs
    startLine: 400
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a <xref href=\"MLEM.Ui.Elements.Group\" data-throw-if-not-resolved=\"false\"></xref> with a <xref href=\"MLEM.Ui.Elements.Panel\" data-throw-if-not-resolved=\"false\"></xref> in it that contains information about the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">relationship</code>.\nThis method also calls <xref href=\"TinyLife.Relationship.OnRelationshipPanel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Group CreatePanel(Person person, Person otherPerson, Relationship relationship, Vector2 size)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who has the <code data-dev-comment-type="paramref" class="paramref">relationship</code>.
    - id: otherPerson
      type: TinyLife.Objects.Person
      description: The partner of the <code data-dev-comment-type="paramref" class="paramref">relationship</code>.
    - id: relationship
      type: TinyLife.Relationship
      description: The relationship. May be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: size
      type: Microsoft.Xna.Framework.Vector2
      description: The <xref href="MLEM.Ui.Elements.Element.Size" data-throw-if-not-resolved="false"></xref> that the <xref href="MLEM.Ui.Elements.Panel" data-throw-if-not-resolved="false"></xref> should have.
    return:
      type: MLEM.Ui.Elements.Group
      description: A <xref href="MLEM.Ui.Elements.Group" data-throw-if-not-resolved="false"></xref> that contains the <xref href="MLEM.Ui.Elements.Panel" data-throw-if-not-resolved="false"></xref> created.
    content.vb: Public Shared Function CreatePanel(person As Person, otherPerson As Person, relationship As Relationship, size As Vector2) As Group
  overload: TinyLife.Relationship.CreatePanel*
- uid: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  id: PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: PopulateTooltip(Person, Person, Relationship, Tooltip)
  nameWithType: Relationship.PopulateTooltip(Person, Person, Relationship, Tooltip)
  fullName: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person, TinyLife.Objects.Person, TinyLife.Relationship, MLEM.Ui.Elements.Tooltip)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PopulateTooltip
    path: ../TinyLife/Relationship.cs
    startLine: 439
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nPopulates the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">tooltip</code> with information about the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">relationship</code>.\nThis method also takes the <xref href=\"TinyLife.Relationship.OnRelationshipTooltip\" data-throw-if-not-resolved=\"false\"></xref> event into account.\n"
  example: []
  syntax:
    content: public static void PopulateTooltip(Person person, Person otherPerson, Relationship relationship, Tooltip tooltip)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who has the <code data-dev-comment-type="paramref" class="paramref">relationship</code>.
    - id: otherPerson
      type: TinyLife.Objects.Person
      description: The partner of the <code data-dev-comment-type="paramref" class="paramref">relationship</code>.
    - id: relationship
      type: TinyLife.Relationship
      description: The relationship. May be <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
    - id: tooltip
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip to populate.
    content.vb: Public Shared Sub PopulateTooltip(person As Person, otherPerson As Person, relationship As Relationship, tooltip As Tooltip)
  overload: TinyLife.Relationship.PopulateTooltip*
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Relationship.OtherPerson
  commentId: P:TinyLife.Relationship.OtherPerson
  name: OtherPerson
  nameWithType: Relationship.OtherPerson
  fullName: TinyLife.Relationship.OtherPerson
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Relationship.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Relationship>(Relationship)
  nameWithType: Extensions.JsonCopy<Relationship>(Relationship)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Relationship>(TinyLife.Relationship)
  nameWithType.vb: Extensions.JsonCopy(Of Relationship)(Relationship)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Relationship)(TinyLife.Relationship)
  name.vb: JsonCopy(Of Relationship)(Relationship)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Relationship)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Relationship
    name: Relationship
  - name: '>'
  - name: (
  - uid: TinyLife.Relationship
    name: Relationship
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Relationship)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: )
  - name: (
  - uid: TinyLife.Relationship
    name: Relationship
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
  isExternal: true
  name: CreatePanel(Person, Person, Relationship, Vector2)
  nameWithType: Relationship.CreatePanel(Person, Person, Relationship, Vector2)
  fullName: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person, TinyLife.Objects.Person, TinyLife.Relationship, Microsoft.Xna.Framework.Vector2)
  spec.csharp:
  - uid: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
    name: CreatePanel
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Relationship.CreatePanel(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,Microsoft.Xna.Framework.Vector2)
    name: CreatePanel
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}}
  commentId: T:System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<(Person Person, Person Other, Relationship Relationship, Group Group)>
  nameWithType: Action<(Person Person, Person Other, Relationship Relationship, Group Group)>
  fullName: System.Action<(TinyLife.Objects.Person Person, TinyLife.Objects.Person Other, TinyLife.Relationship Relationship, MLEM.Ui.Elements.Group Group)>
  nameWithType.vb: Action(Of (Person As Person, Other As Person, Relationship As Relationship, Group As Group))
  fullName.vb: System.Action(Of (Person As TinyLife.Objects.Person, Other As TinyLife.Objects.Person, Relationship As TinyLife.Relationship, Group As MLEM.Ui.Elements.Group))
  name.vb: Action(Of (Person As Person, Other As Person, Relationship As Relationship, Group As Group))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.other
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Relationship
    name: Relationship
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.relationship
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Group
    name: Group
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Group
    name: Group
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.group
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.person
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.other
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Relationship
    name: Relationship
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.relationship
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Group}.Group
    name: Group
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.group-.group
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Ui.Elements.Group
    name: Group
    isExternal: true
  - name: )
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
  isExternal: true
  name: PopulateTooltip(Person, Person, Relationship, Tooltip)
  nameWithType: Relationship.PopulateTooltip(Person, Person, Relationship, Tooltip)
  fullName: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person, TinyLife.Objects.Person, TinyLife.Relationship, MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
    name: PopulateTooltip
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Relationship.PopulateTooltip(TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip)
    name: PopulateTooltip
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
- uid: System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}}
  commentId: T:System.Action{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<(Person Person, Person Other, Relationship Relationship, Tooltip Tooltip)>
  nameWithType: Action<(Person Person, Person Other, Relationship Relationship, Tooltip Tooltip)>
  fullName: System.Action<(TinyLife.Objects.Person Person, TinyLife.Objects.Person Other, TinyLife.Relationship Relationship, MLEM.Ui.Elements.Tooltip Tooltip)>
  nameWithType.vb: Action(Of (Person As Person, Other As Person, Relationship As Relationship, Tooltip As Tooltip))
  fullName.vb: System.Action(Of (Person As TinyLife.Objects.Person, Other As TinyLife.Objects.Person, Relationship As TinyLife.Relationship, Tooltip As MLEM.Ui.Elements.Tooltip))
  name.vb: Action(Of (Person As Person, Other As Person, Relationship As Relationship, Tooltip As Tooltip))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.other
  - name: ','
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Relationship
    name: Relationship
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.relationship
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Tooltip
    name: Tooltip
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.tooltip
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Person
    name: Person
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.person
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Other
    name: Other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.other
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Relationship
    name: Relationship
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.relationship
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Relationship
    name: Relationship
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.Person,TinyLife.Relationship,MLEM.Ui.Elements.Tooltip}.Tooltip
    name: Tooltip
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.person,tinylife.objects.person,tinylife.relationship,mlem.ui.elements.tooltip-.tooltip
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Relationship.Max
  commentId: F:TinyLife.Relationship.Max
  name: Max
  nameWithType: Relationship.Max
  fullName: TinyLife.Relationship.Max
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  name: FriendLevel
  nameWithType: Relationship.FriendLevel
  fullName: TinyLife.Relationship.FriendLevel
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  name: RomanceLevel
  nameWithType: Relationship.RomanceLevel
  fullName: TinyLife.Relationship.RomanceLevel
- uid: TinyLife.Objects.Person.RecentActions
  commentId: F:TinyLife.Objects.Person.RecentActions
  name: RecentActions
  nameWithType: Person.RecentActions
  fullName: TinyLife.Objects.Person.RecentActions
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Actions.ActionType.AskAboutPersonality
  commentId: F:TinyLife.Actions.ActionType.AskAboutPersonality
  name: AskAboutPersonality
  nameWithType: ActionType.AskAboutPersonality
  fullName: TinyLife.Actions.ActionType.AskAboutPersonality
- uid: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<PersonalityType>
  nameWithType: HashSet<PersonalityType>
  fullName: System.Collections.Generic.HashSet<TinyLife.PersonalityType>
  nameWithType.vb: HashSet(Of PersonalityType)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.PersonalityType)
  name.vb: HashSet(Of PersonalityType)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: TinyLife.PersonalityType
    name: PersonalityType
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.PersonalityType
    name: PersonalityType
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Relationship.Partner
  commentId: P:TinyLife.Relationship.Partner
  name: Partner
  nameWithType: Relationship.Partner
  fullName: TinyLife.Relationship.Partner
- uid: TinyLife.Relationship.OtherPerson*
  commentId: Overload:TinyLife.Relationship.OtherPerson
  name: OtherPerson
  nameWithType: Relationship.OtherPerson
  fullName: TinyLife.Relationship.OtherPerson
- uid: TinyLife.Relationship.Partner*
  commentId: Overload:TinyLife.Relationship.Partner
  name: Partner
  nameWithType: Relationship.Partner
  fullName: TinyLife.Relationship.Partner
- uid: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: ChangeFriendship(Person, float)
  nameWithType: Person.ChangeFriendship(Person, float)
  fullName: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person, float)
  nameWithType.vb: Person.ChangeFriendship(Person, Single)
  fullName.vb: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person, Single)
  name.vb: ChangeFriendship(Person, Single)
  spec.csharp:
  - uid: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
    name: ChangeFriendship
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
    name: ChangeFriendship
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Relationship.FriendLevel*
  commentId: Overload:TinyLife.Relationship.FriendLevel
  name: FriendLevel
  nameWithType: Relationship.FriendLevel
  fullName: TinyLife.Relationship.FriendLevel
- uid: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: ChangeRomance(Person, float)
  nameWithType: Person.ChangeRomance(Person, float)
  fullName: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person, float)
  nameWithType.vb: Person.ChangeRomance(Person, Single)
  fullName.vb: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person, Single)
  name.vb: ChangeRomance(Person, Single)
  spec.csharp:
  - uid: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
    name: ChangeRomance
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
    name: ChangeRomance
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Relationship.RomanceLevel*
  commentId: Overload:TinyLife.Relationship.RomanceLevel
  name: RomanceLevel
  nameWithType: Relationship.RomanceLevel
  fullName: TinyLife.Relationship.RomanceLevel
- uid: TinyLife.Relationship.FriendPercentage*
  commentId: Overload:TinyLife.Relationship.FriendPercentage
  name: FriendPercentage
  nameWithType: Relationship.FriendPercentage
  fullName: TinyLife.Relationship.FriendPercentage
- uid: TinyLife.Relationship.RomancePercentage*
  commentId: Overload:TinyLife.Relationship.RomancePercentage
  name: RomancePercentage
  nameWithType: Relationship.RomancePercentage
  fullName: TinyLife.Relationship.RomancePercentage
- uid: TinyLife.RelationshipType
  commentId: T:TinyLife.RelationshipType
  parent: TinyLife
  name: RelationshipType
  nameWithType: RelationshipType
  fullName: TinyLife.RelationshipType
- uid: TinyLife.Relationship.Type*
  commentId: Overload:TinyLife.Relationship.Type
  name: Type
  nameWithType: Relationship.Type
  fullName: TinyLife.Relationship.Type
- uid: TinyLife.Relationship.RomanceType
  commentId: P:TinyLife.Relationship.RomanceType
  name: RomanceType
  nameWithType: Relationship.RomanceType
  fullName: TinyLife.Relationship.RomanceType
- uid: TinyLife.Relationship.RomanceType*
  commentId: Overload:TinyLife.Relationship.RomanceType
  name: RomanceType
  nameWithType: Relationship.RomanceType
  fullName: TinyLife.Relationship.RomanceType
- uid: TinyLife.RomanceType
  commentId: T:TinyLife.RomanceType
  parent: TinyLife
  name: RomanceType
  nameWithType: RomanceType
  fullName: TinyLife.RomanceType
- uid: TinyLife.Relationship.Type
  commentId: P:TinyLife.Relationship.Type
  name: Type
  nameWithType: Relationship.Type
  fullName: TinyLife.Relationship.Type
- uid: TinyLife.Relationship.FriendDisplayString*
  commentId: Overload:TinyLife.Relationship.FriendDisplayString
  name: FriendDisplayString
  nameWithType: Relationship.FriendDisplayString
  fullName: TinyLife.Relationship.FriendDisplayString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Relationship.RomanceDisplayString*
  commentId: Overload:TinyLife.Relationship.RomanceDisplayString
  name: RomanceDisplayString
  nameWithType: Relationship.RomanceDisplayString
  fullName: TinyLife.Relationship.RomanceDisplayString
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
- uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  name: GetOpposite(GenealogyType)
  nameWithType: Extensions.GetOpposite(GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
  - name: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
  - name: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: )
- uid: TinyLife.Relationship.Genealogy*
  commentId: Overload:TinyLife.Relationship.Genealogy
  name: Genealogy
  nameWithType: Relationship.Genealogy
  fullName: TinyLife.Relationship.Genealogy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Actions.ActionType.Kiss
  commentId: F:TinyLife.Actions.ActionType.Kiss
  name: Kiss
  nameWithType: ActionType.Kiss
  fullName: TinyLife.Actions.ActionType.Kiss
- uid: TinyLife.Goals.JobType.Types
  commentId: F:TinyLife.Goals.JobType.Types
  parent: TinyLife.Goals.JobType
  name: Types
  nameWithType: JobType.Types
  fullName: TinyLife.Goals.JobType.Types
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  parent: TinyLife.Goals
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Goals
    name: Goals
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Goals
    name: Goals
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.TalkAction
  commentId: T:TinyLife.Actions.TalkAction
  name: TalkAction
  nameWithType: TalkAction
  fullName: TinyLife.Actions.TalkAction
- uid: TinyLife.Objects.AgeGroup.Child
  commentId: F:TinyLife.Objects.AgeGroup.Child
  name: Child
  nameWithType: AgeGroup.Child
  fullName: TinyLife.Objects.AgeGroup.Child
- uid: TinyLife.Relationship.GetSocialEffectiveness*
  commentId: Overload:TinyLife.Relationship.GetSocialEffectiveness
  name: GetSocialEffectiveness
  nameWithType: Relationship.GetSocialEffectiveness
  fullName: TinyLife.Relationship.GetSocialEffectiveness
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: TinyLife.Relationship.MaxRecentSocialsAmount
  commentId: F:TinyLife.Relationship.MaxRecentSocialsAmount
  name: MaxRecentSocialsAmount
  nameWithType: Relationship.MaxRecentSocialsAmount
  fullName: TinyLife.Relationship.MaxRecentSocialsAmount
- uid: TinyLife.Relationship.GetRecentSocialAmount*
  commentId: Overload:TinyLife.Relationship.GetRecentSocialAmount
  name: GetRecentSocialAmount
  nameWithType: Relationship.GetRecentSocialAmount
  fullName: TinyLife.Relationship.GetRecentSocialAmount
- uid: TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
  commentId: M:TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
  name: EvaluateFully(SocialAction)
  nameWithType: TalkAction.TalkSettings.EvaluateFully(SocialAction)
  fullName: TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
  spec.csharp:
  - uid: TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
    name: EvaluateFully
  - name: (
  - uid: TinyLife.Actions.SocialAction
    name: SocialAction
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
    name: EvaluateFully
  - name: (
  - uid: TinyLife.Actions.SocialAction
    name: SocialAction
  - name: )
- uid: TinyLife.Relationship.AddRecentSocial*
  commentId: Overload:TinyLife.Relationship.AddRecentSocial
  name: AddRecentSocial
  nameWithType: Relationship.AddRecentSocial
  fullName: TinyLife.Relationship.AddRecentSocial
- uid: TinyLife.Objects.Person.Validate
  commentId: M:TinyLife.Objects.Person.Validate
  name: Validate()
  nameWithType: Person.Validate()
  fullName: TinyLife.Objects.Person.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.Person.Validate
    name: Validate
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.Validate
    name: Validate
  - name: (
  - name: )
- uid: TinyLife.Relationship.Validate*
  commentId: Overload:TinyLife.Relationship.Validate
  name: Validate
  nameWithType: Relationship.Validate
  fullName: TinyLife.Relationship.Validate
- uid: TinyLife.Relationship.ResetToStatic*
  commentId: Overload:TinyLife.Relationship.ResetToStatic
  name: ResetToStatic
  nameWithType: Relationship.ResetToStatic
  fullName: TinyLife.Relationship.ResetToStatic
- uid: TinyLife.Relationship.Genealogy
  commentId: P:TinyLife.Relationship.Genealogy
  name: Genealogy
  nameWithType: Relationship.Genealogy
  fullName: TinyLife.Relationship.Genealogy
- uid: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
  name: GetTransitive(GenealogyType, GenealogyType)
  nameWithType: Extensions.GetTransitive(GenealogyType, GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType, TinyLife.GenealogyType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
    name: GetTransitive
  - name: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: ','
  - name: " "
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetTransitive(TinyLife.GenealogyType,TinyLife.GenealogyType)
    name: GetTransitive
  - name: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: ','
  - name: " "
  - uid: TinyLife.GenealogyType
    name: GenealogyType
  - name: )
- uid: TinyLife.GenealogyType.Unrelated
  commentId: F:TinyLife.GenealogyType.Unrelated
  name: Unrelated
  nameWithType: GenealogyType.Unrelated
  fullName: TinyLife.GenealogyType.Unrelated
- uid: TinyLife.Relationship.SetGenealogy*
  commentId: Overload:TinyLife.Relationship.SetGenealogy
  name: SetGenealogy
  nameWithType: Relationship.SetGenealogy
  fullName: TinyLife.Relationship.SetGenealogy
- uid: TinyLife.Goals.Memory
  commentId: T:TinyLife.Goals.Memory
  name: Memory
  nameWithType: Memory
  fullName: TinyLife.Goals.Memory
- uid: TinyLife.Objects.Person.Memories
  commentId: F:TinyLife.Objects.Person.Memories
  name: Memories
  nameWithType: Person.Memories
  fullName: TinyLife.Objects.Person.Memories
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: TinyLife.Relationship.AddMemory*
  commentId: Overload:TinyLife.Relationship.AddMemory
  name: AddMemory
  nameWithType: Relationship.AddMemory
  fullName: TinyLife.Relationship.AddMemory
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  parent: TinyLife.Goals
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan?
  nameWithType: TimeSpan?
  fullName: System.TimeSpan?
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Relationship.GetMemories*
  commentId: Overload:TinyLife.Relationship.GetMemories
  name: GetMemories
  nameWithType: Relationship.GetMemories
  fullName: TinyLife.Relationship.GetMemories
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Relationship.RemoveMemory*
  commentId: Overload:TinyLife.Relationship.RemoveMemory
  name: RemoveMemory
  nameWithType: Relationship.RemoveMemory
  fullName: TinyLife.Relationship.RemoveMemory
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Relationship.GetTimeSinceMemory*
  commentId: Overload:TinyLife.Relationship.GetTimeSinceMemory
  name: GetTimeSinceMemory
  nameWithType: Relationship.GetTimeSinceMemory
  fullName: TinyLife.Relationship.GetTimeSinceMemory
- uid: MLEM.Ui.Elements.Group
  commentId: T:MLEM.Ui.Elements.Group
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Group
  nameWithType: Group
  fullName: MLEM.Ui.Elements.Group
- uid: MLEM.Ui.Elements.Panel
  commentId: T:MLEM.Ui.Elements.Panel
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Panel
  nameWithType: Panel
  fullName: MLEM.Ui.Elements.Panel
- uid: TinyLife.Relationship.OnRelationshipPanel
  commentId: E:TinyLife.Relationship.OnRelationshipPanel
  name: OnRelationshipPanel
  nameWithType: Relationship.OnRelationshipPanel
  fullName: TinyLife.Relationship.OnRelationshipPanel
- uid: MLEM.Ui.Elements.Element.Size
  commentId: P:MLEM.Ui.Elements.Element.Size
  parent: MLEM.Ui.Elements.Element
  isExternal: true
  name: Size
  nameWithType: Element.Size
  fullName: MLEM.Ui.Elements.Element.Size
- uid: TinyLife.Relationship.CreatePanel*
  commentId: Overload:TinyLife.Relationship.CreatePanel
  name: CreatePanel
  nameWithType: Relationship.CreatePanel
  fullName: TinyLife.Relationship.CreatePanel
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  parent: TinyLife
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Relationship.OnRelationshipTooltip
  commentId: E:TinyLife.Relationship.OnRelationshipTooltip
  name: OnRelationshipTooltip
  nameWithType: Relationship.OnRelationshipTooltip
  fullName: TinyLife.Relationship.OnRelationshipTooltip
- uid: TinyLife.Relationship.PopulateTooltip*
  commentId: Overload:TinyLife.Relationship.PopulateTooltip
  name: PopulateTooltip
  nameWithType: Relationship.PopulateTooltip
  fullName: TinyLife.Relationship.PopulateTooltip
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip

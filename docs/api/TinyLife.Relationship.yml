### YamlMime:ManagedReference
items:
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  id: Relationship
  parent: TinyLife
  children:
  - TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.Dating
  - TinyLife.Relationship.DisplayString
  - TinyLife.Relationship.FriendLevel
  - TinyLife.Relationship.FriendPercentage
  - TinyLife.Relationship.Genealogy
  - TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  - TinyLife.Relationship.HadFirstKiss
  - TinyLife.Relationship.KnownPersonalityTypes
  - TinyLife.Relationship.Max
  - TinyLife.Relationship.MaxRecentSocialsAmount
  - TinyLife.Relationship.OtherPerson
  - TinyLife.Relationship.Partner
  - TinyLife.Relationship.PassiveFriendReduction
  - TinyLife.Relationship.PassiveRomanceReduction
  - TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  - TinyLife.Relationship.RomanceLevel
  - TinyLife.Relationship.RomancePercentage
  - TinyLife.Relationship.Type
  - TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
  type: Class
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Relationship
    path: ../TinyLife/Relationship.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA relationship is a connection between two <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects.\nIt should be noted that a relationship is not always the same between a person and the linked <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref>.\nWhat this means is that A can have a good relationship to B, but B can have a less good relationship to A.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Relationship
    content.vb: >-
      <DataContract>

      Public Class Relationship
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Relationship.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Relationship.Max
  commentId: F:TinyLife.Relationship.Max
  id: Max
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: Relationship.Max
  fullName: TinyLife.Relationship.Max
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Max
    path: ../TinyLife/Relationship.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe maximum value that a relationship level can have\n"
  example: []
  syntax:
    content: public const float Max = 100000F
    return:
      type: System.Single
    content.vb: Public Const Max As Single = 100000F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Relationship.PassiveFriendReduction
  commentId: F:TinyLife.Relationship.PassiveFriendReduction
  id: PassiveFriendReduction
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: PassiveFriendReduction
  nameWithType: Relationship.PassiveFriendReduction
  fullName: TinyLife.Relationship.PassiveFriendReduction
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassiveFriendReduction
    path: ../TinyLife/Relationship.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that are removed from each relationship&apos;s <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> each update frame\n"
  example: []
  syntax:
    content: public const float PassiveFriendReduction = 0.01F
    return:
      type: System.Single
    content.vb: Public Const PassiveFriendReduction As Single = 0.01F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Relationship.PassiveRomanceReduction
  commentId: F:TinyLife.Relationship.PassiveRomanceReduction
  id: PassiveRomanceReduction
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: PassiveRomanceReduction
  nameWithType: Relationship.PassiveRomanceReduction
  fullName: TinyLife.Relationship.PassiveRomanceReduction
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassiveRomanceReduction
    path: ../TinyLife/Relationship.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that are removed from each relationship&apos;s <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> each update frame\n"
  example: []
  syntax:
    content: public const float PassiveRomanceReduction = 0.015F
    return:
      type: System.Single
    content.vb: Public Const PassiveRomanceReduction As Single = 0.015F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Relationship.MaxRecentSocialsAmount
  commentId: F:TinyLife.Relationship.MaxRecentSocialsAmount
  id: MaxRecentSocialsAmount
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: MaxRecentSocialsAmount
  nameWithType: Relationship.MaxRecentSocialsAmount
  fullName: TinyLife.Relationship.MaxRecentSocialsAmount
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxRecentSocialsAmount
    path: ../TinyLife/Relationship.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe maximum amount of social actions that are &quot;remembered&quot; in this relationship.\nThis is equivalent to <xref href=\"TinyLife.Objects.Person.RecentActions\" data-throw-if-not-resolved=\"false\"></xref>, but related to this relationship only.\n"
  example: []
  syntax:
    content: public const int MaxRecentSocialsAmount = 10
    return:
      type: System.Int32
    content.vb: Public Const MaxRecentSocialsAmount As Integer = 10
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Relationship.KnownPersonalityTypes
  commentId: F:TinyLife.Relationship.KnownPersonalityTypes
  id: KnownPersonalityTypes
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: KnownPersonalityTypes
  nameWithType: Relationship.KnownPersonalityTypes
  fullName: TinyLife.Relationship.KnownPersonalityTypes
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: KnownPersonalityTypes
    path: ../TinyLife/Relationship.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> objects that are known about this relationship&apos;s <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref>.\nThis collection is populated by <xref href=\"TinyLife.Actions.ActionType.AskAboutPersonality\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly HashSet<PersonalityType> KnownPersonalityTypes
    return:
      type: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
    content.vb: >-
      <DataMember>

      Public ReadOnly KnownPersonalityTypes As HashSet(Of PersonalityType)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.OtherPerson
  commentId: P:TinyLife.Relationship.OtherPerson
  id: OtherPerson
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: OtherPerson
  nameWithType: Relationship.OtherPerson
  fullName: TinyLife.Relationship.OtherPerson
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OtherPerson
    path: ../TinyLife/Relationship.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of the person that this relationship is linked to.\nTo easily retrieve the matching <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instance, see <xref href=\"TinyLife.Relationship.Partner\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid OtherPerson { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Property OtherPerson As Guid
  overload: TinyLife.Relationship.OtherPerson*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.Partner
  commentId: P:TinyLife.Relationship.Partner
  id: Partner
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Partner
  nameWithType: Relationship.Partner
  fullName: TinyLife.Relationship.Partner
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Partner
    path: ../TinyLife/Relationship.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe actual other person involved in the relationship.\nThis is a computed property that returns the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> on the map with the <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref> id.\n"
  example: []
  syntax:
    content: public Person Partner { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Partner As Person
  overload: TinyLife.Relationship.Partner*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  id: FriendLevel
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: FriendLevel
  nameWithType: Relationship.FriendLevel
  fullName: TinyLife.Relationship.FriendLevel
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendLevel
    path: ../TinyLife/Relationship.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe current amount of friendship points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that this relationship has.\nThis value is automatically clamped between -<xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float FriendLevel { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property FriendLevel As Single
  overload: TinyLife.Relationship.FriendLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  id: RomanceLevel
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomanceLevel
  nameWithType: Relationship.RomanceLevel
  fullName: TinyLife.Relationship.RomanceLevel
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomanceLevel
    path: ../TinyLife/Relationship.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe current amount of romance points (out of <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>) that this relationship has.\nThis value is automatically clamped between 0 and <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that, for aromantic people, getting and setting this value always gets and sets <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  example: []
  syntax:
    content: public float RomanceLevel { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property RomanceLevel As Single
  overload: TinyLife.Relationship.RomanceLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.FriendPercentage
  commentId: P:TinyLife.Relationship.FriendPercentage
  id: FriendPercentage
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: FriendPercentage
  nameWithType: Relationship.FriendPercentage
  fullName: TinyLife.Relationship.FriendPercentage
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendPercentage
    path: ../TinyLife/Relationship.cs
    startLine: 82
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> of this relationship, divided by <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>, yielding a percentage between -1 and 1 of how good this friendship is\n"
  example: []
  syntax:
    content: public float FriendPercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property FriendPercentage As Single
  overload: TinyLife.Relationship.FriendPercentage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.RomancePercentage
  commentId: P:TinyLife.Relationship.RomancePercentage
  id: RomancePercentage
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: RomancePercentage
  nameWithType: Relationship.RomancePercentage
  fullName: TinyLife.Relationship.RomancePercentage
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RomancePercentage
    path: ../TinyLife/Relationship.cs
    startLine: 86
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> of this relationship, divided by <xref href=\"TinyLife.Relationship.Max\" data-throw-if-not-resolved=\"false\"></xref>, yielding a percentage between 0 and 1 of how good this relationship&apos;s romance level is\n"
  example: []
  syntax:
    content: public float RomancePercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property RomancePercentage As Single
  overload: TinyLife.Relationship.RomancePercentage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.Type
  commentId: P:TinyLife.Relationship.Type
  id: Type
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Relationship.Type
  fullName: TinyLife.Relationship.Type
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Relationship.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.RelationshipType\" data-throw-if-not-resolved=\"false\"></xref> that this relationship has, based on the current <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RelationshipType Type { get; }
    parameters: []
    return:
      type: TinyLife.RelationshipType
    content.vb: Public ReadOnly Property Type As RelationshipType
  overload: TinyLife.Relationship.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.DisplayString
  commentId: P:TinyLife.Relationship.DisplayString
  id: DisplayString
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: DisplayString
  nameWithType: Relationship.DisplayString
  fullName: TinyLife.Relationship.DisplayString
  type: Property
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayString
    path: ../TinyLife/Relationship.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn (unlocalized) string that represents a written version of this relationship&apos;s status.\nIf <xref href=\"TinyLife.Relationship.Dating\" data-throw-if-not-resolved=\"false\"></xref> is true, the string &quot;Dating&quot; will be returned. Otherwise, <xref href=\"TinyLife.Relationship.Type\" data-throw-if-not-resolved=\"false\"></xref> is returned as a string.\n"
  example: []
  syntax:
    content: public string DisplayString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayString As String
  overload: TinyLife.Relationship.DisplayString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Relationship.Genealogy
  commentId: F:TinyLife.Relationship.Genealogy
  id: Genealogy
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Genealogy
  nameWithType: Relationship.Genealogy
  fullName: TinyLife.Relationship.Genealogy
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Genealogy
    path: ../TinyLife/Relationship.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref> of this relationship.\nNote that the genealogy&apos;s value works in the following direction: &quot;I am the [Genealogy] of [OtherPerson]&quot;.\nNote that <xref href=\"TinyLife.Relationship.OtherPerson\" data-throw-if-not-resolved=\"false\"></xref> will always have the <xref href=\"TinyLife.GenealogyType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public GenealogyType Genealogy
    return:
      type: TinyLife.GenealogyType
    content.vb: >-
      <DataMember>

      Public Genealogy As GenealogyType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.Dating
  commentId: F:TinyLife.Relationship.Dating
  id: Dating
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Dating
  nameWithType: Relationship.Dating
  fullName: TinyLife.Relationship.Dating
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Dating
    path: ../TinyLife/Relationship.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis value is set to true if this relationship is a romantic relationship\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool Dating
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Dating As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.HadFirstKiss
  commentId: F:TinyLife.Relationship.HadFirstKiss
  id: HadFirstKiss
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: HadFirstKiss
  nameWithType: Relationship.HadFirstKiss
  fullName: TinyLife.Relationship.HadFirstKiss
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HadFirstKiss
    path: ../TinyLife/Relationship.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis value is set to true if this relationship&apos;s partners have invoked the <xref href=\"TinyLife.Actions.ActionType.Kiss\" data-throw-if-not-resolved=\"false\"></xref> action at least once.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool HadFirstKiss
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public HadFirstKiss As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  id: GetSocialEffectiveness(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetSocialEffectiveness(ActionType)
  nameWithType: Relationship.GetSocialEffectiveness(ActionType)
  fullName: TinyLife.Relationship.GetSocialEffectiveness(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSocialEffectiveness
    path: ../TinyLife/Relationship.cs
    startLine: 144
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns the effectiveness percentage that the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> has right now, based on the amount of times that it has been used previously.\nIn <xref href=\"TinyLife.Actions.TalkAction\" data-throw-if-not-resolved=\"false\"></xref>, this effectiveness is used to reduce the friendship and romance gain based on the &quot;boringness&quot; of an action.\n"
  example: []
  syntax:
    content: public float GetSocialEffectiveness(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action whose effectiveness to query
    return:
      type: System.Single
      description: The social effectiveness, which is a percentage between 0 and 1
    content.vb: Public Function GetSocialEffectiveness(action As ActionType) As Single
  overload: TinyLife.Relationship.GetSocialEffectiveness*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  id: GetRecentSocialAmount(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: GetRecentSocialAmount(ActionType)
  nameWithType: Relationship.GetRecentSocialAmount(ActionType)
  fullName: TinyLife.Relationship.GetRecentSocialAmount(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRecentSocialAmount
    path: ../TinyLife/Relationship.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns the amount of times that the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> has been used out of the last <xref href=\"TinyLife.Relationship.MaxRecentSocialsAmount\" data-throw-if-not-resolved=\"false\"></xref> social actions in this relationship\n"
  example: []
  syntax:
    content: public int GetRecentSocialAmount(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetRecentSocialAmount(action As ActionType) As Integer
  overload: TinyLife.Relationship.GetRecentSocialAmount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  id: AddRecentSocial(TinyLife.Actions.ActionType)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: AddRecentSocial(ActionType)
  nameWithType: Relationship.AddRecentSocial(ActionType)
  fullName: TinyLife.Relationship.AddRecentSocial(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddRecentSocial
    path: ../TinyLife/Relationship.cs
    startLine: 164
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAdds the given action to the list of recent social actions for this relationship.\nIf the list&apos;s length exceeds <xref href=\"TinyLife.Relationship.MaxRecentSocialsAmount\" data-throw-if-not-resolved=\"false\"></xref>, the least recent socials will be removed.\nNote that this method is automatically invoked in <xref href=\"TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void AddRecentSocial(ActionType action)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action to add to the recent socials list
    content.vb: Public Sub AddRecentSocial(action As ActionType)
  overload: TinyLife.Relationship.AddRecentSocial*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Relationship.Validate(Person)
  fullName: TinyLife.Relationship.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Relationship.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nValidates this relationship, setting its internal person reference to the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is automatically called for all of their relationships in <xref href=\"TinyLife.Objects.Person.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this relationship belongs to
    content.vb: Public Sub Validate(person As Person)
  overload: TinyLife.Relationship.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  commentId: M:TinyLife.Relationship.ResetToStatic(System.Boolean,System.Boolean)
  id: ResetToStatic(System.Boolean,System.Boolean)
  parent: TinyLife.Relationship
  langs:
  - csharp
  - vb
  name: ResetToStatic(Boolean, Boolean)
  nameWithType: Relationship.ResetToStatic(Boolean, Boolean)
  fullName: TinyLife.Relationship.ResetToStatic(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ResetToStatic
    path: ../TinyLife/Relationship.cs
    startLine: 187
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nResets this relationship to a more basic, static version.\nThis method is used when a map or household is exported, and by the ExportHousehold cheat.\n"
  example: []
  syntax:
    content: public void ResetToStatic(bool thorough, bool sameHousehold)
    parameters:
    - id: thorough
      type: System.Boolean
      description: Whether the relationship should be reset thoroughly, causing the friendship level and romance level to be averaged out
    - id: sameHousehold
      type: System.Boolean
      description: Whether the two people that are part of this relationship are in the same household
    content.vb: Public Sub ResetToStatic(thorough As Boolean, sameHousehold As Boolean)
  overload: TinyLife.Relationship.ResetToStatic*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Relationship.OtherPerson
  commentId: P:TinyLife.Relationship.OtherPerson
  isExternal: true
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Relationship.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Relationship>()
  nameWithType: Extensions.JsonCopy<Relationship>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Relationship>()
  nameWithType.vb: Extensions.JsonCopy(Of Relationship)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Relationship)()
  name.vb: JsonCopy(Of Relationship)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Relationship>
    nameWithType: Extensions.JsonCopy<Relationship>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Relationship>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Relationship)
    nameWithType: Extensions.JsonCopy(Of Relationship)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Relationship)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Relationship.Max
  commentId: F:TinyLife.Relationship.Max
  isExternal: true
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  isExternal: true
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  isExternal: true
- uid: TinyLife.Objects.Person.RecentActions
  commentId: F:TinyLife.Objects.Person.RecentActions
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Actions.ActionType.AskAboutPersonality
  commentId: F:TinyLife.Actions.ActionType.AskAboutPersonality
  isExternal: true
- uid: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<PersonalityType>
  nameWithType: HashSet<PersonalityType>
  fullName: System.Collections.Generic.HashSet<TinyLife.PersonalityType>
  nameWithType.vb: HashSet(Of PersonalityType)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.PersonalityType)
  name.vb: HashSet(Of PersonalityType)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Relationship.Partner
  commentId: P:TinyLife.Relationship.Partner
  isExternal: true
- uid: TinyLife.Relationship.OtherPerson*
  commentId: Overload:TinyLife.Relationship.OtherPerson
  name: OtherPerson
  nameWithType: Relationship.OtherPerson
  fullName: TinyLife.Relationship.OtherPerson
- uid: TinyLife.Relationship.Partner*
  commentId: Overload:TinyLife.Relationship.Partner
  name: Partner
  nameWithType: Relationship.Partner
  fullName: TinyLife.Relationship.Partner
- uid: TinyLife.Relationship.FriendLevel*
  commentId: Overload:TinyLife.Relationship.FriendLevel
  name: FriendLevel
  nameWithType: Relationship.FriendLevel
  fullName: TinyLife.Relationship.FriendLevel
- uid: TinyLife.Relationship.RomanceLevel*
  commentId: Overload:TinyLife.Relationship.RomanceLevel
  name: RomanceLevel
  nameWithType: Relationship.RomanceLevel
  fullName: TinyLife.Relationship.RomanceLevel
- uid: TinyLife.Relationship.FriendPercentage*
  commentId: Overload:TinyLife.Relationship.FriendPercentage
  name: FriendPercentage
  nameWithType: Relationship.FriendPercentage
  fullName: TinyLife.Relationship.FriendPercentage
- uid: TinyLife.Relationship.RomancePercentage*
  commentId: Overload:TinyLife.Relationship.RomancePercentage
  name: RomancePercentage
  nameWithType: Relationship.RomancePercentage
  fullName: TinyLife.Relationship.RomancePercentage
- uid: TinyLife.RelationshipType
  commentId: T:TinyLife.RelationshipType
  parent: TinyLife
  name: RelationshipType
  nameWithType: RelationshipType
  fullName: TinyLife.RelationshipType
- uid: TinyLife.Relationship.Type*
  commentId: Overload:TinyLife.Relationship.Type
  name: Type
  nameWithType: Relationship.Type
  fullName: TinyLife.Relationship.Type
- uid: TinyLife.Relationship.Dating
  commentId: F:TinyLife.Relationship.Dating
  isExternal: true
- uid: TinyLife.Relationship.Type
  commentId: P:TinyLife.Relationship.Type
  isExternal: true
- uid: TinyLife.Relationship.DisplayString*
  commentId: Overload:TinyLife.Relationship.DisplayString
  name: DisplayString
  nameWithType: Relationship.DisplayString
  fullName: TinyLife.Relationship.DisplayString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
- uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  name: GetOpposite(GenealogyType)
  nameWithType: Extensions.GetOpposite(GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.ActionType.Kiss
  commentId: F:TinyLife.Actions.ActionType.Kiss
  isExternal: true
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.TalkAction
  commentId: T:TinyLife.Actions.TalkAction
  name: TalkAction
  nameWithType: TalkAction
  fullName: TinyLife.Actions.TalkAction
- uid: TinyLife.Relationship.GetSocialEffectiveness*
  commentId: Overload:TinyLife.Relationship.GetSocialEffectiveness
  name: GetSocialEffectiveness
  nameWithType: Relationship.GetSocialEffectiveness
  fullName: TinyLife.Relationship.GetSocialEffectiveness
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Relationship.MaxRecentSocialsAmount
  commentId: F:TinyLife.Relationship.MaxRecentSocialsAmount
  isExternal: true
- uid: TinyLife.Relationship.GetRecentSocialAmount*
  commentId: Overload:TinyLife.Relationship.GetRecentSocialAmount
  name: GetRecentSocialAmount
  nameWithType: Relationship.GetRecentSocialAmount
  fullName: TinyLife.Relationship.GetRecentSocialAmount
- uid: TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
  commentId: M:TinyLife.Actions.TalkAction.TalkSettings.EvaluateFully(TinyLife.Actions.SocialAction)
  isExternal: true
- uid: TinyLife.Relationship.AddRecentSocial*
  commentId: Overload:TinyLife.Relationship.AddRecentSocial
  name: AddRecentSocial
  nameWithType: Relationship.AddRecentSocial
  fullName: TinyLife.Relationship.AddRecentSocial
- uid: TinyLife.Objects.Person.Validate
  commentId: M:TinyLife.Objects.Person.Validate
  isExternal: true
- uid: TinyLife.Relationship.Validate*
  commentId: Overload:TinyLife.Relationship.Validate
  name: Validate
  nameWithType: Relationship.Validate
  fullName: TinyLife.Relationship.Validate
- uid: TinyLife.Relationship.ResetToStatic*
  commentId: Overload:TinyLife.Relationship.ResetToStatic
  name: ResetToStatic
  nameWithType: Relationship.ResetToStatic
  fullName: TinyLife.Relationship.ResetToStatic

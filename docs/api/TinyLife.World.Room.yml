### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  id: Room
  parent: TinyLife.World
  children:
  - TinyLife.World.Room.Center
  - TinyLife.World.Room.CoveredSections
  - TinyLife.World.Room.FullyRoofed
  - TinyLife.World.Room.GetConnectedRooms(TinyLife.Objects.Person)
  - TinyLife.World.Room.GetDecorativeRating
  - TinyLife.World.Room.GetLights
  - TinyLife.World.Room.GetObjects``1
  - TinyLife.World.Room.GetWalls(System.Boolean)
  - TinyLife.World.Room.IsSameRoom(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  - TinyLife.World.Room.Map
  - TinyLife.World.Room.Tiles
  - TinyLife.World.Room.Validate
  langs:
  - csharp
  - vb
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
  type: Class
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Room
    path: ../TinyLife/World/Room.cs
    startLine: 11
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA room is an area on a <xref href=\"TinyLife.World.Room.Map\" data-throw-if-not-resolved=\"false\"></xref> that is surrounded by <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: public class Room
    content.vb: Public Class Room
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Room.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Room.Map
  commentId: F:TinyLife.World.Room.Map
  id: Map
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Room.Map
  fullName: TinyLife.World.Room.Map
  type: Field
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/World/Room.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe map that this room is on\n"
  example: []
  syntax:
    content: public readonly Map Map
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Map As Map
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Room.Center
  commentId: F:TinyLife.World.Room.Center
  id: Center
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: Room.Center
  fullName: TinyLife.World.Room.Center
  type: Field
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Center
    path: ../TinyLife/World/Room.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe position that is considered to be the center of this room.\nThis is the average of all of its covered <xref href=\"TinyLife.World.Room.Tiles\" data-throw-if-not-resolved=\"false\"></xref>, and the <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> that this room is on is determined by this value.\n"
  example: []
  syntax:
    content: public readonly Point Center
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Center As Point
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Room.Tiles
  commentId: F:TinyLife.World.Room.Tiles
  id: Tiles
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: Room.Tiles
  fullName: TinyLife.World.Room.Tiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tiles
    path: ../TinyLife/World/Room.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"Microsoft.Xna.Framework.Point\" data-throw-if-not-resolved=\"false\"></xref> positions on the <xref href=\"TinyLife.World.Room.Map\" data-throw-if-not-resolved=\"false\"></xref> that are contained in this room\n"
  example: []
  syntax:
    content: public readonly HashSet<Point> Tiles
    return:
      type: System.Collections.Generic.HashSet{Microsoft.Xna.Framework.Point}
    content.vb: Public ReadOnly Tiles As HashSet(Of Point)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Room.CoveredSections
  commentId: F:TinyLife.World.Room.CoveredSections
  id: CoveredSections
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: CoveredSections
  nameWithType: Room.CoveredSections
  fullName: TinyLife.World.Room.CoveredSections
  type: Field
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CoveredSections
    path: ../TinyLife/World/Room.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> instances that are covered by this room\n"
  example: []
  syntax:
    content: public readonly HashSet<MapSection> CoveredSections
    return:
      type: System.Collections.Generic.HashSet{TinyLife.World.MapSection}
    content.vb: Public ReadOnly CoveredSections As HashSet(Of MapSection)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Room.FullyRoofed
  commentId: P:TinyLife.World.Room.FullyRoofed
  id: FullyRoofed
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: FullyRoofed
  nameWithType: Room.FullyRoofed
  fullName: TinyLife.World.Room.FullyRoofed
  type: Property
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullyRoofed
    path: ../TinyLife/World/Room.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA property that stores whether this room is fully roofed, that is, whether all of its <xref href=\"TinyLife.World.Room.Tiles\" data-throw-if-not-resolved=\"false\"></xref> are covered by a <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref>.\nThis property is evaluated automatically in <xref href=\"TinyLife.World.Room.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool FullyRoofed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property FullyRoofed As Boolean
  overload: TinyLife.World.Room.FullyRoofed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Room.IsSameRoom(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.World.Room.IsSameRoom(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  id: IsSameRoom(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: IsSameRoom(ICollection<Point>)
  nameWithType: Room.IsSameRoom(ICollection<Point>)
  fullName: TinyLife.World.Room.IsSameRoom(System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsSameRoom
    path: ../TinyLife/World/Room.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether this room has the same covered <xref href=\"TinyLife.World.Room.Tiles\" data-throw-if-not-resolved=\"false\"></xref> as the given collection\n"
  example: []
  syntax:
    content: public bool IsSameRoom(ICollection<Point> tiles)
    parameters:
    - id: tiles
      type: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
      description: The tiles to query
    return:
      type: System.Boolean
      description: true if the covered tiles are the same, false otherwise
    content.vb: Public Function IsSameRoom(tiles As ICollection(Of Point)) As Boolean
  overload: TinyLife.World.Room.IsSameRoom*
  nameWithType.vb: Room.IsSameRoom(ICollection(Of Point))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Room.IsSameRoom(System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point))
  name.vb: IsSameRoom(ICollection(Of Point))
- uid: TinyLife.World.Room.Validate
  commentId: M:TinyLife.World.Room.Validate
  id: Validate
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Room.Validate()
  fullName: TinyLife.World.Room.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Room.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called in <xref href=\"TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> to ensure that this room is still valid\n"
  example: []
  syntax:
    content: public bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate As Boolean
  overload: TinyLife.World.Room.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Room.GetWalls(System.Boolean)
  commentId: M:TinyLife.World.Room.GetWalls(System.Boolean)
  id: GetWalls(System.Boolean)
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: GetWalls(Boolean)
  nameWithType: Room.GetWalls(Boolean)
  fullName: TinyLife.World.Room.GetWalls(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalls
    path: ../TinyLife/World/Room.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances that are border walls or internal walls of this room.\nAn internal wall is a wall for which both sides are contained in the room, rather than just one.\n"
  example: []
  syntax:
    content: public IEnumerable<(Wall, int)> GetWalls(bool borderOnly)
    parameters:
    - id: borderOnly
      type: System.Boolean
      description: Whether to return border walls only, or include internal walls
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Wall,System.Int32}}
      description: A set of walls and their included sides of this room
    content.vb: Public Function GetWalls(borderOnly As Boolean) As IEnumerable(Of(Wall, Integer)(Of Wall , Integer))
  overload: TinyLife.World.Room.GetWalls*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Room.GetObjects``1
  commentId: M:TinyLife.World.Room.GetObjects``1
  id: GetObjects``1
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: GetObjects<T>()
  nameWithType: Room.GetObjects<T>()
  fullName: TinyLife.World.Room.GetObjects<T>()
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObjects
    path: ../TinyLife/World/Room.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances that are contained in this room\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetObjects<T>()
          where T : MapObject
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: All of the objects in this room
    content.vb: Public Function GetObjects(Of T As MapObject) As IEnumerable(Of T)
  overload: TinyLife.World.Room.GetObjects*
  nameWithType.vb: Room.GetObjects(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Room.GetObjects(Of T)()
  name.vb: GetObjects(Of T)()
- uid: TinyLife.World.Room.GetLights
  commentId: M:TinyLife.World.Room.GetLights
  id: GetLights
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: GetLights()
  nameWithType: Room.GetLights()
  fullName: TinyLife.World.Room.GetLights()
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetLights
    path: ../TinyLife/World/Room.cs
    startLine: 141
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns all of the <xref href=\"TinyLife.Objects.Light\" data-throw-if-not-resolved=\"false\"></xref> instances that are contained in this room\n"
  example: []
  syntax:
    content: public IEnumerable<Light> GetLights()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Light}
      description: All of the lights in this room
    content.vb: Public Function GetLights As IEnumerable(Of Light)
  overload: TinyLife.World.Room.GetLights*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Room.GetDecorativeRating
  commentId: M:TinyLife.World.Room.GetDecorativeRating
  id: GetDecorativeRating
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: GetDecorativeRating()
  nameWithType: Room.GetDecorativeRating()
  fullName: TinyLife.World.Room.GetDecorativeRating()
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDecorativeRating
    path: ../TinyLife/World/Room.cs
    startLine: 157
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the combined decorative rating of all of the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> in this room.\nThis method uses the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating\" data-throw-if-not-resolved=\"false\"></xref> function.\n"
  example: []
  syntax:
    content: public int GetDecorativeRating()
    return:
      type: System.Int32
      description: The combined decorative rating
    content.vb: Public Function GetDecorativeRating As Integer
  overload: TinyLife.World.Room.GetDecorativeRating*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Room.GetConnectedRooms(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Room.GetConnectedRooms(TinyLife.Objects.Person)
  id: GetConnectedRooms(TinyLife.Objects.Person)
  parent: TinyLife.World.Room
  langs:
  - csharp
  - vb
  name: GetConnectedRooms(Person)
  nameWithType: Room.GetConnectedRooms(Person)
  fullName: TinyLife.World.Room.GetConnectedRooms(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Room.cs
      branch: 0.20.4-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetConnectedRooms
    path: ../TinyLife/World/Room.cs
    startLine: 174
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref> objects which are connected to this room.\nA connected room is a room that is directly adjacent, and that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can walk into through an <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerable<Room> GetConnectedRooms(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Room}
      description: A set of connected rooms
    content.vb: Public Function GetConnectedRooms(person As Person) As IEnumerable(Of Room)
  overload: TinyLife.World.Room.GetConnectedRooms*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.Room.Map
  commentId: F:TinyLife.World.Room.Map
  isExternal: true
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Room.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Room>()
  nameWithType: Extensions.JsonCopy<Room>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Room>()
  nameWithType.vb: Extensions.JsonCopy(Of Room)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Room)()
  name.vb: JsonCopy(Of Room)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Room>
    nameWithType: Extensions.JsonCopy<Room>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Room>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Room)
    nameWithType: Extensions.JsonCopy(Of Room)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Room)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Room.Tiles
  commentId: F:TinyLife.World.Room.Tiles
  isExternal: true
- uid: TinyLife.World.MapSection
  commentId: T:TinyLife.World.MapSection
  parent: TinyLife.World
  name: MapSection
  nameWithType: MapSection
  fullName: TinyLife.World.MapSection
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Collections.Generic.HashSet{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.HashSet{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Point>
  nameWithType: HashSet<Point>
  fullName: System.Collections.Generic.HashSet<Microsoft.Xna.Framework.Point>
  nameWithType.vb: HashSet(Of Point)
  fullName.vb: System.Collections.Generic.HashSet(Of Microsoft.Xna.Framework.Point)
  name.vb: HashSet(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.HashSet{TinyLife.World.MapSection}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.World.MapSection}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<MapSection>
  nameWithType: HashSet<MapSection>
  fullName: System.Collections.Generic.HashSet<TinyLife.World.MapSection>
  nameWithType.vb: HashSet(Of MapSection)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.World.MapSection)
  name.vb: HashSet(Of MapSection)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.MapSection
    name: MapSection
    nameWithType: MapSection
    fullName: TinyLife.World.MapSection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.MapSection
    name: MapSection
    nameWithType: MapSection
    fullName: TinyLife.World.MapSection
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Room.Validate
  commentId: M:TinyLife.World.Room.Validate
  isExternal: true
- uid: TinyLife.World.Room.FullyRoofed*
  commentId: Overload:TinyLife.World.Room.FullyRoofed
  name: FullyRoofed
  nameWithType: Room.FullyRoofed
  fullName: TinyLife.World.Room.FullyRoofed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.World.Room.IsSameRoom*
  commentId: Overload:TinyLife.World.Room.IsSameRoom
  name: IsSameRoom
  nameWithType: Room.IsSameRoom
  fullName: TinyLife.World.Room.IsSameRoom
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Point>
  nameWithType: ICollection<Point>
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>
  nameWithType.vb: ICollection(Of Point)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point)
  name.vb: ICollection(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.ValidateRooms(Microsoft.Xna.Framework.Point)
  isExternal: true
- uid: TinyLife.World.Room.Validate*
  commentId: Overload:TinyLife.World.Room.Validate
  name: Validate
  nameWithType: Room.Validate
  fullName: TinyLife.World.Room.Validate
- uid: TinyLife.World.Room.GetWalls*
  commentId: Overload:TinyLife.World.Room.GetWalls
  name: GetWalls
  nameWithType: Room.GetWalls
  fullName: TinyLife.World.Room.GetWalls
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Wall,System.Int32}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.World.Wall,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<Wall, Int32>>
  nameWithType: IEnumerable<(T1, T2)<Wall, Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<TinyLife.World.Wall, System.Int32>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of Wall, Int32))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of TinyLife.World.Wall, System.Int32))
  name.vb: IEnumerable(Of (T1, T2)(Of Wall, Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Room.GetObjects*
  commentId: Overload:TinyLife.World.Room.GetObjects
  name: GetObjects
  nameWithType: Room.GetObjects
  fullName: TinyLife.World.Room.GetObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.Light
  commentId: T:TinyLife.Objects.Light
  parent: TinyLife.Objects
  name: Light
  nameWithType: Light
  fullName: TinyLife.Objects.Light
- uid: TinyLife.World.Room.GetLights*
  commentId: Overload:TinyLife.World.Room.GetLights
  name: GetLights
  nameWithType: Room.GetLights
  fullName: TinyLife.World.Room.GetLights
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Light}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Light}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Light>
  nameWithType: IEnumerable<Light>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Light>
  nameWithType.vb: IEnumerable(Of Light)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Light)
  name.vb: IEnumerable(Of Light)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Light
    name: Light
    nameWithType: Light
    fullName: TinyLife.Objects.Light
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Light
    name: Light
    nameWithType: Light
    fullName: TinyLife.Objects.Light
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  isExternal: true
- uid: TinyLife.World.Room.GetDecorativeRating*
  commentId: Overload:TinyLife.World.Room.GetDecorativeRating
  name: GetDecorativeRating
  nameWithType: Room.GetDecorativeRating
  fullName: TinyLife.World.Room.GetDecorativeRating
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.Room.GetConnectedRooms*
  commentId: Overload:TinyLife.World.Room.GetConnectedRooms
  name: GetConnectedRooms
  nameWithType: Room.GetConnectedRooms
  fullName: TinyLife.World.Room.GetConnectedRooms
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Room}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Room}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Room>
  nameWithType: IEnumerable<Room>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Room>
  nameWithType.vb: IEnumerable(Of Room)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Room)
  name.vb: IEnumerable(Of Room)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Room
    name: Room
    nameWithType: Room
    fullName: TinyLife.World.Room
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Room
    name: Room
    nameWithType: Room
    fullName: TinyLife.World.Room
  - name: )
    nameWithType: )
    fullName: )

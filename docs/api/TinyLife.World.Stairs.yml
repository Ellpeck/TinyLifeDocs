### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Stairs
  commentId: T:TinyLife.World.Stairs
  id: Stairs
  parent: TinyLife.World
  children:
  - TinyLife.World.Stairs.#ctor(TinyLife.World.StairsType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,MLEM.Misc.Direction2)
  - TinyLife.World.Stairs.Area
  - TinyLife.World.Stairs.BottomEntryPosition
  - TinyLife.World.Stairs.Colors
  - TinyLife.World.Stairs.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Stairs.Floor
  - TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  - TinyLife.World.Stairs.LengthTiles
  - TinyLife.World.Stairs.Position
  - TinyLife.World.Stairs.Rotation
  - TinyLife.World.Stairs.TopEntryPosition
  - TinyLife.World.Stairs.Type
  - TinyLife.World.Stairs.Validate(TinyLife.World.Map)
  - TinyLife.World.Stairs.Wallpaper
  langs:
  - csharp
  - vb
  name: Stairs
  nameWithType: Stairs
  fullName: TinyLife.World.Stairs
  type: Class
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Stairs
    path: ../TinyLife/World/Stairs.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nStairs are objects on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that allow Tinies to switch between floors. Stair types can be registered using <xref href=\"TinyLife.World.StairsType\" data-throw-if-not-resolved=\"false\"></xref>.\nFor pathfinding purposes, stairs have a fixed length of <xref href=\"TinyLife.World.Stairs.LengthTiles\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Stairs : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Stairs Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Stairs.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.LengthTiles
  commentId: F:TinyLife.World.Stairs.LengthTiles
  id: LengthTiles
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: LengthTiles
  nameWithType: Stairs.LengthTiles
  fullName: TinyLife.World.Stairs.LengthTiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LengthTiles
    path: ../TinyLife/World/Stairs.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe length, in tiles, that stairs have.\nThis is used for calculating the area of stairs in <xref href=\"TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point%2cMLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public const int LengthTiles = 2
    return:
      type: System.Int32
    content.vb: Public Const LengthTiles As Integer = 2
- uid: TinyLife.World.Stairs.Type
  commentId: F:TinyLife.World.Stairs.Type
  id: Type
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Stairs.Type
  fullName: TinyLife.World.Stairs.Type
  type: Field
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/Stairs.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe type of these stairs.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly StairsType Type
    return:
      type: TinyLife.World.StairsType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As StairsType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Colors
  commentId: F:TinyLife.World.Stairs.Colors
  id: Colors
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Stairs.Colors
  fullName: TinyLife.World.Stairs.Colors
  type: Field
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/World/Stairs.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe selected color indices in this stairs&apos; <xref href=\"TinyLife.World.Stairs.Type\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.StairsType.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly int[] Colors
    return:
      type: System.Int32[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Colors As Integer()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Position
  commentId: P:TinyLife.World.Stairs.Position
  id: Position
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Stairs.Position
  fullName: TinyLife.World.Stairs.Position
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Position
    path: ../TinyLife/World/Stairs.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe position of these stairs, which is the tile position that the bottom half of the stairs is on.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Point Position { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: >-
      <DataMember>

      Public Property Position As Point
  overload: TinyLife.World.Stairs.Position*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Floor
  commentId: P:TinyLife.World.Stairs.Floor
  id: Floor
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Floor
  nameWithType: Stairs.Floor
  fullName: TinyLife.World.Stairs.Floor
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Floor
    path: ../TinyLife/World/Stairs.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe floor of these stairs, which is the floor that the bottom of these stairs is on.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Floor { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public Property Floor As Integer
  overload: TinyLife.World.Stairs.Floor*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Rotation
  commentId: P:TinyLife.World.Stairs.Rotation
  id: Rotation
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: Stairs.Rotation
  fullName: TinyLife.World.Stairs.Rotation
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Rotation
    path: ../TinyLife/World/Stairs.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThese stairs&apos; rotation.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Direction2 Rotation { get; }
    parameters: []
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <DataMember>

      Public Property Rotation As Direction2
  overload: TinyLife.World.Stairs.Rotation*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Wallpaper
  commentId: F:TinyLife.World.Stairs.Wallpaper
  id: Wallpaper
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Wallpaper
  nameWithType: Stairs.Wallpaper
  fullName: TinyLife.World.Stairs.Wallpaper
  type: Field
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wallpaper
    path: ../TinyLife/World/Stairs.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: >-
      [DataMember]

      public Wallpaper Wallpaper
    return:
      type: TinyLife.World.Wallpaper
    content.vb: >-
      <DataMember>

      Public Wallpaper As Wallpaper
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Stairs.Area
  commentId: P:TinyLife.World.Stairs.Area
  id: Area
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Stairs.Area
  fullName: TinyLife.World.Stairs.Area
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: ../TinyLife/World/Stairs.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe area that these stairs take up, based on <xref href=\"TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point%2cMLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Rectangle Area { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: Public ReadOnly Property Area As Rectangle
  overload: TinyLife.World.Stairs.Area*
- uid: TinyLife.World.Stairs.BottomEntryPosition
  commentId: P:TinyLife.World.Stairs.BottomEntryPosition
  id: BottomEntryPosition
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: BottomEntryPosition
  nameWithType: Stairs.BottomEntryPosition
  fullName: TinyLife.World.Stairs.BottomEntryPosition
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BottomEntryPosition
    path: ../TinyLife/World/Stairs.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe bottom entry and exit position for these stairs, which is the tile position that a Tiny starts walking up the stairs from.\n"
  example: []
  syntax:
    content: public Point BottomEntryPosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property BottomEntryPosition As Point
  overload: TinyLife.World.Stairs.BottomEntryPosition*
- uid: TinyLife.World.Stairs.TopEntryPosition
  commentId: P:TinyLife.World.Stairs.TopEntryPosition
  id: TopEntryPosition
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: TopEntryPosition
  nameWithType: Stairs.TopEntryPosition
  fullName: TinyLife.World.Stairs.TopEntryPosition
  type: Property
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TopEntryPosition
    path: ../TinyLife/World/Stairs.cs
    startLine: 70
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe top entry and exit position for these stairs, which is the tile position that a Tiny starts walking down the stairs from.\n"
  example: []
  syntax:
    content: public Point TopEntryPosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property TopEntryPosition As Point
  overload: TinyLife.World.Stairs.TopEntryPosition*
- uid: TinyLife.World.Stairs.#ctor(TinyLife.World.StairsType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,MLEM.Misc.Direction2)
  commentId: M:TinyLife.World.Stairs.#ctor(TinyLife.World.StairsType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,MLEM.Misc.Direction2)
  id: '#ctor(TinyLife.World.StairsType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Point,System.Int32,MLEM.Misc.Direction2)'
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Stairs(StairsType, int[], Map, Point, int, Direction2)
  nameWithType: Stairs.Stairs(StairsType, int[], Map, Point, int, Direction2)
  fullName: TinyLife.World.Stairs.Stairs(TinyLife.World.StairsType, int[], TinyLife.World.Map, Microsoft.Xna.Framework.Point, int, MLEM.Misc.Direction2)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Stairs.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new stairs instance with the given settings.\n"
  example: []
  syntax:
    content: public Stairs(StairsType type, int[] colors, Map map, Point position, int floor, Direction2 rotation)
    parameters:
    - id: type
      type: TinyLife.World.StairsType
      description: The type of these stairs.
    - id: colors
      type: System.Int32[]
      description: The selected color indices in this stairs&apos; &lt;see cref=&quot;Type&quot;/>&apos;s &lt;see cref=&quot;StairsType.ColorSchemes&quot;/>.
    - id: map
      type: TinyLife.World.Map
      description: The map.
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position of these stairs, which is the tile position that the bottom half of the stairs is on.
    - id: floor
      type: System.Int32
      description: The floor of these stairs, which is the floor that the bottom of these stairs is on.
    - id: rotation
      type: MLEM.Misc.Direction2
      description: These stairs&apos; rotation.
    content.vb: Public Sub New(type As StairsType, colors As Integer(), map As Map, position As Point, floor As Integer, rotation As Direction2)
  overload: TinyLife.World.Stairs.#ctor*
  nameWithType.vb: Stairs.New(StairsType, Integer(), Map, Point, Integer, Direction2)
  fullName.vb: TinyLife.World.Stairs.New(TinyLife.World.StairsType, Integer(), TinyLife.World.Map, Microsoft.Xna.Framework.Point, Integer, MLEM.Misc.Direction2)
  name.vb: New(StairsType, Integer(), Map, Point, Integer, Direction2)
- uid: TinyLife.World.Stairs.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Stairs.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Stairs.Validate(Map)
  fullName: TinyLife.World.Stairs.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Stairs.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nValidates these stairs, returning whether they are still valid after being loaded from disk.\n"
  example: []
  syntax:
    content: public bool Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map these stairs are on.
    return:
      type: System.Boolean
      description: Whether these stairs are still valid.
    content.vb: Public Function Validate(map As Map) As Boolean
  overload: TinyLife.World.Stairs.Validate*
- uid: TinyLife.World.Stairs.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Stairs.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Color?)
  nameWithType: Stairs.Draw(GameTime, SpriteBatch, Color?)
  fullName: TinyLife.World.Stairs.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Color?)
  type: Method
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Stairs.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws these stairs.\n"
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, Color? overrideColor = null)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time.
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing.
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that should optionally be used for drawing instead of this stairs&apos; <xref href="TinyLife.World.Stairs.Colors" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, overrideColor As Color? = Nothing)
  overload: TinyLife.World.Stairs.Draw*
- uid: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  commentId: M:TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  id: GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  parent: TinyLife.World.Stairs
  langs:
  - csharp
  - vb
  name: GetArea(Point, Direction2)
  nameWithType: Stairs.GetArea(Point, Direction2)
  fullName: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Stairs.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetArea
    path: ../TinyLife/World/Stairs.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the area that a set of <xref href=\"TinyLife.World.Stairs\" data-throw-if-not-resolved=\"false\"></xref> with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">position</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">rotation</code> takes up.\n"
  example: []
  syntax:
    content: public static Rectangle GetArea(Point position, Direction2 rotation)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position.
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation.
    return:
      type: Microsoft.Xna.Framework.Rectangle
      description: The area taken up.
    content.vb: Public Shared Function GetArea(position As Point, rotation As Direction2) As Rectangle
  overload: TinyLife.World.Stairs.GetArea*
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.StairsType
  commentId: T:TinyLife.World.StairsType
  parent: TinyLife.World
  name: StairsType
  nameWithType: StairsType
  fullName: TinyLife.World.StairsType
- uid: TinyLife.World.Stairs.LengthTiles
  commentId: F:TinyLife.World.Stairs.LengthTiles
  name: LengthTiles
  nameWithType: Stairs.LengthTiles
  fullName: TinyLife.World.Stairs.LengthTiles
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Stairs.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Stairs>(Stairs)
  nameWithType: Extensions.JsonCopy<Stairs>(Stairs)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Stairs>(TinyLife.World.Stairs)
  nameWithType.vb: Extensions.JsonCopy(Of Stairs)(Stairs)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Stairs)(TinyLife.World.Stairs)
  name.vb: JsonCopy(Of Stairs)(Stairs)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Stairs)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: '>'
  - name: (
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Stairs)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
  - name: (
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  commentId: M:TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
  isExternal: true
  name: GetArea(Point, Direction2)
  nameWithType: Stairs.GetArea(Point, Direction2)
  fullName: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
    name: GetArea
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.World.Stairs.GetArea(Microsoft.Xna.Framework.Point,MLEM.Misc.Direction2)
    name: GetArea
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.Stairs.Type
  commentId: F:TinyLife.World.Stairs.Type
  name: Type
  nameWithType: Stairs.Type
  fullName: TinyLife.World.Stairs.Type
- uid: TinyLife.World.StairsType.ColorSchemes
  commentId: F:TinyLife.World.StairsType.ColorSchemes
  name: ColorSchemes
  nameWithType: StairsType.ColorSchemes
  fullName: TinyLife.World.StairsType.ColorSchemes
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: TinyLife.World.Stairs.Position*
  commentId: Overload:TinyLife.World.Stairs.Position
  name: Position
  nameWithType: Stairs.Position
  fullName: TinyLife.World.Stairs.Position
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.Stairs.Floor*
  commentId: Overload:TinyLife.World.Stairs.Floor
  name: Floor
  nameWithType: Stairs.Floor
  fullName: TinyLife.World.Stairs.Floor
- uid: TinyLife.World.Stairs.Rotation*
  commentId: Overload:TinyLife.World.Stairs.Rotation
  name: Rotation
  nameWithType: Stairs.Rotation
  fullName: TinyLife.World.Stairs.Rotation
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  parent: TinyLife.World
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
- uid: TinyLife.World.Stairs.Area*
  commentId: Overload:TinyLife.World.Stairs.Area
  name: Area
  nameWithType: Stairs.Area
  fullName: TinyLife.World.Stairs.Area
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: TinyLife.World.Stairs.BottomEntryPosition*
  commentId: Overload:TinyLife.World.Stairs.BottomEntryPosition
  name: BottomEntryPosition
  nameWithType: Stairs.BottomEntryPosition
  fullName: TinyLife.World.Stairs.BottomEntryPosition
- uid: TinyLife.World.Stairs.TopEntryPosition*
  commentId: Overload:TinyLife.World.Stairs.TopEntryPosition
  name: TopEntryPosition
  nameWithType: Stairs.TopEntryPosition
  fullName: TinyLife.World.Stairs.TopEntryPosition
- uid: TinyLife.World.Stairs.#ctor*
  commentId: Overload:TinyLife.World.Stairs.#ctor
  name: Stairs
  nameWithType: Stairs.Stairs
  fullName: TinyLife.World.Stairs.Stairs
  nameWithType.vb: Stairs.New
  fullName.vb: TinyLife.World.Stairs.New
  name.vb: New
- uid: TinyLife.World.Stairs.Validate*
  commentId: Overload:TinyLife.World.Stairs.Validate
  name: Validate
  nameWithType: Stairs.Validate
  fullName: TinyLife.World.Stairs.Validate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.Stairs.Colors
  commentId: F:TinyLife.World.Stairs.Colors
  name: Colors
  nameWithType: Stairs.Colors
  fullName: TinyLife.World.Stairs.Colors
- uid: TinyLife.World.Stairs.Draw*
  commentId: Overload:TinyLife.World.Stairs.Draw
  name: Draw
  nameWithType: Stairs.Draw
  fullName: TinyLife.World.Stairs.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Stairs
  commentId: T:TinyLife.World.Stairs
  parent: TinyLife.World
  name: Stairs
  nameWithType: Stairs
  fullName: TinyLife.World.Stairs
- uid: TinyLife.World.Stairs.GetArea*
  commentId: Overload:TinyLife.World.Stairs.GetArea
  name: GetArea
  nameWithType: Stairs.GetArea
  fullName: TinyLife.World.Stairs.GetArea

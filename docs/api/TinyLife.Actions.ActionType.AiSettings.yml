### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionType.AiSettings
  commentId: T:TinyLife.Actions.ActionType.AiSettings
  id: ActionType.AiSettings
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionType.AiSettings.#ctor
  - TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  - TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  - TinyLife.Actions.ActionType.AiSettings.IgnoreAiDisabled
  - TinyLife.Actions.ActionType.AiSettings.NeedsFreeActionSpot
  - TinyLife.Actions.ActionType.AiSettings.PassivePriority
  - TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  langs:
  - csharp
  - vb
  name: ActionType.AiSettings
  nameWithType: ActionType.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings
  type: Struct
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AiSettings
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 378
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA set of settings that <xref href=\"TinyLife.Actions.ActionType.TypeSettings\" data-throw-if-not-resolved=\"false\"></xref> uses to determine how <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> should deal with this <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public struct ActionType.AiSettings
    content.vb: Public Structure ActionType.AiSettings
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Actions.ActionType.AiSettings.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  commentId: F:TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  id: SolvedNeeds
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: SolvedNeeds
  nameWithType: ActionType.AiSettings.SolvedNeeds
  fullName: TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SolvedNeeds
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 386
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe need that this action solves when invoked.\nThe action doesn&apos;t need to actually solve this need in its implementation, but instead, this value is used to determine which actions to choose from if a person&apos;s needs are low.\nNote that, for this value to have an effect, the <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> needs to be greater than 0.\nDefaults to null.\n"
  example: []
  syntax:
    content: public NeedType[] SolvedNeeds
    return:
      type: TinyLife.NeedType[]
    content.vb: Public SolvedNeeds As NeedType()
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  id: PassivePriority
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: PassivePriority
  nameWithType: ActionType.AiSettings.PassivePriority
  fullName: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassivePriority
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 394
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that returns the passive priority of this action type.\nBy default, the passive priority is unset, meaning this action will never be executed randomly.\nThe higher the passive priority, the more likely it is that this action will be invoked randomly by a person.\nThis function is usually only queried through <xref href=\"TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)\" data-throw-if-not-resolved=\"false\"></xref>, as personality modifiers and the like get applied there.\nThe passive priority only has an effect if <xref href=\"TinyLife.Actions.ActionType.AiSettings.SolvedNeeds\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.ActionType.AiSettings.CanDoRandomly\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint\" data-throw-if-not-resolved=\"false\"></xref> is true, or if a person&apos;s <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> contains this action.\n"
  example: []
  syntax:
    content: public Func<Person, float> PassivePriority
    return:
      type: System.Func{TinyLife.Objects.Person,System.Single}
    content.vb: Public PassivePriority As Func(Of Person, Single)
- uid: TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  commentId: F:TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  id: CanDoRandomly
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: CanDoRandomly
  nameWithType: ActionType.AiSettings.CanDoRandomly
  fullName: TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanDoRandomly
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 401
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA value that determines whether or not this action can be started randomly by the AI.\nA random action will only be started if the corresponding person&apos;s <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> is empty.\nIf this value is false, but <xref href=\"TinyLife.Actions.ActionType.AiSettings.SolvedNeeds\" data-throw-if-not-resolved=\"false\"></xref> is true, this action will still be started if the need set is low.\nNote that, for this value to have an effect, the <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> needs to be greater than 0.\n"
  example: []
  syntax:
    content: public bool CanDoRandomly
    return:
      type: System.Boolean
    content.vb: Public CanDoRandomly As Boolean
- uid: TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  commentId: F:TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  id: CanDoAtAnyPoint
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: CanDoAtAnyPoint
  nameWithType: ActionType.AiSettings.CanDoAtAnyPoint
  fullName: TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanDoAtAnyPoint
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 408
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA value that determines whether or not this action can be started randomly, at any point, by the AI.\nWhereas <xref href=\"TinyLife.Actions.ActionType.AiSettings.CanDoRandomly\" data-throw-if-not-resolved=\"false\"></xref> actions can only be started when the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> is empty, an action with this flag can always be started randomly.\nIf this value is false, but <xref href=\"TinyLife.Actions.ActionType.AiSettings.SolvedNeeds\" data-throw-if-not-resolved=\"false\"></xref> is true, this action will still be started if the need set is low.\nNote that, for this value to have an effect, the <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> needs to be greater than 0.\n"
  example: []
  syntax:
    content: public bool CanDoAtAnyPoint
    return:
      type: System.Boolean
    content.vb: Public CanDoAtAnyPoint As Boolean
- uid: TinyLife.Actions.ActionType.AiSettings.NeedsFreeActionSpot
  commentId: F:TinyLife.Actions.ActionType.AiSettings.NeedsFreeActionSpot
  id: NeedsFreeActionSpot
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: NeedsFreeActionSpot
  nameWithType: ActionType.AiSettings.NeedsFreeActionSpot
  fullName: TinyLife.Actions.ActionType.AiSettings.NeedsFreeActionSpot
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NeedsFreeActionSpot
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 414
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA value that determines whether this action needs to find a free <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> on the object that it is invoked on.\nThis value only has an effect if this action can be executed on any <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>.\nThis value defaults to true.\n"
  example: []
  syntax:
    content: public bool NeedsFreeActionSpot
    return:
      type: System.Boolean
    content.vb: Public NeedsFreeActionSpot As Boolean
- uid: TinyLife.Actions.ActionType.AiSettings.IgnoreAiDisabled
  commentId: F:TinyLife.Actions.ActionType.AiSettings.IgnoreAiDisabled
  id: IgnoreAiDisabled
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: IgnoreAiDisabled
  nameWithType: ActionType.AiSettings.IgnoreAiDisabled
  fullName: TinyLife.Actions.ActionType.AiSettings.IgnoreAiDisabled
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IgnoreAiDisabled
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 418
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA value that determines whether this action can be started (based on <xref href=\"TinyLife.Actions.ActionType.AiSettings.CanDoRandomly\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint\" data-throw-if-not-resolved=\"false\"></xref>), even if the starting person&apos;s AI is currently disabled.\n"
  example: []
  syntax:
    content: public bool IgnoreAiDisabled
    return:
      type: System.Boolean
    content.vb: Public IgnoreAiDisabled As Boolean
- uid: TinyLife.Actions.ActionType.AiSettings.#ctor
  commentId: M:TinyLife.Actions.ActionType.AiSettings.#ctor
  id: '#ctor'
  parent: TinyLife.Actions.ActionType.AiSettings
  langs:
  - csharp
  - vb
  name: AiSettings()
  nameWithType: ActionType.AiSettings.AiSettings()
  fullName: TinyLife.Actions.ActionType.AiSettings.AiSettings()
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 423
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new <xref href=\"TinyLife.Actions.ActionType.AiSettings\" data-throw-if-not-resolved=\"false\"></xref> instance with default settings.\n"
  example: []
  syntax:
    content: public AiSettings()
    content.vb: Public Sub New()
  overload: TinyLife.Actions.ActionType.AiSettings.#ctor*
  nameWithType.vb: ActionType.AiSettings.New()
  fullName.vb: TinyLife.Actions.ActionType.AiSettings.New()
  name.vb: New()
references:
- uid: TinyLife.Actions.ActionType.TypeSettings
  commentId: T:TinyLife.Actions.ActionType.TypeSettings
  parent: TinyLife.Actions
  name: ActionType.TypeSettings
  nameWithType: ActionType.TypeSettings
  fullName: TinyLife.Actions.ActionType.TypeSettings
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: TypeSettings
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Actions.ActionType.AiSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<AiSettings>(AiSettings)
  nameWithType: Extensions.JsonCopy<ActionType.AiSettings>(ActionType.AiSettings)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.AiSettings>(TinyLife.Actions.ActionType.AiSettings)
  nameWithType.vb: Extensions.JsonCopy(Of ActionType.AiSettings)(ActionType.AiSettings)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.AiSettings)(TinyLife.Actions.ActionType.AiSettings)
  name.vb: JsonCopy(Of AiSettings)(AiSettings)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionType.AiSettings)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.ActionType.AiSettings)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
  - name: )
  - name: (
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  name: PassivePriority
  nameWithType: ActionType.AiSettings.PassivePriority
  fullName: TinyLife.Actions.ActionType.AiSettings.PassivePriority
- uid: TinyLife.NeedType[]
  isExternal: true
  name: NeedType[]
  nameWithType: NeedType[]
  fullName: TinyLife.NeedType[]
  nameWithType.vb: NeedType()
  fullName.vb: TinyLife.NeedType()
  name.vb: NeedType()
  spec.csharp:
  - uid: TinyLife.NeedType
    name: NeedType
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.NeedType
    name: NeedType
  - name: (
  - name: )
- uid: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  name: GetPassiveActionPriority(ActionType)
  nameWithType: Person.GetPassiveActionPriority(ActionType)
  fullName: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  spec.csharp:
  - uid: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
    name: GetPassiveActionPriority
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
    name: GetPassiveActionPriority
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
- uid: TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  commentId: F:TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
  name: SolvedNeeds
  nameWithType: ActionType.AiSettings.SolvedNeeds
  fullName: TinyLife.Actions.ActionType.AiSettings.SolvedNeeds
- uid: TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  commentId: F:TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
  name: CanDoRandomly
  nameWithType: ActionType.AiSettings.CanDoRandomly
  fullName: TinyLife.Actions.ActionType.AiSettings.CanDoRandomly
- uid: TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  commentId: F:TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
  name: CanDoAtAnyPoint
  nameWithType: ActionType.AiSettings.CanDoAtAnyPoint
  fullName: TinyLife.Actions.ActionType.AiSettings.CanDoAtAnyPoint
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: System.Func{TinyLife.Objects.Person,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person,System.Single}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Person, float>
  nameWithType: Func<Person, float>
  fullName: System.Func<TinyLife.Objects.Person, float>
  nameWithType.vb: Func(Of Person, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, Single)
  name.vb: Func(Of Person, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  name: ActionQueue
  nameWithType: Person.ActionQueue
  fullName: TinyLife.Objects.Person.ActionQueue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: TinyLife.Actions.ActionType.AiSettings
  commentId: T:TinyLife.Actions.ActionType.AiSettings
  parent: TinyLife.Actions
  name: ActionType.AiSettings
  nameWithType: ActionType.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.AiSettings
    name: AiSettings
- uid: TinyLife.Actions.ActionType.AiSettings.#ctor*
  commentId: Overload:TinyLife.Actions.ActionType.AiSettings.#ctor
  name: AiSettings
  nameWithType: ActionType.AiSettings.AiSettings
  fullName: TinyLife.Actions.ActionType.AiSettings.AiSettings
  nameWithType.vb: ActionType.AiSettings.New
  fullName.vb: TinyLife.Actions.ActionType.AiSettings.New
  name.vb: New

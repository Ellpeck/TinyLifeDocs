### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  id: Action
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanStartNow
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  - TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.ElapsedTime
  - TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.ForceResult
  - TinyLife.Actions.Action.FullyInProgress
  - TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  - TinyLife.Actions.Action.GetChildren(System.Boolean)
  - TinyLife.Actions.Action.GetDisplayName
  - TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.Id
  - TinyLife.Actions.Action.Info
  - TinyLife.Actions.Action.Initialize
  - TinyLife.Actions.Action.InProgressTime
  - TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - TinyLife.Actions.Action.IsCompleted
  - TinyLife.Actions.Action.Map
  - TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  - TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.Parent
  - TinyLife.Actions.Action.Person
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Actions.Action.PlayerPromptOpen
  - TinyLife.Actions.Action.Random
  - TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  - TinyLife.Actions.Action.StartedAutomatically
  - TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  - TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety@)
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Action
    path: ../TinyLife/Actions/Action.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action is something that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> does.\nAn action is always derived from an underlying <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> that contains various action settings.\nActions can be queued up for a person (<xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>) or currently active (<xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>).\nTo create a more complex action, it is best to extend <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can find a multitude of action-related events in <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, like <xref href=\"TinyLife.Objects.Person.OnActionsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class Action : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public MustInherit Class Action Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Actions.DebugAction
  - TinyLife.Actions.DeferredAction
  - TinyLife.Actions.DieAction
  - TinyLife.Actions.MultiAction
  - TinyLife.Actions.PathfindAction
  - TinyLife.Actions.PathfindToPersonAction
  - TinyLife.Actions.SocialAction.StartPartnerAction
  - TinyLife.Actions.TellPeopleToLeaveRoomAction
  - TinyLife.Actions.TryGoHereAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  id: Random
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Random
    path: ../TinyLife/Actions/Action.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA <xref href=\"TinyLife.Actions.Action.Random\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used by actions.\nThis value has the default seed.\n"
  example: []
  syntax:
    content: public static readonly Random Random
    return:
      type: System.Random
    content.vb: Public Shared ReadOnly Random As Random
- uid: TinyLife.Actions.Action.InProgressTime
  commentId: P:TinyLife.Actions.Action.InProgressTime
  id: InProgressTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InProgressTime
    path: ../TinyLife/Actions/Action.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nRepresents the amount of time that this action has &quot;properly&quot; been in progress for.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual TimeSpan InProgressTime { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overridable ReadOnly Property InProgressTime As TimeSpan
  overload: TinyLife.Actions.Action.InProgressTime*
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  id: FullyInProgress
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullyInProgress
    path: ../TinyLife/Actions/Action.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether this action is currently &quot;properly&quot; in progress.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, this property is true if <xref href=\"TinyLife.Actions.Action.InProgressTime\" data-throw-if-not-resolved=\"false\"></xref> is greater than <xref href=\"System.TimeSpan.Zero\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool FullyInProgress { get; }
    parameters: []
    return:
      type: System.Boolean
      description: Whether this action is fully in progress
    content.vb: Public Overridable ReadOnly Property FullyInProgress As Boolean
  overload: TinyLife.Actions.Action.FullyInProgress*
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  id: Type
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Actions/Action.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> that this action instance derives from\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionType Type
    return:
      type: TinyLife.Actions.ActionType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As ActionType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Info
  commentId: F:TinyLife.Actions.Action.Info
  id: Info
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: Action.Info
  fullName: TinyLife.Actions.Action.Info
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Info
    path: ../TinyLife/Actions/Action.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for this action that contains the clicked (or otherwise targeted) objects and more\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionInfo Info
    return:
      type: TinyLife.Actions.ActionInfo
    content.vb: >-
      <DataMember>

      Public ReadOnly Info As ActionInfo
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Id
  commentId: F:TinyLife.Actions.Action.Id
  id: Id
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Action.Id
  fullName: TinyLife.Actions.Action.Id
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/Actions/Action.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis action&apos;s unique id, which was randomly generated using <xref href=\"System.Guid.NewGuid\" data-throw-if-not-resolved=\"false\"></xref> when this action was constructed.\nAn action&apos;s unique id can be used to reference this action in other places, and child actions can be retrieved using <xref href=\"TinyLife.Actions.Action.GetChildren(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Action.GetChild%60%601(System.Guid%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or through a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"TinyLife.Objects.Person.GetAction%60%601(System.Guid%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Guid Id
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Id As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  id: StartedAutomatically
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StartedAutomatically
    path: ../TinyLife/Actions/Action.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nIf this value is true, this action was started using <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> or through another action rather than by the player\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool StartedAutomatically { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property StartedAutomatically As Boolean
  overload: TinyLife.Actions.Action.StartedAutomatically*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  id: Parent
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Parent
    path: ../TinyLife/Actions/Action.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that created or otherwise owns this action, which also means this action will be part of the parent&apos;s <xref href=\"TinyLife.Actions.Action.GetChildren(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is nonnull if this action is part of a <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Action Parent { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Action
    content.vb: Public Property Parent As Action
  overload: TinyLife.Actions.Action.Parent*
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  id: Map
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Actions/Action.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Action.Map\" data-throw-if-not-resolved=\"false\"></xref> that this action occurs on\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.Actions.Action.Map*
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  id: Person
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Actions/Action.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> that this action is being executed by\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Actions.Action.Person*
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  id: ElapsedTime
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ElapsedTime
    path: ../TinyLife/Actions/Action.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of in-game time that has elapsed since this action has started\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan ElapsedTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property ElapsedTime As TimeSpan
  overload: TinyLife.Actions.Action.ElapsedTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  id: PlayerPromptOpen
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlayerPromptOpen
    path: ../TinyLife/Actions/Action.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA property that stores whether a player prompt is currently open. A prompt can be opened using <xref href=\"TinyLife.Actions.Action.OpenPlayerPrompt(System.String%2cSystem.Predicate%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Action%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Boolean%2cSystem.Func%7bTinyLife.Uis.CoveringGroup%2cSystem.Collections.Generic.IEnumerable%7bMLEM.Ui.Elements.Element%7d%7d%2cMLEM.Textures.TextureRegion)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis property can be used to ensure that an action is not paused or canceled while a player prompt is open, as, based on the implementation of the action, there might be certain update frames that still occur while the prompt is open.\n"
  example: []
  syntax:
    content: public bool PlayerPromptOpen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PlayerPromptOpen As Boolean
  overload: TinyLife.Actions.Action.PlayerPromptOpen*
- uid: TinyLife.Actions.Action.ForceResult
  commentId: F:TinyLife.Actions.Action.ForceResult
  id: ForceResult
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: ForceResult
  nameWithType: Action.ForceResult
  fullName: TinyLife.Actions.Action.ForceResult
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ForceResult
    path: ../TinyLife/Actions/Action.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis value can be set to a <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> to force <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref> to return it.\nThis is useful if there is an erroring calculation in your <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> code, for example.\n"
  example: []
  syntax:
    content: protected CompletionType? ForceResult
    return:
      type: System.Nullable{TinyLife.Actions.CompletionType}
    content.vb: Protected ForceResult As CompletionType?
- uid: TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Action(ActionInfo)
  nameWithType: Action.Action(ActionInfo)
  fullName: TinyLife.Actions.Action.Action(TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Action.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new typeless action with the given action information.\n"
  example: []
  syntax:
    content: protected Action(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(info As ActionInfo)
  overload: TinyLife.Actions.Action.#ctor*
  nameWithType.vb: Action.New(ActionInfo)
  fullName.vb: TinyLife.Actions.Action.New(TinyLife.Actions.ActionInfo)
  name.vb: New(ActionInfo)
- uid: TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Action(ActionType, ActionInfo)
  nameWithType: Action.Action(ActionType, ActionInfo)
  fullName: TinyLife.Actions.Action.Action(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Action.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action with the given action information.\n"
  example: []
  syntax:
    content: protected Action(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type for this action.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.Action.#ctor*
  nameWithType.vb: Action.New(ActionType, ActionInfo)
  fullName.vb: TinyLife.Actions.Action.New(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  name.vb: New(ActionType, ActionInfo)
- uid: TinyLife.Actions.Action.Initialize
  commentId: M:TinyLife.Actions.Action.Initialize
  id: Initialize
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Action.Initialize()
  fullName: TinyLife.Actions.Action.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Action.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when the action is first started by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that it is not called when the action gets added to the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>, but when it is moved to <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize()
  overload: TinyLife.Actions.Action.Initialize*
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Action.cs
    startLine: 145
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame if this action is currently active.\nBy default, only the <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is modified in this method and <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.Action.Update*
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/Action.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> if this action is currently active to check if it should be stopped.\nIf this returns a result other than <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> will be called and the action is stopped.\nBy default, only <xref href=\"TinyLife.Actions.Action.ForceResult\" data-throw-if-not-resolved=\"false\"></xref> modifies the completion type, otherwise <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: The current completion type of this action
    content.vb: Public Overridable Function IsCompleted() As CompletionType
  overload: TinyLife.Actions.Action.IsCompleted*
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Action.cs
    startLine: 173
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when this action <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, or if it is canceled from an outside source.\nNote that, if this method is called as a result of <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> passed will be the same.\nBy default, only <xref href=\"TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    content.vb: Public Overridable Sub OnCompleted(type As CompletionType)
  overload: TinyLife.Actions.Action.OnCompleted*
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/Action.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nValidates this action&apos;s data.\nThis is called when a map is loaded from disk.\nWhen returning false on this method, the action is removed from the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action belongs to
    return:
      type: System.Boolean
      description: Whether or not the action is still valid (or if it has invalid data)
    content.vb: Public Overridable Function Validate(person As Person) As Boolean
  overload: TinyLife.Actions.Action.Validate*
- uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  id: TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: TryForceResult(CompletionType, CanExecuteResult?, MapObject)
  nameWithType: Action.TryForceResult(CompletionType, CanExecuteResult?, MapObject)
  fullName: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType, TinyLife.Actions.CanExecuteResult?, TinyLife.Objects.MapObject)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TryForceResult
    path: ../TinyLife/Actions/Action.cs
    startLine: 205
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis is an external version of <xref href=\"TinyLife.Actions.Action.ForceResult\" data-throw-if-not-resolved=\"false\"></xref> which can be called from outside sources, like a <xref href=\"TinyLife.Objects.BreakableFurniture\" data-throw-if-not-resolved=\"false\"></xref> object.\nA reason is provided that can be used to decide whether the external object can cause this action to fail.\nBy default, this action sets <xref href=\"TinyLife.Actions.Action.ForceResult\" data-throw-if-not-resolved=\"false\"></xref> to true and returns true if <xref href=\"TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions\" data-throw-if-not-resolved=\"false\"></xref> doesn&apos;t return true.\n"
  example: []
  syntax:
    content: public virtual bool TryForceResult(CompletionType result, CanExecuteResult? reason = null, MapObject source = null)
    parameters:
    - id: result
      type: TinyLife.Actions.CompletionType
      description: The result to force.
    - id: reason
      type: System.Nullable{TinyLife.Actions.CanExecuteResult}
      description: The reason for this action to fail. Can be null.
    - id: source
      type: TinyLife.Objects.MapObject
      description: The object that is trying to force this action to fail. Can be null.
    return:
      type: System.Boolean
      description: Whether this action was successfully forced to fail (if returning true, <xref href="TinyLife.Actions.Action.ForceResult" data-throw-if-not-resolved="false"></xref> should also be set to true).
    content.vb: Public Overridable Function TryForceResult(result As CompletionType, reason As CanExecuteResult? = Nothing, source As MapObject = Nothing) As Boolean
  overload: TinyLife.Actions.Action.TryForceResult*
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanMultitask
    path: ../TinyLife/Actions/Action.cs
    startLine: 223
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn true on this method if this action can be multi-tasked along with the passed <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nTo actually check this property, <xref href=\"TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action%2cTinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref> should be used as it compares both objects.\nA multi-tasking is an action that is currently active along with another action.\nBy default, multi-tasking is disallowed for any action.\n"
  example: []
  syntax:
    content: public virtual bool CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: System.Boolean
      description: Whether this action can be multi-tasked
    content.vb: Public Overridable Function CanMultitask(other As Action) As Boolean
  overload: TinyLife.Actions.Action.CanMultitask*
- uid: TinyLife.Actions.Action.CanStartNow
  commentId: M:TinyLife.Actions.Action.CanStartNow
  id: CanStartNow
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanStartNow()
  nameWithType: Action.CanStartNow()
  fullName: TinyLife.Actions.Action.CanStartNow()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanStartNow
    path: ../TinyLife/Actions/Action.cs
    startLine: 233
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">true</a> on this method if this action can be started right now. This method is queried when this action moves from a person&apos;s <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> to their <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>. If this method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">false</a>, it stays in the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>.\n\nBy default, <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> overrides this behavior to only allow the action to be started if the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> is not being held, and not currently occupying an action spot that has the <code>Stay</code> flag set.\n"
  example: []
  syntax:
    content: public virtual bool CanStartNow()
    return:
      type: System.Boolean
      description: Whether this action can start now.
    content.vb: Public Overridable Function CanStartNow() As Boolean
  overload: TinyLife.Actions.Action.CanStartNow*
- uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  id: CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanCancel(Action)
  nameWithType: Action.CanCancel(Action)
  fullName: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCancel
    path: ../TinyLife/Actions/Action.cs
    startLine: 244
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether or not this action can be canceled by the given outside source.\nNote that the outside source can be null, and if it is, it means that the player canceled the action manually.\nBy default, actions can only be canceled if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">cancelSource</code> is null.\n"
  example: []
  syntax:
    content: public virtual bool CanCancel(Action cancelSource)
    parameters:
    - id: cancelSource
      type: TinyLife.Actions.Action
      description: The source of the cancelation, or null if the player canceled it
    return:
      type: System.Boolean
      description: true if the action can be canceled
    content.vb: Public Overridable Function CanCancel(cancelSource As Action) As Boolean
  overload: TinyLife.Actions.Action.CanCancel*
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  id: GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetNextAction
    path: ../TinyLife/Actions/Action.cs
    startLine: 255
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns an action that should be queued up immediately after this action completes.\nThe queued up action is immediately started in the slot that this action occupied.\nCan be null, and is null by default.\n"
  example: []
  syntax:
    content: public virtual Action GetNextAction(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    return:
      type: TinyLife.Actions.Action
      description: The follow-up action
    content.vb: Public Overridable Function GetNextAction(completion As CompletionType) As Action
  overload: TinyLife.Actions.Action.GetNextAction*
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  id: GetIconObject
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetIconObject
    path: ../TinyLife/Actions/Action.cs
    startLine: 265
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the map object that is displayed in the action queue in the top left of the screen.\nNote that this value is ignored if this action&apos;s type has a <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Texture\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, the <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual MapObject GetIconObject()
    return:
      type: TinyLife.Objects.MapObject
      description: The icon object
    content.vb: Public Overridable Function GetIconObject() As MapObject
  overload: TinyLife.Actions.Action.GetIconObject*
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  id: CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CausesExtremelyFastSpeed
    path: ../TinyLife/Actions/Action.cs
    startLine: 274
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns true if this action, while it is currently active, should cause the <xref href=\"TinyLife.GameSpeed.ExtremelyFast\" data-throw-if-not-resolved=\"false\"></xref> speed to be available.\nBy default, this method returns false.\n"
  example: []
  syntax:
    content: public virtual bool CausesExtremelyFastSpeed()
    return:
      type: System.Boolean
      description: Whether the extremely fast speed should be available
    content.vb: Public Overridable Function CausesExtremelyFastSpeed() As Boolean
  overload: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayName
    path: ../TinyLife/Actions/Action.cs
    startLine: 283
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a localized string that explains this action in short.\nBy default, this method returns <xref href=\"TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string GetDisplayName()
    return:
      type: System.String
      description: This action&apos;s display name
    content.vb: Public Overridable Function GetDisplayName() As String
  overload: TinyLife.Actions.Action.GetDisplayName*
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  id: CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanEnqueueConversation
    path: ../TinyLife/Actions/Action.cs
    startLine: 295
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns true if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">person</code> can (automatically) enqueue a social action with the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> that is executing this action.\nNote that enqueueing a social action manually is still possible even if this method returns false.\nBy default, only <xref href=\"TinyLife.Actions.SleepAction\" data-throw-if-not-resolved=\"false\"></xref> returns false on this method.\n"
  example: []
  syntax:
    content: public virtual bool CanEnqueueConversation(Person person, ActionType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to converse with us.
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action that should be enqueued. Might be null, in which case a generic or unknown action is querying this function.
    return:
      type: System.Boolean
      description: Whether or not enqueueing a social action is possible.
    content.vb: Public Overridable Function CanEnqueueConversation(person As Person, type As ActionType) As Boolean
  overload: TinyLife.Actions.Action.CanEnqueueConversation*
- uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OnChildCompleted(Action, CompletionType, bool)
  nameWithType: Action.OnChildCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnChildCompleted
    path: ../TinyLife/Actions/Action.cs
    startLine: 307
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is invoked automatically when an action completes that is marked as this action&apos;s child.\nA child action is one started through a <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method calls <xref href=\"TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> on this action&apos;s <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref>, if there is one.\n"
  example: []
  syntax:
    content: protected virtual void OnChildCompleted(Action child, CompletionType type, bool grandchild)
    parameters:
    - id: child
      type: TinyLife.Actions.Action
      description: The child that completed.
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The child&apos;s completion type.
    - id: grandchild
      type: System.Boolean
      description: Whether the given child is a grandchild, rather than a direct child.
    content.vb: Protected Overridable Sub OnChildCompleted(child As Action, type As CompletionType, grandchild As Boolean)
  overload: TinyLife.Actions.Action.OnChildCompleted*
  nameWithType.vb: Action.OnChildCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnChildCompleted(Action, CompletionType, Boolean)
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  id: OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  nameWithType: Action.OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(string, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, bool, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>, MLEM.Textures.TextureRegion)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenPlayerPrompt
    path: ../TinyLife/Actions/Action.cs
    startLine: 323
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt for the player with the given elements, also pausing the game.\nThis behavior is used for things like the <xref href=\"TinyLife.Actions.ActionType.QuitJob\" data-throw-if-not-resolved=\"false\"></xref> action, where a confirmation panel pops up.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CoveringGroup OpenPlayerPrompt(string title, Predicate<Panel> canFinish, Action<Panel> onFinished, bool canExit, Func<CoveringGroup, IEnumerable<Element>> children, TextureRegion portrait = null)
    parameters:
    - id: title
      type: System.String
      description: The title that should be displayed in the box, has to be localized if required
    - id: canFinish
      type: System.Predicate{MLEM.Ui.Elements.Panel}
      description: A function that determines whether the Okay button can be pressed. If the function is null, no button is displayed.
    - id: onFinished
      type: System.Action{MLEM.Ui.Elements.Panel}
      description: A function that is called once the Okay button is pressed. Can be null.
    - id: canExit
      type: System.Boolean
      description: Whether the user can exit the window without making a decision by clicking the background
    - id: children
      type: System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
      description: The elements that should be displayed in this prompt, along with the title and possibly the Okay button if <code data-dev-comment-type="paramref" class="paramref">canFinish</code> is used
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>&apos;s portrait is used.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenPlayerPrompt(title As String, canFinish As Predicate(Of Panel), onFinished As Action(Of Panel), canExit As Boolean, children As Func(Of CoveringGroup, IEnumerable(Of Element)), portrait As TextureRegion = Nothing) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenPlayerPrompt*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this action&apos;s <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref> is not part of the <xref href="TinyLife.GameImpl.CurrentHousehold" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)), MLEM.Textures.TextureRegion)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
- uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  id: OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenYesNoPrompt(string, Action, Action, TextureRegion)
  nameWithType: Action.OpenYesNoPrompt(string, Action, Action, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt(string, System.Action, System.Action, MLEM.Textures.TextureRegion)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenYesNoPrompt
    path: ../TinyLife/Actions/Action.cs
    startLine: 358
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt for the player that contains a yes and a no button along with some text.\nThis prompt can be used to ensure that a player selected the right option in an important decision.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CoveringGroup OpenYesNoPrompt(string title, Action onYes, Action onNo = null, TextureRegion portrait = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onYes
      type: System.Action
      description: The action that should be executed when the yes button is pressed
    - id: onNo
      type: System.Action
      description: The action that should be executed when the no button is pressed
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>&apos;s portrait is used.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenYesNoPrompt(title As String, onYes As Action, onNo As Action = Nothing, portrait As TextureRegion = Nothing) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenYesNoPrompt*
  nameWithType.vb: Action.OpenYesNoPrompt(String, Action, Action, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenYesNoPrompt(String, System.Action, System.Action, MLEM.Textures.TextureRegion)
  name.vb: OpenYesNoPrompt(String, Action, Action, TextureRegion)
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  id: OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenTextPrompt(string, Action<string>, Predicate<string>, Rule, string, TextureRegion)
  nameWithType: Action.OpenTextPrompt(string, Action<string>, Predicate<string>, TextField.Rule, string, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(string, System.Action<string>, System.Predicate<string>, MLEM.Ui.Elements.TextField.Rule, string, MLEM.Textures.TextureRegion)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenTextPrompt
    path: ../TinyLife/Actions/Action.cs
    startLine: 386
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a prompt with a text box that allows the player to input a string.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Action.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CoveringGroup OpenTextPrompt(string title, Action<string> onFinished, Predicate<string> isNameValid = null, TextField.Rule rule = null, string defaultText = null, TextureRegion portrait = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onFinished
      type: System.Action{System.String}
      description: An action that is executed when the okay button is pressed, which contains the string that was input into the text box
    - id: isNameValid
      type: System.Predicate{System.String}
      description: A function that determines whether the name is valid. If this is null, all text inputs (except an empty string) will be valid.
    - id: rule
      type: MLEM.Ui.Elements.TextField.Rule
      description: A rule to use for the <xref href="MLEM.Ui.Elements.TextField" data-throw-if-not-resolved="false"></xref>
    - id: defaultText
      type: System.String
      description: The text that should be displayed in the text field by default, or null to display no default text
    - id: portrait
      type: MLEM.Textures.TextureRegion
      description: The portrait to display. If this is null, the <xref href="TinyLife.Actions.Action.Person" data-throw-if-not-resolved="false"></xref>&apos;s portrait is used.
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenTextPrompt(title As String, onFinished As Action(Of String), isNameValid As Predicate(Of String) = Nothing, rule As TextField.Rule = Nothing, defaultText As String = Nothing, portrait As TextureRegion = Nothing) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenTextPrompt*
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(String, System.Action(Of String), System.Predicate(Of String), MLEM.Ui.Elements.TextField.Rule, String, MLEM.Textures.TextureRegion)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), Rule, String, TextureRegion)
- uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  commentId: M:TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  id: OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: OpenChoicePrompt(ChoicePromptInfo)
  nameWithType: Action.OpenChoicePrompt(ChoicePromptInfo)
  fullName: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.Actions.ChoicePromptInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenChoicePrompt
    path: ../TinyLife/Actions/Action.cs
    startLine: 399
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nOpens a text prompt (<xref href=\"TinyLife.Actions.Action.OpenTextPrompt(System.String%2cSystem.Action%7bSystem.String%7d%2cSystem.Predicate%7bSystem.String%7d%2cMLEM.Ui.Elements.TextField.Rule%2cSystem.String%2cMLEM.Textures.TextureRegion)\" data-throw-if-not-resolved=\"false\"></xref>) that uses the <xref href=\"TinyLife.Actions.ChoicePromptInfo\" data-throw-if-not-resolved=\"false\"></xref> system to display a set of options to the player, one of which is randomly chosen to be &quot;correct&quot;, causing a positive effect to happen.\n"
  example: []
  syntax:
    content: public CoveringGroup OpenChoicePrompt(ChoicePromptInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ChoicePromptInfo
      description: The choice prompt information to display.
    return:
      type: TinyLife.Uis.CoveringGroup
      description: The <xref href="TinyLife.Uis.CoveringGroup" data-throw-if-not-resolved="false"></xref> that contains the choice prompt.
    content.vb: Public Function OpenChoicePrompt(info As ChoicePromptInfo) As CoveringGroup
  overload: TinyLife.Actions.Action.OpenChoicePrompt*
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  id: SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: SpeakAlone(GameTime, float, EmoteCategory, SpeakStyle, int)
  nameWithType: Action.SpeakAlone(GameTime, float, EmoteCategory, SpeakStyle, int)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, int)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakAlone
    path: ../TinyLife/Actions/Action.cs
    startLine: 414
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nDisplays emotes for this action&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> with the given settings as if they were talking to themselves out loud.\nThis is used by actions like <xref href=\"TinyLife.Actions.ActionType.PracticeJokes\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.PracticeSpeech\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool SpeakAlone(GameTime time, float speedMultiplier, EmoteCategory emoteCategories, SpeakStyle speakStyles, int totalAmount = 2147483647)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: The categories to pick emotes from, can be a combined flag
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes to display, defaults to an infinite amount (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>)
    return:
      type: System.Boolean
      description: Whether all emotes were succesfully displayed. This method only returns true if <code data-dev-comment-type="paramref" class="paramref">totalAmount</code> is less than the default value
    content.vb: Public Function SpeakAlone(time As GameTime, speedMultiplier As Single, emoteCategories As EmoteCategory, speakStyles As SpeakStyle, totalAmount As Integer = 2147483647) As Boolean
  overload: TinyLife.Actions.Action.SpeakAlone*
  nameWithType.vb: Action.SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Integer)
  fullName.vb: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, Integer)
  name.vb: SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Integer)
- uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  id: SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: SpeakInConversation(Person, GameTime, float, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, int)
  nameWithType: Action.SpeakInConversation(Person, GameTime, float, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, int)
  fullName: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteCategory?, TinyLife.Objects.SpeakStyle?, int)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakInConversation
    path: ../TinyLife/Actions/Action.cs
    startLine: 431
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nHelper method to display emotes over each conversation partner in a back and forth fashion to make it seem like they are conversing.\nWhen used in <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref>, only the action that <xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref> should call this method.\n"
  example: []
  syntax:
    content: public bool SpeakInConversation(Person partner, GameTime time, float speedMultiplier, EmoteCategory emoteCategories, SpeakStyle speakStyles, EmoteCategory? partnerEmoteCategories = null, SpeakStyle? partnerSpeakStyles = null, int totalAmount = 2147483647)
    parameters:
    - id: partner
      type: TinyLife.Objects.Person
      description: The partner to speak in conversation with.
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: A combined flag representing the categories that emotes can be picked from
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: partnerEmoteCategories
      type: System.Nullable{TinyLife.Actions.EmoteCategory}
      description: The emote categories for the interaction partner to use, or null to use <code data-dev-comment-type="paramref" class="paramref">emoteCategories</code>
    - id: partnerSpeakStyles
      type: System.Nullable{TinyLife.Objects.SpeakStyle}
      description: The speak styles for the interaction partner to use, or null to use <code data-dev-comment-type="paramref" class="paramref">speakStyles</code>
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes that should be shown (not per person, but in total)
    return:
      type: System.Boolean
      description: If <code data-dev-comment-type="paramref" class="paramref">totalAmount</code> is set, true is returned if the emote back-and-forth is completed
    content.vb: Public Function SpeakInConversation(partner As Person, time As GameTime, speedMultiplier As Single, emoteCategories As EmoteCategory, speakStyles As SpeakStyle, partnerEmoteCategories As EmoteCategory? = Nothing, partnerSpeakStyles As SpeakStyle? = Nothing, totalAmount As Integer = 2147483647) As Boolean
  overload: TinyLife.Actions.Action.SpeakInConversation*
  nameWithType.vb: Action.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, Integer)
  fullName.vb: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteCategory?, TinyLife.Objects.SpeakStyle?, Integer)
  name.vb: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, Integer)
- uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  id: FacePartner(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FacePartner(Person)
  nameWithType: Action.FacePartner(Person)
  fullName: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FacePartner
    path: ../TinyLife/Actions/Action.cs
    startLine: 442
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA utility method that causes this action&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to face in the direction of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">partner</code>.\nThis method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">false</a> if the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> is occupying a furniture object, or if they&apos;re standing in the same location as the <code data-dev-comment-type=\"paramref\" class=\"paramref\">partner</code>.\n"
  example: []
  syntax:
    content: public bool FacePartner(Person partner)
    parameters:
    - id: partner
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: Whether it was possible to face in the partner&apos;s direction.
    content.vb: Public Function FacePartner(partner As Person) As Boolean
  overload: TinyLife.Actions.Action.FacePartner*
- uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  commentId: M:TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  id: CompleteIfNeedFull(TinyLife.NeedType)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfNeedFull(NeedType)
  nameWithType: Action.CompleteIfNeedFull(NeedType)
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CompleteIfNeedFull
    path: ../TinyLife/Actions/Action.cs
    startLine: 456
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref>&apos;s value is at <xref href=\"TinyLife.Need.Max\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CompletionType CompleteIfNeedFull(NeedType type)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The need that should be completed
    return:
      type: TinyLife.Actions.CompletionType
      description: The appropriate completion type
    content.vb: Public Function CompleteIfNeedFull(type As NeedType) As CompletionType
  overload: TinyLife.Actions.Action.CompleteIfNeedFull*
- uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  id: CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  nameWithType: Action.CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, bool, TinyLife.Skills.SkillType, float, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CompleteIfTimeUp
    path: ../TinyLife/Actions/Action.cs
    startLine: 470
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">time</code> has passed.\nThis method makes use of <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> to return true faster or slower based on the person&apos;s current mood and skill levels.\n"
  example: []
  syntax:
    content: public CompletionType CompleteIfTimeUp(TimeSpan time, bool efficiencyMatters = false, SkillType skill = null, float levelModifier = 0.1, bool autoOnly = false)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The (total!) amount of time after which this action should be completed
    - id: efficiencyMatters
      type: System.Boolean
      description: Whether the person&apos;s efficiency modifier (<xref href="TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>) should be taken into account for the total time required
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the completion time
    - id: levelModifier
      type: System.Single
      description: The amount that each <code data-dev-comment-type="paramref" class="paramref">skill</code> level should influence the returned time by. Defaults to 0.1.
    - id: autoOnly
      type: System.Boolean
      description: Whether the action should only be completed in the given amount of time if it has been <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref>. If both this value and <xref href="TinyLife.Actions.Action.StartedAutomatically" data-throw-if-not-resolved="false"></xref> are true, this method always returns <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="TinyLife.Actions.CompletionType.Completed" data-throw-if-not-resolved="false"></xref> if the time has passed, <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Public Function CompleteIfTimeUp(time As TimeSpan, efficiencyMatters As Boolean = False, skill As SkillType = Nothing, levelModifier As Single = 0.1, autoOnly As Boolean = False) As CompletionType
  overload: TinyLife.Actions.Action.CompleteIfTimeUp*
  nameWithType.vb: Action.CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName.vb: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, Boolean, TinyLife.Skills.SkillType, Single, Boolean)
  name.vb: CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
- uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  commentId: M:TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  id: CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CancelIfEmotional(params EmotionType[])
  nameWithType: Action.CancelIfEmotional(params EmotionType[])
  fullName: TinyLife.Actions.Action.CancelIfEmotional(params TinyLife.Emotions.EmotionType[])
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CancelIfEmotional
    path: ../TinyLife/Actions/Action.cs
    startLine: 484
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns <xref href=\"TinyLife.Actions.CompletionType.Canceled\" data-throw-if-not-resolved=\"false\"></xref> if this action&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> has any of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">emotions</code>, and <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public CompletionType CancelIfEmotional(params EmotionType[] emotions)
    parameters:
    - id: emotions
      type: TinyLife.Emotions.EmotionType[]
      description: The emotions to cancel based on.
    return:
      type: TinyLife.Actions.CompletionType
      description: A completion type based on whether any of the <code data-dev-comment-type="paramref" class="paramref">emotions</code> are present.
    content.vb: Public Function CancelIfEmotional(ParamArray emotions As EmotionType()) As CompletionType
  overload: TinyLife.Actions.Action.CancelIfEmotional*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the <code data-dev-comment-type="paramref" class="paramref">emotions</code> array has no entries.
  nameWithType.vb: Action.CancelIfEmotional(ParamArray EmotionType())
  fullName.vb: TinyLife.Actions.Action.CancelIfEmotional(ParamArray TinyLife.Emotions.EmotionType())
  name.vb: CancelIfEmotional(ParamArray EmotionType())
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  id: Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: Sit(Furniture, float, ActionSpot)
  nameWithType: Action.Sit(Furniture, float, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, float, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Sit
    path: ../TinyLife/Actions/Action.cs
    startLine: 500
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that causes the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to sit on the given object.\nThis method causes the action spot to be occupied and the person&apos;s <xref href=\"TinyLife.Objects.Person.CurrentPose\" data-throw-if-not-resolved=\"false\"></xref> to be changed to <xref href=\"TinyLife.Objects.Pose.Sitting\" data-throw-if-not-resolved=\"false\"></xref>.\nAdditionally, the <xref href=\"TinyLife.NeedType.Energy\" data-throw-if-not-resolved=\"false\"></xref> need is restored a little bit.\nNote that this method has to be called every <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame for the person to stay sat down.\n"
  example: []
  syntax:
    content: public bool Sit(Furniture chair, float speedMultiplier, ActionSpot spot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to sit on
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to sit on, or null to select one automatically
    return:
      type: System.Boolean
      description: Whether or not the chair can be sat on
    content.vb: Public Function Sit(chair As Furniture, speedMultiplier As Single, spot As ActionSpot = Nothing) As Boolean
  overload: TinyLife.Actions.Action.Sit*
  nameWithType.vb: Action.Sit(Furniture, Single, ActionSpot)
  fullName.vb: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, Single, TinyLife.Objects.ActionSpot)
  name.vb: Sit(Furniture, Single, ActionSpot)
- uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChildren(System.Boolean)
  id: GetChildren(System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetChildren(bool)
  nameWithType: Action.GetChildren(bool)
  fullName: TinyLife.Actions.Action.GetChildren(bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetChildren
    path: ../TinyLife/Actions/Action.cs
    startLine: 516
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a set of actions that are child actions of this action, which are actions that have their <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref> set to this action.\nOptionally, grandchildren can be included in the returned set.\n"
  example: []
  syntax:
    content: public IEnumerable<Action> GetChildren(bool regardGrandchildren = false)
    parameters:
    - id: regardGrandchildren
      type: System.Boolean
      description: Whether to include grandchildren, which are children of children, and so on.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The child actions of this action.
    content.vb: Public Function GetChildren(regardGrandchildren As Boolean = False) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.GetChildren*
  nameWithType.vb: Action.GetChildren(Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChildren(Boolean)
  name.vb: GetChildren(Boolean)
- uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  id: GetChild``1(System.Guid,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetChild<T>(Guid, bool)
  nameWithType: Action.GetChild<T>(Guid, bool)
  fullName: TinyLife.Actions.Action.GetChild<T>(System.Guid, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetChild
    path: ../TinyLife/Actions/Action.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the first child action of this action with the given type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> that has the given id <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>. Child actions are actions that have their <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref> set to this action.\nOptionally, grandchildren can be included in the search.\n"
  example: []
  syntax:
    content: 'public T GetChild<T>(Guid id, bool regardGrandchildren = false) where T : Action'
    parameters:
    - id: id
      type: System.Guid
      description: The <xref href="TinyLife.Actions.Action.Id" data-throw-if-not-resolved="false"></xref> of the action to find.
    - id: regardGrandchildren
      type: System.Boolean
      description: Whether to include grandchildren, which are children of children, and so on.
    typeParameters:
    - id: T
      description: The type of child action to find.
    return:
      type: '{T}'
      description: The found child action, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if there is no child action that matches the given conditions.
    content.vb: Public Function GetChild(Of T As Action)(id As Guid, regardGrandchildren As Boolean = False) As T
  overload: TinyLife.Actions.Action.GetChild*
  nameWithType.vb: Action.GetChild(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChild(Of T)(System.Guid, Boolean)
  name.vb: GetChild(Of T)(Guid, Boolean)
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  id: PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PickUpAndGoTo
    path: ../TinyLife/Actions/Action.cs
    startLine: 575
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns a set of actions which cause the <code data-dev-comment-type=\"paramref\" class=\"paramref\">info</code>&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to set up a holdable item on an expected parent object in such a way that interacting with it is possible afterwards. This utility method is used for actions like <xref href=\"TinyLife.Actions.ActionType.Eat\" data-throw-if-not-resolved=\"false\"></xref>, where it is desired that a person picks up a food item from a counter and brings it to a table, if required.\n<xref href=\"TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo%2cTinyLife.Objects.ObjectCategory%2cSystem.Func%7bTinyLife.Objects.Furniture%2cSystem.Boolean%7d%2cSystem.Nullable%7bTinyLife.Actions.CanExecuteResult%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> provides a <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> equivalent to this method.\n"
  example: []
  syntax:
    content: public static IEnumerable<Action> PickUpAndGoTo(ActionInfo info, ObjectCategory expectedParent, ObjectCategory expectedItem, bool putDown = true)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: expectedParent
      type: TinyLife.Objects.ObjectCategory
      description: A set of object categories that the goal parent is expected to have.
    - id: expectedItem
      type: TinyLife.Objects.ObjectCategory
      description: A set of object categories that the item to hold and carry is expected to have.
    - id: putDown
      type: System.Boolean
      description: Whether the <code data-dev-comment-type="paramref" class="paramref">expectedItem</code> should be put down. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the person will only go to the goal location, but not put the item down on it.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The actions to execute to cause this behavior.
    content.vb: Public Shared Function PickUpAndGoTo(info As ActionInfo, expectedParent As ObjectCategory, expectedItem As ObjectCategory, putDown As Boolean = True) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.PickUpAndGoTo*
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, Boolean)
  name.vb: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  id: PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func<TinyLife.Objects.Furniture, bool>, System.Func<TinyLife.Objects.Furniture, bool>, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PickUpAndGoTo
    path: ../TinyLife/Actions/Action.cs
    startLine: 588
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns a set of actions which cause the <code data-dev-comment-type=\"paramref\" class=\"paramref\">info</code>&apos;s <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> to set up a holdable item on an expected parent object in such a way that interacting with it is possible afterwards. This utility method is used for actions like <xref href=\"TinyLife.Actions.ActionType.Eat\" data-throw-if-not-resolved=\"false\"></xref>, where it is desired that a person picks up a food item from a counter and brings it to a table, if required.\n<xref href=\"TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo%2cTinyLife.Objects.ObjectCategory%2cSystem.Func%7bTinyLife.Objects.Furniture%2cSystem.Boolean%7d%2cSystem.Nullable%7bTinyLife.Actions.CanExecuteResult%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> provides a <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> equivalent to this method.\n"
  example: []
  syntax:
    content: public static IEnumerable<Action> PickUpAndGoTo(ActionInfo info, Func<Furniture, bool> isParentValid, Func<Furniture, bool> isItemValid, bool putDown = true)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: isParentValid
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that determines whether the given furniture item is a valid parent.
    - id: isItemValid
      type: System.Func{TinyLife.Objects.Furniture,System.Boolean}
      description: A predicate that determines whether the given furniture item is a valid holdable and carryable item for this purpose.
    - id: putDown
      type: System.Boolean
      description: Whether the holdable item should be put down. If this is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>, the person will only go to the goal location, but not put the item down on it.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: The actions to execute to cause this behavior.
    content.vb: Public Shared Function PickUpAndGoTo(info As ActionInfo, isParentValid As Func(Of Furniture, Boolean), isItemValid As Func(Of Furniture, Boolean), putDown As Boolean = True) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Action.PickUpAndGoTo*
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func(Of TinyLife.Objects.Furniture, Boolean), System.Func(Of TinyLife.Objects.Furniture, Boolean), Boolean)
  name.vb: PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  id: GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetFreeChair(Person, Furniture)
  nameWithType: Action.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeChair
    path: ../TinyLife/Actions/Action.cs
    startLine: 625
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.Chair\" data-throw-if-not-resolved=\"false\"></xref> category that is closest to the given object which is on a desk or table.\nThe furniture returned is the one that the person should <xref href=\"TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture%2cSystem.Single%2cTinyLife.Objects.ActionSpot)\" data-throw-if-not-resolved=\"false\"></xref> on when interacting with the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>.\nThis method will return the <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>&apos;s parent itself if it is a picnic-style table that has benches directly attached to it.\n"
  example: []
  syntax:
    content: public static (Furniture Chair, ActionSpot Spot, Direction2 Direction) GetFreeChair(Person person, Furniture deskObject)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the free chair for
    - id: deskObject
      type: TinyLife.Objects.Furniture
      description: The object that is sat on a desk
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
      description: The corresponding chair, <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> and the action spot&apos;s rotation, or default if there is none
    content.vb: Public Shared Function GetFreeChair(person As Person, deskObject As Furniture) As (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  overload: TinyLife.Actions.Action.GetFreeChair*
- uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  id: GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetFreeChairs(Person, Furniture, Func<Direction2, bool>)
  nameWithType: Action.GetFreeChairs(Person, Furniture, Func<Direction2, bool>)
  fullName: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func<MLEM.Misc.Direction2, bool>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeChairs
    path: ../TinyLife/Actions/Action.cs
    startLine: 642
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a set of free chair furniture paired with an <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> and accessible direction.\nThis method is used by <xref href=\"TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person%2cTinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method will return the <code data-dev-comment-type=\"paramref\" class=\"paramref\">table</code> itself if it is a picnic-style table that has benches directly attached to it.\n"
  example: []
  syntax:
    content: public static IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)> GetFreeChairs(Person person, Furniture table, Func<Direction2, bool> canSitThisWay = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the free chairs for
    - id: table
      type: TinyLife.Objects.Furniture
      description: The table that the chairs should be connected to
    - id: canSitThisWay
      type: System.Func{MLEM.Misc.Direction2,System.Boolean}
      description: A function that determines whether a person can sit the given way, or null to allow all seating directions
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
      description: A set of chairs, their action spots and their seating directions
    content.vb: Public Shared Function GetFreeChairs(person As Person, table As Furniture, canSitThisWay As Func(Of Direction2, Boolean) = Nothing) As IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  overload: TinyLife.Actions.Action.GetFreeChairs*
  nameWithType.vb: Action.GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  fullName.vb: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func(Of MLEM.Misc.Direction2, Boolean))
  name.vb: GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
- uid: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  id: GetSeatCategory(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetSeatCategory(Person)
  nameWithType: Action.GetSeatCategory(Person)
  fullName: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSeatCategory
    path: ../TinyLife/Actions/Action.cs
    startLine: 662
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> that an object needs to have for the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">person</code> to be able to sit on it.\nThis method returns <xref href=\"TinyLife.Objects.ObjectCategory.BabySittable\" data-throw-if-not-resolved=\"false\"></xref> for babies, and <xref href=\"TinyLife.Objects.ObjectCategory.Chair\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public static ObjectCategory GetSeatCategory(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who should sit.
    return:
      type: TinyLife.Objects.ObjectCategory
      description: The object category for seats.
    content.vb: Public Shared Function GetSeatCategory(person As Person) As ObjectCategory
  overload: TinyLife.Actions.Action.GetSeatCategory*
- uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreePeople(Person, ActionType, Vector2?, float?, bool, bool, bool, bool)
  nameWithType: Action.FindAllFreePeople(Person, ActionType, Vector2?, float?, bool, bool, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?, float?, bool, bool, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreePeople
    path: ../TinyLife/Actions/Action.cs
    startLine: 678
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>, ordered by their priority, where the first entry is the best possible <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IEnumerable<Person> FindAllFreePeople(Person person, ActionType type = null, Vector2? position = null, float? radius = null, bool ignoreVisibility = false, bool ignoreNeeds = false, bool ignoreCanEnqueueConversations = false, bool needsFreeActionSpot = true)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action we want to start
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    - id: ignoreNeeds
      type: System.Boolean
      description: Whether the free people&apos;s needs should be ignored.
    - id: ignoreCanEnqueueConversations
      type: System.Boolean
      description: Whether it should be ignored whether the free people&apos;s actions <xref href="TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person%2cTinyLife.Actions.ActionType)" data-throw-if-not-resolved="false"></xref>.
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether a free action spot is required on the free people.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of valid interaction partners
    content.vb: Public Shared Function FindAllFreePeople(person As Person, type As ActionType = Nothing, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False, ignoreNeeds As Boolean = False, ignoreCanEnqueueConversations As Boolean = False, needsFreeActionSpot As Boolean = True) As IEnumerable(Of Person)
  overload: TinyLife.Actions.Action.FindAllFreePeople*
  nameWithType.vb: Action.FindAllFreePeople(Person, ActionType, Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
  name.vb: FindAllFreePeople(Person, ActionType, Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  id: FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, bool, Microsoft.Xna.Framework.Vector2?, float?, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeFurniture
    path: ../TinyLife/Actions/Action.cs
    startLine: 703
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>, ordered by their priority, where the first entry is the best possible <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  example: []
  syntax:
    content: public static IEnumerable<Furniture> FindAllFreeFurniture(Person person, ObjectCategory categories = null, FurnitureType objectSpotType = null, bool needsFreeActionSpot = true, Vector2? position = null, float? radius = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether or not the furniture returned needs a non-occupied <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of valid furniture
    content.vb: Public Shared Function FindAllFreeFurniture(person As Person, categories As ObjectCategory = Nothing, objectSpotType As FurnitureType = Nothing, needsFreeActionSpot As Boolean = True, position As Vector2? = Nothing, radius As Single? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As IEnumerable(Of Furniture)
  overload: TinyLife.Actions.Action.FindAllFreeFurniture*
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Boolean, Microsoft.Xna.Framework.Vector2?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeWalls(Person, Vector2?, float?, bool)
  nameWithType: Action.FindAllFreeWalls(Person, Vector2?, float?, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, float?, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeWalls
    path: ../TinyLife/Actions/Action.cs
    startLine: 721
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Wall> FindAllFreeWalls(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the walls should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for walls in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
      description: A set of valid walls
    content.vb: Public Shared Function FindAllFreeWalls(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Wall)
  overload: TinyLife.Actions.Action.FindAllFreeWalls*
  nameWithType.vb: Action.FindAllFreeWalls(Person, Vector2?, Single?, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, Single?, Boolean)
  name.vb: FindAllFreeWalls(Person, Vector2?, Single?, Boolean)
- uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllFreeGround(Person, Vector2?, float?, bool)
  nameWithType: Action.FindAllFreeGround(Person, Vector2?, float?, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, float?, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeGround
    path: ../TinyLife/Actions/Action.cs
    startLine: 736
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find a set of all positions on the ground that are currently valid for interaction\n"
  example: []
  syntax:
    content: public static IEnumerable<Point> FindAllFreeGround(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the ground should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for ground positions in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of valid locations
    content.vb: Public Shared Function FindAllFreeGround(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Point)
  overload: TinyLife.Actions.Action.FindAllFreeGround*
  nameWithType.vb: Action.FindAllFreeGround(Person, Vector2?, Single?, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, Single?, Boolean)
  name.vb: FindAllFreeGround(Person, Vector2?, Single?, Boolean)
- uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  id: FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, bool, bool)
  nameWithType: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, bool, bool)
  fullName: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Microsoft.Xna.Framework.Vector2?, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindFreeFurniture
    path: ../TinyLife/Actions/Action.cs
    startLine: 754
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method to find the best <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance to interact with based on the given data.\nNote that this method always returns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> related to the first result from <xref href=\"TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Boolean%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionInfo FindFreeFurniture(Person person, ObjectCategory categories, FurnitureType objectSpotType = null, Vector2? position = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: TinyLife.Actions.ActionInfo
      description: An action info for the best furniture, or null if there is none
    content.vb: Public Shared Function FindFreeFurniture(person As Person, categories As ObjectCategory, objectSpotType As FurnitureType = Nothing, position As Vector2? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As ActionInfo
  overload: TinyLife.Actions.Action.FindFreeFurniture*
  nameWithType.vb: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Microsoft.Xna.Framework.Vector2?, Boolean, Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, Boolean, Boolean)
- uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindAllActionObjects(Person, ActionType, Vector2?)
  nameWithType: Action.FindAllActionObjects(Person, ActionType, Vector2?)
  fullName: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllActionObjects
    path: ../TinyLife/Actions/Action.cs
    startLine: 767
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns all <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that are available to the given <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> for the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>.\nThe objects returned are the ones that would also be considered by the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> when starting an action.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionInfo> FindAllActionObjects(Person person, ActionType type, Vector2? position = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position to focus around when finding action objects.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: A set of action infos that the given action can be started with
    content.vb: Public Shared Function FindAllActionObjects(person As Person, type As ActionType, position As Vector2? = Nothing) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Actions.Action.FindAllActionObjects*
- uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  id: FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: FindValidActionObjects(Person, ActionType, bool, Vector2?, bool, bool)
  nameWithType: Action.FindValidActionObjects(Person, ActionType, bool, Vector2?, bool, bool)
  fullName: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, bool, Microsoft.Xna.Framework.Vector2?, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindValidActionObjects
    path: ../TinyLife/Actions/Action.cs
    startLine: 805
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns all <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that are available to the given <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> for the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>, and whose <xref href=\"TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> indicates that the actions are valid for execution.\nThis method also checks <xref href=\"TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionInfo> FindValidActionObjects(Person person, ActionType type, bool automatic, Vector2? position = null, bool allowInappropriate = false, bool allowInvalid = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person.
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action to start.
    - id: automatic
      type: System.Boolean
      description: Whether the action is considered to start automatically.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position to focus around when finding action objects.
    - id: allowInappropriate
      type: System.Boolean
      description: Whether to ignore the <xref href="TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere" data-throw-if-not-resolved="false"></xref> flag.
    - id: allowInvalid
      type: System.Boolean
      description: Whether invalid objects should also be returned.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
      description: A set of action infos that the given action can be started with.
    content.vb: Public Shared Function FindValidActionObjects(person As Person, type As ActionType, automatic As Boolean, position As Vector2? = Nothing, allowInappropriate As Boolean = False, allowInvalid As Boolean = False) As IEnumerable(Of ActionInfo)
  overload: TinyLife.Actions.Action.FindValidActionObjects*
  nameWithType.vb: Action.FindValidActionObjects(Person, ActionType, Boolean, Vector2?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Boolean, Microsoft.Xna.Framework.Vector2?, Boolean, Boolean)
  name.vb: FindValidActionObjects(Person, ActionType, Boolean, Vector2?, Boolean, Boolean)
- uid: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety@)
  commentId: M:TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety@)
  id: TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety@)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: TryGetRandomValidVariety(ActionType, ActionInfo, bool, out ActionVariety)
  nameWithType: Action.TryGetRandomValidVariety(ActionType, ActionInfo, bool, out ActionVariety)
  fullName: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, out TinyLife.Actions.ActionVariety)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TryGetRandomValidVariety
    path: ../TinyLife/Actions/Action.cs
    startLine: 823
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAttempts to find a random valid action variety from the <code data-dev-comment-type=\"paramref\" class=\"paramref\">type</code>&apos;s <xref href=\"TinyLife.Actions.ActionType.TypeSettings.Varieties\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">true</a>, then the action can be started with the variety stored in <code data-dev-comment-type=\"paramref\" class=\"paramref\">variety</code>, even if the stored variety is <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>.\n"
  example: []
  syntax:
    content: public static bool TryGetRandomValidVariety(ActionType type, ActionInfo info, bool automatic, out ActionVariety variety)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The action type whose varieties to search.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
    - id: variety
      type: TinyLife.Actions.ActionVariety
      description: The variety found, or <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> if no variety was found or the action has no varieties.
    return:
      type: System.Boolean
      description: Whether the action can be started with the variety stored in <code data-dev-comment-type="paramref" class="paramref">variety</code>.
    content.vb: Public Shared Function TryGetRandomValidVariety(type As ActionType, info As ActionInfo, automatic As Boolean, variety As ActionVariety) As Boolean
  overload: TinyLife.Actions.Action.TryGetRandomValidVariety*
  nameWithType.vb: Action.TryGetRandomValidVariety(ActionType, ActionInfo, Boolean, ActionVariety)
  fullName.vb: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Actions.ActionVariety)
  name.vb: TryGetRandomValidVariety(ActionType, ActionInfo, Boolean, ActionVariety)
- uid: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  id: GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetRandomValidVariety(IEnumerable<ActionVariety>, ActionInfo)
  nameWithType: Action.GetRandomValidVariety(IEnumerable<ActionVariety>, ActionInfo)
  fullName: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>, TinyLife.Actions.ActionInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomValidVariety
    path: ../TinyLife/Actions/Action.cs
    startLine: 842
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a random action variety from the given set of action varieties based on their <xref href=\"TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe returned variety is guaranteed to be executable in this scenario (<xref href=\"TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public static ActionVariety GetRandomValidVariety(IEnumerable<ActionVariety> varieties, ActionInfo info)
    parameters:
    - id: varieties
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: The action varieties to choose from
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action infos
    return:
      type: TinyLife.Actions.ActionVariety
      description: A random, executable action variety
    content.vb: Public Shared Function GetRandomValidVariety(varieties As IEnumerable(Of ActionVariety), info As ActionInfo) As ActionVariety
  overload: TinyLife.Actions.Action.GetRandomValidVariety*
  nameWithType.vb: Action.GetRandomValidVariety(IEnumerable(Of ActionVariety), ActionInfo)
  fullName.vb: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety), TinyLife.Actions.ActionInfo)
  name.vb: GetRandomValidVariety(IEnumerable(Of ActionVariety), ActionInfo)
- uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  id: GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: Action.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTableSpot
    path: ../TinyLife/Actions/Action.cs
    startLine: 857
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns the <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on the table or desk that the given chair is connected to.\nThis is the object spot that should be used for interaction if a person sits on the given chair.\n"
  example: []
  syntax:
    content: public static (Furniture Table, ObjectSpot Spot) GetTableSpot(Furniture chair, ActionSpot actionSpot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to get the table spot for
    - id: actionSpot
      type: TinyLife.Objects.ActionSpot
      description: The action spot on the <code data-dev-comment-type="paramref" class="paramref">chair</code> to get the table spot for
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
      description: The table spot, or null if there is none
    content.vb: Public Shared Function GetTableSpot(chair As Furniture, actionSpot As ActionSpot = Nothing) As (Table As Furniture, Spot As ObjectSpot)
  overload: TinyLife.Actions.Action.GetTableSpot*
- uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  id: InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: InvokeForBoth(Person, Person, Action<Person, Person>)
  nameWithType: Action.InvokeForBoth(Person, Person, Action<Person, Person>)
  fullName: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InvokeForBoth
    path: ../TinyLife/Actions/Action.cs
    startLine: 870
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInvokes the given action for two people while passing both of them, first as the main, and then as the second, parameter to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code>.\n"
  example: []
  syntax:
    content: public static void InvokeForBoth(Person person, Person other, Action<Person, Person> action)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The first person.
    - id: other
      type: TinyLife.Objects.Person
      description: The second person.
    - id: action
      type: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
      description: The action to invoke for both people passed.
    content.vb: Public Shared Sub InvokeForBoth(person As Person, other As Person, action As Action(Of Person, Person))
  overload: TinyLife.Actions.Action.InvokeForBoth*
  nameWithType.vb: Action.InvokeForBoth(Person, Person, Action(Of Person, Person))
  fullName.vb: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Person, Person, Action(Of Person, Person))
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  langs:
  - csharp
  - vb
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Action.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanMultitask
    path: ../TinyLife/Actions/Action.cs
    startLine: 882
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA utility method that can be used whether the two <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> instances can currently be invoked together.\nInternally, this checks if both actions return true on <xref href=\"TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool CanMultitask(Action a1, Action a2)
    parameters:
    - id: a1
      type: TinyLife.Actions.Action
      description: The first action
    - id: a2
      type: TinyLife.Actions.Action
      description: The second action
    return:
      type: System.Boolean
      description: Whether the two actions can be multi-tasked
    content.vb: Public Shared Function CanMultitask(a1 As Action, a2 As Action) As Boolean
  overload: TinyLife.Actions.Action.CanMultitask*
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  name: ActionQueue
  nameWithType: Person.ActionQueue
  fullName: TinyLife.Objects.Person.ActionQueue
- uid: TinyLife.Objects.Person.CurrentActions
  commentId: F:TinyLife.Objects.Person.CurrentActions
  name: CurrentActions
  nameWithType: Person.CurrentActions
  fullName: TinyLife.Objects.Person.CurrentActions
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Objects.Person.OnActionsCompleted
  commentId: E:TinyLife.Objects.Person.OnActionsCompleted
  name: OnActionsCompleted
  nameWithType: Person.OnActionsCompleted
  fullName: TinyLife.Objects.Person.OnActionsCompleted
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Action>(Action)
  nameWithType: Extensions.JsonCopy<Action>(Action)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Action>(TinyLife.Actions.Action)
  nameWithType.vb: Extensions.JsonCopy(Of Action)(Action)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Action)(TinyLife.Actions.Action)
  name.vb: JsonCopy(Of Action)(Action)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Action)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Action)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  parent: TinyLife.Actions.Action
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  parent: TinyLife.Actions.Action
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.InProgressTime*
  commentId: Overload:TinyLife.Actions.Action.InProgressTime
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.Action.InProgressTime
  commentId: P:TinyLife.Actions.Action.InProgressTime
  parent: TinyLife.Actions.Action
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.zero
  name: Zero
  nameWithType: TimeSpan.Zero
  fullName: System.TimeSpan.Zero
- uid: TinyLife.Actions.Action.FullyInProgress*
  commentId: Overload:TinyLife.Actions.Action.FullyInProgress
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Guid.NewGuid
  commentId: M:System.Guid.NewGuid
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  name: NewGuid()
  nameWithType: Guid.NewGuid()
  fullName: System.Guid.NewGuid()
  spec.csharp:
  - uid: System.Guid.NewGuid
    name: NewGuid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  - name: (
  - name: )
  spec.vb:
  - uid: System.Guid.NewGuid
    name: NewGuid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid.newguid
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChildren(System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetChildren(bool)
  nameWithType: Action.GetChildren(bool)
  fullName: TinyLife.Actions.Action.GetChildren(bool)
  nameWithType.vb: Action.GetChildren(Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChildren(Boolean)
  name.vb: GetChildren(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetChild<T>(Guid, bool)
  nameWithType: Action.GetChild<T>(Guid, bool)
  fullName: TinyLife.Actions.Action.GetChild<T>(System.Guid, bool)
  nameWithType.vb: Action.GetChild(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChild(Of T)(System.Guid, Boolean)
  name.vb: GetChild(Of T)(Guid, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  parent: TinyLife.Actions.Action
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Objects.Person.GetAction``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetAction``1(System.Guid,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetAction<T>(Guid, bool)
  nameWithType: Person.GetAction<T>(Guid, bool)
  fullName: TinyLife.Objects.Person.GetAction<T>(System.Guid, bool)
  nameWithType.vb: Person.GetAction(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Objects.Person.GetAction(Of T)(System.Guid, Boolean)
  name.vb: GetAction(Of T)(Guid, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Person.GetAction``1(System.Guid,System.Boolean)
    name: GetAction
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.GetAction``1(System.Guid,System.Boolean)
    name: GetAction
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.Action.StartedAutomatically*
  commentId: Overload:TinyLife.Actions.Action.StartedAutomatically
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler
  commentId: T:TinyLife.Actions.Handlers.UnderlyingActionHandler
  name: UnderlyingActionHandler
  nameWithType: UnderlyingActionHandler
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  parent: TinyLife.Actions.Handlers
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
- uid: TinyLife.Actions.Action.Parent*
  commentId: Overload:TinyLife.Actions.Action.Parent
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  parent: TinyLife.Actions.Action
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.Actions.Action.Map*
  commentId: Overload:TinyLife.Actions.Action.Map
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: TinyLife.Actions.Action.Person*
  commentId: Overload:TinyLife.Actions.Action.Person
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.ElapsedTime*
  commentId: Overload:TinyLife.Actions.Action.ElapsedTime
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  nameWithType: Action.OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(string, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, bool, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)), MLEM.Textures.TextureRegion)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.PlayerPromptOpen*
  commentId: Overload:TinyLife.Actions.Action.PlayerPromptOpen
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  parent: TinyLife.Actions.Action
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Nullable{TinyLife.Actions.CompletionType}
  commentId: T:System.Nullable{TinyLife.Actions.CompletionType}
  parent: System
  definition: System.Nullable`1
  name: CompletionType?
  nameWithType: CompletionType?
  fullName: TinyLife.Actions.CompletionType?
  spec.csharp:
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: '?'
  spec.vb:
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Actions.Action.#ctor*
  commentId: Overload:TinyLife.Actions.Action.#ctor
  name: Action
  nameWithType: Action.Action
  fullName: TinyLife.Actions.Action.Action
  nameWithType.vb: Action.New
  fullName.vb: TinyLife.Actions.Action.New
  name.vb: New
- uid: TinyLife.Actions.Action.Initialize*
  commentId: Overload:TinyLife.Actions.Action.Initialize
  name: Initialize
  nameWithType: Action.Initialize
  fullName: TinyLife.Actions.Action.Initialize
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  nameWithType.vb: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Actions.Action.Update*
  commentId: Overload:TinyLife.Actions.Action.Update
  name: Update
  nameWithType: Action.Update
  fullName: TinyLife.Actions.Action.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  name: Completed
  nameWithType: CompletionType.Completed
  fullName: TinyLife.Actions.CompletionType.Completed
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.Action.ForceResult
  commentId: F:TinyLife.Actions.Action.ForceResult
  parent: TinyLife.Actions.Action
  name: ForceResult
  nameWithType: Action.ForceResult
  fullName: TinyLife.Actions.Action.ForceResult
- uid: TinyLife.Actions.CompletionType.Active
  commentId: F:TinyLife.Actions.CompletionType.Active
  name: Active
  nameWithType: CompletionType.Active
  fullName: TinyLife.Actions.CompletionType.Active
- uid: TinyLife.Actions.Action.IsCompleted*
  commentId: Overload:TinyLife.Actions.Action.IsCompleted
  name: IsCompleted
  nameWithType: Action.IsCompleted
  fullName: TinyLife.Actions.Action.IsCompleted
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: OnActionCompleted(Action, CompletionType, bool)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnActionCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.OnCompleted*
  commentId: Overload:TinyLife.Actions.Action.OnCompleted
  name: OnCompleted
  nameWithType: Action.OnCompleted
  fullName: TinyLife.Actions.Action.OnCompleted
- uid: TinyLife.Actions.Action.Validate*
  commentId: Overload:TinyLife.Actions.Action.Validate
  name: Validate
  nameWithType: Action.Validate
  fullName: TinyLife.Actions.Action.Validate
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
  name: IgnoreObjectConditions
  nameWithType: ActionType.TypeSettings.IgnoreObjectConditions
  fullName: TinyLife.Actions.ActionType.TypeSettings.IgnoreObjectConditions
- uid: TinyLife.Actions.Action.TryForceResult*
  commentId: Overload:TinyLife.Actions.Action.TryForceResult
  name: TryForceResult
  nameWithType: Action.TryForceResult
  fullName: TinyLife.Actions.Action.TryForceResult
- uid: System.Nullable{TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Nullable{TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Nullable`1
  name: CanExecuteResult?
  nameWithType: CanExecuteResult?
  fullName: TinyLife.Actions.CanExecuteResult?
  spec.csharp:
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
  spec.vb:
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask*
  commentId: Overload:TinyLife.Actions.Action.CanMultitask
  name: CanMultitask
  nameWithType: Action.CanMultitask
  fullName: TinyLife.Actions.Action.CanMultitask
- uid: TinyLife.Actions.Action.CanStartNow*
  commentId: Overload:TinyLife.Actions.Action.CanStartNow
  name: CanStartNow
  nameWithType: Action.CanStartNow
  fullName: TinyLife.Actions.Action.CanStartNow
- uid: TinyLife.Actions.Action.CanCancel*
  commentId: Overload:TinyLife.Actions.Action.CanCancel
  name: CanCancel
  nameWithType: Action.CanCancel
  fullName: TinyLife.Actions.Action.CanCancel
- uid: TinyLife.Actions.Action.GetNextAction*
  commentId: Overload:TinyLife.Actions.Action.GetNextAction
  name: GetNextAction
  nameWithType: Action.GetNextAction
  fullName: TinyLife.Actions.Action.GetNextAction
- uid: TinyLife.Actions.ActionType.TypeSettings.Texture
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Texture
  name: Texture
  nameWithType: ActionType.TypeSettings.Texture
  fullName: TinyLife.Actions.ActionType.TypeSettings.Texture
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetIconObject*
  commentId: Overload:TinyLife.Actions.Action.GetIconObject
  name: GetIconObject
  nameWithType: Action.GetIconObject
  fullName: TinyLife.Actions.Action.GetIconObject
- uid: TinyLife.GameSpeed.ExtremelyFast
  commentId: F:TinyLife.GameSpeed.ExtremelyFast
  name: ExtremelyFast
  nameWithType: GameSpeed.ExtremelyFast
  fullName: TinyLife.GameSpeed.ExtremelyFast
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed*
  commentId: Overload:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  name: CausesExtremelyFastSpeed
  nameWithType: Action.CausesExtremelyFastSpeed
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
- uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetDisplayName(ActionInfo, bool)
  nameWithType: ActionType.GetDisplayName(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionType.GetDisplayName(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: GetDisplayName(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo,System.Boolean)
    name: GetDisplayName
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetDisplayName*
  commentId: Overload:TinyLife.Actions.Action.GetDisplayName
  name: GetDisplayName
  nameWithType: Action.GetDisplayName
  fullName: TinyLife.Actions.Action.GetDisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Actions.SleepAction
  commentId: T:TinyLife.Actions.SleepAction
  name: SleepAction
  nameWithType: SleepAction
  fullName: TinyLife.Actions.SleepAction
- uid: TinyLife.Actions.Action.CanEnqueueConversation*
  commentId: Overload:TinyLife.Actions.Action.CanEnqueueConversation
  name: CanEnqueueConversation
  nameWithType: Action.CanEnqueueConversation
  fullName: TinyLife.Actions.Action.CanEnqueueConversation
- uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: OnChildCompleted(Action, CompletionType, bool)
  nameWithType: Action.OnChildCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: Action.OnChildCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnChildCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  parent: TinyLife.Actions.Action
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Action.OnChildCompleted*
  commentId: Overload:TinyLife.Actions.Action.OnChildCompleted
  name: OnChildCompleted
  nameWithType: Action.OnChildCompleted
  fullName: TinyLife.Actions.Action.OnChildCompleted
- uid: TinyLife.Actions.ActionType.QuitJob
  commentId: F:TinyLife.Actions.ActionType.QuitJob
  name: QuitJob
  nameWithType: ActionType.QuitJob
  fullName: TinyLife.Actions.ActionType.QuitJob
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  parent: TinyLife.Actions.Action
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.GameImpl.CurrentHousehold
  commentId: P:TinyLife.GameImpl.CurrentHousehold
  name: CurrentHousehold
  nameWithType: GameImpl.CurrentHousehold
  fullName: TinyLife.GameImpl.CurrentHousehold
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: TinyLife.Actions.Action.OpenPlayerPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenPlayerPrompt
  name: OpenPlayerPrompt
  nameWithType: Action.OpenPlayerPrompt
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt
- uid: System.Predicate{MLEM.Ui.Elements.Panel}
  commentId: T:System.Predicate{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<Panel>
  nameWithType: Predicate<Panel>
  fullName: System.Predicate<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Predicate(Of Panel)
  fullName.vb: System.Predicate(Of MLEM.Ui.Elements.Panel)
  name.vb: Predicate(Of Panel)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
- uid: System.Action{MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Panel>
  nameWithType: Action<Panel>
  fullName: System.Action<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of Panel)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Panel)
  name.vb: Action(Of Panel)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
- uid: System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
  commentId: T:System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<CoveringGroup, IEnumerable<Element>>
  nameWithType: Func<CoveringGroup, IEnumerable<Element>>
  fullName: System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>
  nameWithType.vb: Func(Of CoveringGroup, IEnumerable(Of Element))
  fullName.vb: System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element))
  name.vb: Func(Of CoveringGroup, IEnumerable(Of Element))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: )
  - name: )
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Uis.CoveringGroup
  commentId: T:TinyLife.Uis.CoveringGroup
  parent: TinyLife.Uis
  name: CoveringGroup
  nameWithType: CoveringGroup
  fullName: TinyLife.Uis.CoveringGroup
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Uis
    name: Uis
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Uis
    name: Uis
- uid: TinyLife.Actions.Action.OpenYesNoPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenYesNoPrompt
  name: OpenYesNoPrompt
  nameWithType: Action.OpenYesNoPrompt
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MLEM.Ui.Elements.TextField
  commentId: T:MLEM.Ui.Elements.TextField
  isExternal: true
  name: TextField
  nameWithType: TextField
  fullName: MLEM.Ui.Elements.TextField
- uid: TinyLife.Actions.Action.OpenTextPrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenTextPrompt
  name: OpenTextPrompt
  nameWithType: Action.OpenTextPrompt
  fullName: TinyLife.Actions.Action.OpenTextPrompt
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Predicate{System.String}
  commentId: T:System.Predicate{System.String}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<string>
  nameWithType: Predicate<string>
  fullName: System.Predicate<string>
  nameWithType.vb: Predicate(Of String)
  fullName.vb: System.Predicate(Of String)
  name.vb: Predicate(Of String)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Ui.Elements.TextField.Rule
  commentId: T:MLEM.Ui.Elements.TextField.Rule
  parent: MLEM.Ui.Elements
  isExternal: true
  name: TextField.Rule
  nameWithType: TextField.Rule
  fullName: MLEM.Ui.Elements.TextField.Rule
  spec.csharp:
  - uid: MLEM.Ui.Elements.TextField
    name: TextField
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  spec.vb:
  - uid: MLEM.Ui.Elements.TextField
    name: TextField
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: OpenTextPrompt(string, Action<string>, Predicate<string>, Rule, string, TextureRegion)
  nameWithType: Action.OpenTextPrompt(string, Action<string>, Predicate<string>, TextField.Rule, string, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(string, System.Action<string>, System.Predicate<string>, MLEM.Ui.Elements.TextField.Rule, string, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(String, System.Action(Of String), System.Predicate(Of String), MLEM.Ui.Elements.TextField.Rule, String, MLEM.Textures.TextureRegion)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), Rule, String, TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: TinyLife.Actions.ChoicePromptInfo
  commentId: T:TinyLife.Actions.ChoicePromptInfo
  parent: TinyLife.Actions
  name: ChoicePromptInfo
  nameWithType: ChoicePromptInfo
  fullName: TinyLife.Actions.ChoicePromptInfo
- uid: TinyLife.Actions.Action.OpenChoicePrompt*
  commentId: Overload:TinyLife.Actions.Action.OpenChoicePrompt
  name: OpenChoicePrompt
  nameWithType: Action.OpenChoicePrompt
  fullName: TinyLife.Actions.Action.OpenChoicePrompt
- uid: TinyLife.Actions.ActionType.PracticeJokes
  commentId: F:TinyLife.Actions.ActionType.PracticeJokes
  name: PracticeJokes
  nameWithType: ActionType.PracticeJokes
  fullName: TinyLife.Actions.ActionType.PracticeJokes
- uid: TinyLife.Actions.ActionType.PracticeSpeech
  commentId: F:TinyLife.Actions.ActionType.PracticeSpeech
  name: PracticeSpeech
  nameWithType: ActionType.PracticeSpeech
  fullName: TinyLife.Actions.ActionType.PracticeSpeech
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32.maxvalue
  name: MaxValue
  nameWithType: int.MaxValue
  fullName: int.MaxValue
  nameWithType.vb: Integer.MaxValue
  fullName.vb: Integer.MaxValue
- uid: TinyLife.Actions.Action.SpeakAlone*
  commentId: Overload:TinyLife.Actions.Action.SpeakAlone
  name: SpeakAlone
  nameWithType: Action.SpeakAlone
  fullName: TinyLife.Actions.Action.SpeakAlone
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  parent: TinyLife.Actions.SocialAction
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: TinyLife.Actions.Action.SpeakInConversation*
  commentId: Overload:TinyLife.Actions.Action.SpeakInConversation
  name: SpeakInConversation
  nameWithType: Action.SpeakInConversation
  fullName: TinyLife.Actions.Action.SpeakInConversation
- uid: System.Nullable{TinyLife.Actions.EmoteCategory}
  commentId: T:System.Nullable{TinyLife.Actions.EmoteCategory}
  parent: System
  definition: System.Nullable`1
  name: EmoteCategory?
  nameWithType: EmoteCategory?
  fullName: TinyLife.Actions.EmoteCategory?
  spec.csharp:
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: '?'
  spec.vb:
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: '?'
- uid: System.Nullable{TinyLife.Objects.SpeakStyle}
  commentId: T:System.Nullable{TinyLife.Objects.SpeakStyle}
  parent: System
  definition: System.Nullable`1
  name: SpeakStyle?
  nameWithType: SpeakStyle?
  fullName: TinyLife.Objects.SpeakStyle?
  spec.csharp:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: '?'
  spec.vb:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: '?'
- uid: TinyLife.Actions.Action.FacePartner*
  commentId: Overload:TinyLife.Actions.Action.FacePartner
  name: FacePartner
  nameWithType: Action.FacePartner
  fullName: TinyLife.Actions.Action.FacePartner
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  name: Max
  nameWithType: Need.Max
  fullName: TinyLife.Need.Max
- uid: TinyLife.Actions.Action.CompleteIfNeedFull*
  commentId: Overload:TinyLife.Actions.Action.CompleteIfNeedFull
  name: CompleteIfNeedFull
  nameWithType: Action.CompleteIfNeedFull
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  nameWithType: Person.GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  fullName: TinyLife.Objects.Person.GetEfficiencyModifier(float, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, float)
  nameWithType.vb: Person.GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  fullName.vb: TinyLife.Objects.Person.GetEfficiencyModifier(Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  spec.csharp:
  - uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Action.CompleteIfTimeUp*
  commentId: Overload:TinyLife.Actions.Action.CompleteIfTimeUp
  name: CompleteIfTimeUp
  nameWithType: Action.CompleteIfTimeUp
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
- uid: TinyLife.Actions.CompletionType.Canceled
  commentId: F:TinyLife.Actions.CompletionType.Canceled
  name: Canceled
  nameWithType: CompletionType.Canceled
  fullName: TinyLife.Actions.CompletionType.Canceled
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: TinyLife.Actions.Action.CancelIfEmotional*
  commentId: Overload:TinyLife.Actions.Action.CancelIfEmotional
  name: CancelIfEmotional
  nameWithType: Action.CancelIfEmotional
  fullName: TinyLife.Actions.Action.CancelIfEmotional
- uid: TinyLife.Emotions.EmotionType[]
  isExternal: true
  name: EmotionType[]
  nameWithType: EmotionType[]
  fullName: TinyLife.Emotions.EmotionType[]
  nameWithType.vb: EmotionType()
  fullName.vb: TinyLife.Emotions.EmotionType()
  name.vb: EmotionType()
  spec.csharp:
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
  - name: (
  - name: )
- uid: TinyLife.Objects.Person.CurrentPose
  commentId: F:TinyLife.Objects.Person.CurrentPose
  name: CurrentPose
  nameWithType: Person.CurrentPose
  fullName: TinyLife.Objects.Person.CurrentPose
- uid: TinyLife.Objects.Pose.Sitting
  commentId: F:TinyLife.Objects.Pose.Sitting
  name: Sitting
  nameWithType: Pose.Sitting
  fullName: TinyLife.Objects.Pose.Sitting
- uid: TinyLife.NeedType.Energy
  commentId: F:TinyLife.NeedType.Energy
  name: Energy
  nameWithType: NeedType.Energy
  fullName: TinyLife.NeedType.Energy
- uid: TinyLife.Actions.Action.Sit*
  commentId: Overload:TinyLife.Actions.Action.Sit
  name: Sit
  nameWithType: Action.Sit
  fullName: TinyLife.Actions.Action.Sit
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Actions.Action.GetChildren*
  commentId: Overload:TinyLife.Actions.Action.GetChildren
  name: GetChildren
  nameWithType: Action.GetChildren
  fullName: TinyLife.Actions.Action.GetChildren
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.Action.Id
  commentId: F:TinyLife.Actions.Action.Id
  parent: TinyLife.Actions.Action
  name: Id
  nameWithType: Action.Id
  fullName: TinyLife.Actions.Action.Id
- uid: TinyLife.Actions.Action.GetChild*
  commentId: Overload:TinyLife.Actions.Action.GetChild
  name: GetChild
  nameWithType: Action.GetChild
  fullName: TinyLife.Actions.Action.GetChild
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionType.Eat
  commentId: F:TinyLife.Actions.ActionType.Eat
  name: Eat
  nameWithType: ActionType.Eat
  fullName: TinyLife.Actions.ActionType.Eat
- uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func<Furniture, bool>, CanExecuteResult?, bool, bool)
  nameWithType: ActionType.CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func<Furniture, bool>, CanExecuteResult?, bool, bool)
  fullName: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func<TinyLife.Objects.Furniture, bool>, TinyLife.Actions.CanExecuteResult?, bool, bool)
  nameWithType.vb: ActionType.CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), CanExecuteResult?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Func(Of TinyLife.Objects.Furniture, Boolean), TinyLife.Actions.CanExecuteResult?, Boolean, Boolean)
  name.vb: CanPickUpOrIsHoldingForTarget(ActionInfo, ObjectCategory, Func(Of Furniture, Boolean), CanExecuteResult?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
    name: CanPickUpOrIsHoldingForTarget
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.CanPickUpOrIsHoldingForTarget(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Nullable{TinyLife.Actions.CanExecuteResult},System.Boolean,System.Boolean)
    name: CanPickUpOrIsHoldingForTarget
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
- uid: TinyLife.Actions.Action.PickUpAndGoTo*
  commentId: Overload:TinyLife.Actions.Action.PickUpAndGoTo
  name: PickUpAndGoTo
  nameWithType: Action.PickUpAndGoTo
  fullName: TinyLife.Actions.Action.PickUpAndGoTo
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: System.Func{TinyLife.Objects.Furniture,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Furniture,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Furniture, bool>
  nameWithType: Func<Furniture, bool>
  fullName: System.Func<TinyLife.Objects.Furniture, bool>
  nameWithType.vb: Func(Of Furniture, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Furniture, Boolean)
  name.vb: Func(Of Furniture, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  name: Chair
  nameWithType: ObjectCategory.Chair
  fullName: TinyLife.Objects.ObjectCategory.Chair
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: Sit(Furniture, float, ActionSpot)
  nameWithType: Action.Sit(Furniture, float, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, float, TinyLife.Objects.ActionSpot)
  nameWithType.vb: Action.Sit(Furniture, Single, ActionSpot)
  fullName.vb: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, Single, TinyLife.Objects.ActionSpot)
  name.vb: Sit(Furniture, Single, ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChair*
  commentId: Overload:TinyLife.Actions.Action.GetFreeChair
  name: GetFreeChair
  nameWithType: Action.GetFreeChair
  fullName: TinyLife.Actions.Action.GetFreeChair
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`3
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.chair
  name: (Furniture Chair, ActionSpot Spot, Direction2 Direction)
  nameWithType: (Furniture Chair, ActionSpot Spot, Direction2 Direction)
  fullName: (TinyLife.Objects.Furniture Chair, TinyLife.Objects.ActionSpot Spot, MLEM.Misc.Direction2 Direction)
  nameWithType.vb: (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  fullName.vb: (Chair As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ActionSpot, Direction As MLEM.Misc.Direction2)
  name.vb: (Chair As Furniture, Spot As ActionSpot, Direction As Direction2)
  spec.csharp:
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.chair
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.direction
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.chair
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.direction
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  name: (T1, T2, T3)
  nameWithType: (T1, T2, T3)
  fullName: (T1, T2, T3)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  name: GetFreeChair(Person, Furniture)
  nameWithType: Action.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChairs*
  commentId: Overload:TinyLife.Actions.Action.GetFreeChairs
  name: GetFreeChairs
  nameWithType: Action.GetFreeChairs
  fullName: TinyLife.Actions.Action.GetFreeChairs
- uid: System.Func{MLEM.Misc.Direction2,System.Boolean}
  commentId: T:System.Func{MLEM.Misc.Direction2,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Direction2, bool>
  nameWithType: Func<Direction2, bool>
  fullName: System.Func<MLEM.Misc.Direction2, bool>
  nameWithType.vb: Func(Of Direction2, Boolean)
  fullName.vb: System.Func(Of MLEM.Misc.Direction2, Boolean)
  name.vb: Func(Of Direction2, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)>
  nameWithType: IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.Objects.Furniture Chair, TinyLife.Objects.ActionSpot Spot, MLEM.Misc.Direction2 Direction)>
  nameWithType.vb: IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Chair As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ActionSpot, Direction As MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (Chair As Furniture, Spot As ActionSpot, Direction As Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.chair
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.direction
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Chair
    name: Chair
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.chair
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.actionspot,mlem.misc.direction2-.direction
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.ObjectCategory.BabySittable
  commentId: F:TinyLife.Objects.ObjectCategory.BabySittable
  name: BabySittable
  nameWithType: ObjectCategory.BabySittable
  fullName: TinyLife.Objects.ObjectCategory.BabySittable
- uid: TinyLife.Actions.Action.GetSeatCategory*
  commentId: Overload:TinyLife.Actions.Action.GetSeatCategory
  name: GetSeatCategory
  nameWithType: Action.GetSeatCategory
  fullName: TinyLife.Actions.Action.GetSeatCategory
- uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  name: IsLotVisible(Lot)
  nameWithType: GameImpl.IsLotVisible(Lot)
  fullName: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
  spec.csharp:
  - uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
    name: IsLotVisible
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  spec.vb:
  - uid: TinyLife.GameImpl.IsLotVisible(TinyLife.World.Lot)
    name: IsLotVisible
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreePeople*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreePeople
  name: FindAllFreePeople
  nameWithType: Action.FindAllFreePeople
  fullName: TinyLife.Actions.Action.FindAllFreePeople
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: Microsoft.Xna.Framework.Vector2?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Objects.BreakableFurniture.Broken
  commentId: F:TinyLife.Objects.BreakableFurniture.Broken
  parent: TinyLife.Objects.BreakableFurniture
  name: Broken
  nameWithType: BreakableFurniture.Broken
  fullName: TinyLife.Objects.BreakableFurniture.Broken
- uid: TinyLife.Actions.Action.FindAllFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeFurniture
  name: FindAllFreeFurniture
  nameWithType: Action.FindAllFreeFurniture
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Actions.Action.FindAllFreeWalls*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeWalls
  name: FindAllFreeWalls
  nameWithType: Action.FindAllFreeWalls
  fullName: TinyLife.Actions.Action.FindAllFreeWalls
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Wall>
  nameWithType: IEnumerable<Wall>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Wall>
  nameWithType.vb: IEnumerable(Of Wall)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Wall)
  name.vb: IEnumerable(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Wall
    name: Wall
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Wall
    name: Wall
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeGround*
  commentId: Overload:TinyLife.Actions.Action.FindAllFreeGround
  name: FindAllFreeGround
  nameWithType: Action.FindAllFreeGround
  fullName: TinyLife.Actions.Action.FindAllFreeGround
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, bool, Microsoft.Xna.Framework.Vector2?, float?, bool, bool)
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Boolean, Microsoft.Xna.Framework.Vector2?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindFreeFurniture*
  commentId: Overload:TinyLife.Actions.Action.FindFreeFurniture
  name: FindFreeFurniture
  nameWithType: Action.FindFreeFurniture
  fullName: TinyLife.Actions.Action.FindFreeFurniture
- uid: TinyLife.Actions.Action.FindAllActionObjects*
  commentId: Overload:TinyLife.Actions.Action.FindAllActionObjects
  name: FindAllActionObjects
  nameWithType: Action.FindAllActionObjects
  fullName: TinyLife.Actions.Action.FindAllActionObjects
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ActionInfo>
  nameWithType: IEnumerable<ActionInfo>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionInfo>
  nameWithType.vb: IEnumerable(Of ActionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionInfo)
  name.vb: IEnumerable(Of ActionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: )
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: CanExecute(ActionInfo, bool)
  nameWithType: ActionType.CanExecute(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionType.CanExecute(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: CanExecute(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecute
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanExecute
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
  name: IsInappropriateElsewhere
  nameWithType: ActionType.TypeSettings.IsInappropriateElsewhere
  fullName: TinyLife.Actions.ActionType.TypeSettings.IsInappropriateElsewhere
- uid: TinyLife.Actions.Action.FindValidActionObjects*
  commentId: Overload:TinyLife.Actions.Action.FindValidActionObjects
  name: FindValidActionObjects
  nameWithType: Action.FindValidActionObjects
  fullName: TinyLife.Actions.Action.FindValidActionObjects
- uid: TinyLife.Actions.ActionType.TypeSettings.Varieties
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.Varieties
  name: Varieties
  nameWithType: ActionType.TypeSettings.Varieties
  fullName: TinyLife.Actions.ActionType.TypeSettings.Varieties
- uid: TinyLife.Actions.Action.TryGetRandomValidVariety*
  commentId: Overload:TinyLife.Actions.Action.TryGetRandomValidVariety
  name: TryGetRandomValidVariety
  nameWithType: Action.TryGetRandomValidVariety
  fullName: TinyLife.Actions.Action.TryGetRandomValidVariety
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  parent: TinyLife.Actions
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
- uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  name: GetPassivePriority(Person)
  nameWithType: ActionVariety.GetPassivePriority(Person)
  fullName: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
    name: GetPassivePriority
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
    name: GetPassivePriority
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: CanBeExecuted(ActionInfo, bool)
  nameWithType: ActionVariety.CanBeExecuted(ActionInfo, bool)
  fullName: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo, bool)
  nameWithType.vb: ActionVariety.CanBeExecuted(ActionInfo, Boolean)
  fullName.vb: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo, Boolean)
  name.vb: CanBeExecuted(ActionInfo, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanBeExecuted
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
    name: CanBeExecuted
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetRandomValidVariety*
  commentId: Overload:TinyLife.Actions.Action.GetRandomValidVariety
  name: GetRandomValidVariety
  nameWithType: Action.GetRandomValidVariety
  fullName: TinyLife.Actions.Action.GetRandomValidVariety
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: )
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Actions.Action.GetTableSpot*
  commentId: Overload:TinyLife.Actions.Action.GetTableSpot
  name: GetTableSpot
  nameWithType: Action.GetTableSpot
  fullName: TinyLife.Actions.Action.GetTableSpot
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.table
  name: (Furniture Table, ObjectSpot Spot)
  nameWithType: (Furniture Table, ObjectSpot Spot)
  fullName: (TinyLife.Objects.Furniture Table, TinyLife.Objects.ObjectSpot Spot)
  nameWithType.vb: (Table As Furniture, Spot As ObjectSpot)
  fullName.vb: (Table As TinyLife.Objects.Furniture, Spot As TinyLife.Objects.ObjectSpot)
  name.vb: (Table As Furniture, Spot As ObjectSpot)
  spec.csharp:
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Table
    name: Table
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.table
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.spot
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Table
    name: Table
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.table
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.furniture,tinylife.objects.objectspot-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Actions.Action.InvokeForBoth*
  commentId: Overload:TinyLife.Actions.Action.InvokeForBoth
  name: InvokeForBoth
  nameWithType: Action.InvokeForBoth
  fullName: TinyLife.Actions.Action.InvokeForBoth
- uid: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<Person, Person>
  nameWithType: Action<Person, Person>
  fullName: System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>
  nameWithType.vb: Action(Of Person, Person)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person)
  name.vb: Action(Of Person, Person)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )

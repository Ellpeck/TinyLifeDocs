### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  id: ActionVariety
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionVariety.#ctor(System.Object)
  - TinyLife.Actions.ActionVariety.#ctor(System.String,System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}})
  - TinyLife.Actions.ActionVariety.#ctor(System.String,System.Object[])
  - TinyLife.Actions.ActionVariety.AddedConstructorArguments
  - TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  - TinyLife.Actions.ActionVariety.CanExecute
  - TinyLife.Actions.ActionVariety.CustomLayout
  - TinyLife.Actions.ActionVariety.Description
  - TinyLife.Actions.ActionVariety.DisplayName
  - TinyLife.Actions.ActionVariety.FreePeople(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult})
  - TinyLife.Actions.ActionVariety.GetDisplayName
  - TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  - TinyLife.Actions.ActionVariety.ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  - TinyLife.Actions.ActionVariety.Name
  - TinyLife.Actions.ActionVariety.PassivePriority
  - TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  - TinyLife.Actions.ActionVariety.StoredFurniture(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture},System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult})
  langs:
  - csharp
  - vb
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
  type: Class
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionVariety
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action variety is a modification to a <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> that represents a slightly changed version of the generic action type.\nAction varieties are used, for example, by <xref href=\"TinyLife.Actions.ActionType.PrepareFood\" data-throw-if-not-resolved=\"false\"></xref> to determine the kind of food that should be prepared.\n"
  example: []
  syntax:
    content: 'public class ActionVariety : GenericDataHolder, IGenericDataHolder'
    content.vb: >-
      Public Class ActionVariety
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.ActionVariety.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.ActionVariety.Name
  commentId: F:TinyLife.Actions.ActionVariety.Name
  id: Name
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ActionVariety.Name
  fullName: TinyLife.Actions.ActionVariety.Name
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe name of this action variety\n"
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.AddedConstructorArguments
  commentId: F:TinyLife.Actions.ActionVariety.AddedConstructorArguments
  id: AddedConstructorArguments
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: AddedConstructorArguments
  nameWithType: ActionVariety.AddedConstructorArguments
  fullName: TinyLife.Actions.ActionVariety.AddedConstructorArguments
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddedConstructorArguments
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA set of additional arguments passed to the <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> contructor by this variety.\nThis is used in <xref href=\"TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo%2cTinyLife.Actions.ActionVariety)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<ActionType, ActionInfo, IEnumerable<object>> AddedConstructorArguments
    return:
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
    content.vb: Public AddedConstructorArguments As Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.PassivePriority
  commentId: F:TinyLife.Actions.ActionVariety.PassivePriority
  id: PassivePriority
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: PassivePriority
  nameWithType: ActionVariety.PassivePriority
  fullName: TinyLife.Actions.ActionVariety.PassivePriority
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PassivePriority
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that returns the passive priority of this action variety.\nIf this function is null or returns 0, <xref href=\"TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> will also return 0, which causes this variety not to be chosen by the AI.\nThis is an extension of <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Func<Person, float> PassivePriority
    return:
      type: System.Func{TinyLife.Objects.Person,System.Single}
    content.vb: Public PassivePriority As Func(Of Person, Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.CanExecute
  commentId: F:TinyLife.Actions.ActionVariety.CanExecute
  id: CanExecute
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: ActionVariety.CanExecute
  fullName: TinyLife.Actions.ActionVariety.CanExecute
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecute
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that returns whether or not this action variety can currently be chosen.\nThis is an extension of <xref href=\"TinyLife.Actions.ActionType.TypeSettings.CanExecute\" data-throw-if-not-resolved=\"false\"></xref>.\nTo query this delegate effectively, use <xref href=\"TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.DisplayName
  commentId: F:TinyLife.Actions.ActionVariety.DisplayName
  id: DisplayName
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: ActionVariety.DisplayName
  fullName: TinyLife.Actions.ActionVariety.DisplayName
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that is called to describe this action variety.\nThis is used in the menu that pops up when the underlying <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> is picked.\n"
  example: []
  syntax:
    content: public Func<string> DisplayName
    return:
      type: System.Func{System.String}
    content.vb: Public DisplayName As Func(Of String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.Description
  commentId: F:TinyLife.Actions.ActionVariety.Description
  id: Description
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ActionVariety.Description
  fullName: TinyLife.Actions.ActionVariety.Description
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Description
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA function that is called to describe this action variety in more detail.\nThis is used in the menu that pops up when the underlying <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> is picked.\n"
  example: []
  syntax:
    content: public Func<string> Description
    return:
      type: System.Func{System.String}
    content.vb: Public Description As Func(Of String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.CustomLayout
  commentId: F:TinyLife.Actions.ActionVariety.CustomLayout
  id: CustomLayout
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: CustomLayout
  nameWithType: ActionVariety.CustomLayout
  fullName: TinyLife.Actions.ActionVariety.CustomLayout
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CustomLayout
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn action that is invoked when this action variety is added to a play mode ui.\nIf this action is set, the <xref href=\"MLEM.Ui.Elements.Button\" data-throw-if-not-resolved=\"false\"></xref> that is passed can be modified to look different based on this variety.\nPredefined custom layouts such as <xref href=\"TinyLife.Actions.ActionVariety.ImageLayout(System.Single%2cMLEM.Ui.Elements.Element.DrawCallback%2cMLEM.Misc.Padding)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> can be found statically in this class.\n"
  example: []
  syntax:
    content: public Action<Button> CustomLayout
    return:
      type: System.Action{MLEM.Ui.Elements.Button}
    content.vb: Public CustomLayout As Action(Of Button)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.#ctor(System.String,System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}})
  commentId: M:TinyLife.Actions.ActionVariety.#ctor(System.String,System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}})
  id: '#ctor(System.String,System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}})'
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: ActionVariety(String, Func<ActionType, ActionInfo, IEnumerable<Object>>)
  nameWithType: ActionVariety.ActionVariety(String, Func<ActionType, ActionInfo, IEnumerable<Object>>)
  fullName: TinyLife.Actions.ActionVariety.ActionVariety(System.String, System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable<System.Object>>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action variety with the given settings.\n"
  example: []
  syntax:
    content: public ActionVariety(string name, Func<ActionType, ActionInfo, IEnumerable<object>> addedConstructorArguments)
    parameters:
    - id: name
      type: System.String
      description: The name of this action variety.
    - id: addedConstructorArguments
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
      description: A set of added constructor arugments that are passed to the <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(name As String, addedConstructorArguments As Func(Of ActionType, ActionInfo, IEnumerable(Of Object)))
  overload: TinyLife.Actions.ActionVariety.#ctor*
  nameWithType.vb: ActionVariety.ActionVariety(String, Func(Of ActionType, ActionInfo, IEnumerable(Of Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionVariety.ActionVariety(System.String, System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable(Of System.Object)))
  name.vb: ActionVariety(String, Func(Of ActionType, ActionInfo, IEnumerable(Of Object)))
- uid: TinyLife.Actions.ActionVariety.#ctor(System.String,System.Object[])
  commentId: M:TinyLife.Actions.ActionVariety.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: ActionVariety(String, Object[])
  nameWithType: ActionVariety.ActionVariety(String, Object[])
  fullName: TinyLife.Actions.ActionVariety.ActionVariety(System.String, System.Object[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action variety with the given settings.\n"
  example: []
  syntax:
    content: public ActionVariety(string name, params object[] addedConstructorArguments)
    parameters:
    - id: name
      type: System.String
      description: The name of this action variety.
    - id: addedConstructorArguments
      type: System.Object[]
      description: A set of added constructor arugments that are passed to the <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(name As String, ParamArray addedConstructorArguments As Object())
  overload: TinyLife.Actions.ActionVariety.#ctor*
  nameWithType.vb: ActionVariety.ActionVariety(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.ActionVariety.ActionVariety(System.String, System.Object())
  name.vb: ActionVariety(String, Object())
- uid: TinyLife.Actions.ActionVariety.#ctor(System.Object)
  commentId: M:TinyLife.Actions.ActionVariety.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: ActionVariety(Object)
  nameWithType: ActionVariety.ActionVariety(Object)
  fullName: TinyLife.Actions.ActionVariety.ActionVariety(System.Object)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action variety with the given settings.\n"
  example: []
  syntax:
    content: public ActionVariety(object addedConstructorArgument)
    parameters:
    - id: addedConstructorArgument
      type: System.Object
      description: An added constructor arugment that is passed to the <xref href="TinyLife.Actions.Action" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(addedConstructorArgument As Object)
  overload: TinyLife.Actions.ActionVariety.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.GetDisplayName
  commentId: M:TinyLife.Actions.ActionVariety.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: ActionVariety.GetDisplayName()
  fullName: TinyLife.Actions.ActionVariety.GetDisplayName()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayName
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the display name of this action varietiy, which is either the value returned by <xref href=\"TinyLife.Actions.ActionVariety.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> or a default localized display name\n"
  example: []
  syntax:
    content: public string GetDisplayName()
    return:
      type: System.String
      description: This action variety&apos;s display name
    content.vb: Public Function GetDisplayName As String
  overload: TinyLife.Actions.ActionVariety.GetDisplayName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  id: CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: CanBeExecuted(ActionInfo, Boolean)
  nameWithType: ActionVariety.CanBeExecuted(ActionInfo, Boolean)
  fullName: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanBeExecuted
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 94
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether this action variety can be executed using the provided <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nThis returns the result of <xref href=\"TinyLife.Actions.ActionVariety.CanExecute\" data-throw-if-not-resolved=\"false\"></xref>, or <see cref=\"!:CanExecuteResult.Valid\"></see> if it is null.\n"
  example: []
  syntax:
    content: public CanExecuteResult CanBeExecuted(ActionInfo info, bool automatic)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: automatic
      type: System.Boolean
      description: Whether the action is automatic
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: Whether this variety can currently be executed
    content.vb: Public Function CanBeExecuted(info As ActionInfo, automatic As Boolean) As CanExecuteResult
  overload: TinyLife.Actions.ActionVariety.CanBeExecuted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  id: GetPassivePriority(TinyLife.Objects.Person)
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: GetPassivePriority(Person)
  nameWithType: ActionVariety.GetPassivePriority(Person)
  fullName: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPassivePriority
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 110
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the passive priority of this action variety, which is based on <xref href=\"TinyLife.Actions.ActionVariety.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public float GetPassivePriority(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person for whom to return the passive priority
    return:
      type: System.Single
      description: The passive priority of this action variety
    content.vb: Public Function GetPassivePriority(person As Person) As Single
  overload: TinyLife.Actions.ActionVariety.GetPassivePriority*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.ActionVariety.FreePeople(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Actions.ActionVariety.FreePeople(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult})
  id: FreePeople(TinyLife.Actions.ActionInfo,System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult})
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: FreePeople(ActionInfo, Func<(ActionInfo Info, Person Other, Boolean Automatic), CanExecuteResult>)
  nameWithType: ActionVariety.FreePeople(ActionInfo, Func<(ActionInfo Info, Person Other, Boolean Automatic), CanExecuteResult>)
  fullName: TinyLife.Actions.ActionVariety.FreePeople(TinyLife.Actions.ActionInfo, System.Func<System.ValueTuple<TinyLife.Actions.ActionInfo, TinyLife.Objects.Person, System.Boolean>, TinyLife.Actions.CanExecuteResult>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FreePeople
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns a set of <xref href=\"TinyLife.Actions.ActionVariety\" data-throw-if-not-resolved=\"false\"></xref> instances that represents a set of people that are currently around and able to be interacted with.\nEach action variety contains passes the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instance in question as an <xref href=\"TinyLife.Actions.ActionVariety.AddedConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> rather than passing itself.\nThis method is used for actions like <xref href=\"TinyLife.Actions.ActionType.AskToTaste\" data-throw-if-not-resolved=\"false\"></xref>, where a person can be selected to interact with from a variety menu.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionVariety> FreePeople(ActionInfo info, Func<(ActionInfo Info, Person Other, bool Automatic), CanExecuteResult> canExecute = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: canExecute
      type: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult}
      description: A <xref href="TinyLife.Actions.ActionType.CanExecuteDelegate" data-throw-if-not-resolved="false"></xref>-esque function that determines whether a given person should be included.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: A set of action varieties that represents the free people around.
    content.vb: Public Shared Function FreePeople(info As ActionInfo, canExecute As Func(Of(Info As ActionInfo, Other As Person, Automatic As Boolean)(Of ActionInfo , Person, Boolean), CanExecuteResult) = Nothing) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Actions.ActionVariety.FreePeople*
  nameWithType.vb: ActionVariety.FreePeople(ActionInfo, Func(Of (Info As ActionInfo, Other As Person, Automatic As Boolean)(Of ActionInfo, Person, Boolean), CanExecuteResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionVariety.FreePeople(TinyLife.Actions.ActionInfo, System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionInfo, TinyLife.Objects.Person, System.Boolean), TinyLife.Actions.CanExecuteResult))
  name.vb: FreePeople(ActionInfo, Func(Of (Info As ActionInfo, Other As Person, Automatic As Boolean)(Of ActionInfo, Person, Boolean), CanExecuteResult))
- uid: TinyLife.Actions.ActionVariety.StoredFurniture(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture},System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Actions.ActionVariety.StoredFurniture(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture},System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult})
  id: StoredFurniture(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture},System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult})
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: StoredFurniture(IEnumerable<Furniture>, Func<(ActionInfo Info, Furniture Furniture, Boolean Automatic), CanExecuteResult>)
  nameWithType: ActionVariety.StoredFurniture(IEnumerable<Furniture>, Func<(ActionInfo Info, Furniture Furniture, Boolean Automatic), CanExecuteResult>)
  fullName: TinyLife.Actions.ActionVariety.StoredFurniture(System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>, System.Func<System.ValueTuple<TinyLife.Actions.ActionInfo, TinyLife.Objects.Furniture, System.Boolean>, TinyLife.Actions.CanExecuteResult>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StoredFurniture
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 140
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method that returns a set of <xref href=\"TinyLife.Actions.ActionVariety\" data-throw-if-not-resolved=\"false\"></xref> instances that represents a set of furniture that is currently stored in an object.\nEach action variety contains passes the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance in question as an <xref href=\"TinyLife.Actions.ActionVariety.AddedConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> rather than passing itself.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionVariety> StoredFurniture(IEnumerable<Furniture> furniture, Func<(ActionInfo Info, Furniture Furniture, bool Automatic), CanExecuteResult> canExecute = null)
    parameters:
    - id: furniture
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: The furniture stored. If this is null, <xref href="System.Linq.Enumerable.Empty%60%601" data-throw-if-not-resolved="false"></xref> is returned.
    - id: canExecute
      type: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult}
      description: A <xref href="TinyLife.Actions.ActionType.CanExecuteDelegate" data-throw-if-not-resolved="false"></xref>-esque function that determines whether a furniture item should be included.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: A set of action varieties that represents the furniture stored in an object.
    content.vb: Public Shared Function StoredFurniture(furniture As IEnumerable(Of Furniture), canExecute As Func(Of(Info As ActionInfo, Furniture As Furniture, Automatic As Boolean)(Of ActionInfo , Furniture, Boolean), CanExecuteResult) = Nothing) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Actions.ActionVariety.StoredFurniture*
  nameWithType.vb: ActionVariety.StoredFurniture(IEnumerable(Of Furniture), Func(Of (Info As ActionInfo, Furniture As Furniture, Automatic As Boolean)(Of ActionInfo, Furniture, Boolean), CanExecuteResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.ActionVariety.StoredFurniture(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture), System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionInfo, TinyLife.Objects.Furniture, System.Boolean), TinyLife.Actions.CanExecuteResult))
  name.vb: StoredFurniture(IEnumerable(Of Furniture), Func(Of (Info As ActionInfo, Furniture As Furniture, Automatic As Boolean)(Of ActionInfo, Furniture, Boolean), CanExecuteResult))
- uid: TinyLife.Actions.ActionVariety.ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  commentId: M:TinyLife.Actions.ActionVariety.ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  id: ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: ImageLayout(Single, Element.DrawCallback, Padding)
  nameWithType: ActionVariety.ImageLayout(Single, Element.DrawCallback, Padding)
  fullName: TinyLife.Actions.ActionVariety.ImageLayout(System.Single, MLEM.Ui.Elements.Element.DrawCallback, MLEM.Misc.Padding)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ImageLayout
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 156
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionVariety.CustomLayout\" data-throw-if-not-resolved=\"false\"></xref> that creates a layout with large, rectangular variety buttons that can draw something on themselves.\nThis layout is used by actions like <xref href=\"TinyLife.Actions.ActionType.GetIngredientsSingle\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.ChangeOutfit\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Action<Button> ImageLayout(float height, Element.DrawCallback draw, Padding padding = default(Padding))
    parameters:
    - id: height
      type: System.Single
      description: The height that each button should have
    - id: draw
      type: MLEM.Ui.Elements.Element.DrawCallback
      description: A <xref href="MLEM.Ui.Elements.Element.DrawCallback" data-throw-if-not-resolved="false"></xref> that can be used to draw onto the button
    - id: padding
      type: MLEM.Misc.Padding
      description: The padding that the group that the image is displayed on should have, defaults to no padding
    return:
      type: System.Action{MLEM.Ui.Elements.Button}
      description: An action that can be fed into <xref href="TinyLife.Actions.ActionVariety.CustomLayout" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function ImageLayout(height As Single, draw As Element.DrawCallback, padding As Padding = Nothing) As Action(Of Button)
  overload: TinyLife.Actions.ActionVariety.ImageLayout*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  id: PortraitLayout(TinyLife.Objects.Person)
  parent: TinyLife.Actions.ActionVariety
  langs:
  - csharp
  - vb
  name: PortraitLayout(Person)
  nameWithType: ActionVariety.PortraitLayout(Person)
  fullName: TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ActionVariety.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PortraitLayout
    path: ../TinyLife/Actions/ActionVariety.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.ActionVariety.CustomLayout\" data-throw-if-not-resolved=\"false\"></xref> that creates a layout that includes the <xref href=\"TinyLife.Objects.Person.Portrait\" data-throw-if-not-resolved=\"false\"></xref> of the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in the center bottom.\n"
  example: []
  syntax:
    content: public static Action<Button> PortraitLayout(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to create the portrait layout for
    return:
      type: System.Action{MLEM.Ui.Elements.Button}
      description: An action that can be fed into <xref href="TinyLife.Actions.ActionVariety.CustomLayout" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function PortraitLayout(person As Person) As Action(Of Button)
  overload: TinyLife.Actions.ActionVariety.PortraitLayout*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionType.PrepareFood
  commentId: F:TinyLife.Actions.ActionType.PrepareFood
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Misc.GenericDataHolder
  definition: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  name: SetData<T>(String, T)
  nameWithType: GenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: GenericDataHolder.SetData<T>
    fullName: MLEM.Misc.GenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: GenericDataHolder.SetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionVariety>()
  nameWithType: Extensions.JsonCopy<ActionVariety>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionVariety>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionVariety)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionVariety)()
  name.vb: JsonCopy(Of ActionVariety)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionVariety>
    nameWithType: Extensions.JsonCopy<ActionVariety>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionVariety>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionVariety)
    nameWithType: Extensions.JsonCopy(Of ActionVariety)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionVariety)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  name: SetData<T>(String, T)
  nameWithType: GenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: GenericDataHolder.SetData<T>
    fullName: MLEM.Misc.GenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: GenericDataHolder.SetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety)
  commentId: M:TinyLife.Actions.ActionType.Construct(TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety)
  isExternal: true
- uid: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  commentId: T:System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Collections.Generic.IEnumerable{System.Object}}
  parent: System
  definition: System.Func`3
  name: Func<ActionType, ActionInfo, IEnumerable<Object>>
  nameWithType: Func<ActionType, ActionInfo, IEnumerable<Object>>
  fullName: System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable<System.Object>>
  nameWithType.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: Func(Of ActionType, ActionInfo, IEnumerable(Of Object))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.GetPassivePriority(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  isExternal: true
- uid: System.Func{TinyLife.Objects.Person,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<Person, Single>
  nameWithType: Func<Person, Single>
  fullName: System.Func<TinyLife.Objects.Person, System.Single>
  nameWithType.vb: Func(Of Person, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, System.Single)
  name.vb: Func(Of Person, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionVariety.CanBeExecuted(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullName.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.Button
  commentId: T:MLEM.Ui.Elements.Button
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Button
  nameWithType: Button
  fullName: MLEM.Ui.Elements.Button
- uid: TinyLife.Actions.ActionVariety.ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  commentId: M:TinyLife.Actions.ActionVariety.ImageLayout(System.Single,MLEM.Ui.Elements.Element.DrawCallback,MLEM.Misc.Padding)
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionVariety.PortraitLayout(TinyLife.Objects.Person)
  isExternal: true
- uid: System.Action{MLEM.Ui.Elements.Button}
  commentId: T:System.Action{MLEM.Ui.Elements.Button}
  parent: System
  definition: System.Action`1
  name: Action<Button>
  nameWithType: Action<Button>
  fullName: System.Action<MLEM.Ui.Elements.Button>
  nameWithType.vb: Action(Of Button)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Button)
  name.vb: Action(Of Button)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Button
    name: Button
    nameWithType: Button
    fullName: MLEM.Ui.Elements.Button
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Button
    name: Button
    nameWithType: Button
    fullName: MLEM.Ui.Elements.Button
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety.#ctor*
  commentId: Overload:TinyLife.Actions.ActionVariety.#ctor
  name: ActionVariety
  nameWithType: ActionVariety.ActionVariety
  fullName: TinyLife.Actions.ActionVariety.ActionVariety
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Actions.ActionVariety.DisplayName
  commentId: F:TinyLife.Actions.ActionVariety.DisplayName
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.GetDisplayName*
  commentId: Overload:TinyLife.Actions.ActionVariety.GetDisplayName
  name: GetDisplayName
  nameWithType: ActionVariety.GetDisplayName
  fullName: TinyLife.Actions.ActionVariety.GetDisplayName
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionVariety.CanExecute
  commentId: F:TinyLife.Actions.ActionVariety.CanExecute
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.CanBeExecuted*
  commentId: Overload:TinyLife.Actions.ActionVariety.CanBeExecuted
  name: CanBeExecuted
  nameWithType: ActionVariety.CanBeExecuted
  fullName: TinyLife.Actions.ActionVariety.CanBeExecuted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Actions.ActionVariety.PassivePriority
  commentId: F:TinyLife.Actions.ActionVariety.PassivePriority
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.GetPassivePriority*
  commentId: Overload:TinyLife.Actions.ActionVariety.GetPassivePriority
  name: GetPassivePriority
  nameWithType: ActionVariety.GetPassivePriority
  fullName: TinyLife.Actions.ActionVariety.GetPassivePriority
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  parent: TinyLife.Actions
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
- uid: TinyLife.Actions.ActionVariety.AddedConstructorArguments
  commentId: F:TinyLife.Actions.ActionVariety.AddedConstructorArguments
  isExternal: true
- uid: TinyLife.Actions.ActionType.AskToTaste
  commentId: F:TinyLife.Actions.ActionType.AskToTaste
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.FreePeople*
  commentId: Overload:TinyLife.Actions.ActionVariety.FreePeople
  name: FreePeople
  nameWithType: ActionVariety.FreePeople
  fullName: TinyLife.Actions.ActionVariety.FreePeople
- uid: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Person,System.Boolean},TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2, T3)<ActionInfo, Person, Boolean>, CanExecuteResult>
  nameWithType: Func<(T1, T2, T3)<ActionInfo, Person, Boolean>, CanExecuteResult>
  fullName: System.Func<System.ValueTuple<TinyLife.Actions.ActionInfo, TinyLife.Objects.Person, System.Boolean>, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of (T1, T2, T3)(Of ActionInfo, Person, Boolean), CanExecuteResult)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionInfo, TinyLife.Objects.Person, System.Boolean), TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of (T1, T2, T3)(Of ActionInfo, Person, Boolean), CanExecuteResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.Linq.Enumerable.Empty``1
  commentId: M:System.Linq.Enumerable.Empty``1
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.StoredFurniture*
  commentId: Overload:TinyLife.Actions.ActionVariety.StoredFurniture
  name: StoredFurniture
  nameWithType: ActionVariety.StoredFurniture
  fullName: TinyLife.Actions.ActionVariety.StoredFurniture
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,TinyLife.Objects.Furniture,System.Boolean},TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2, T3)<ActionInfo, Furniture, Boolean>, CanExecuteResult>
  nameWithType: Func<(T1, T2, T3)<ActionInfo, Furniture, Boolean>, CanExecuteResult>
  fullName: System.Func<System.ValueTuple<TinyLife.Actions.ActionInfo, TinyLife.Objects.Furniture, System.Boolean>, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of (T1, T2, T3)(Of ActionInfo, Furniture, Boolean), CanExecuteResult)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionInfo, TinyLife.Objects.Furniture, System.Boolean), TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of (T1, T2, T3)(Of ActionInfo, Furniture, Boolean), CanExecuteResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety.CustomLayout
  commentId: F:TinyLife.Actions.ActionVariety.CustomLayout
  isExternal: true
- uid: TinyLife.Actions.ActionType.GetIngredientsSingle
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsSingle
  isExternal: true
- uid: TinyLife.Actions.ActionType.ChangeOutfit
  commentId: F:TinyLife.Actions.ActionType.ChangeOutfit
  isExternal: true
- uid: MLEM.Ui.Elements.Element.DrawCallback
  commentId: T:MLEM.Ui.Elements.Element.DrawCallback
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element.DrawCallback
  nameWithType: Element.DrawCallback
  fullName: MLEM.Ui.Elements.Element.DrawCallback
- uid: TinyLife.Actions.ActionVariety.ImageLayout*
  commentId: Overload:TinyLife.Actions.ActionVariety.ImageLayout
  name: ImageLayout
  nameWithType: ActionVariety.ImageLayout
  fullName: TinyLife.Actions.ActionVariety.ImageLayout
- uid: MLEM.Misc.Padding
  commentId: T:MLEM.Misc.Padding
  parent: MLEM.Misc
  isExternal: true
  name: Padding
  nameWithType: Padding
  fullName: MLEM.Misc.Padding
- uid: TinyLife.Objects.Person.Portrait
  commentId: F:TinyLife.Objects.Person.Portrait
  isExternal: true
- uid: TinyLife.Actions.ActionVariety.PortraitLayout*
  commentId: Overload:TinyLife.Actions.ActionVariety.PortraitLayout
  name: PortraitLayout
  nameWithType: ActionVariety.PortraitLayout
  fullName: TinyLife.Actions.ActionVariety.PortraitLayout

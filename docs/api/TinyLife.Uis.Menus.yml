### YamlMime:ManagedReference
items:
- uid: TinyLife.Uis.Menus
  commentId: T:TinyLife.Uis.Menus
  id: Menus
  parent: TinyLife.Uis
  children:
  - TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Buttons},Vector2,System.Nullable{Vector2},System.Func{System.Boolean})
  - TinyLife.Uis.Menus.Transition(System.Action,System.Action,TinyLife.Uis.Menus.TransitionType,TinyLife.Uis.Menus.TransitionType,System.Single,System.Single,System.Single,System.Nullable{Color})
  langs:
  - csharp
  - vb
  name: Menus
  nameWithType: Menus
  fullName: TinyLife.Uis.Menus
  type: Class
  source:
    remote:
      path: TinyLife/Uis/Menus.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Menus
    path: ../TinyLife/Uis/Menus.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nA set of static methods to deal with <xref href=\"MLEM.Ui\" data-throw-if-not-resolved=\"false\"></xref> and in-game menus\n"
  example: []
  syntax:
    content: public static class Menus
    content.vb: Public Module Menus
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.Uis.Menus.Transition(System.Action,System.Action,TinyLife.Uis.Menus.TransitionType,TinyLife.Uis.Menus.TransitionType,System.Single,System.Single,System.Single,System.Nullable{Color})
  commentId: M:TinyLife.Uis.Menus.Transition(System.Action,System.Action,TinyLife.Uis.Menus.TransitionType,TinyLife.Uis.Menus.TransitionType,System.Single,System.Single,System.Single,System.Nullable{Color})
  id: Transition(System.Action,System.Action,TinyLife.Uis.Menus.TransitionType,TinyLife.Uis.Menus.TransitionType,System.Single,System.Single,System.Single,System.Nullable{Color})
  parent: TinyLife.Uis.Menus
  langs:
  - csharp
  - vb
  name: Transition(Action, Action, Menus.TransitionType, Menus.TransitionType, Single, Single, Single, Nullable<Color>)
  nameWithType: Menus.Transition(Action, Action, Menus.TransitionType, Menus.TransitionType, Single, Single, Single, Nullable<Color>)
  fullName: TinyLife.Uis.Menus.Transition(System.Action, System.Action, TinyLife.Uis.Menus.TransitionType, TinyLife.Uis.Menus.TransitionType, System.Single, System.Single, System.Single, System.Nullable<Color>)
  type: Method
  source:
    remote:
      path: TinyLife/Uis/Menus.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Transition
    path: ../TinyLife/Uis/Menus.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nDisplays a screen transition that includes a fade out, an <code data-dev-comment-type=\"paramref\" class=\"paramref\">inbetween</code> action, followed by a fade back in and an <code data-dev-comment-type=\"paramref\" class=\"paramref\">after</code> action.\n"
  example: []
  syntax:
    content: public static void Transition(Action inbetween = null, Action after = null, Menus.TransitionType outType = Menus.TransitionType.Swipe, Menus.TransitionType inType = Menus.TransitionType.Swipe, float outSpeed = 0.05F, float inSpeed = 0.05F, float waitInbetween = 0.15F, Color? color = null)
    parameters:
    - id: inbetween
      type: System.Action
      description: The action that is invoked while the screen is faded out, or null to invoke no action.
    - id: after
      type: System.Action
      description: The action that is invoked after the full fade routine completes, or null to invoke no action.
    - id: outType
      type: TinyLife.Uis.Menus.TransitionType
      description: The <xref href="TinyLife.Uis.Menus.TransitionType" data-throw-if-not-resolved="false"></xref> used for fading out.
    - id: inType
      type: TinyLife.Uis.Menus.TransitionType
      description: The <xref href="TinyLife.Uis.Menus.TransitionType" data-throw-if-not-resolved="false"></xref> used for fading in.
    - id: outSpeed
      type: System.Single
      description: The speed with which <code data-dev-comment-type="paramref" class="paramref">outType</code> is displayed per frame.
    - id: inSpeed
      type: System.Single
      description: The speed with which <code data-dev-comment-type="paramref" class="paramref">inType</code> is displayed per frame.
    - id: waitInbetween
      type: System.Single
      description: The amount of time to wait while the screen is faded out.
    - id: color
      type: System.Nullable{Color}
      description: The color that the fade should have, or null to use black.
    content.vb: Public Shared Sub Transition(inbetween As Action = Nothing, after As Action = Nothing, outType As Menus.TransitionType = Menus.TransitionType.Swipe, inType As Menus.TransitionType = Menus.TransitionType.Swipe, outSpeed As Single = 0.05F, inSpeed As Single = 0.05F, waitInbetween As Single = 0.15F, color As Color? = Nothing)
  overload: TinyLife.Uis.Menus.Transition*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when a fade is already happening when this method is called.
  nameWithType.vb: Menus.Transition(Action, Action, Menus.TransitionType, Menus.TransitionType, Single, Single, Single, Nullable(Of Color))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Uis.Menus.Transition(System.Action, System.Action, TinyLife.Uis.Menus.TransitionType, TinyLife.Uis.Menus.TransitionType, System.Single, System.Single, System.Single, System.Nullable(Of Color))
  name.vb: Transition(Action, Action, Menus.TransitionType, Menus.TransitionType, Single, Single, Single, Nullable(Of Color))
- uid: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Buttons},Vector2,System.Nullable{Vector2},System.Func{System.Boolean})
  commentId: M:TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Buttons},Vector2,System.Nullable{Vector2},System.Func{System.Boolean})
  id: GamepadHint(MLEM.Ui.Anchor,System.Func{TinyLife.Options,Buttons},Vector2,System.Nullable{Vector2},System.Func{System.Boolean})
  parent: TinyLife.Uis.Menus
  langs:
  - csharp
  - vb
  name: GamepadHint(Anchor, Func<Options, Buttons>, Vector2, Nullable<Vector2>, Func<Boolean>)
  nameWithType: Menus.GamepadHint(Anchor, Func<Options, Buttons>, Vector2, Nullable<Vector2>, Func<Boolean>)
  fullName: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor, System.Func<TinyLife.Options, Buttons>, Vector2, System.Nullable<Vector2>, System.Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: TinyLife/Uis/Menus.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GamepadHint
    path: ../TinyLife/Uis/Menus.cs
    startLine: 120
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nReturns a new image that displays information about what gamepad <see cref=\"!:Buttons\"></see> can be pressed to invoke an action.\nThis image is automatically hidden if gamepad controls are not currently being used, or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">shouldHide</code> returns true.\n"
  example: []
  syntax:
    content: public static Image GamepadHint(Anchor anchor, Func<Options, Buttons> button, Vector2 positionOffset = null, Vector2? size = null, Func<bool> shouldHide = null)
    parameters:
    - id: anchor
      type: MLEM.Ui.Anchor
      description: The anchor for the image.
    - id: button
      type: System.Func{TinyLife.Options,Buttons}
      description: A function that returns the button that should be displayed.
    - id: positionOffset
      type: Vector2
      description: The position offset for the image.
    - id: size
      type: System.Nullable{Vector2}
      description: The size of the image, or <xref uid="langword_csharp_null" name="null" href=""></xref> for the image to be 12 pixels big.
    - id: shouldHide
      type: System.Func{System.Boolean}
      description: A function that determines whether the hint should currently be hidden, or null to only hide it when gamepad controls are not currently being used.
    return:
      type: MLEM.Ui.Elements.Image
      description: The created gamepad hint image.
    content.vb: Public Shared Function GamepadHint(anchor As Anchor, button As Func(Of Options, Buttons), positionOffset As Vector2 = Nothing, size As Vector2? = Nothing, shouldHide As Func(Of Boolean) = Nothing) As Image
  overload: TinyLife.Uis.Menus.GamepadHint*
  nameWithType.vb: Menus.GamepadHint(Anchor, Func(Of Options, Buttons), Vector2, Nullable(Of Vector2), Func(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Uis.Menus.GamepadHint(MLEM.Ui.Anchor, System.Func(Of TinyLife.Options, Buttons), Vector2, System.Nullable(Of Vector2), System.Func(Of System.Boolean))
  name.vb: GamepadHint(Anchor, Func(Of Options, Buttons), Vector2, Nullable(Of Vector2), Func(Of Boolean))
references:
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  isExternal: true
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Uis.Menus.TransitionType
  commentId: T:TinyLife.Uis.Menus.TransitionType
  parent: TinyLife.Uis
  name: Menus.TransitionType
  nameWithType: Menus.TransitionType
  fullName: TinyLife.Uis.Menus.TransitionType
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: TinyLife.Uis.Menus.Transition*
  commentId: Overload:TinyLife.Uis.Menus.Transition
  name: Transition
  nameWithType: Menus.Transition
  fullName: TinyLife.Uis.Menus.Transition
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{Color}
  commentId: T:System.Nullable{Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.Menus.GamepadHint*
  commentId: Overload:TinyLife.Uis.Menus.GamepadHint
  name: GamepadHint
  nameWithType: Menus.GamepadHint
  fullName: TinyLife.Uis.Menus.GamepadHint
- uid: MLEM.Ui.Anchor
  commentId: T:MLEM.Ui.Anchor
  parent: MLEM.Ui
  isExternal: true
  name: Anchor
  nameWithType: Anchor
  fullName: MLEM.Ui.Anchor
- uid: System.Func{TinyLife.Options,Buttons}
  commentId: T:System.Func{TinyLife.Options,Buttons}
  parent: System
  definition: System.Func`2
  name: Func<Options, Buttons>
  nameWithType: Func<Options, Buttons>
  fullName: System.Func<TinyLife.Options, Buttons>
  nameWithType.vb: Func(Of Options, Buttons)
  fullName.vb: System.Func(Of TinyLife.Options, Buttons)
  name.vb: Func(Of Options, Buttons)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Options
    name: Options
    nameWithType: Options
    fullName: TinyLife.Options
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Buttons
    name: Buttons
    nameWithType: Buttons
    fullName: Buttons
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Options
    name: Options
    nameWithType: Options
    fullName: TinyLife.Options
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Buttons
    name: Buttons
    nameWithType: Buttons
    fullName: Buttons
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: System.Nullable{Vector2}
  commentId: T:System.Nullable{Vector2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Vector2>
  nameWithType: Nullable<Vector2>
  fullName: System.Nullable<Vector2>
  nameWithType.vb: Nullable(Of Vector2)
  fullName.vb: System.Nullable(Of Vector2)
  name.vb: Nullable(Of Vector2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.Image
  commentId: T:MLEM.Ui.Elements.Image
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Image
  nameWithType: Image
  fullName: MLEM.Ui.Elements.Image
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements

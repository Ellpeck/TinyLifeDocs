### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.IBehaviorAction`1
  commentId: T:TinyLife.Actions.IBehaviorAction`1
  id: IBehaviorAction`1
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.IBehaviorAction`1.Behavior
  langs:
  - csharp
  - vb
  name: IBehaviorAction<T>
  nameWithType: IBehaviorAction<T>
  fullName: TinyLife.Actions.IBehaviorAction<T>
  type: Interface
  source:
    remote:
      path: TinyLife/Actions/BehaviorAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IBehaviorAction
    path: ../TinyLife/Actions/BehaviorAction.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA behavior-based action is an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that invokes an underlying <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior\" data-throw-if-not-resolved=\"false\"></xref> in the appropriate places.\nThis type of action can be useful for when an action uses a basic behavior, but does a more complex additional action.\nIf the chosen behavior type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> does not have a constructor that only accepts an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> as an argument, the <xref href=\"TinyLife.Actions.IBehaviorAction%601.Behavior\" data-throw-if-not-resolved=\"false\"></xref> property has to be set manually in the subclass constructor.\n"
  example: []
  syntax:
    content: >-
      public interface IBehaviorAction<out T>
          where T : ActionBehavior
    typeParameters:
    - id: T
      description: The type of <xref href="TinyLife.Actions.Behaviors.ActionBehavior" data-throw-if-not-resolved="false"></xref> that this action uses
    content.vb: Public Interface IBehaviorAction(Of Out T As ActionBehavior)
  extensionMethods:
  - TinyLife.Actions.IBehaviorAction`1.TinyLife.Utilities.Extensions.JsonCopy``1
  nameWithType.vb: IBehaviorAction(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: TinyLife.Actions.IBehaviorAction(Of T)
  name.vb: IBehaviorAction(Of T)
- uid: TinyLife.Actions.IBehaviorAction`1.Behavior
  commentId: P:TinyLife.Actions.IBehaviorAction`1.Behavior
  id: Behavior
  parent: TinyLife.Actions.IBehaviorAction`1
  langs:
  - csharp
  - vb
  name: Behavior
  nameWithType: IBehaviorAction<T>.Behavior
  fullName: TinyLife.Actions.IBehaviorAction<T>.Behavior
  type: Property
  source:
    remote:
      path: TinyLife/Actions/BehaviorAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Behavior
    path: ../TinyLife/Actions/BehaviorAction.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe underlying <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior\" data-throw-if-not-resolved=\"false\"></xref> that this action uses and invokes\n"
  example: []
  syntax:
    content: T Behavior { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: ReadOnly Property Behavior As T
  overload: TinyLife.Actions.IBehaviorAction`1.Behavior*
  nameWithType.vb: IBehaviorAction(Of T).Behavior
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: TinyLife.Actions.IBehaviorAction(Of T).Behavior
references:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  parent: TinyLife.Actions.Behaviors
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
- uid: TinyLife.Actions.IBehaviorAction`1.Behavior
  commentId: P:TinyLife.Actions.IBehaviorAction`1.Behavior
  name: Behavior
  nameWithType: IBehaviorAction<T>.Behavior
  fullName: TinyLife.Actions.IBehaviorAction<T>.Behavior
  nameWithType.vb: IBehaviorAction(Of T).Behavior
  fullName.vb: TinyLife.Actions.IBehaviorAction(Of T).Behavior
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.IBehaviorAction`1.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<IBehaviorAction<T>>()
  nameWithType: Extensions.JsonCopy<IBehaviorAction<T>>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.IBehaviorAction<T>>()
  nameWithType.vb: Extensions.JsonCopy(Of IBehaviorAction(Of T))()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.IBehaviorAction(Of T))()
  name.vb: JsonCopy(Of IBehaviorAction(Of T))()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<IBehaviorAction<T>>
    nameWithType: Extensions.JsonCopy<IBehaviorAction<T>>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.IBehaviorAction<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of IBehaviorAction(Of T))
    nameWithType: Extensions.JsonCopy(Of IBehaviorAction(Of T))
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.IBehaviorAction(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Behaviors
  commentId: N:TinyLife.Actions.Behaviors
  name: TinyLife.Actions.Behaviors
  nameWithType: TinyLife.Actions.Behaviors
  fullName: TinyLife.Actions.Behaviors
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.IBehaviorAction`1.Behavior*
  commentId: Overload:TinyLife.Actions.IBehaviorAction`1.Behavior
  name: Behavior
  nameWithType: IBehaviorAction<T>.Behavior
  fullName: TinyLife.Actions.IBehaviorAction<T>.Behavior
  nameWithType.vb: IBehaviorAction(Of T).Behavior
  fullName.vb: TinyLife.Actions.IBehaviorAction(Of T).Behavior
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T

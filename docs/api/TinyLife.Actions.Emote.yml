### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Emote
  commentId: T:TinyLife.Actions.Emote
  id: Emote
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.Emote.#ctor(MLEM.Textures.TextureRegion,TinyLife.Actions.EmoteCategory)
  - TinyLife.Actions.Emote.AllCategories
  - TinyLife.Actions.Emote.Categories
  - TinyLife.Actions.Emote.GetEmotes(TinyLife.Actions.EmoteCategory)
  - TinyLife.Actions.Emote.GetRandomEmote(TinyLife.Actions.EmoteCategory)
  - TinyLife.Actions.Emote.Register(TinyLife.Actions.Emote)
  - TinyLife.Actions.Emote.Texture
  langs:
  - csharp
  - vb
  name: Emote
  nameWithType: Emote
  fullName: TinyLife.Actions.Emote
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Emote
    path: Actions/Emote.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn emote is a graphic that can be displayed in a bubble over a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, usually as part of a conversation.\n"
  example: []
  syntax:
    content: public class Emote
    content.vb: Public Class Emote
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Emote.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.Emote.AllCategories
  commentId: F:TinyLife.Actions.Emote.AllCategories
  id: AllCategories
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: AllCategories
  nameWithType: Emote.AllCategories
  fullName: TinyLife.Actions.Emote.AllCategories
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllCategories
    path: Actions/Emote.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA set of all valid <xref href=\"TinyLife.Actions.EmoteCategory\" data-throw-if-not-resolved=\"false\"></xref> values\n"
  example: []
  syntax:
    content: public static readonly EmoteCategory[] AllCategories
    return:
      type: TinyLife.Actions.EmoteCategory[]
    content.vb: Public Shared ReadOnly AllCategories As EmoteCategory()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.Emote.Texture
  commentId: F:TinyLife.Actions.Emote.Texture
  id: Texture
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: Emote.Texture
  fullName: TinyLife.Actions.Emote.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: Actions/Emote.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe texture that is displayed for this emote\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Emote.Categories
  commentId: F:TinyLife.Actions.Emote.Categories
  id: Categories
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: Emote.Categories
  fullName: TinyLife.Actions.Emote.Categories
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Categories
    path: Actions/Emote.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA combined <xref href=\"TinyLife.Actions.EmoteCategory\" data-throw-if-not-resolved=\"false\"></xref> flag that determines the categories that this emote belongs to\n"
  example: []
  syntax:
    content: public readonly EmoteCategory Categories
    return:
      type: TinyLife.Actions.EmoteCategory
    content.vb: Public ReadOnly Categories As EmoteCategory
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Emote.#ctor(MLEM.Textures.TextureRegion,TinyLife.Actions.EmoteCategory)
  commentId: M:TinyLife.Actions.Emote.#ctor(MLEM.Textures.TextureRegion,TinyLife.Actions.EmoteCategory)
  id: '#ctor(MLEM.Textures.TextureRegion,TinyLife.Actions.EmoteCategory)'
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: Emote(TextureRegion, EmoteCategory)
  nameWithType: Emote.Emote(TextureRegion, EmoteCategory)
  fullName: TinyLife.Actions.Emote.Emote(MLEM.Textures.TextureRegion, TinyLife.Actions.EmoteCategory)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Actions/Emote.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInitializes a new emote with the given settings\n"
  example: []
  syntax:
    content: public Emote(TextureRegion texture, EmoteCategory categories)
    parameters:
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The texture that this emote should display
    - id: categories
      type: TinyLife.Actions.EmoteCategory
      description: The categories that this emote should have. Can be a combined flag.
    content.vb: Public Sub New(texture As TextureRegion, categories As EmoteCategory)
  overload: TinyLife.Actions.Emote.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Emote.GetRandomEmote(TinyLife.Actions.EmoteCategory)
  commentId: M:TinyLife.Actions.Emote.GetRandomEmote(TinyLife.Actions.EmoteCategory)
  id: GetRandomEmote(TinyLife.Actions.EmoteCategory)
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: GetRandomEmote(EmoteCategory)
  nameWithType: Emote.GetRandomEmote(EmoteCategory)
  fullName: TinyLife.Actions.Emote.GetRandomEmote(TinyLife.Actions.EmoteCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomEmote
    path: Actions/Emote.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a random emote from a combined flag of possible categories\n"
  example: []
  syntax:
    content: public static Emote GetRandomEmote(EmoteCategory possibleCategories)
    parameters:
    - id: possibleCategories
      type: TinyLife.Actions.EmoteCategory
      description: The possible categories
    return:
      type: TinyLife.Actions.Emote
      description: A random emote from the given categories
    content.vb: Public Shared Function GetRandomEmote(possibleCategories As EmoteCategory) As Emote
  overload: TinyLife.Actions.Emote.GetRandomEmote*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Emote.GetEmotes(TinyLife.Actions.EmoteCategory)
  commentId: M:TinyLife.Actions.Emote.GetEmotes(TinyLife.Actions.EmoteCategory)
  id: GetEmotes(TinyLife.Actions.EmoteCategory)
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: GetEmotes(EmoteCategory)
  nameWithType: Emote.GetEmotes(EmoteCategory)
  fullName: TinyLife.Actions.Emote.GetEmotes(TinyLife.Actions.EmoteCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEmotes
    path: Actions/Emote.cs
    startLine: 86
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a set of all of the emotes in the given combined category flag\n"
  example: []
  syntax:
    content: public static IEnumerable<Emote> GetEmotes(EmoteCategory possibleCategories)
    parameters:
    - id: possibleCategories
      type: TinyLife.Actions.EmoteCategory
      description: The categories
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Emote}
      description: A set of all emotes that match the categories
    content.vb: Public Shared Function GetEmotes(possibleCategories As EmoteCategory) As IEnumerable(Of Emote)
  overload: TinyLife.Actions.Emote.GetEmotes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Emote.Register(TinyLife.Actions.Emote)
  commentId: M:TinyLife.Actions.Emote.Register(TinyLife.Actions.Emote)
  id: Register(TinyLife.Actions.Emote)
  parent: TinyLife.Actions.Emote
  langs:
  - csharp
  - vb
  name: Register(Emote)
  nameWithType: Emote.Register(Emote)
  fullName: TinyLife.Actions.Emote.Register(TinyLife.Actions.Emote)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Emote.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: Actions/Emote.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nRegisters a new <xref href=\"TinyLife.Actions.Emote\" data-throw-if-not-resolved=\"false\"></xref> with the given settings\n"
  example: []
  syntax:
    content: public static void Register(Emote emote)
    parameters:
    - id: emote
      type: TinyLife.Actions.Emote
      description: The emote to register
    content.vb: Public Shared Sub Register(emote As Emote)
  overload: TinyLife.Actions.Emote.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Emote.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Emote>()
  nameWithType: Extensions.JsonCopy<Emote>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Emote>()
  nameWithType.vb: Extensions.JsonCopy(Of Emote)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Emote)()
  name.vb: JsonCopy(Of Emote)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Emote>
    nameWithType: Extensions.JsonCopy<Emote>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Emote>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Emote)
    nameWithType: Extensions.JsonCopy(Of Emote)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Emote)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Actions.EmoteCategory[]
  isExternal: true
  name: EmoteCategory[]
  nameWithType: EmoteCategory[]
  fullName: TinyLife.Actions.EmoteCategory[]
  nameWithType.vb: EmoteCategory()
  fullName.vb: TinyLife.Actions.EmoteCategory()
  name.vb: EmoteCategory()
  spec.csharp:
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Actions.Emote.#ctor*
  commentId: Overload:TinyLife.Actions.Emote.#ctor
  name: Emote
  nameWithType: Emote.Emote
  fullName: TinyLife.Actions.Emote.Emote
- uid: TinyLife.Actions.Emote.GetRandomEmote*
  commentId: Overload:TinyLife.Actions.Emote.GetRandomEmote
  name: GetRandomEmote
  nameWithType: Emote.GetRandomEmote
  fullName: TinyLife.Actions.Emote.GetRandomEmote
- uid: TinyLife.Actions.Emote
  commentId: T:TinyLife.Actions.Emote
  parent: TinyLife.Actions
  name: Emote
  nameWithType: Emote
  fullName: TinyLife.Actions.Emote
- uid: TinyLife.Actions.Emote.GetEmotes*
  commentId: Overload:TinyLife.Actions.Emote.GetEmotes
  name: GetEmotes
  nameWithType: Emote.GetEmotes
  fullName: TinyLife.Actions.Emote.GetEmotes
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Emote}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Emote}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Emote>
  nameWithType: IEnumerable<Emote>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Emote>
  nameWithType.vb: IEnumerable(Of Emote)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Emote)
  name.vb: IEnumerable(Of Emote)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Emote
    name: Emote
    nameWithType: Emote
    fullName: TinyLife.Actions.Emote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Emote
    name: Emote
    nameWithType: Emote
    fullName: TinyLife.Actions.Emote
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.Emote.Register*
  commentId: Overload:TinyLife.Actions.Emote.Register
  name: Register
  nameWithType: Emote.Register
  fullName: TinyLife.Actions.Emote.Register

### YamlMime:ManagedReference
items:
- uid: TinyLife.Debug
  commentId: T:TinyLife.Debug
  id: Debug
  parent: TinyLife
  children:
  - TinyLife.Debug.Cheats
  - TinyLife.Debug.DebugLines
  - TinyLife.Debug.TryCheat(System.String)
  langs:
  - csharp
  - vb
  name: Debug
  nameWithType: Debug
  fullName: TinyLife.Debug
  type: Class
  source:
    remote:
      path: TinyLife/Debug.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Debug
    path: ../TinyLife/Debug.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis class contains a set of ways to include custom debug information in the game, including <xref href=\"TinyLife.Debug.Cheats\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Debug.DebugLines\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class Debug
    content.vb: Public Class Debug
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Debug.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Debug.Cheats
  commentId: F:TinyLife.Debug.Cheats
  id: Cheats
  parent: TinyLife.Debug
  langs:
  - csharp
  - vb
  name: Cheats
  nameWithType: Debug.Cheats
  fullName: TinyLife.Debug.Cheats
  type: Field
  source:
    remote:
      path: TinyLife/Debug.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Cheats
    path: ../TinyLife/Debug.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of regular expressions that resolve into a <xref href=\"TinyLife.Debug.CheatDelegate\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen a cheat is entered in the F1 menu, and it matches the expression, the <xref href=\"TinyLife.Debug.CheatDelegate\" data-throw-if-not-resolved=\"false\"></xref> is invoked.\nTo register new cheats, simply add them to this dictionary.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<Regex, Debug.CheatDelegate> Cheats
    return:
      type: System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,TinyLife.Debug.CheatDelegate}
    content.vb: Public Shared ReadOnly Cheats As Dictionary(Of Regex, Debug.CheatDelegate)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Debug.DebugLines
  commentId: F:TinyLife.Debug.DebugLines
  id: DebugLines
  parent: TinyLife.Debug
  langs:
  - csharp
  - vb
  name: DebugLines
  nameWithType: Debug.DebugLines
  fullName: TinyLife.Debug.DebugLines
  type: Field
  source:
    remote:
      path: TinyLife/Debug.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DebugLines
    path: ../TinyLife/Debug.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of <xref href=\"TinyLife.Debug.DebugDelegate\" data-throw-if-not-resolved=\"false\"></xref> that cause additional lines to displayed in the F1 menu.\nTo register new debug lines, simply add them to this list.\nKeep in mind that, if too many debug lines are registered, they will go off-screen, so consider only displaying yours when holding certain hotkeys, or when they are necessary.\n"
  example: []
  syntax:
    content: public static readonly List<Debug.DebugDelegate> DebugLines
    return:
      type: System.Collections.Generic.List{TinyLife.Debug.DebugDelegate}
    content.vb: Public Shared ReadOnly DebugLines As List(Of Debug.DebugDelegate)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Debug.TryCheat(System.String)
  commentId: M:TinyLife.Debug.TryCheat(System.String)
  id: TryCheat(System.String)
  parent: TinyLife.Debug
  langs:
  - csharp
  - vb
  name: TryCheat(String)
  nameWithType: Debug.TryCheat(String)
  fullName: TinyLife.Debug.TryCheat(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Debug.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TryCheat
    path: ../TinyLife/Debug.cs
    startLine: 433
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static bool TryCheat(string text)
    parameters:
    - id: text
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryCheat(text As String) As Boolean
  overload: TinyLife.Debug.TryCheat*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Debug.Cheats
  commentId: F:TinyLife.Debug.Cheats
  isExternal: true
- uid: TinyLife.Debug.DebugLines
  commentId: F:TinyLife.Debug.DebugLines
  isExternal: true
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Debug.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Debug>()
  nameWithType: Extensions.JsonCopy<Debug>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Debug>()
  nameWithType.vb: Extensions.JsonCopy(Of Debug)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Debug)()
  name.vb: JsonCopy(Of Debug)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Debug>
    nameWithType: Extensions.JsonCopy<Debug>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Debug>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Debug)
    nameWithType: Extensions.JsonCopy(Of Debug)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Debug)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Debug.CheatDelegate
  commentId: T:TinyLife.Debug.CheatDelegate
  name: Debug.CheatDelegate
  nameWithType: Debug.CheatDelegate
  fullName: TinyLife.Debug.CheatDelegate
- uid: System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,TinyLife.Debug.CheatDelegate}
  commentId: T:System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,TinyLife.Debug.CheatDelegate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Regex, Debug.CheatDelegate>
  nameWithType: Dictionary<Regex, Debug.CheatDelegate>
  fullName: System.Collections.Generic.Dictionary<System.Text.RegularExpressions.Regex, TinyLife.Debug.CheatDelegate>
  nameWithType.vb: Dictionary(Of Regex, Debug.CheatDelegate)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Text.RegularExpressions.Regex, TinyLife.Debug.CheatDelegate)
  name.vb: Dictionary(Of Regex, Debug.CheatDelegate)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.RegularExpressions.Regex
    name: Regex
    nameWithType: Regex
    fullName: System.Text.RegularExpressions.Regex
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Debug.CheatDelegate
    name: Debug.CheatDelegate
    nameWithType: Debug.CheatDelegate
    fullName: TinyLife.Debug.CheatDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.RegularExpressions.Regex
    name: Regex
    nameWithType: Regex
    fullName: System.Text.RegularExpressions.Regex
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Debug.CheatDelegate
    name: Debug.CheatDelegate
    nameWithType: Debug.CheatDelegate
    fullName: TinyLife.Debug.CheatDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Debug.DebugDelegate
  commentId: T:TinyLife.Debug.DebugDelegate
  name: Debug.DebugDelegate
  nameWithType: Debug.DebugDelegate
  fullName: TinyLife.Debug.DebugDelegate
- uid: System.Collections.Generic.List{TinyLife.Debug.DebugDelegate}
  commentId: T:System.Collections.Generic.List{TinyLife.Debug.DebugDelegate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Debug.DebugDelegate>
  nameWithType: List<Debug.DebugDelegate>
  fullName: System.Collections.Generic.List<TinyLife.Debug.DebugDelegate>
  nameWithType.vb: List(Of Debug.DebugDelegate)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Debug.DebugDelegate)
  name.vb: List(Of Debug.DebugDelegate)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Debug.DebugDelegate
    name: Debug.DebugDelegate
    nameWithType: Debug.DebugDelegate
    fullName: TinyLife.Debug.DebugDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Debug.DebugDelegate
    name: Debug.DebugDelegate
    nameWithType: Debug.DebugDelegate
    fullName: TinyLife.Debug.DebugDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Debug.TryCheat*
  commentId: Overload:TinyLife.Debug.TryCheat
  name: TryCheat
  nameWithType: Debug.TryCheat
  fullName: TinyLife.Debug.TryCheat
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

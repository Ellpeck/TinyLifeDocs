### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.GoalInfo
  commentId: T:TinyLife.Goals.GoalInfo
  id: GoalInfo
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.GoalInfo.#ctor(System.String,System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal})
  - TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  - TinyLife.Goals.GoalInfo.Name
  langs:
  - csharp
  - vb
  name: GoalInfo
  nameWithType: GoalInfo
  fullName: TinyLife.Goals.GoalInfo
  type: Class
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoalInfo
    path: Goals/GoalInfo.cs
    startLine: 10
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal info is the underlying goal information for a <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> that constructs an instance when a new <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> is constructed.\nFor auto-triggered goals, <xref href=\"TinyLife.Goals.AutoGoalInfo\" data-throw-if-not-resolved=\"false\"></xref> should be used.\n"
  example: []
  syntax:
    content: 'public class GoalInfo : GenericDataHolder, IGenericDataHolder'
    content.vb: >-
      Public Class GoalInfo
          Inherits GenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  derivedClasses:
  - TinyLife.Goals.AutoGoalInfo
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.GoalInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.GoalInfo.Name
  commentId: F:TinyLife.Goals.GoalInfo.Name
  id: Name
  parent: TinyLife.Goals.GoalInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: GoalInfo.Name
  fullName: TinyLife.Goals.GoalInfo.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: Goals/GoalInfo.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this goal info, which will be passed to the underlying <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalInfo.#ctor(System.String,System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal})
  commentId: M:TinyLife.Goals.GoalInfo.#ctor(System.String,System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal})
  id: '#ctor(System.String,System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal})'
  parent: TinyLife.Goals.GoalInfo
  langs:
  - csharp
  - vb
  name: GoalInfo(String, Func<GoalSet, GoalInfo, Goal>)
  nameWithType: GoalInfo.GoalInfo(String, Func<GoalSet, GoalInfo, Goal>)
  fullName: TinyLife.Goals.GoalInfo.GoalInfo(System.String, System.Func<TinyLife.Goals.GoalSet, TinyLife.Goals.GoalInfo, TinyLife.Goals.Goal>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Goals/GoalInfo.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new goal info with the given settings\n"
  example: []
  syntax:
    content: public GoalInfo(string name, Func<GoalSet, GoalInfo, Goal> constructor)
    parameters:
    - id: name
      type: System.String
      description: The name of this goal
    - id: constructor
      type: System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal}
      description: The function that should be called to construct a goal instance
    content.vb: Public Sub New(name As String, constructor As Func(Of GoalSet, GoalInfo, Goal))
  overload: TinyLife.Goals.GoalInfo.#ctor*
  nameWithType.vb: GoalInfo.GoalInfo(String, Func(Of GoalSet, GoalInfo, Goal))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.GoalInfo.GoalInfo(System.String, System.Func(Of TinyLife.Goals.GoalSet, TinyLife.Goals.GoalInfo, TinyLife.Goals.Goal))
  name.vb: GoalInfo(String, Func(Of GoalSet, GoalInfo, Goal))
- uid: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  commentId: M:TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  id: Construct(TinyLife.Goals.GoalSet)
  parent: TinyLife.Goals.GoalInfo
  langs:
  - csharp
  - vb
  name: Construct(GoalSet)
  nameWithType: GoalInfo.Construct(GoalSet)
  fullName: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: Goals/GoalInfo.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nConstructs a new goal from this goal info.\nBy default, this simply calls the construction function that has been passed in the constructor.\n"
  example: []
  syntax:
    content: public virtual Goal Construct(GoalSet set)
    parameters:
    - id: set
      type: TinyLife.Goals.GoalSet
      description: The goal set
    return:
      type: TinyLife.Goals.Goal
      description: The goal instance
    content.vb: Public Overridable Function Construct(set As GoalSet) As Goal
  overload: TinyLife.Goals.GoalInfo.Construct*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Goals.Goal
  commentId: T:TinyLife.Goals.Goal
  parent: TinyLife.Goals
  name: Goal
  nameWithType: Goal
  fullName: TinyLife.Goals.Goal
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<GoalInfo>()
  nameWithType: Extensions.JsonCopy<GoalInfo>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalInfo>()
  nameWithType.vb: Extensions.JsonCopy(Of GoalInfo)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalInfo)()
  name.vb: JsonCopy(Of GoalInfo)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<GoalInfo>
    nameWithType: Extensions.JsonCopy<GoalInfo>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of GoalInfo)
    nameWithType: Extensions.JsonCopy(Of GoalInfo)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Goals.GoalInfo.#ctor*
  commentId: Overload:TinyLife.Goals.GoalInfo.#ctor
  name: GoalInfo
  nameWithType: GoalInfo.GoalInfo
  fullName: TinyLife.Goals.GoalInfo.GoalInfo
- uid: System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal}
  commentId: T:System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.GoalInfo,TinyLife.Goals.Goal}
  parent: System
  definition: System.Func`3
  name: Func<GoalSet, GoalInfo, Goal>
  nameWithType: Func<GoalSet, GoalInfo, Goal>
  fullName: System.Func<TinyLife.Goals.GoalSet, TinyLife.Goals.GoalInfo, TinyLife.Goals.Goal>
  nameWithType.vb: Func(Of GoalSet, GoalInfo, Goal)
  fullName.vb: System.Func(Of TinyLife.Goals.GoalSet, TinyLife.Goals.GoalInfo, TinyLife.Goals.Goal)
  name.vb: Func(Of GoalSet, GoalInfo, Goal)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.GoalInfo
    name: GoalInfo
    nameWithType: GoalInfo
    fullName: TinyLife.Goals.GoalInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.Goal
    name: Goal
    nameWithType: Goal
    fullName: TinyLife.Goals.Goal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.GoalInfo
    name: GoalInfo
    nameWithType: GoalInfo
    fullName: TinyLife.Goals.GoalInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.Goal
    name: Goal
    nameWithType: Goal
    fullName: TinyLife.Goals.Goal
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalInfo.Construct*
  commentId: Overload:TinyLife.Goals.GoalInfo.Construct
  name: Construct
  nameWithType: GoalInfo.Construct
  fullName: TinyLife.Goals.GoalInfo.Construct

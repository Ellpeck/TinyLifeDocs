### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.AchievementType
  commentId: T:TinyLife.Goals.AchievementType
  id: AchievementType
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalInfo)
  - TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalSetInfo)
  - TinyLife.Goals.AchievementType.Construct
  - TinyLife.Goals.AchievementType.DieOnPublicLot
  - TinyLife.Goals.AchievementType.DisplayName
  - TinyLife.Goals.AchievementType.Goals
  - TinyLife.Goals.AchievementType.Icon
  - TinyLife.Goals.AchievementType.Name
  - TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  - TinyLife.Goals.AchievementType.SomeoneDiesOnYourLot
  - TinyLife.Goals.AchievementType.Types
  langs:
  - csharp
  - vb
  name: AchievementType
  nameWithType: AchievementType
  fullName: TinyLife.Goals.AchievementType
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AchievementType
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nAn achievement type is a set of data for an <xref href=\"TinyLife.Goals.Achievement\" data-throw-if-not-resolved=\"false\"></xref> instance to contain.\nTo register new achievement types, use <xref href=\"TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<AchievementType>), new object[]{typeof(AchievementType), "PrivateTypes"})]

      public class AchievementType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of AchievementType)), New Object() {GetType(AchievementType), "PrivateTypes"})>

      Public Class AchievementType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.AchievementType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.AchievementType.Types
  commentId: F:TinyLife.Goals.AchievementType.Types
  id: Types
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: AchievementType.Types
  fullName: TinyLife.Goals.AchievementType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA set of all <xref href=\"TinyLife.Goals.AchievementType\" data-throw-if-not-resolved=\"false\"></xref> instances registered by the game and mods using <xref href=\"TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, AchievementType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.AchievementType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, AchievementType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.SomeoneDiesOnYourLot
  commentId: F:TinyLife.Goals.AchievementType.SomeoneDiesOnYourLot
  id: SomeoneDiesOnYourLot
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: SomeoneDiesOnYourLot
  nameWithType: AchievementType.SomeoneDiesOnYourLot
  fullName: TinyLife.Goals.AchievementType.SomeoneDiesOnYourLot
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SomeoneDiesOnYourLot
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly AchievementType SomeoneDiesOnYourLot
    return:
      type: TinyLife.Goals.AchievementType
    content.vb: Public Shared ReadOnly SomeoneDiesOnYourLot As AchievementType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.DieOnPublicLot
  commentId: F:TinyLife.Goals.AchievementType.DieOnPublicLot
  id: DieOnPublicLot
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: DieOnPublicLot
  nameWithType: AchievementType.DieOnPublicLot
  fullName: TinyLife.Goals.AchievementType.DieOnPublicLot
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DieOnPublicLot
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly AchievementType DieOnPublicLot
    return:
      type: TinyLife.Goals.AchievementType
    content.vb: Public Shared ReadOnly DieOnPublicLot As AchievementType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.Name
  commentId: F:TinyLife.Goals.AchievementType.Name
  id: Name
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AchievementType.Name
  fullName: TinyLife.Goals.AchievementType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis achievement type&apos;s name, which is used for <xref href=\"TinyLife.Goals.AchievementType.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> as well as <xref href=\"TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.Icon
  commentId: F:TinyLife.Goals.AchievementType.Icon
  id: Icon
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: AchievementType.Icon
  fullName: TinyLife.Goals.AchievementType.Icon
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe icon that this achievement should display.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.Goals
  commentId: F:TinyLife.Goals.AchievementType.Goals
  id: Goals
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Goals
  nameWithType: AchievementType.Goals
  fullName: TinyLife.Goals.AchievementType.Goals
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Goals
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe set of goals that have to be fulfilled for this achievement to be completed.\nIf this is null, <xref href=\"TinyLife.GameImpl.CompleteAchievement(TinyLife.Goals.AchievementType)\" data-throw-if-not-resolved=\"false\"></xref> has to be used to complete an achievement of this type.\n"
  example: []
  syntax:
    content: public readonly GoalSetInfo Goals
    return:
      type: TinyLife.Goals.GoalSetInfo
    content.vb: Public ReadOnly Goals As GoalSetInfo
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.DisplayName
  commentId: P:TinyLife.Goals.AchievementType.DisplayName
  id: DisplayName
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: AchievementType.DisplayName
  fullName: TinyLife.Goals.AchievementType.DisplayName
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe display name of this achievement, which is based on <xref href=\"TinyLife.Goals.AchievementType.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: TinyLife.Goals.AchievementType.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalInfo)
  commentId: M:TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalInfo)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalInfo)'
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: AchievementType(String, TextureRegion, GoalInfo)
  nameWithType: AchievementType.AchievementType(String, TextureRegion, GoalInfo)
  fullName: TinyLife.Goals.AchievementType.AchievementType(System.String, MLEM.Textures.TextureRegion, TinyLife.Goals.GoalInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new achievement type with the given settings.\n"
  example: []
  syntax:
    content: public AchievementType(string name, TextureRegion icon, GoalInfo goal)
    parameters:
    - id: name
      type: System.String
      description: This achievement type&apos;s name, which is used for <xref href="TinyLife.Goals.AchievementType.DisplayName" data-throw-if-not-resolved="false"></xref> as well as <xref href="TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)" data-throw-if-not-resolved="false"></xref>.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The icon that this achievement should display.
    - id: goal
      type: TinyLife.Goals.GoalInfo
      description: The goal that have to be fulfilled for this achievement to be completed. If this is null, <xref href="TinyLife.GameImpl.CompleteAchievement(TinyLife.Goals.AchievementType)" data-throw-if-not-resolved="false"></xref> has to be used to complete an achievement of this type.
    content.vb: Public Sub New(name As String, icon As TextureRegion, goal As GoalInfo)
  overload: TinyLife.Goals.AchievementType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalSetInfo)
  commentId: M:TinyLife.Goals.AchievementType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalSetInfo)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.Goals.GoalSetInfo)'
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: AchievementType(String, TextureRegion, GoalSetInfo)
  nameWithType: AchievementType.AchievementType(String, TextureRegion, GoalSetInfo)
  fullName: TinyLife.Goals.AchievementType.AchievementType(System.String, MLEM.Textures.TextureRegion, TinyLife.Goals.GoalSetInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 95
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new achievement type with the given settings.\n"
  example: []
  syntax:
    content: public AchievementType(string name, TextureRegion icon, GoalSetInfo goals = null)
    parameters:
    - id: name
      type: System.String
      description: This achievement type&apos;s name, which is used for <xref href="TinyLife.Goals.AchievementType.DisplayName" data-throw-if-not-resolved="false"></xref> as well as <xref href="TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)" data-throw-if-not-resolved="false"></xref>.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The icon that this achievement should display.
    - id: goals
      type: TinyLife.Goals.GoalSetInfo
      description: The set of goals that have to be fulfilled for this achievement to be completed. If this is null, <xref href="TinyLife.GameImpl.CompleteAchievement(TinyLife.Goals.AchievementType)" data-throw-if-not-resolved="false"></xref> has to be used to complete an achievement of this type.
    content.vb: Public Sub New(name As String, icon As TextureRegion, goals As GoalSetInfo = Nothing)
  overload: TinyLife.Goals.AchievementType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.AchievementType.Construct
  commentId: M:TinyLife.Goals.AchievementType.Construct
  id: Construct
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Construct()
  nameWithType: AchievementType.Construct()
  fullName: TinyLife.Goals.AchievementType.Construct()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nConstructs a new <xref href=\"TinyLife.Goals.Achievement\" data-throw-if-not-resolved=\"false\"></xref> instance with this type.\n"
  example: []
  syntax:
    content: public virtual Achievement Construct()
    return:
      type: TinyLife.Goals.Achievement
      description: The constructed achievement.
    content.vb: Public Overridable Function Construct As Achievement
  overload: TinyLife.Goals.AchievementType.Construct*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  commentId: M:TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  id: Register(TinyLife.Goals.AchievementType)
  parent: TinyLife.Goals.AchievementType
  langs:
  - csharp
  - vb
  name: Register(AchievementType)
  nameWithType: AchievementType.Register(AchievementType)
  fullName: TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nRegisters the given achievement type to the <xref href=\"TinyLife.Goals.AchievementType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry.\n"
  example: []
  syntax:
    content: public static AchievementType Register(AchievementType type)
    parameters:
    - id: type
      type: TinyLife.Goals.AchievementType
      description: The type to register.
    return:
      type: TinyLife.Goals.AchievementType
      description: The passed <code data-dev-comment-type="paramref" class="paramref">type</code>, for chaining.
    content.vb: Public Shared Function Register(type As AchievementType) As AchievementType
  overload: TinyLife.Goals.AchievementType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.Achievement
  commentId: T:TinyLife.Goals.Achievement
  parent: TinyLife.Goals
  name: Achievement
  nameWithType: Achievement
  fullName: TinyLife.Goals.Achievement
- uid: TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  commentId: M:TinyLife.Goals.AchievementType.Register(TinyLife.Goals.AchievementType)
  isExternal: true
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AchievementType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<AchievementType>()
  nameWithType: Extensions.JsonCopy<AchievementType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AchievementType>()
  nameWithType.vb: Extensions.JsonCopy(Of AchievementType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AchievementType)()
  name.vb: JsonCopy(Of AchievementType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<AchievementType>
    nameWithType: Extensions.JsonCopy<AchievementType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AchievementType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of AchievementType)
    nameWithType: Extensions.JsonCopy(Of AchievementType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AchievementType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.AchievementType
  commentId: T:TinyLife.Goals.AchievementType
  parent: TinyLife.Goals
  name: AchievementType
  nameWithType: AchievementType
  fullName: TinyLife.Goals.AchievementType
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.AchievementType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.AchievementType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, AchievementType>
  nameWithType: ReadOnlyDictionary<String, AchievementType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Goals.AchievementType>
  nameWithType.vb: ReadOnlyDictionary(Of String, AchievementType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Goals.AchievementType)
  name.vb: ReadOnlyDictionary(Of String, AchievementType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.AchievementType
    name: AchievementType
    nameWithType: AchievementType
    fullName: TinyLife.Goals.AchievementType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.AchievementType
    name: AchievementType
    nameWithType: AchievementType
    fullName: TinyLife.Goals.AchievementType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Goals.AchievementType.DisplayName
  commentId: P:TinyLife.Goals.AchievementType.DisplayName
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.GameImpl.CompleteAchievement(TinyLife.Goals.AchievementType)
  commentId: M:TinyLife.GameImpl.CompleteAchievement(TinyLife.Goals.AchievementType)
  isExternal: true
- uid: TinyLife.Goals.GoalSetInfo
  commentId: T:TinyLife.Goals.GoalSetInfo
  parent: TinyLife.Goals
  name: GoalSetInfo
  nameWithType: GoalSetInfo
  fullName: TinyLife.Goals.GoalSetInfo
- uid: TinyLife.Goals.AchievementType.Name
  commentId: F:TinyLife.Goals.AchievementType.Name
  isExternal: true
- uid: TinyLife.Goals.AchievementType.DisplayName*
  commentId: Overload:TinyLife.Goals.AchievementType.DisplayName
  name: DisplayName
  nameWithType: AchievementType.DisplayName
  fullName: TinyLife.Goals.AchievementType.DisplayName
- uid: TinyLife.Goals.AchievementType.#ctor*
  commentId: Overload:TinyLife.Goals.AchievementType.#ctor
  name: AchievementType
  nameWithType: AchievementType.AchievementType
  fullName: TinyLife.Goals.AchievementType.AchievementType
- uid: TinyLife.Goals.GoalInfo
  commentId: T:TinyLife.Goals.GoalInfo
  parent: TinyLife.Goals
  name: GoalInfo
  nameWithType: GoalInfo
  fullName: TinyLife.Goals.GoalInfo
- uid: TinyLife.Goals.AchievementType.Construct*
  commentId: Overload:TinyLife.Goals.AchievementType.Construct
  name: Construct
  nameWithType: AchievementType.Construct
  fullName: TinyLife.Goals.AchievementType.Construct
- uid: TinyLife.Goals.AchievementType.Types
  commentId: F:TinyLife.Goals.AchievementType.Types
  isExternal: true
- uid: TinyLife.Goals.AchievementType.Register*
  commentId: Overload:TinyLife.Goals.AchievementType.Register
  name: Register
  nameWithType: AchievementType.Register
  fullName: TinyLife.Goals.AchievementType.Register

### YamlMime:ManagedReference
items:
- uid: TinyLife.SaveHandler
  commentId: T:TinyLife.SaveHandler
  id: SaveHandler
  parent: TinyLife
  children:
  - TinyLife.SaveHandler.CreateSerializer(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  - TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  - TinyLife.SaveHandler.GetGameDir
  - TinyLife.SaveHandler.GetSaveDir(System.String)
  - TinyLife.SaveHandler.GetSavesDir
  - TinyLife.SaveHandler.OnGameLoaded
  - TinyLife.SaveHandler.OnGameSaved
  langs:
  - csharp
  - vb
  name: SaveHandler
  nameWithType: SaveHandler
  fullName: TinyLife.SaveHandler
  type: Class
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SaveHandler
    path: ../TinyLife/SaveHandler.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA utility class used by the game for various actions and information related to saving and loading.\n"
  example: []
  syntax:
    content: public static class SaveHandler
    content.vb: Public Module SaveHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.SaveHandler.OnGameSaved
  commentId: E:TinyLife.SaveHandler.OnGameSaved
  id: OnGameSaved
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: OnGameSaved
  nameWithType: SaveHandler.OnGameSaved
  fullName: TinyLife.SaveHandler.OnGameSaved
  type: Event
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGameSaved
    path: ../TinyLife/SaveHandler.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn event that is raised before and after the game is saved.\n"
  example: []
  syntax:
    content: public static event Action<GameImpl, EventPhase> OnGameSaved
    return:
      type: System.Action{TinyLife.GameImpl,TinyLife.Mods.EventPhase}
    content.vb: Public Shared Event OnGameSaved As Action(Of GameImpl, EventPhase)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.SaveHandler.OnGameLoaded
  commentId: E:TinyLife.SaveHandler.OnGameLoaded
  id: OnGameLoaded
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: OnGameLoaded
  nameWithType: SaveHandler.OnGameLoaded
  fullName: TinyLife.SaveHandler.OnGameLoaded
  type: Event
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGameLoaded
    path: ../TinyLife/SaveHandler.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn event that is raised before and after the game is loaded.\n"
  example: []
  syntax:
    content: public static event Action<GameImpl, EventPhase> OnGameLoaded
    return:
      type: System.Action{TinyLife.GameImpl,TinyLife.Mods.EventPhase}
    content.vb: Public Shared Event OnGameLoaded As Action(Of GameImpl, EventPhase)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.SaveHandler.GetGameDir
  commentId: M:TinyLife.SaveHandler.GetGameDir
  id: GetGameDir
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: GetGameDir()
  nameWithType: SaveHandler.GetGameDir()
  fullName: TinyLife.SaveHandler.GetGameDir()
  type: Method
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGameDir
    path: ../TinyLife/SaveHandler.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> that points to the game&apos;s data directory.\nFor more information on where this directory is stored, see https://docs.tinylifegame.com/articles/game_dir.html.\n"
  example: []
  syntax:
    content: public static DirectoryInfo GetGameDir()
    return:
      type: System.IO.DirectoryInfo
      description: The game&apos;s data directory.
    content.vb: Public Shared Function GetGameDir As DirectoryInfo
  overload: TinyLife.SaveHandler.GetGameDir*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.SaveHandler.GetSavesDir
  commentId: M:TinyLife.SaveHandler.GetSavesDir
  id: GetSavesDir
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: GetSavesDir()
  nameWithType: SaveHandler.GetSavesDir()
  fullName: TinyLife.SaveHandler.GetSavesDir()
  type: Method
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSavesDir
    path: ../TinyLife/SaveHandler.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> that points to the game&apos;s saves directory.\nThis method returns a subdirectory of <xref href=\"TinyLife.SaveHandler.GetGameDir\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static DirectoryInfo GetSavesDir()
    return:
      type: System.IO.DirectoryInfo
      description: The game&apos;s saves directory.
    content.vb: Public Shared Function GetSavesDir As DirectoryInfo
  overload: TinyLife.SaveHandler.GetSavesDir*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.SaveHandler.GetSaveDir(System.String)
  commentId: M:TinyLife.SaveHandler.GetSaveDir(System.String)
  id: GetSaveDir(System.String)
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: GetSaveDir(String)
  nameWithType: SaveHandler.GetSaveDir(String)
  fullName: TinyLife.SaveHandler.GetSaveDir(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSaveDir
    path: ../TinyLife/SaveHandler.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> that points to the directory that a save with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code> is or would be stored in.\nThis method returns a subdirectory of <xref href=\"TinyLife.SaveHandler.GetSavesDir\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static DirectoryInfo GetSaveDir(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.IO.DirectoryInfo
      description: The directory for the given save.
    content.vb: Public Shared Function GetSaveDir(name As String) As DirectoryInfo
  overload: TinyLife.SaveHandler.GetSaveDir*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  commentId: M:TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  id: CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: CreateSerializerSettings(EventHandler<ErrorEventArgs>)
  nameWithType: SaveHandler.CreateSerializerSettings(EventHandler<ErrorEventArgs>)
  fullName: TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler<Newtonsoft.Json.Serialization.ErrorEventArgs>)
  type: Method
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateSerializerSettings
    path: ../TinyLife/SaveHandler.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new instance of <xref href=\"Newtonsoft.Json.JsonSerializerSettings\" data-throw-if-not-resolved=\"false\"></xref>, initialized to some default values for saving and loading <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> and, specifically, <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances.\nAdditionally, an <code data-dev-comment-type=\"paramref\" class=\"paramref\">errorHandler</code> can optionally be attached to determine what should happen when a serialization error occurs.\n"
  example: []
  syntax:
    content: public static JsonSerializerSettings CreateSerializerSettings(EventHandler<ErrorEventArgs> errorHandler)
    parameters:
    - id: errorHandler
      type: System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs}
      description: An optional error handler.
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
      description: A new instance of <xref href="Newtonsoft.Json.JsonSerializerSettings" data-throw-if-not-resolved="false"></xref> with some default values set.
    content.vb: Public Shared Function CreateSerializerSettings(errorHandler As EventHandler(Of ErrorEventArgs)) As JsonSerializerSettings
  overload: TinyLife.SaveHandler.CreateSerializerSettings*
  nameWithType.vb: SaveHandler.CreateSerializerSettings(EventHandler(Of ErrorEventArgs))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler(Of Newtonsoft.Json.Serialization.ErrorEventArgs))
  name.vb: CreateSerializerSettings(EventHandler(Of ErrorEventArgs))
- uid: TinyLife.SaveHandler.CreateSerializer(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  commentId: M:TinyLife.SaveHandler.CreateSerializer(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  id: CreateSerializer(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  parent: TinyLife.SaveHandler
  langs:
  - csharp
  - vb
  name: CreateSerializer(EventHandler<ErrorEventArgs>)
  nameWithType: SaveHandler.CreateSerializer(EventHandler<ErrorEventArgs>)
  fullName: TinyLife.SaveHandler.CreateSerializer(System.EventHandler<Newtonsoft.Json.Serialization.ErrorEventArgs>)
  type: Method
  source:
    remote:
      path: TinyLife/SaveHandler.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateSerializer
    path: ../TinyLife/SaveHandler.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new <xref href=\"Newtonsoft.Json.JsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> that uses the <xref href=\"Newtonsoft.Json.JsonSerializerSettings\" data-throw-if-not-resolved=\"false\"></xref> returned in <xref href=\"TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler%7bNewtonsoft.Json.Serialization.ErrorEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static JsonSerializer CreateSerializer(EventHandler<ErrorEventArgs> errorHandler)
    parameters:
    - id: errorHandler
      type: System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs}
      description: An optional error handler.
    return:
      type: Newtonsoft.Json.JsonSerializer
      description: A new <xref href="Newtonsoft.Json.JsonSerializer" data-throw-if-not-resolved="false"></xref> with some default values set.
    content.vb: Public Shared Function CreateSerializer(errorHandler As EventHandler(Of ErrorEventArgs)) As JsonSerializer
  overload: TinyLife.SaveHandler.CreateSerializer*
  nameWithType.vb: SaveHandler.CreateSerializer(EventHandler(Of ErrorEventArgs))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.SaveHandler.CreateSerializer(System.EventHandler(Of Newtonsoft.Json.Serialization.ErrorEventArgs))
  name.vb: CreateSerializer(EventHandler(Of ErrorEventArgs))
references:
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Action{TinyLife.GameImpl,TinyLife.Mods.EventPhase}
  commentId: T:System.Action{TinyLife.GameImpl,TinyLife.Mods.EventPhase}
  parent: System
  definition: System.Action`2
  name: Action<GameImpl, EventPhase>
  nameWithType: Action<GameImpl, EventPhase>
  fullName: System.Action<TinyLife.GameImpl, TinyLife.Mods.EventPhase>
  nameWithType.vb: Action(Of GameImpl, EventPhase)
  fullName.vb: System.Action(Of TinyLife.GameImpl, TinyLife.Mods.EventPhase)
  name.vb: Action(Of GameImpl, EventPhase)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.GameImpl
    name: GameImpl
    nameWithType: GameImpl
    fullName: TinyLife.GameImpl
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.GameImpl
    name: GameImpl
    nameWithType: GameImpl
    fullName: TinyLife.GameImpl
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: TinyLife.SaveHandler.GetGameDir*
  commentId: Overload:TinyLife.SaveHandler.GetGameDir
  name: GetGameDir
  nameWithType: SaveHandler.GetGameDir
  fullName: TinyLife.SaveHandler.GetGameDir
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: TinyLife.SaveHandler.GetGameDir
  commentId: M:TinyLife.SaveHandler.GetGameDir
  isExternal: true
- uid: TinyLife.SaveHandler.GetSavesDir*
  commentId: Overload:TinyLife.SaveHandler.GetSavesDir
  name: GetSavesDir
  nameWithType: SaveHandler.GetSavesDir
  fullName: TinyLife.SaveHandler.GetSavesDir
- uid: TinyLife.SaveHandler.GetSavesDir
  commentId: M:TinyLife.SaveHandler.GetSavesDir
  isExternal: true
- uid: TinyLife.SaveHandler.GetSaveDir*
  commentId: Overload:TinyLife.SaveHandler.GetSaveDir
  name: GetSaveDir
  nameWithType: SaveHandler.GetSaveDir
  fullName: TinyLife.SaveHandler.GetSaveDir
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Newtonsoft.Json.JsonSerializerSettings
  commentId: T:Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  nameWithType: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.SaveHandler.CreateSerializerSettings*
  commentId: Overload:TinyLife.SaveHandler.CreateSerializerSettings
  name: CreateSerializerSettings
  nameWithType: SaveHandler.CreateSerializerSettings
  fullName: TinyLife.SaveHandler.CreateSerializerSettings
- uid: System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs}
  commentId: T:System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ErrorEventArgs>
  nameWithType: EventHandler<ErrorEventArgs>
  fullName: System.EventHandler<Newtonsoft.Json.Serialization.ErrorEventArgs>
  nameWithType.vb: EventHandler(Of ErrorEventArgs)
  fullName.vb: System.EventHandler(Of Newtonsoft.Json.Serialization.ErrorEventArgs)
  name.vb: EventHandler(Of ErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.Serialization.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: Newtonsoft.Json.Serialization.ErrorEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.Serialization.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: Newtonsoft.Json.Serialization.ErrorEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  commentId: M:TinyLife.SaveHandler.CreateSerializerSettings(System.EventHandler{Newtonsoft.Json.Serialization.ErrorEventArgs})
  isExternal: true
- uid: TinyLife.SaveHandler.CreateSerializer*
  commentId: Overload:TinyLife.SaveHandler.CreateSerializer
  name: CreateSerializer
  nameWithType: SaveHandler.CreateSerializer
  fullName: TinyLife.SaveHandler.CreateSerializer

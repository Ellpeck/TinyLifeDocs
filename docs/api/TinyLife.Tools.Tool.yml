### YamlMime:ManagedReference
items:
- uid: TinyLife.Tools.Tool
  commentId: T:TinyLife.Tools.Tool
  id: Tool
  parent: TinyLife.Tools
  children:
  - TinyLife.Tools.Tool.#ctor(MLEM.Textures.TextureRegion,System.Boolean)
  - TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  - TinyLife.Tools.Tool.BuildTools
  - TinyLife.Tools.Tool.CanSwitchGameModes
  - TinyLife.Tools.Tool.Closed
  - TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  - TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  - TinyLife.Tools.Tool.DisplayAsTab
  - TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  - TinyLife.Tools.Tool.ForceWallsUp
  - TinyLife.Tools.Tool.GetMouseCursor
  - TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  - TinyLife.Tools.Tool.Input
  - TinyLife.Tools.Tool.IsCopyPressed
  - TinyLife.Tools.Tool.IsOnLot(Microsoft.Xna.Framework.Point)
  - TinyLife.Tools.Tool.IsRotateCcwPressed
  - TinyLife.Tools.Tool.IsRotateCwPressed
  - TinyLife.Tools.Tool.Map
  - TinyLife.Tools.Tool.Money
  - TinyLife.Tools.Tool.MousePos
  - TinyLife.Tools.Tool.MoveTool
  - TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  - TinyLife.Tools.Tool.OnClosed
  - TinyLife.Tools.Tool.OnDraw
  - TinyLife.Tools.Tool.OnInitBuildModeUi
  - TinyLife.Tools.Tool.OnOpened
  - TinyLife.Tools.Tool.OnUpdate
  - TinyLife.Tools.Tool.Opened
  - TinyLife.Tools.Tool.PlayModeTool
  - TinyLife.Tools.Tool.RemoveTool
  - TinyLife.Tools.Tool.SelectedObject
  - TinyLife.Tools.Tool.SelectedWall
  - TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  - TinyLife.Tools.Tool.Texture
  - TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  langs:
  - csharp
  - vb
  name: Tool
  nameWithType: Tool
  fullName: TinyLife.Tools.Tool
  type: Class
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tool
    path: ../TinyLife/Tools/Tool.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nA tool is a type of game mode that is currently active.\nTools are split up into the <xref href=\"TinyLife.Tools.Tool.PlayModeTool\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Tools.Tool.BuildTools\" data-throw-if-not-resolved=\"false\"></xref>, the latter of which holds all tools that can be found in the build menu.\n"
  example: []
  syntax:
    content: public class Tool
    content.vb: Public Class Tool
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.Tools.FurnitureTool
  - TinyLife.Tools.LotTool
  - TinyLife.Tools.MoveLotTool
  - TinyLife.Tools.MoveTool
  - TinyLife.Tools.OpeningTool
  - TinyLife.Tools.PlayModeTool
  - TinyLife.Tools.RemoveTool
  - TinyLife.Tools.RoofTool
  - TinyLife.Tools.TileTool
  - TinyLife.Tools.WallpaperTool
  - TinyLife.Tools.WallTool
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Tools.Tool.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Tools.Tool.RemoveTool
  commentId: F:TinyLife.Tools.Tool.RemoveTool
  id: RemoveTool
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: RemoveTool
  nameWithType: Tool.RemoveTool
  fullName: TinyLife.Tools.Tool.RemoveTool
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveTool
    path: ../TinyLife/Tools/Tool.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe <xref href=\"TinyLife.Tools.Tool.RemoveTool\" data-throw-if-not-resolved=\"false\"></xref> singleton, which is activated using the Remove tab in the build menu or by holding the control key.\n"
  example: []
  syntax:
    content: public static readonly RemoveTool RemoveTool
    return:
      type: TinyLife.Tools.RemoveTool
    content.vb: Public Shared ReadOnly RemoveTool As RemoveTool
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.MoveTool
  commentId: F:TinyLife.Tools.Tool.MoveTool
  id: MoveTool
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: MoveTool
  nameWithType: Tool.MoveTool
  fullName: TinyLife.Tools.Tool.MoveTool
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MoveTool
    path: ../TinyLife/Tools/Tool.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe <xref href=\"TinyLife.Tools.Tool.MoveTool\" data-throw-if-not-resolved=\"false\"></xref> singleton\n"
  example: []
  syntax:
    content: public static readonly MoveTool MoveTool
    return:
      type: TinyLife.Tools.MoveTool
    content.vb: Public Shared ReadOnly MoveTool As MoveTool
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.PlayModeTool
  commentId: F:TinyLife.Tools.Tool.PlayModeTool
  id: PlayModeTool
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: PlayModeTool
  nameWithType: Tool.PlayModeTool
  fullName: TinyLife.Tools.Tool.PlayModeTool
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlayModeTool
    path: ../TinyLife/Tools/Tool.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe <xref href=\"TinyLife.Tools.Tool.PlayModeTool\" data-throw-if-not-resolved=\"false\"></xref> singleton, which is activated when build mode is inactive.\n"
  example: []
  syntax:
    content: public static readonly PlayModeTool PlayModeTool
    return:
      type: TinyLife.Tools.PlayModeTool
    content.vb: Public Shared ReadOnly PlayModeTool As PlayModeTool
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.BuildTools
  commentId: F:TinyLife.Tools.Tool.BuildTools
  id: BuildTools
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: BuildTools
  nameWithType: Tool.BuildTools
  fullName: TinyLife.Tools.Tool.BuildTools
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BuildTools
    path: ../TinyLife/Tools/Tool.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nA set of <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref> instances that can be activated using the build mode menu.\nAll tools in this list are automatically added to the menu.\n"
  example: []
  syntax:
    content: public static readonly List<Tool> BuildTools
    return:
      type: System.Collections.Generic.List{TinyLife.Tools.Tool}
    content.vb: Public Shared ReadOnly BuildTools As List(Of Tool)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.SelectedObject
  commentId: P:TinyLife.Tools.Tool.SelectedObject
  id: SelectedObject
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: SelectedObject
  nameWithType: Tool.SelectedObject
  fullName: TinyLife.Tools.Tool.SelectedObject
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SelectedObject
    path: ../TinyLife/Tools/Tool.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> that is currently below the mouse, or null if there is none.\nThis object selection mechanic uses pixel-perfect collision based on the object&apos;s rendered texture.\n"
  example: []
  syntax:
    content: public static MapObject SelectedObject { get; }
    parameters: []
    return:
      type: TinyLife.Objects.MapObject
    content.vb: Public Shared ReadOnly Property SelectedObject As MapObject
  overload: TinyLife.Tools.Tool.SelectedObject*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.SelectedWall
  commentId: P:TinyLife.Tools.Tool.SelectedWall
  id: SelectedWall
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: SelectedWall
  nameWithType: Tool.SelectedWall
  fullName: TinyLife.Tools.Tool.SelectedWall
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SelectedWall
    path: ../TinyLife/Tools/Tool.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that is currently below the mouse, or null if there is none.\nThis object selection mechanic uses pixel-perfect collision based on the wall&apos;s rendered texture.\n"
  example: []
  syntax:
    content: public static Wall SelectedWall { get; }
    parameters: []
    return:
      type: TinyLife.World.Wall
    content.vb: Public Shared ReadOnly Property SelectedWall As Wall
  overload: TinyLife.Tools.Tool.SelectedWall*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.IsRotateCwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCwPressed
  id: IsRotateCwPressed
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: IsRotateCwPressed
  nameWithType: Tool.IsRotateCwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCwPressed
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsRotateCwPressed
    path: ../TinyLife/Tools/Tool.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether a keybind or button combination is pressed that indicates that an object should be rotated clockwise now.\nThis should be queried after <xref href=\"TinyLife.Tools.Tool.IsRotateCcwPressed\" data-throw-if-not-resolved=\"false\"></xref>, since this doesn&apos;t check for any modifier keys.\n"
  example: []
  syntax:
    content: public static bool IsRotateCwPressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsRotateCwPressed As Boolean
  overload: TinyLife.Tools.Tool.IsRotateCwPressed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.IsRotateCcwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCcwPressed
  id: IsRotateCcwPressed
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: IsRotateCcwPressed
  nameWithType: Tool.IsRotateCcwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCcwPressed
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsRotateCcwPressed
    path: ../TinyLife/Tools/Tool.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether a keybind or button combination is pressed that indicates that an object should be rotated clockwise now.\nThis should be queried before <xref href=\"TinyLife.Tools.Tool.IsRotateCwPressed\" data-throw-if-not-resolved=\"false\"></xref>, since this checks for modifier keys being pressed.\n"
  example: []
  syntax:
    content: public static bool IsRotateCcwPressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsRotateCcwPressed As Boolean
  overload: TinyLife.Tools.Tool.IsRotateCcwPressed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.IsCopyPressed
  commentId: P:TinyLife.Tools.Tool.IsCopyPressed
  id: IsCopyPressed
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: IsCopyPressed
  nameWithType: Tool.IsCopyPressed
  fullName: TinyLife.Tools.Tool.IsCopyPressed
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCopyPressed
    path: ../TinyLife/Tools/Tool.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether a keybind or button combination is pressed that indicates that an object should be copied.\n"
  example: []
  syntax:
    content: public static bool IsCopyPressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsCopyPressed As Boolean
  overload: TinyLife.Tools.Tool.IsCopyPressed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.OnOpened
  commentId: E:TinyLife.Tools.Tool.OnOpened
  id: OnOpened
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnOpened
  nameWithType: Tool.OnOpened
  fullName: TinyLife.Tools.Tool.OnOpened
  type: Event
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnOpened
    path: ../TinyLife/Tools/Tool.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"TinyLife.Tools.Tool.Opened\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Tool> OnOpened
    return:
      type: System.Action{TinyLife.Tools.Tool}
    content.vb: Public Shared Event OnOpened As Action(Of Tool)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.OnClosed
  commentId: E:TinyLife.Tools.Tool.OnClosed
  id: OnClosed
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnClosed
  nameWithType: Tool.OnClosed
  fullName: TinyLife.Tools.Tool.OnClosed
  type: Event
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnClosed
    path: ../TinyLife/Tools/Tool.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"TinyLife.Tools.Tool.Closed\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Tool> OnClosed
    return:
      type: System.Action{TinyLife.Tools.Tool}
    content.vb: Public Shared Event OnClosed As Action(Of Tool)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.OnUpdate
  commentId: E:TinyLife.Tools.Tool.OnUpdate
  id: OnUpdate
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: Tool.OnUpdate
  fullName: TinyLife.Tools.Tool.OnUpdate
  type: Event
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnUpdate
    path: ../TinyLife/Tools/Tool.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref> is updated in <xref href=\"TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Tool, GameTime> OnUpdate
    return:
      type: System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime}
    content.vb: Public Shared Event OnUpdate As Action(Of Tool, GameTime)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.OnDraw
  commentId: E:TinyLife.Tools.Tool.OnDraw
  id: OnDraw
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnDraw
  nameWithType: Tool.OnDraw
  fullName: TinyLife.Tools.Tool.OnDraw
  type: Event
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnDraw
    path: ../TinyLife/Tools/Tool.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref> is drawn in <xref href=\"TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Tool, GameTime, SpriteBatch> OnDraw
    return:
      type: System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch}
    content.vb: Public Shared Event OnDraw As Action(Of Tool, GameTime, SpriteBatch)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.OnInitBuildModeUi
  commentId: E:TinyLife.Tools.Tool.OnInitBuildModeUi
  id: OnInitBuildModeUi
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnInitBuildModeUi
  nameWithType: Tool.OnInitBuildModeUi
  fullName: TinyLife.Tools.Tool.OnInitBuildModeUi
  type: Event
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnInitBuildModeUi
    path: ../TinyLife/Tools/Tool.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nAn event that is invoked when a <xref href=\"TinyLife.Tools.Tool\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel%2cMLEM.Ui.Elements.Panel)\" data-throw-if-not-resolved=\"false\"></xref> method is called.\n"
  example: []
  syntax:
    content: public static event Action<Tool, Panel, Panel> OnInitBuildModeUi
    return:
      type: System.Action{TinyLife.Tools.Tool,MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel}
    content.vb: Public Shared Event OnInitBuildModeUi As Action(Of Tool, Panel, Panel)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.Input
  commentId: P:TinyLife.Tools.Tool.Input
  id: Input
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Input
  nameWithType: Tool.Input
  fullName: TinyLife.Tools.Tool.Input
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Input
    path: ../TinyLife/Tools/Tool.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  example: []
  syntax:
    content: protected static InputHandler Input { get; }
    parameters: []
    return:
      type: MLEM.Input.InputHandler
    content.vb: Protected Shared ReadOnly Property Input As InputHandler
  overload: TinyLife.Tools.Tool.Input*
  modifiers.csharp:
  - protected
  - static
  - get
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.Map
  commentId: P:TinyLife.Tools.Tool.Map
  id: Map
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Tool.Map
  fullName: TinyLife.Tools.Tool.Map
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Tools/Tool.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe map that the game is currently on, or <pre><code>null</code></pre> if in the main menu\n"
  example: []
  syntax:
    content: protected static Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Protected Shared ReadOnly Property Map As Map
  overload: TinyLife.Tools.Tool.Map*
  modifiers.csharp:
  - protected
  - static
  - get
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: TinyLife.Tools.Tool.Money
  commentId: P:TinyLife.Tools.Tool.Money
  id: Money
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: Tool.Money
  fullName: TinyLife.Tools.Tool.Money
  type: Property
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Money
    path: ../TinyLife/Tools/Tool.cs
    startLine: 95
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe money that this household has, rounded by two digits after the decimal point\n"
  example: []
  syntax:
    content: protected static float Money { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Protected Shared Property Money As Single
  overload: TinyLife.Tools.Tool.Money*
  modifiers.csharp:
  - protected
  - static
  - get
  - set
  modifiers.vb:
  - Protected
  - Shared
- uid: TinyLife.Tools.Tool.Texture
  commentId: F:TinyLife.Tools.Tool.Texture
  id: Texture
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: Tool.Texture
  fullName: TinyLife.Tools.Tool.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/Tools/Tool.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe texture region that should be used to display this tool in the build menu\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Tools.Tool.DisplayAsTab
  commentId: F:TinyLife.Tools.Tool.DisplayAsTab
  id: DisplayAsTab
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: DisplayAsTab
  nameWithType: Tool.DisplayAsTab
  fullName: TinyLife.Tools.Tool.DisplayAsTab
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayAsTab
    path: ../TinyLife/Tools/Tool.cs
    startLine: 107
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nWhether or not this tool should be displayed as a tab (like the <xref href=\"TinyLife.Tools.Tool.RemoveTool\" data-throw-if-not-resolved=\"false\"></xref>) or a button in the build menu\n"
  example: []
  syntax:
    content: public readonly bool DisplayAsTab
    return:
      type: System.Boolean
    content.vb: Public ReadOnly DisplayAsTab As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Tools.Tool.MousePos
  commentId: F:TinyLife.Tools.Tool.MousePos
  id: MousePos
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: MousePos
  nameWithType: Tool.MousePos
  fullName: TinyLife.Tools.Tool.MousePos
  type: Field
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MousePos
    path: ../TinyLife/Tools/Tool.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThe position of the mouse in world coordinates.\nThis position is set every <xref href=\"TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> call.\n"
  example: []
  syntax:
    content: protected Vector2 MousePos
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Protected MousePos As Vector2
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Tools.Tool.#ctor(MLEM.Textures.TextureRegion,System.Boolean)
  commentId: M:TinyLife.Tools.Tool.#ctor(MLEM.Textures.TextureRegion,System.Boolean)
  id: '#ctor(MLEM.Textures.TextureRegion,System.Boolean)'
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Tool(TextureRegion, Boolean)
  nameWithType: Tool.Tool(TextureRegion, Boolean)
  fullName: TinyLife.Tools.Tool.Tool(MLEM.Textures.TextureRegion, System.Boolean)
  type: Constructor
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Tools/Tool.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCreates a new tool with the given settings\n"
  example: []
  syntax:
    content: public Tool(TextureRegion texture, bool displayAsTab = false)
    parameters:
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The texture of the tool icon
    - id: displayAsTab
      type: System.Boolean
      description: Wheteher or not this tool should display as a tab. Defaults to false.
    content.vb: Public Sub New(texture As TextureRegion, displayAsTab As Boolean = False)
  overload: TinyLife.Tools.Tool.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  commentId: M:TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  id: InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: InitBuildModeUi(Panel, Panel)
  nameWithType: Tool.InitBuildModeUi(Panel, Panel)
  fullName: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel, MLEM.Ui.Elements.Panel)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InitBuildModeUi
    path: ../TinyLife/Tools/Tool.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nOverride this method to add custom content to the passed ui elements.\nBy default, this method does nothing.\n"
  example: []
  syntax:
    content: protected virtual void InitBuildModeUi(Panel content, Panel zoom)
    parameters:
    - id: content
      type: MLEM.Ui.Elements.Panel
      description: The main content panel. Add custom <xref href="TinyLife.Tools.Tool.BuildModeButton(System.String%2cMLEM.Ui.Elements.Element.GenericCallback%2cMLEM.Ui.Elements.Element.DrawCallback%2cSystem.Single%2cMLEM.Textures.TextureRegion%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref> instances here.
    - id: zoom
      type: MLEM.Ui.Elements.Panel
      description: The zoom panel that contains <xref href="TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme%5b%5d%2cSystem.Action%7bSystem.Int32%2cSystem.Int32%7d%2cSystem.Func%7bSystem.Int32%2cSystem.Int32%2cSystem.Boolean%7d)" data-throw-if-not-resolved="false"></xref> and object previews
    content.vb: Protected Overridable Sub InitBuildModeUi(content As Panel, zoom As Panel)
  overload: TinyLife.Tools.Tool.InitBuildModeUi*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Tools.Tool.Opened
  commentId: M:TinyLife.Tools.Tool.Opened
  id: Opened
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Opened()
  nameWithType: Tool.Opened()
  fullName: TinyLife.Tools.Tool.Opened()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Opened
    path: ../TinyLife/Tools/Tool.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCalled when this build tool is opened.\nBy default, this method initializes several settings and calls <xref href=\"TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel%2cMLEM.Ui.Elements.Panel)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Opened()
    content.vb: Public Overridable Sub Opened
  overload: TinyLife.Tools.Tool.Opened*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.Closed
  commentId: M:TinyLife.Tools.Tool.Closed
  id: Closed
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Closed()
  nameWithType: Tool.Closed()
  fullName: TinyLife.Tools.Tool.Closed()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Closed
    path: ../TinyLife/Tools/Tool.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCalled when this build tool is closed.\nBy default, this method removes its elements from the ui.\n"
  example: []
  syntax:
    content: public virtual void Closed()
    content.vb: Public Overridable Sub Closed
  overload: TinyLife.Tools.Tool.Closed*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  id: Update(Microsoft.Xna.Framework.GameTime)
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: Tool.Update(GameTime)
  fullName: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Tools/Tool.cs
    startLine: 178
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThis method is called every update frame for the <xref href=\"TinyLife.GameImpl.CurrentTool\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method updates the <xref href=\"TinyLife.Tools.Tool.MousePos\" data-throw-if-not-resolved=\"false\"></xref> and invokes <xref href=\"TinyLife.Tools.Tool.OnUpdate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    content.vb: Public Overridable Sub Update(time As GameTime)
  overload: TinyLife.Tools.Tool.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  commentId: M:TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch)
  nameWithType: Tool.Draw(GameTime, SpriteBatch)
  fullName: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Tools/Tool.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThis method is called every draw frame for the <xref href=\"TinyLife.GameImpl.CurrentTool\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method is only called if the mouse is not hovering over any ui elements.\nBy default, this method invokes <xref href=\"TinyLife.Tools.Tool.OnDraw\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch used for drawing
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch)
  overload: TinyLife.Tools.Tool.Draw*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.GetMouseCursor
  commentId: M:TinyLife.Tools.Tool.GetMouseCursor
  id: GetMouseCursor
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: GetMouseCursor()
  nameWithType: Tool.GetMouseCursor()
  fullName: TinyLife.Tools.Tool.GetMouseCursor()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMouseCursor
    path: ../TinyLife/Tools/Tool.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns the <xref href=\"TinyLife.Uis.CursorType\" data-throw-if-not-resolved=\"false\"></xref> that this tool should currently display.\nBy default, <xref href=\"TinyLife.Uis.CursorType.Default\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual CursorType GetMouseCursor()
    return:
      type: TinyLife.Uis.CursorType
      description: The cursor type
    content.vb: Public Overridable Function GetMouseCursor As CursorType
  overload: TinyLife.Tools.Tool.GetMouseCursor*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.ForceWallsUp
  commentId: M:TinyLife.Tools.Tool.ForceWallsUp
  id: ForceWallsUp
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: ForceWallsUp()
  nameWithType: Tool.ForceWallsUp()
  fullName: TinyLife.Tools.Tool.ForceWallsUp()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ForceWallsUp
    path: ../TinyLife/Tools/Tool.cs
    startLine: 208
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether the <xref href=\"TinyLife.WallDisplay\" data-throw-if-not-resolved=\"false\"></xref> should be forcibly changed by this tool.\nIf it shouldn&apos;t be changed, null should be returned. Otherwise, the required <xref href=\"TinyLife.WallDisplay\" data-throw-if-not-resolved=\"false\"></xref> should be returned.\n"
  example: []
  syntax:
    content: public virtual WallDisplay? ForceWallsUp()
    return:
      type: System.Nullable{TinyLife.WallDisplay}
      description: The required wall display, or null if the default should be used
    content.vb: Public Overridable Function ForceWallsUp As WallDisplay?
  overload: TinyLife.Tools.Tool.ForceWallsUp*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.CanSwitchGameModes
  commentId: M:TinyLife.Tools.Tool.CanSwitchGameModes
  id: CanSwitchGameModes
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: CanSwitchGameModes()
  nameWithType: Tool.CanSwitchGameModes()
  fullName: TinyLife.Tools.Tool.CanSwitchGameModes()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanSwitchGameModes
    path: ../TinyLife/Tools/Tool.cs
    startLine: 216
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nWhether or not the game <xref href=\"TinyLife.GameImpl.CanSwitchGameModes\" data-throw-if-not-resolved=\"false\"></xref> currently, while this tool is selected\n"
  example: []
  syntax:
    content: public virtual bool CanSwitchGameModes()
    return:
      type: System.Boolean
      description: Whether the game can be mode switched right now
    content.vb: Public Overridable Function CanSwitchGameModes As Boolean
  overload: TinyLife.Tools.Tool.CanSwitchGameModes*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  commentId: M:TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  id: ShouldHighlightSelectedObject
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: ShouldHighlightSelectedObject()
  nameWithType: Tool.ShouldHighlightSelectedObject()
  fullName: TinyLife.Tools.Tool.ShouldHighlightSelectedObject()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldHighlightSelectedObject
    path: ../TinyLife/Tools/Tool.cs
    startLine: 225
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nWhether or not the <xref href=\"TinyLife.Tools.Tool.SelectedObject\" data-throw-if-not-resolved=\"false\"></xref> should currently have a white highlight around it.\nThis method defaults to return true if <xref href=\"TinyLife.GameImpl.IsCursorOnUi\" data-throw-if-not-resolved=\"false\"></xref> is false.\n"
  example: []
  syntax:
    content: public virtual bool ShouldHighlightSelectedObject()
    return:
      type: System.Boolean
      description: Whether or not the selected object should be highlighted
    content.vb: Public Overridable Function ShouldHighlightSelectedObject As Boolean
  overload: TinyLife.Tools.Tool.ShouldHighlightSelectedObject*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  commentId: M:TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  id: OnButtonCreated(MLEM.Ui.Elements.Button)
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: OnButtonCreated(Button)
  nameWithType: Tool.OnButtonCreated(Button)
  fullName: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnButtonCreated
    path: ../TinyLife/Tools/Tool.cs
    startLine: 233
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nA method that is called when this tool&apos;s build mode button is created.\n"
  example: []
  syntax:
    content: public virtual void OnButtonCreated(Button button)
    parameters:
    - id: button
      type: MLEM.Ui.Elements.Button
      description: The button that was created.
    content.vb: Public Overridable Sub OnButtonCreated(button As Button)
  overload: TinyLife.Tools.Tool.OnButtonCreated*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Tools.Tool.IsOnLot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Tools.Tool.IsOnLot(Microsoft.Xna.Framework.Point)
  id: IsOnLot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: IsOnLot(Point)
  nameWithType: Tool.IsOnLot(Point)
  fullName: TinyLife.Tools.Tool.IsOnLot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsOnLot
    path: ../TinyLife/Tools/Tool.cs
    startLine: 240
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether or not the passed position is on the currently edited lot (<xref href=\"TinyLife.GameImpl.CurrentLot\" data-throw-if-not-resolved=\"false\"></xref>)\n"
  example: []
  syntax:
    content: public static bool IsOnLot(Point pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position to check
    return:
      type: System.Boolean
      description: Whether or not the position is on the current lot
    content.vb: Public Shared Function IsOnLot(pos As Point) As Boolean
  overload: TinyLife.Tools.Tool.IsOnLot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  id: ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[], System.Action<System.Int32, System.Int32>, System.Func<System.Int32, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSelection
    path: ../TinyLife/Tools/Tool.cs
    startLine: 258
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCreates a new <xref href=\"MLEM.Ui.Elements.Group\" data-throw-if-not-resolved=\"false\"></xref> that resembles a set of color selection buttons.\nThis method uses <xref href=\"TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme%2cSystem.Action%7bSystem.Int32%7d%2cSystem.Func%7bSystem.Int32%2cSystem.Boolean%7d)\" data-throw-if-not-resolved=\"false\"></xref> to create multiple color selection areas for all of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">schemes</code> passed.\n"
  example: []
  syntax:
    content: public static Group ColorSelection(ColorScheme[] schemes, Action<int, int> onPressed, Func<int, int, bool> isSelected)
    parameters:
    - id: schemes
      type: TinyLife.Utilities.ColorScheme[]
      description: The color schemes to create buttons for.
    - id: onPressed
      type: System.Action{System.Int32,System.Int32}
      description: A function that returns the index of the color scheme, as well as the index of the color, that has been pressed.
    - id: isSelected
      type: System.Func{System.Int32,System.Int32,System.Boolean}
      description: A function that determines whether the color scheme and colors with the given indices are selected, which causes a rectangle to be drawn around it.
    return:
      type: MLEM.Ui.Elements.Group
      description: A group of color selection areas with the given settings.
    content.vb: Public Shared Function ColorSelection(schemes As ColorScheme(), onPressed As Action(Of Integer, Integer), isSelected As Func(Of Integer, Integer, Boolean)) As Group
  overload: TinyLife.Tools.Tool.ColorSelection*
  nameWithType.vb: Tool.ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme(), System.Action(Of System.Int32, System.Int32), System.Func(Of System.Int32, System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  id: ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action<System.Int32>, System.Func<System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSelection
    path: ../TinyLife/Tools/Tool.cs
    startLine: 279
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCreates a new <xref href=\"MLEM.Ui.Elements.Group\" data-throw-if-not-resolved=\"false\"></xref> that resembles a set of color selection buttons.\nThis is used by <xref href=\"TinyLife.Uis.CharacterCreator\" data-throw-if-not-resolved=\"false\"></xref>, as well as tools like the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Group ColorSelection(ColorScheme colors, Action<int> onPressed, Func<int, bool> isSelected)
    parameters:
    - id: colors
      type: TinyLife.Utilities.ColorScheme
      description: The color scheme to create buttons for
    - id: onPressed
      type: System.Action{System.Int32}
      description: A function that returns the index of the button (and color) that has been pressed
    - id: isSelected
      type: System.Func{System.Int32,System.Boolean}
      description: A function that determines whether the color with the given index is selected, which causes a rectangle to be drawn around it.
    return:
      type: MLEM.Ui.Elements.Group
      description: A group of buttons with the given settings
    content.vb: Public Shared Function ColorSelection(colors As ColorScheme, onPressed As Action(Of Integer), isSelected As Func(Of Integer, Boolean)) As Group
  overload: TinyLife.Tools.Tool.ColorSelection*
  nameWithType.vb: Tool.ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action(Of System.Int32), System.Func(Of System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
- uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  commentId: M:TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  id: BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  parent: TinyLife.Tools.Tool
  langs:
  - csharp
  - vb
  name: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  nameWithType: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  fullName: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.Single>)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/Tool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BuildModeButton
    path: ../TinyLife/Tools/Tool.cs
    startLine: 318
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nCreates a new <xref href=\"MLEM.Ui.Elements.Button\" data-throw-if-not-resolved=\"false\"></xref> in the style of each build mode content button, like the ones that display the furniture that can be bought.\n"
  example: []
  syntax:
    content: public static Button BuildModeButton(string name, Element.GenericCallback onPressed, Element.DrawCallback onDrawn, float price, TextureRegion icon, IEnumerable<string> description = null, float? customPrice = null)
    parameters:
    - id: name
      type: System.String
      description: The name that should be displayed when hovering the button. This should be unlocalized.
    - id: onPressed
      type: MLEM.Ui.Elements.Element.GenericCallback
      description: A fucntion that is called when the created button is pressed
    - id: onDrawn
      type: MLEM.Ui.Elements.Element.DrawCallback
      description: A function that is called when the created button is drawn
    - id: price
      type: System.Single
      description: The price that should be displayed for this object
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object
    - id: description
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An optional set of text lines that will be inserted into the tooltip&apos;s description part
    - id: customPrice
      type: System.Nullable{System.Single}
      description: The custom price that should be displayed (and used) instead of the <code data-dev-comment-type="paramref" class="paramref">price</code>. If this value is set, the regular <code data-dev-comment-type="paramref" class="paramref">price</code> will be displayed as strikethrough
    return:
      type: MLEM.Ui.Elements.Button
      description: A new button with the passed settings
    content.vb: Public Shared Function BuildModeButton(name As String, onPressed As Element.GenericCallback, onDrawn As Element.DrawCallback, price As Single, icon As TextureRegion, description As IEnumerable(Of String) = Nothing, customPrice As Single? = Nothing) As Button
  overload: TinyLife.Tools.Tool.BuildModeButton*
  nameWithType.vb: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable(Of System.String), System.Nullable(Of System.Single))
  name.vb: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
references:
- uid: TinyLife.Tools.Tool.PlayModeTool
  commentId: F:TinyLife.Tools.Tool.PlayModeTool
  parent: TinyLife.Tools.Tool
  name: PlayModeTool
  nameWithType: Tool.PlayModeTool
  fullName: TinyLife.Tools.Tool.PlayModeTool
- uid: TinyLife.Tools.Tool.BuildTools
  commentId: F:TinyLife.Tools.Tool.BuildTools
  parent: TinyLife.Tools.Tool
  name: BuildTools
  nameWithType: Tool.BuildTools
  fullName: TinyLife.Tools.Tool.BuildTools
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Tool>()
  nameWithType: Extensions.JsonCopy<Tool>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.Tool>()
  nameWithType.vb: Extensions.JsonCopy(Of Tool)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.Tool)()
  name.vb: JsonCopy(Of Tool)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Tool>
    nameWithType: Extensions.JsonCopy<Tool>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.Tool>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Tool)
    nameWithType: Extensions.JsonCopy(Of Tool)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.Tool)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool
  commentId: T:TinyLife.Tools.Tool
  parent: TinyLife.Tools
  name: Tool
  nameWithType: Tool
  fullName: TinyLife.Tools.Tool
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Tools.Tool.RemoveTool
  commentId: F:TinyLife.Tools.Tool.RemoveTool
  parent: TinyLife.Tools.Tool
  name: RemoveTool
  nameWithType: Tool.RemoveTool
  fullName: TinyLife.Tools.Tool.RemoveTool
- uid: TinyLife.Tools.RemoveTool
  commentId: T:TinyLife.Tools.RemoveTool
  parent: TinyLife.Tools
  name: RemoveTool
  nameWithType: RemoveTool
  fullName: TinyLife.Tools.RemoveTool
- uid: TinyLife.Tools.Tool.MoveTool
  commentId: F:TinyLife.Tools.Tool.MoveTool
  parent: TinyLife.Tools.Tool
  name: MoveTool
  nameWithType: Tool.MoveTool
  fullName: TinyLife.Tools.Tool.MoveTool
- uid: TinyLife.Tools.MoveTool
  commentId: T:TinyLife.Tools.MoveTool
  parent: TinyLife.Tools
  name: MoveTool
  nameWithType: MoveTool
  fullName: TinyLife.Tools.MoveTool
- uid: TinyLife.Tools.PlayModeTool
  commentId: T:TinyLife.Tools.PlayModeTool
  parent: TinyLife.Tools
  name: PlayModeTool
  nameWithType: PlayModeTool
  fullName: TinyLife.Tools.PlayModeTool
- uid: System.Collections.Generic.List{TinyLife.Tools.Tool}
  commentId: T:System.Collections.Generic.List{TinyLife.Tools.Tool}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Tool>
  nameWithType: List<Tool>
  fullName: System.Collections.Generic.List<TinyLife.Tools.Tool>
  nameWithType.vb: List(Of Tool)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Tools.Tool)
  name.vb: List(Of Tool)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Tools.Tool.SelectedObject*
  commentId: Overload:TinyLife.Tools.Tool.SelectedObject
  name: SelectedObject
  nameWithType: Tool.SelectedObject
  fullName: TinyLife.Tools.Tool.SelectedObject
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Tools.Tool.SelectedWall*
  commentId: Overload:TinyLife.Tools.Tool.SelectedWall
  name: SelectedWall
  nameWithType: Tool.SelectedWall
  fullName: TinyLife.Tools.Tool.SelectedWall
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Tools.Tool.IsRotateCcwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCcwPressed
  parent: TinyLife.Tools.Tool
  name: IsRotateCcwPressed
  nameWithType: Tool.IsRotateCcwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCcwPressed
- uid: TinyLife.Tools.Tool.IsRotateCwPressed*
  commentId: Overload:TinyLife.Tools.Tool.IsRotateCwPressed
  name: IsRotateCwPressed
  nameWithType: Tool.IsRotateCwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCwPressed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Tools.Tool.IsRotateCwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCwPressed
  parent: TinyLife.Tools.Tool
  name: IsRotateCwPressed
  nameWithType: Tool.IsRotateCwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCwPressed
- uid: TinyLife.Tools.Tool.IsRotateCcwPressed*
  commentId: Overload:TinyLife.Tools.Tool.IsRotateCcwPressed
  name: IsRotateCcwPressed
  nameWithType: Tool.IsRotateCcwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCcwPressed
- uid: TinyLife.Tools.Tool.IsCopyPressed*
  commentId: Overload:TinyLife.Tools.Tool.IsCopyPressed
  name: IsCopyPressed
  nameWithType: Tool.IsCopyPressed
  fullName: TinyLife.Tools.Tool.IsCopyPressed
- uid: TinyLife.Tools.Tool.Opened
  commentId: M:TinyLife.Tools.Tool.Opened
  parent: TinyLife.Tools.Tool
  name: Opened()
  nameWithType: Tool.Opened()
  fullName: TinyLife.Tools.Tool.Opened()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Opened
    name: Opened
    nameWithType: Tool.Opened
    fullName: TinyLife.Tools.Tool.Opened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Opened
    name: Opened
    nameWithType: Tool.Opened
    fullName: TinyLife.Tools.Tool.Opened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{TinyLife.Tools.Tool}
  commentId: T:System.Action{TinyLife.Tools.Tool}
  parent: System
  definition: System.Action`1
  name: Action<Tool>
  nameWithType: Action<Tool>
  fullName: System.Action<TinyLife.Tools.Tool>
  nameWithType.vb: Action(Of Tool)
  fullName.vb: System.Action(Of TinyLife.Tools.Tool)
  name.vb: Action(Of Tool)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.Closed
  commentId: M:TinyLife.Tools.Tool.Closed
  parent: TinyLife.Tools.Tool
  name: Closed()
  nameWithType: Tool.Closed()
  fullName: TinyLife.Tools.Tool.Closed()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Closed
    name: Closed
    nameWithType: Tool.Closed
    fullName: TinyLife.Tools.Tool.Closed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Closed
    name: Closed
    nameWithType: Tool.Closed
    fullName: TinyLife.Tools.Tool.Closed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: Update(GameTime)
  nameWithType: Tool.Update(GameTime)
  fullName: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: Tool.Update
    fullName: TinyLife.Tools.Tool.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: Tool.Update
    fullName: TinyLife.Tools.Tool.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime}
  commentId: T:System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime}
  parent: System
  definition: System.Action`2
  name: Action<Tool, GameTime>
  nameWithType: Action<Tool, GameTime>
  fullName: System.Action<TinyLife.Tools.Tool, Microsoft.Xna.Framework.GameTime>
  nameWithType.vb: Action(Of Tool, GameTime)
  fullName.vb: System.Action(Of TinyLife.Tools.Tool, Microsoft.Xna.Framework.GameTime)
  name.vb: Action(Of Tool, GameTime)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  commentId: M:TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: Draw(GameTime, SpriteBatch)
  nameWithType: Tool.Draw(GameTime, SpriteBatch)
  fullName: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
    name: Draw
    nameWithType: Tool.Draw
    fullName: TinyLife.Tools.Tool.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
    name: Draw
    nameWithType: Tool.Draw
    fullName: TinyLife.Tools.Tool.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch}
  commentId: T:System.Action{TinyLife.Tools.Tool,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch}
  parent: System
  definition: System.Action`3
  name: Action<Tool, GameTime, SpriteBatch>
  nameWithType: Action<Tool, GameTime, SpriteBatch>
  fullName: System.Action<TinyLife.Tools.Tool, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch>
  nameWithType.vb: Action(Of Tool, GameTime, SpriteBatch)
  fullName.vb: System.Action(Of TinyLife.Tools.Tool, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch)
  name.vb: Action(Of Tool, GameTime, SpriteBatch)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  commentId: M:TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: InitBuildModeUi(Panel, Panel)
  nameWithType: Tool.InitBuildModeUi(Panel, Panel)
  fullName: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel, MLEM.Ui.Elements.Panel)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
    name: InitBuildModeUi
    nameWithType: Tool.InitBuildModeUi
    fullName: TinyLife.Tools.Tool.InitBuildModeUi
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
    name: InitBuildModeUi
    nameWithType: Tool.InitBuildModeUi
    fullName: TinyLife.Tools.Tool.InitBuildModeUi
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{TinyLife.Tools.Tool,MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{TinyLife.Tools.Tool,MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`3
  name: Action<Tool, Panel, Panel>
  nameWithType: Action<Tool, Panel, Panel>
  fullName: System.Action<TinyLife.Tools.Tool, MLEM.Ui.Elements.Panel, MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of Tool, Panel, Panel)
  fullName.vb: System.Action(Of TinyLife.Tools.Tool, MLEM.Ui.Elements.Panel, MLEM.Ui.Elements.Panel)
  name.vb: Action(Of Tool, Panel, Panel)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Tools.Tool
    name: Tool
    nameWithType: Tool
    fullName: TinyLife.Tools.Tool
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Startup.MlemGame.InputHandler
  commentId: P:MLEM.Startup.MlemGame.InputHandler
  parent: MLEM.Startup.MlemGame
  isExternal: true
  name: InputHandler
  nameWithType: MlemGame.InputHandler
  fullName: MLEM.Startup.MlemGame.InputHandler
- uid: TinyLife.Tools.Tool.Input*
  commentId: Overload:TinyLife.Tools.Tool.Input
  name: Input
  nameWithType: Tool.Input
  fullName: TinyLife.Tools.Tool.Input
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  parent: MLEM.Input
  isExternal: true
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
- uid: MLEM.Startup.MlemGame
  commentId: T:MLEM.Startup.MlemGame
  parent: MLEM.Startup
  isExternal: true
  name: MlemGame
  nameWithType: MlemGame
  fullName: MLEM.Startup.MlemGame
- uid: MLEM.Input
  commentId: N:MLEM.Input
  isExternal: true
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
- uid: MLEM.Startup
  commentId: N:MLEM.Startup
  isExternal: true
  name: MLEM.Startup
  nameWithType: MLEM.Startup
  fullName: MLEM.Startup
- uid: TinyLife.GameImpl.Map
  commentId: P:TinyLife.GameImpl.Map
  isExternal: true
- uid: TinyLife.Tools.Tool.Map*
  commentId: Overload:TinyLife.Tools.Tool.Map
  name: Map
  nameWithType: Tool.Map
  fullName: TinyLife.Tools.Tool.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Household.Money
  commentId: P:TinyLife.World.Household.Money
  isExternal: true
- uid: TinyLife.Tools.Tool.Money*
  commentId: Overload:TinyLife.Tools.Tool.Money
  name: Money
  nameWithType: Tool.Money
  fullName: TinyLife.Tools.Tool.Money
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Tools.Tool.#ctor*
  commentId: Overload:TinyLife.Tools.Tool.#ctor
  name: Tool
  nameWithType: Tool.Tool
  fullName: TinyLife.Tools.Tool.Tool
- uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  commentId: M:TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  nameWithType: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  fullName: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.Single>)
  nameWithType.vb: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
  fullName.vb: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable(Of System.String), System.Nullable(Of System.Single))
  name.vb: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
    name: BuildModeButton
    nameWithType: Tool.BuildModeButton
    fullName: TinyLife.Tools.Tool.BuildModeButton
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: Element.GenericCallback
    nameWithType: Element.GenericCallback
    fullName: MLEM.Ui.Elements.Element.GenericCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: Element.DrawCallback
    nameWithType: Element.DrawCallback
    fullName: MLEM.Ui.Elements.Element.DrawCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
    name: BuildModeButton
    nameWithType: Tool.BuildModeButton
    fullName: TinyLife.Tools.Tool.BuildModeButton
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: Element.GenericCallback
    nameWithType: Element.GenericCallback
    fullName: MLEM.Ui.Elements.Element.GenericCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: Element.DrawCallback
    nameWithType: Element.DrawCallback
    fullName: MLEM.Ui.Elements.Element.DrawCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[], System.Action<System.Int32, System.Int32>, System.Func<System.Int32, System.Int32, System.Boolean>)
  nameWithType.vb: Tool.ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme(), System.Action(Of System.Int32, System.Int32), System.Func(Of System.Int32, System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.InitBuildModeUi*
  commentId: Overload:TinyLife.Tools.Tool.InitBuildModeUi
  name: InitBuildModeUi
  nameWithType: Tool.InitBuildModeUi
  fullName: TinyLife.Tools.Tool.InitBuildModeUi
- uid: MLEM.Ui.Elements.Panel
  commentId: T:MLEM.Ui.Elements.Panel
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Panel
  nameWithType: Panel
  fullName: MLEM.Ui.Elements.Panel
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Tools.Tool.Opened*
  commentId: Overload:TinyLife.Tools.Tool.Opened
  name: Opened
  nameWithType: Tool.Opened
  fullName: TinyLife.Tools.Tool.Opened
- uid: TinyLife.Tools.Tool.Closed*
  commentId: Overload:TinyLife.Tools.Tool.Closed
  name: Closed
  nameWithType: Tool.Closed
  fullName: TinyLife.Tools.Tool.Closed
- uid: TinyLife.GameImpl.CurrentTool
  commentId: P:TinyLife.GameImpl.CurrentTool
  isExternal: true
- uid: TinyLife.Tools.Tool.MousePos
  commentId: F:TinyLife.Tools.Tool.MousePos
  parent: TinyLife.Tools.Tool
  name: MousePos
  nameWithType: Tool.MousePos
  fullName: TinyLife.Tools.Tool.MousePos
- uid: TinyLife.Tools.Tool.OnUpdate
  commentId: E:TinyLife.Tools.Tool.OnUpdate
  parent: TinyLife.Tools.Tool
  name: OnUpdate
  nameWithType: Tool.OnUpdate
  fullName: TinyLife.Tools.Tool.OnUpdate
- uid: TinyLife.Tools.Tool.Update*
  commentId: Overload:TinyLife.Tools.Tool.Update
  name: Update
  nameWithType: Tool.Update
  fullName: TinyLife.Tools.Tool.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: TinyLife.Tools.Tool.OnDraw
  commentId: E:TinyLife.Tools.Tool.OnDraw
  parent: TinyLife.Tools.Tool
  name: OnDraw
  nameWithType: Tool.OnDraw
  fullName: TinyLife.Tools.Tool.OnDraw
- uid: TinyLife.Tools.Tool.Draw*
  commentId: Overload:TinyLife.Tools.Tool.Draw
  name: Draw
  nameWithType: Tool.Draw
  fullName: TinyLife.Tools.Tool.Draw
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: TinyLife.Uis.CursorType
  commentId: T:TinyLife.Uis.CursorType
  parent: TinyLife.Uis
  name: CursorType
  nameWithType: CursorType
  fullName: TinyLife.Uis.CursorType
- uid: TinyLife.Uis.CursorType.Default
  commentId: F:TinyLife.Uis.CursorType.Default
  isExternal: true
- uid: TinyLife.Tools.Tool.GetMouseCursor*
  commentId: Overload:TinyLife.Tools.Tool.GetMouseCursor
  name: GetMouseCursor
  nameWithType: Tool.GetMouseCursor
  fullName: TinyLife.Tools.Tool.GetMouseCursor
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: TinyLife.WallDisplay
  commentId: T:TinyLife.WallDisplay
  parent: TinyLife
  name: WallDisplay
  nameWithType: WallDisplay
  fullName: TinyLife.WallDisplay
- uid: TinyLife.Tools.Tool.ForceWallsUp*
  commentId: Overload:TinyLife.Tools.Tool.ForceWallsUp
  name: ForceWallsUp
  nameWithType: Tool.ForceWallsUp
  fullName: TinyLife.Tools.Tool.ForceWallsUp
- uid: System.Nullable{TinyLife.WallDisplay}
  commentId: T:System.Nullable{TinyLife.WallDisplay}
  parent: System
  definition: System.Nullable`1
  name: Nullable<WallDisplay>
  nameWithType: Nullable<WallDisplay>
  fullName: System.Nullable<TinyLife.WallDisplay>
  nameWithType.vb: Nullable(Of WallDisplay)
  fullName.vb: System.Nullable(Of TinyLife.WallDisplay)
  name.vb: Nullable(Of WallDisplay)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.WallDisplay
    name: WallDisplay
    nameWithType: WallDisplay
    fullName: TinyLife.WallDisplay
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.WallDisplay
    name: WallDisplay
    nameWithType: WallDisplay
    fullName: TinyLife.WallDisplay
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GameImpl.CanSwitchGameModes
  commentId: M:TinyLife.GameImpl.CanSwitchGameModes
  isExternal: true
- uid: TinyLife.Tools.Tool.CanSwitchGameModes*
  commentId: Overload:TinyLife.Tools.Tool.CanSwitchGameModes
  name: CanSwitchGameModes
  nameWithType: Tool.CanSwitchGameModes
  fullName: TinyLife.Tools.Tool.CanSwitchGameModes
- uid: TinyLife.Tools.Tool.SelectedObject
  commentId: P:TinyLife.Tools.Tool.SelectedObject
  parent: TinyLife.Tools.Tool
  name: SelectedObject
  nameWithType: Tool.SelectedObject
  fullName: TinyLife.Tools.Tool.SelectedObject
- uid: TinyLife.GameImpl.IsCursorOnUi
  commentId: M:TinyLife.GameImpl.IsCursorOnUi
  isExternal: true
- uid: TinyLife.Tools.Tool.ShouldHighlightSelectedObject*
  commentId: Overload:TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  name: ShouldHighlightSelectedObject
  nameWithType: Tool.ShouldHighlightSelectedObject
  fullName: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
- uid: TinyLife.Tools.Tool.OnButtonCreated*
  commentId: Overload:TinyLife.Tools.Tool.OnButtonCreated
  name: OnButtonCreated
  nameWithType: Tool.OnButtonCreated
  fullName: TinyLife.Tools.Tool.OnButtonCreated
- uid: MLEM.Ui.Elements.Button
  commentId: T:MLEM.Ui.Elements.Button
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Button
  nameWithType: Button
  fullName: MLEM.Ui.Elements.Button
- uid: TinyLife.GameImpl.CurrentLot
  commentId: P:TinyLife.GameImpl.CurrentLot
  isExternal: true
- uid: TinyLife.Tools.Tool.IsOnLot*
  commentId: Overload:TinyLife.Tools.Tool.IsOnLot
  name: IsOnLot
  nameWithType: Tool.IsOnLot
  fullName: TinyLife.Tools.Tool.IsOnLot
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: MLEM.Ui.Elements.Group
  commentId: T:MLEM.Ui.Elements.Group
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Group
  nameWithType: Group
  fullName: MLEM.Ui.Elements.Group
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action<System.Int32>, System.Func<System.Int32, System.Boolean>)
  nameWithType.vb: Tool.ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action(Of System.Int32), System.Func(Of System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.ColorSelection*
  commentId: Overload:TinyLife.Tools.Tool.ColorSelection
  name: ColorSelection
  nameWithType: Tool.ColorSelection
  fullName: TinyLife.Tools.Tool.ColorSelection
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{System.Int32,System.Int32}
  commentId: T:System.Action{System.Int32,System.Int32}
  parent: System
  definition: System.Action`2
  name: Action<Int32, Int32>
  nameWithType: Action<Int32, Int32>
  fullName: System.Action<System.Int32, System.Int32>
  nameWithType.vb: Action(Of Int32, Int32)
  fullName.vb: System.Action(Of System.Int32, System.Int32)
  name.vb: Action(Of Int32, Int32)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Int32,System.Int32,System.Boolean}
  commentId: T:System.Func{System.Int32,System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<Int32, Int32, Boolean>
  nameWithType: Func<Int32, Int32, Boolean>
  fullName: System.Func<System.Int32, System.Int32, System.Boolean>
  nameWithType.vb: Func(Of Int32, Int32, Boolean)
  fullName.vb: System.Func(Of System.Int32, System.Int32, System.Boolean)
  name.vb: Func(Of Int32, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.CharacterCreator
  commentId: T:TinyLife.Uis.CharacterCreator
  parent: TinyLife.Uis
  name: CharacterCreator
  nameWithType: CharacterCreator
  fullName: TinyLife.Uis.CharacterCreator
- uid: TinyLife.Tools.FurnitureTool
  commentId: T:TinyLife.Tools.FurnitureTool
  name: FurnitureTool
  nameWithType: FurnitureTool
  fullName: TinyLife.Tools.FurnitureTool
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: System.Action{System.Int32}
  commentId: T:System.Action{System.Int32}
  parent: System
  definition: System.Action`1
  name: Action<Int32>
  nameWithType: Action<Int32>
  fullName: System.Action<System.Int32>
  nameWithType.vb: Action(Of Int32)
  fullName.vb: System.Action(Of System.Int32)
  name.vb: Action(Of Int32)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Int32,System.Boolean}
  commentId: T:System.Func{System.Int32,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Int32, Boolean>
  nameWithType: Func<Int32, Boolean>
  fullName: System.Func<System.Int32, System.Boolean>
  nameWithType.vb: Func(Of Int32, Boolean)
  fullName.vb: System.Func(Of System.Int32, System.Boolean)
  name.vb: Func(Of Int32, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.BuildModeButton*
  commentId: Overload:TinyLife.Tools.Tool.BuildModeButton
  name: BuildModeButton
  nameWithType: Tool.BuildModeButton
  fullName: TinyLife.Tools.Tool.BuildModeButton
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Ui.Elements.Element.GenericCallback
  commentId: T:MLEM.Ui.Elements.Element.GenericCallback
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element.GenericCallback
  nameWithType: Element.GenericCallback
  fullName: MLEM.Ui.Elements.Element.GenericCallback
- uid: MLEM.Ui.Elements.Element.DrawCallback
  commentId: T:MLEM.Ui.Elements.Element.DrawCallback
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element.DrawCallback
  nameWithType: Element.DrawCallback
  fullName: MLEM.Ui.Elements.Element.DrawCallback
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

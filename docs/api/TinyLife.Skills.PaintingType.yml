### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.PaintingType
  commentId: T:TinyLife.Skills.PaintingType
  id: PaintingType
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.PaintingType.#ctor(System.String,MonoGame.Extended.Range{System.Int32},System.Single)
  - TinyLife.Skills.PaintingType.BaseMarkup
  - TinyLife.Skills.PaintingType.LevelRange
  - TinyLife.Skills.PaintingType.Name
  - TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  - TinyLife.Skills.PaintingType.Texture
  - TinyLife.Skills.PaintingType.Types
  langs:
  - csharp
  - vb
  name: PaintingType
  nameWithType: PaintingType
  fullName: TinyLife.Skills.PaintingType
  type: Class
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PaintingType
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis class represents a type of <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref> that can be created using the <xref href=\"TinyLife.Skills.SkillType.Painting\" data-throw-if-not-resolved=\"false\"></xref>.\nPainting types are registered using <xref href=\"TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<PaintingType>), new object[]{typeof(PaintingType), "PrivateTypes"})]

      public class PaintingType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of PaintingType)), New Object() {GetType(PaintingType), "PrivateTypes"})>

      Public Class PaintingType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.PaintingType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.PaintingType.Types
  commentId: F:TinyLife.Skills.PaintingType.Types
  id: Types
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: PaintingType.Types
  fullName: TinyLife.Skills.PaintingType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAll registered <xref href=\"TinyLife.Skills.PaintingType\" data-throw-if-not-resolved=\"false\"></xref> instances in the game and in active mods\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, PaintingType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.PaintingType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, PaintingType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.PaintingType.Name
  commentId: F:TinyLife.Skills.PaintingType.Name
  id: Name
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PaintingType.Name
  fullName: TinyLife.Skills.PaintingType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe name of this painting type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.PaintingType.LevelRange
  commentId: F:TinyLife.Skills.PaintingType.LevelRange
  id: LevelRange
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: LevelRange
  nameWithType: PaintingType.LevelRange
  fullName: TinyLife.Skills.PaintingType.LevelRange
  type: Field
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LevelRange
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"MonoGame.Extended.Range%601\" data-throw-if-not-resolved=\"false\"></xref> of levels of the <xref href=\"TinyLife.Skills.SkillType.Painting\" data-throw-if-not-resolved=\"false\"></xref> skill that allows creating this painting\n"
  example: []
  syntax:
    content: public readonly Range<int> LevelRange
    return:
      type: MonoGame.Extended.Range{System.Int32}
    content.vb: Public ReadOnly LevelRange As Range(Of Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.PaintingType.Texture
  commentId: F:TinyLife.Skills.PaintingType.Texture
  id: Texture
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: PaintingType.Texture
  fullName: TinyLife.Skills.PaintingType.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe texture that this painting uses.\nThe texture is loaded from the <xref href=\"TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)\" data-throw-if-not-resolved=\"false\"></xref> as &quot;Painting<xref href=\"TinyLife.Skills.PaintingType.Name\" data-throw-if-not-resolved=\"false\"></xref>&quot;\nNote that this texture is just an overlay; the frame and white background are automatically drawn.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.PaintingType.BaseMarkup
  commentId: F:TinyLife.Skills.PaintingType.BaseMarkup
  id: BaseMarkup
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: BaseMarkup
  nameWithType: PaintingType.BaseMarkup
  fullName: TinyLife.Skills.PaintingType.BaseMarkup
  type: Field
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BaseMarkup
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe multiplier with which the created <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>&apos;s price will be marked up.\nBefore this multiplier is applied, the level and quality modifiers are also applied.\n"
  example: []
  syntax:
    content: public readonly float BaseMarkup
    return:
      type: System.Single
    content.vb: Public ReadOnly BaseMarkup As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.PaintingType.#ctor(System.String,MonoGame.Extended.Range{System.Int32},System.Single)
  commentId: M:TinyLife.Skills.PaintingType.#ctor(System.String,MonoGame.Extended.Range{System.Int32},System.Single)
  id: '#ctor(System.String,MonoGame.Extended.Range{System.Int32},System.Single)'
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: PaintingType(String, Range<Int32>, Single)
  nameWithType: PaintingType.PaintingType(String, Range<Int32>, Single)
  fullName: TinyLife.Skills.PaintingType.PaintingType(System.String, MonoGame.Extended.Range<System.Int32>, System.Single)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new painting type with the given settings\n"
  example: []
  syntax:
    content: public PaintingType(string name, Range<int> levelRange, float baseMarkup)
    parameters:
    - id: name
      type: System.String
      description: The name of this painting type
    - id: levelRange
      type: MonoGame.Extended.Range{System.Int32}
      description: The range of levels of the painting skill that should allow for creation of this painting
    - id: baseMarkup
      type: System.Single
      description: The multiplier with which the created painting&apos;s price will be marked up
    content.vb: Public Sub New(name As String, levelRange As Range(Of Integer), baseMarkup As Single)
  overload: TinyLife.Skills.PaintingType.#ctor*
  nameWithType.vb: PaintingType.PaintingType(String, Range(Of Int32), Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.PaintingType.PaintingType(System.String, MonoGame.Extended.Range(Of System.Int32), System.Single)
  name.vb: PaintingType(String, Range(Of Int32), Single)
- uid: TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  commentId: M:TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  id: Register(TinyLife.Skills.PaintingType)
  parent: TinyLife.Skills.PaintingType
  langs:
  - csharp
  - vb
  name: Register(PaintingType)
  nameWithType: PaintingType.Register(PaintingType)
  fullName: TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/PaintingType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Skills/PaintingType.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nRegisters a painting type with the given settings to the <xref href=\"TinyLife.Skills.PaintingType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static void Register(PaintingType type)
    parameters:
    - id: type
      type: TinyLife.Skills.PaintingType
      description: The type to register
    content.vb: Public Shared Sub Register(type As PaintingType)
  overload: TinyLife.Skills.PaintingType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Painting
  commentId: T:TinyLife.Objects.Painting
  name: Painting
  nameWithType: Painting
  fullName: TinyLife.Objects.Painting
- uid: TinyLife.Skills.SkillType.Painting
  commentId: F:TinyLife.Skills.SkillType.Painting
  isExternal: true
- uid: TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  commentId: M:TinyLife.Skills.PaintingType.Register(TinyLife.Skills.PaintingType)
  isExternal: true
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.PaintingType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<PaintingType>()
  nameWithType: Extensions.JsonCopy<PaintingType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.PaintingType>()
  nameWithType.vb: Extensions.JsonCopy(Of PaintingType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.PaintingType)()
  name.vb: JsonCopy(Of PaintingType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<PaintingType>
    nameWithType: Extensions.JsonCopy<PaintingType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.PaintingType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of PaintingType)
    nameWithType: Extensions.JsonCopy(Of PaintingType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.PaintingType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.PaintingType
  commentId: T:TinyLife.Skills.PaintingType
  parent: TinyLife.Skills
  name: PaintingType
  nameWithType: PaintingType
  fullName: TinyLife.Skills.PaintingType
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.PaintingType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.PaintingType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, PaintingType>
  nameWithType: ReadOnlyDictionary<String, PaintingType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Skills.PaintingType>
  nameWithType.vb: ReadOnlyDictionary(Of String, PaintingType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Skills.PaintingType)
  name.vb: ReadOnlyDictionary(Of String, PaintingType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.PaintingType
    name: PaintingType
    nameWithType: PaintingType
    fullName: TinyLife.Skills.PaintingType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.PaintingType
    name: PaintingType
    nameWithType: PaintingType
    fullName: TinyLife.Skills.PaintingType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MonoGame.Extended.Range`1
  commentId: T:MonoGame.Extended.Range`1
  isExternal: true
  name: Range<T>
  nameWithType: Range<T>
  fullName: MonoGame.Extended.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: MonoGame.Extended.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MonoGame.Extended.Range{System.Int32}
  commentId: T:MonoGame.Extended.Range{System.Int32}
  parent: MonoGame.Extended
  definition: MonoGame.Extended.Range`1
  name: Range<Int32>
  nameWithType: Range<Int32>
  fullName: MonoGame.Extended.Range<System.Int32>
  nameWithType.vb: Range(Of Int32)
  fullName.vb: MonoGame.Extended.Range(Of System.Int32)
  name.vb: Range(Of Int32)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MonoGame.Extended
  commentId: N:MonoGame.Extended
  isExternal: true
  name: MonoGame.Extended
  nameWithType: MonoGame.Extended
  fullName: MonoGame.Extended
- uid: TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  isExternal: true
- uid: TinyLife.Skills.PaintingType.Name
  commentId: F:TinyLife.Skills.PaintingType.Name
  isExternal: true
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Skills.PaintingType.#ctor*
  commentId: Overload:TinyLife.Skills.PaintingType.#ctor
  name: PaintingType
  nameWithType: PaintingType.PaintingType
  fullName: TinyLife.Skills.PaintingType.PaintingType
- uid: TinyLife.Skills.PaintingType.Types
  commentId: F:TinyLife.Skills.PaintingType.Types
  isExternal: true
- uid: TinyLife.Skills.PaintingType.Register*
  commentId: Overload:TinyLife.Skills.PaintingType.Register
  name: Register
  nameWithType: PaintingType.Register
  fullName: TinyLife.Skills.PaintingType.Register

### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  id: ObjectSpot
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  - TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  - TinyLife.Objects.ObjectSpot.BarSpots
  - TinyLife.Objects.ObjectSpot.CounterSpots(System.Boolean)
  - TinyLife.Objects.ObjectSpot.DeskSpots(System.Single,System.Boolean)
  - TinyLife.Objects.ObjectSpot.DoubleShelfSpots(System.Single)
  - TinyLife.Objects.ObjectSpot.GetContents``1(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.ObjectSpot.IsFurnitureAllowed
  - TinyLife.Objects.ObjectSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.ObjectSpot.TableSpots(Microsoft.Xna.Framework.Point)
  langs:
  - csharp
  - vb
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
  type: Class
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ObjectSpot
    path: Objects/ActionSpot.cs
    startLine: 282
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn object spot is a <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> extension that is used by <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> to declare a location that another <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> object can be slotted into.\nThis behavior is used for things like plates on counters, flower pots on bedside tables etc.\n"
  example: []
  syntax:
    content: 'public class ObjectSpot : AbstractSpot'
    content.vb: >-
      Public Class ObjectSpot
          Inherits AbstractSpot
  inheritance:
  - System.Object
  - TinyLife.Objects.AbstractSpot
  inheritedMembers:
  - TinyLife.Objects.AbstractSpot.YOffset
  - TinyLife.Objects.AbstractSpot.Offset
  - TinyLife.Objects.AbstractSpot.VisualOffset
  - TinyLife.Objects.AbstractSpot.ValidDirections
  - TinyLife.Objects.AbstractSpot.Group
  - TinyLife.Objects.AbstractSpot.DrawLayer
  - TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  - TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.ObjectSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.ObjectSpot.IsFurnitureAllowed
  commentId: F:TinyLife.Objects.ObjectSpot.IsFurnitureAllowed
  id: IsFurnitureAllowed
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: IsFurnitureAllowed
  nameWithType: ObjectSpot.IsFurnitureAllowed
  fullName: TinyLife.Objects.ObjectSpot.IsFurnitureAllowed
  type: Field
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFurnitureAllowed
    path: Objects/ActionSpot.cs
    startLine: 287
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA predicate that determines if the given <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> is allowed to be put into this object spot\n"
  example: []
  syntax:
    content: public readonly Predicate<FurnitureType> IsFurnitureAllowed
    return:
      type: System.Predicate{TinyLife.Objects.FurnitureType}
    content.vb: Public ReadOnly IsFurnitureAllowed As Predicate(Of FurnitureType)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: ObjectSpot(Vector2, Predicate<FurnitureType>, Single, Direction2[])
  nameWithType: ObjectSpot.ObjectSpot(Vector2, Predicate<FurnitureType>, Single, Direction2[])
  fullName: TinyLife.Objects.ObjectSpot.ObjectSpot(Microsoft.Xna.Framework.Vector2, System.Predicate<TinyLife.Objects.FurnitureType>, System.Single, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Objects/ActionSpot.cs
    startLine: 296
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new object spot with the given settings\n"
  example: []
  syntax:
    content: public ObjectSpot(Vector2 offset, Predicate<FurnitureType> isFurnitureAllowed, float yOffset = 0F, params Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: isFurnitureAllowed
      type: System.Predicate{TinyLife.Objects.FurnitureType}
      description: A predicate that determines if the given <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> is allowed to be put into this spot
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Public Sub New(offset As Vector2, isFurnitureAllowed As Predicate(Of FurnitureType), yOffset As Single = 0F, ParamArray validDirections As Direction2())
  overload: TinyLife.Objects.ObjectSpot.#ctor*
  nameWithType.vb: ObjectSpot.ObjectSpot(Vector2, Predicate(Of FurnitureType), Single, Direction2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ObjectSpot.ObjectSpot(Microsoft.Xna.Framework.Vector2, System.Predicate(Of TinyLife.Objects.FurnitureType), System.Single, MLEM.Misc.Direction2())
  name.vb: ObjectSpot(Vector2, Predicate(Of FurnitureType), Single, Direction2())
- uid: TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.ObjectSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Predicate{TinyLife.Objects.FurnitureType},System.Single,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: ObjectSpot(Vector2, Vector2, Predicate<FurnitureType>, Single, Direction2[])
  nameWithType: ObjectSpot.ObjectSpot(Vector2, Vector2, Predicate<FurnitureType>, Single, Direction2[])
  fullName: TinyLife.Objects.ObjectSpot.ObjectSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Predicate<TinyLife.Objects.FurnitureType>, System.Single, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: Objects/ActionSpot.cs
    startLine: 308
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new object spot with the given settings\n"
  example: []
  syntax:
    content: public ObjectSpot(Vector2 offset, Vector2 visualOffset, Predicate<FurnitureType> isFurnitureAllowed, float yOffset = 0F, params Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: visualOffset
      type: Microsoft.Xna.Framework.Vector2
      description: The visual offset on both the x and y axis that this spot has
    - id: isFurnitureAllowed
      type: System.Predicate{TinyLife.Objects.FurnitureType}
      description: A predicate that determines if the given <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> is allowed to be put into this spot
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Public Sub New(offset As Vector2, visualOffset As Vector2, isFurnitureAllowed As Predicate(Of FurnitureType), yOffset As Single = 0F, ParamArray validDirections As Direction2())
  overload: TinyLife.Objects.ObjectSpot.#ctor*
  nameWithType.vb: ObjectSpot.ObjectSpot(Vector2, Vector2, Predicate(Of FurnitureType), Single, Direction2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ObjectSpot.ObjectSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Predicate(Of TinyLife.Objects.FurnitureType), System.Single, MLEM.Misc.Direction2())
  name.vb: ObjectSpot(Vector2, Vector2, Predicate(Of FurnitureType), Single, Direction2())
- uid: TinyLife.Objects.ObjectSpot.GetContents``1(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.ObjectSpot.GetContents``1(TinyLife.Objects.Furniture,System.Boolean)
  id: GetContents``1(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: GetContents<T>(Furniture, Boolean)
  nameWithType: ObjectSpot.GetContents<T>(Furniture, Boolean)
  fullName: TinyLife.Objects.ObjectSpot.GetContents<T>(TinyLife.Objects.Furniture, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetContents
    path: Objects/ActionSpot.cs
    startLine: 322
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects that are currently slotted into this spot\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetContents<T>(Furniture furniture, bool includeGroup = false)
          where T : Furniture
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture that this spot belongs to
    - id: includeGroup
      type: System.Boolean
      description: Whether to include other object spots that have at least one of the same <xref href="TinyLife.Objects.AbstractSpot.Group" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: T
      description: The type the child furnitures are expected to be
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A set of children of this spot, or an empty set if there are none
    content.vb: Public Function GetContents(Of T As Furniture)(furniture As Furniture, includeGroup As Boolean = False) As IEnumerable(Of T)
  overload: TinyLife.Objects.ObjectSpot.GetContents*
  nameWithType.vb: ObjectSpot.GetContents(Of T)(Furniture, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ObjectSpot.GetContents(Of T)(TinyLife.Objects.Furniture, System.Boolean)
  name.vb: GetContents(Of T)(Furniture, Boolean)
- uid: TinyLife.Objects.ObjectSpot.TableSpots(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.ObjectSpot.TableSpots(Microsoft.Xna.Framework.Point)
  id: TableSpots(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: TableSpots(Point)
  nameWithType: ObjectSpot.TableSpots(Point)
  fullName: TinyLife.Objects.ObjectSpot.TableSpots(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TableSpots
    path: Objects/ActionSpot.cs
    startLine: 334
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method to create a set of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances for a table of the given size.\nThe resulting set of object spots will have spots for <xref href=\"TinyLife.Objects.ObjectCategory.Chair\" data-throw-if-not-resolved=\"false\"></xref> objects on each side as well as <xref href=\"TinyLife.Objects.ObjectCategory.SmallObject\" data-throw-if-not-resolved=\"false\"></xref> objects on each tile position.\n"
  example: []
  syntax:
    content: public static ObjectSpot[] TableSpots(Point size)
    parameters:
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size that the table has in tiles
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: A set of object spots for the table
    content.vb: Public Shared Function TableSpots(size As Point) As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.TableSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.ObjectSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  id: PicnicTableSpots(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: PicnicTableSpots(Point)
  nameWithType: ObjectSpot.PicnicTableSpots(Point)
  fullName: TinyLife.Objects.ObjectSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PicnicTableSpots
    path: Objects/ActionSpot.cs
    startLine: 357
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that returns an array of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances at locations relevant for picnic-style tables that have attached benches.\nThis is used by objects like <xref href=\"TinyLife.Objects.FurnitureType.SimplePicnicTable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ObjectSpot[] PicnicTableSpots(Point size)
    parameters:
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size of the picnic table furniture
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: An array of object spots for picnic tables
    content.vb: Public Shared Function PicnicTableSpots(size As Point) As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.PicnicTableSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectSpot.CounterSpots(System.Boolean)
  commentId: M:TinyLife.Objects.ObjectSpot.CounterSpots(System.Boolean)
  id: CounterSpots(System.Boolean)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: CounterSpots(Boolean)
  nameWithType: ObjectSpot.CounterSpots(Boolean)
  fullName: TinyLife.Objects.ObjectSpot.CounterSpots(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CounterSpots
    path: Objects/ActionSpot.cs
    startLine: 372
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method to create a set of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instnaces for counters and stoves.\nThe resulting set contains a single object spot for <xref href=\"TinyLife.Objects.ObjectCategory.SmallObject\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.ObjectCategory.CounterObject\" data-throw-if-not-resolved=\"false\"></xref> object, or <xref href=\"TinyLife.Objects.FurnitureType.PreparedFood\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.Pot\" data-throw-if-not-resolved=\"false\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">stove</code> is true.\n"
  example: []
  syntax:
    content: public static ObjectSpot[] CounterSpots(bool stove = false)
    parameters:
    - id: stove
      type: System.Boolean
      description: Whether the object is a stove (or a counter)
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: A set of object spots for the stove or counter
    content.vb: Public Shared Function CounterSpots(stove As Boolean = False) As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.CounterSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectSpot.BarSpots
  commentId: M:TinyLife.Objects.ObjectSpot.BarSpots
  id: BarSpots
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: BarSpots()
  nameWithType: ObjectSpot.BarSpots()
  fullName: TinyLife.Objects.ObjectSpot.BarSpots()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BarSpots
    path: Objects/ActionSpot.cs
    startLine: 386
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method to create a set of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances for bars\n"
  example: []
  syntax:
    content: public static ObjectSpot[] BarSpots()
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: A set of object spots for bars
    content.vb: Public Shared Function BarSpots As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.BarSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectSpot.DoubleShelfSpots(System.Single)
  commentId: M:TinyLife.Objects.ObjectSpot.DoubleShelfSpots(System.Single)
  id: DoubleShelfSpots(System.Single)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: DoubleShelfSpots(Single)
  nameWithType: ObjectSpot.DoubleShelfSpots(Single)
  fullName: TinyLife.Objects.ObjectSpot.DoubleShelfSpots(System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DoubleShelfSpots
    path: Objects/ActionSpot.cs
    startLine: 399
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method to create a set of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances for things that can store two objects side by side (or one big object in the center).\nThis method is used by furniture like the <xref href=\"TinyLife.Objects.FurnitureType.SimpleDrawer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ObjectSpot[] DoubleShelfSpots(float height = 1F)
    parameters:
    - id: height
      type: System.Single
      description: The height of the object&apos;s spots. Defaults to 1.
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: A set of object spots for shelf-like objects
    content.vb: Public Shared Function DoubleShelfSpots(height As Single = 1F) As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.DoubleShelfSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ObjectSpot.DeskSpots(System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.ObjectSpot.DeskSpots(System.Single,System.Boolean)
  id: DeskSpots(System.Single,System.Boolean)
  parent: TinyLife.Objects.ObjectSpot
  langs:
  - csharp
  - vb
  name: DeskSpots(Single, Boolean)
  nameWithType: ObjectSpot.DeskSpots(Single, Boolean)
  fullName: TinyLife.Objects.ObjectSpot.DeskSpots(System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DeskSpots
    path: Objects/ActionSpot.cs
    startLine: 411
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method to create a set of <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> instances for a desk spot and two chair attachment spots on both sides of the desk\n"
  example: []
  syntax:
    content: public static ObjectSpot[] DeskSpots(float yOffset = -0.625F, bool chairs = true)
    parameters:
    - id: yOffset
      type: System.Single
    - id: chairs
      type: System.Boolean
    return:
      type: TinyLife.Objects.ObjectSpot[]
      description: A set of object spots for desks
    content.vb: Public Shared Function DeskSpots(yOffset As Single = -0.625F, chairs As Boolean = True) As ObjectSpot()
  overload: TinyLife.Objects.ObjectSpot.DeskSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  parent: TinyLife.Objects.AbstractSpot
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  parent: TinyLife.Objects.AbstractSpot
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: F:TinyLife.Objects.AbstractSpot.Group
  parent: TinyLife.Objects.AbstractSpot
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  isExternal: true
  name: GetValidDirections(Direction2)
  nameWithType: AbstractSpot.GetValidDirections(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
    name: GetValidDirections
    nameWithType: AbstractSpot.GetValidDirections
    fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
    name: GetValidDirections
    nameWithType: AbstractSpot.GetValidDirections
    fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.AbstractSpot
  isExternal: true
  name: GetLocation(Furniture, Boolean)
  nameWithType: AbstractSpot.GetLocation(Furniture, Boolean)
  fullName: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
    name: GetLocation
    nameWithType: AbstractSpot.GetLocation
    fullName: TinyLife.Objects.AbstractSpot.GetLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
    name: GetLocation
    nameWithType: AbstractSpot.GetLocation
    fullName: TinyLife.Objects.AbstractSpot.GetLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  parent: TinyLife.Objects.AbstractSpot
  name: DoGroupsOverlap(AbstractSpot)
  nameWithType: AbstractSpot.DoGroupsOverlap(AbstractSpot)
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
    name: DoGroupsOverlap
    nameWithType: AbstractSpot.DoGroupsOverlap
    fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
    name: DoGroupsOverlap
    nameWithType: AbstractSpot.DoGroupsOverlap
    fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ObjectSpot>()
  nameWithType: Extensions.JsonCopy<ObjectSpot>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ObjectSpot>()
  nameWithType.vb: Extensions.JsonCopy(Of ObjectSpot)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ObjectSpot)()
  name.vb: JsonCopy(Of ObjectSpot)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ObjectSpot>
    nameWithType: Extensions.JsonCopy<ObjectSpot>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ObjectSpot>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ObjectSpot)
    nameWithType: Extensions.JsonCopy(Of ObjectSpot)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ObjectSpot)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: System.Predicate{TinyLife.Objects.FurnitureType}
  commentId: T:System.Predicate{TinyLife.Objects.FurnitureType}
  parent: System
  definition: System.Predicate`1
  name: Predicate<FurnitureType>
  nameWithType: Predicate<FurnitureType>
  fullName: System.Predicate<TinyLife.Objects.FurnitureType>
  nameWithType.vb: Predicate(Of FurnitureType)
  fullName.vb: System.Predicate(Of TinyLife.Objects.FurnitureType)
  name.vb: Predicate(Of FurnitureType)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectSpot.#ctor*
  commentId: Overload:TinyLife.Objects.ObjectSpot.#ctor
  name: ObjectSpot
  nameWithType: ObjectSpot.ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot.ObjectSpot
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Objects.ObjectSpot.GetContents*
  commentId: Overload:TinyLife.Objects.ObjectSpot.GetContents
  name: GetContents
  nameWithType: ObjectSpot.GetContents
  fullName: TinyLife.Objects.ObjectSpot.GetContents
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.SmallObject
  commentId: F:TinyLife.Objects.ObjectCategory.SmallObject
  isExternal: true
- uid: TinyLife.Objects.ObjectSpot.TableSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.TableSpots
  name: TableSpots
  nameWithType: ObjectSpot.TableSpots
  fullName: TinyLife.Objects.ObjectSpot.TableSpots
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.ObjectSpot[]
  isExternal: true
  name: ObjectSpot[]
  nameWithType: ObjectSpot[]
  fullName: TinyLife.Objects.ObjectSpot[]
  nameWithType.vb: ObjectSpot()
  fullName.vb: TinyLife.Objects.ObjectSpot()
  name.vb: ObjectSpot()
  spec.csharp:
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.FurnitureType.SimplePicnicTable
  commentId: F:TinyLife.Objects.FurnitureType.SimplePicnicTable
  isExternal: true
- uid: TinyLife.Objects.ObjectSpot.PicnicTableSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.PicnicTableSpots
  name: PicnicTableSpots
  nameWithType: ObjectSpot.PicnicTableSpots
  fullName: TinyLife.Objects.ObjectSpot.PicnicTableSpots
- uid: TinyLife.Objects.ObjectCategory.CounterObject
  commentId: F:TinyLife.Objects.ObjectCategory.CounterObject
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.PreparedFood
  commentId: F:TinyLife.Objects.FurnitureType.PreparedFood
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.Pot
  commentId: F:TinyLife.Objects.FurnitureType.Pot
  isExternal: true
- uid: TinyLife.Objects.ObjectSpot.CounterSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.CounterSpots
  name: CounterSpots
  nameWithType: ObjectSpot.CounterSpots
  fullName: TinyLife.Objects.ObjectSpot.CounterSpots
- uid: TinyLife.Objects.ObjectSpot.BarSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.BarSpots
  name: BarSpots
  nameWithType: ObjectSpot.BarSpots
  fullName: TinyLife.Objects.ObjectSpot.BarSpots
- uid: TinyLife.Objects.FurnitureType.SimpleDrawer
  commentId: F:TinyLife.Objects.FurnitureType.SimpleDrawer
  isExternal: true
- uid: TinyLife.Objects.ObjectSpot.DoubleShelfSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.DoubleShelfSpots
  name: DoubleShelfSpots
  nameWithType: ObjectSpot.DoubleShelfSpots
  fullName: TinyLife.Objects.ObjectSpot.DoubleShelfSpots
- uid: TinyLife.Objects.ObjectSpot.DeskSpots*
  commentId: Overload:TinyLife.Objects.ObjectSpot.DeskSpots
  name: DeskSpots
  nameWithType: ObjectSpot.DeskSpots
  fullName: TinyLife.Objects.ObjectSpot.DeskSpots

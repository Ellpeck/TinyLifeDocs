### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  id: FoodType
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  - TinyLife.Skills.FoodType.CanEat
  - TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  - TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  - TinyLife.Skills.FoodType.DisplayName
  - TinyLife.Skills.FoodType.FoodAmount
  - TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  - TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  - TinyLife.Skills.FoodType.GetContainer(System.Int32)
  - TinyLife.Skills.FoodType.GetEmptyContainer
  - TinyLife.Skills.FoodType.GetPrice(System.Int32)
  - TinyLife.Skills.FoodType.IsInGlass
  - TinyLife.Skills.FoodType.Name
  - TinyLife.Skills.FoodType.NeedsCooking
  - TinyLife.Skills.FoodType.OnEaten
  - TinyLife.Skills.FoodType.OnFoodEaten
  - TinyLife.Skills.FoodType.Price
  - TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  - TinyLife.Skills.FoodType.RequiredCookingLevel
  - TinyLife.Skills.FoodType.Source
  - TinyLife.Skills.FoodType.Texture
  - TinyLife.Skills.FoodType.Types
  langs:
  - csharp
  - vb
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
  type: Class
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FoodType
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA food type is a type of dish that can be cooked using <xref href=\"TinyLife.Actions.ActionType.GetIngredientsSingle\" data-throw-if-not-resolved=\"false\"></xref>.\nFood types store information such as their name and texture, but also the cooking level that is required to make them.\nFood types are registered using <xref href=\"TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<FoodType>), new object[]{typeof(FoodType), "PrivateTypes"})]

      public class FoodType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of FoodType)), New Object() {GetType(FoodType), "PrivateTypes"})>

      Public Class FoodType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.FoodType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.FoodType.Types
  commentId: F:TinyLife.Skills.FoodType.Types
  id: Types
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: FoodType.Types
  fullName: TinyLife.Skills.FoodType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAll of the <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> instances that are registered by the game and mods\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, FoodType> Types
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.Skills.FoodType}
    content.vb: Public Shared ReadOnly Types As IDictionary(Of String, FoodType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.OnFoodEaten
  commentId: E:TinyLife.Skills.FoodType.OnFoodEaten
  id: OnFoodEaten
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: OnFoodEaten
  nameWithType: FoodType.OnFoodEaten
  fullName: TinyLife.Skills.FoodType.OnFoodEaten
  type: Event
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnFoodEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn event that is invoked after a given <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s food type is eaten as part of the given <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event is invoked at the same time as <xref href=\"TinyLife.Skills.FoodType.OnEaten\" data-throw-if-not-resolved=\"false\"></xref>, but for any <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Action, FoodType> OnFoodEaten
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Skills.FoodType}
    content.vb: Public Shared Event OnFoodEaten As Action(Of Action, FoodType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.Name
  commentId: F:TinyLife.Skills.FoodType.Name
  id: Name
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FoodType.Name
  fullName: TinyLife.Skills.FoodType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis food type&apos;s name\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Texture
  commentId: F:TinyLife.Skills.FoodType.Texture
  id: Texture
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: FoodType.Texture
  fullName: TinyLife.Skills.FoodType.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 107
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis food type&apos;s texture region.\nThe texture is loaded from the <xref href=\"TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)\" data-throw-if-not-resolved=\"false\"></xref> as &quot;Food<xref href=\"TinyLife.Skills.FoodType.Name\" data-throw-if-not-resolved=\"false\"></xref>&quot;\nSince the plate will automatically be rendered below this food type, the texture only needs to contain the dish itself.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.RequiredCookingLevel
  commentId: F:TinyLife.Skills.FoodType.RequiredCookingLevel
  id: RequiredCookingLevel
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: RequiredCookingLevel
  nameWithType: FoodType.RequiredCookingLevel
  fullName: TinyLife.Skills.FoodType.RequiredCookingLevel
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredCookingLevel
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe level of the <xref href=\"TinyLife.Skills.SkillType.Cooking\" data-throw-if-not-resolved=\"false\"></xref> skill that is required to prepare this dish\n"
  example: []
  syntax:
    content: public readonly int RequiredCookingLevel
    return:
      type: System.Int32
    content.vb: Public ReadOnly RequiredCookingLevel As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Price
  commentId: F:TinyLife.Skills.FoodType.Price
  id: Price
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: FoodType.Price
  fullName: TinyLife.Skills.FoodType.Price
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 115
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe price that creating this food type has\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.FoodAmount
  commentId: F:TinyLife.Skills.FoodType.FoodAmount
  id: FoodAmount
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: FoodAmount
  nameWithType: FoodType.FoodAmount
  fullName: TinyLife.Skills.FoodType.FoodAmount
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FoodAmount
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe amount of food points that this food gives.\nThis is passed to <xref href=\"TinyLife.Objects.Food.FoodLeft\" data-throw-if-not-resolved=\"false\"></xref> when a dish is created.\nFor reference, the mac and cheese dish has a food amount of 100. \n"
  example: []
  syntax:
    content: public readonly int FoodAmount
    return:
      type: System.Int32
    content.vb: Public ReadOnly FoodAmount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Source
  commentId: F:TinyLife.Skills.FoodType.Source
  id: Source
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: FoodType.Source
  fullName: TinyLife.Skills.FoodType.Source
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Source
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 125
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"TinyLife.Skills.FoodType.IngredientSource\" data-throw-if-not-resolved=\"false\"></xref> that this food type can be created in\n"
  example: []
  syntax:
    content: public readonly FoodType.IngredientSource Source
    return:
      type: TinyLife.Skills.FoodType.IngredientSource
    content.vb: Public ReadOnly Source As FoodType.IngredientSource
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.NeedsCooking
  commentId: P:TinyLife.Skills.FoodType.NeedsCooking
  id: NeedsCooking
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: NeedsCooking
  nameWithType: FoodType.NeedsCooking
  fullName: TinyLife.Skills.FoodType.NeedsCooking
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NeedsCooking
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nWhether or not this food item needs to be cooked on a stove to be created.\nIf this value is false, <xref href=\"TinyLife.Skills.FoodType.GetActions(System.Int32%2cTinyLife.Skills.FoodType.IngredientSource)\" data-throw-if-not-resolved=\"false\"></xref> will not check if there is a <xref href=\"TinyLife.Objects.ObjectCategory.Stove\" data-throw-if-not-resolved=\"false\"></xref> nearby.\n"
  example: []
  syntax:
    content: public bool NeedsCooking { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property NeedsCooking As Boolean
  overload: TinyLife.Skills.FoodType.NeedsCooking*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.IsInGlass
  commentId: P:TinyLife.Skills.FoodType.IsInGlass
  id: IsInGlass
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: IsInGlass
  nameWithType: FoodType.IsInGlass
  fullName: TinyLife.Skills.FoodType.IsInGlass
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInGlass
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 134
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA property that stores whether this food type should be served in a glass rather than on a plate\n"
  example: []
  syntax:
    content: public bool IsInGlass { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsInGlass As Boolean
  overload: TinyLife.Skills.FoodType.IsInGlass*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.OnEaten
  commentId: P:TinyLife.Skills.FoodType.OnEaten
  id: OnEaten
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: OnEaten
  nameWithType: FoodType.OnEaten
  fullName: TinyLife.Skills.FoodType.OnEaten
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 139
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn optional action that is invoked when this food object has been eaten.\nThis method is called if the underlying <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed after a sufficient amount of time, so the food item has not necessarily been fully finished when this action is invoked.\n"
  example: []
  syntax:
    content: public Action<Action> OnEaten { get; set; }
    parameters: []
    return:
      type: System.Action{TinyLife.Actions.Action}
    content.vb: Public Property OnEaten As Action(Of Action)
  overload: TinyLife.Skills.FoodType.OnEaten*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CanEat
  commentId: P:TinyLife.Skills.FoodType.CanEat
  id: CanEat
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanEat
  nameWithType: FoodType.CanEat
  fullName: TinyLife.Skills.FoodType.CanEat
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanEat
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 144
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn optional <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether this food item can be eaten.\nIf this is null, which is also the default value, this food item can always be eaten.\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanEat { get; set; }
    parameters: []
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public Property CanEat As ActionType.CanExecuteDelegate
  overload: TinyLife.Skills.FoodType.CanEat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.DisplayName
  commentId: P:TinyLife.Skills.FoodType.DisplayName
  id: DisplayName
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: FoodType.DisplayName
  fullName: TinyLife.Skills.FoodType.DisplayName
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 148
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis food type&apos;s <xref href=\"TinyLife.Skills.FoodType.Name\" data-throw-if-not-resolved=\"false\"></xref>, but localized using <xref href=\"TinyLife.LnCategory.Food\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: TinyLife.Skills.FoodType.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  commentId: M:TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.IngredientSource)'
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: FoodType(String, Int32, Int32, Int32, FoodType.IngredientSource)
  nameWithType: FoodType.FoodType(String, Int32, Int32, Int32, FoodType.IngredientSource)
  fullName: TinyLife.Skills.FoodType.FoodType(System.String, System.Int32, System.Int32, System.Int32, TinyLife.Skills.FoodType.IngredientSource)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 158
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new food type with the given settings\n"
  example: []
  syntax:
    content: public FoodType(string name, int requiredCookingLevel, int price, int foodAmount, FoodType.IngredientSource source = FoodType.IngredientSource.Fridge)
    parameters:
    - id: name
      type: System.String
      description: The food type&apos;s name
    - id: requiredCookingLevel
      type: System.Int32
      description: The required cooking skill level
    - id: price
      type: System.Int32
      description: The price to prepare this food type
    - id: foodAmount
      type: System.Int32
      description: The amount of food points that this food gives
    - id: source
      type: TinyLife.Skills.FoodType.IngredientSource
      description: The <xref href="TinyLife.Skills.FoodType.IngredientSource" data-throw-if-not-resolved="false"></xref> that this food type can be created in, defaults to <xref href="TinyLife.Skills.FoodType.IngredientSource.Fridge" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(name As String, requiredCookingLevel As Integer, price As Integer, foodAmount As Integer, source As FoodType.IngredientSource = FoodType.IngredientSource.Fridge)
  overload: TinyLife.Skills.FoodType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.GetContainer(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetContainer(System.Int32)
  id: GetContainer(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetContainer(Int32)
  nameWithType: FoodType.GetContainer(Int32)
  fullName: TinyLife.Skills.FoodType.GetContainer(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetContainer
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the container that this food type should be stored in based on the serving size.\nFor custom food types, this method can be overrided to use custom containers with it.\nIt is expected that the constructed type of the returned <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> is or extends <xref href=\"TinyLife.Objects.Food\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual FurnitureType GetContainer(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size
    return:
      type: TinyLife.Objects.FurnitureType
      description: The furniture type that this food type should be stored in
    content.vb: Public Overridable Function GetContainer(servingSize As Integer) As FurnitureType
  overload: TinyLife.Skills.FoodType.GetContainer*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown by default if this food type <xref href="TinyLife.Skills.FoodType.IsInGlass" data-throw-if-not-resolved="false"></xref> and the serving size is greater than 1
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Skills.FoodType.GetEmptyContainer
  commentId: M:TinyLife.Skills.FoodType.GetEmptyContainer
  id: GetEmptyContainer
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetEmptyContainer()
  nameWithType: FoodType.GetEmptyContainer()
  fullName: TinyLife.Skills.FoodType.GetEmptyContainer()
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEmptyContainer
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 189
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the container that should be spawned if the <xref href=\"TinyLife.Skills.FoodType.GetContainer(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> of this food type becomes empty.\nFor custom food types, this method can be overrided to use custom containers with it.\n"
  example: []
  syntax:
    content: public virtual FurnitureType GetEmptyContainer()
    return:
      type: TinyLife.Objects.FurnitureType
      description: The empty container for this food type
    content.vb: Public Overridable Function GetEmptyContainer As FurnitureType
  overload: TinyLife.Skills.FoodType.GetEmptyContainer*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Skills.FoodType.GetPrice(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetPrice(System.Int32)
  id: GetPrice(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetPrice(Int32)
  nameWithType: FoodType.GetPrice(Int32)
  fullName: TinyLife.Skills.FoodType.GetPrice(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 198
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the price of this food type, based on the amount of servings provided\n"
  example: []
  syntax:
    content: public float GetPrice(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The amount of servings to get the price for
    return:
      type: System.Single
      description: The price for this food type
    content.vb: Public Function GetPrice(servingSize As Integer) As Single
  overload: TinyLife.Skills.FoodType.GetPrice*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  id: Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Construct(Map, Quality, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  nameWithType: FoodType.Construct(Map, Quality, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  fullName: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map, TinyLife.Skills.Quality, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 213
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nConstructs a new <xref href=\"TinyLife.Objects.Food\" data-throw-if-not-resolved=\"false\"></xref> furniture instance based on this food type&apos;s <xref href=\"TinyLife.Skills.FoodType.GetContainer(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Food Construct(Map map, Quality quality, TimeSpan expirationTime, int servingSize, Person creator = null, Guid? id = null, bool triggerGoals = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality that the food should have, which also affects the <xref href="TinyLife.Objects.Food.FoodLeft" data-throw-if-not-resolved="false"></xref>
    - id: expirationTime
      type: System.TimeSpan
      description: The in-game time that the resulting food should expire at. This should be based on <xref href="TinyLife.GameImpl.CurrentTime" data-throw-if-not-resolved="false"></xref>.
    - id: servingSize
      type: System.Int32
      description: The serving size
    - id: creator
      type: TinyLife.Objects.Person
      description: An optional id of a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> that created this food item
    - id: id
      type: System.Nullable{System.Guid}
      description: An optional id to give to the <xref href="TinyLife.Objects.Food" data-throw-if-not-resolved="false"></xref> instance returned
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.AutoGoalInfo" data-throw-if-not-resolved="false"></xref> goals should be triggered in <xref href="TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Objects.Food
      description: A new food instance with the given settings
    content.vb: Public Function Construct(map As Map, quality As Quality, expirationTime As TimeSpan, servingSize As Integer, creator As Person = Nothing, id As Guid? = Nothing, triggerGoals As Boolean = True) As Food
  overload: TinyLife.Skills.FoodType.Construct*
  nameWithType.vb: FoodType.Construct(Map, Quality, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map, TinyLife.Skills.Quality, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Construct(Map, Quality, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
- uid: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  id: ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  nameWithType: FoodType.ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  fullName: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType, TinyLife.World.Map, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructUnfinished
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 233
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nConstructs a new <xref href=\"TinyLife.Objects.FoodTypedItem\" data-throw-if-not-resolved=\"false\"></xref> furniture instance based on the passed <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public FoodTypedItem ConstructUnfinished(FurnitureType container, Map map, TimeSpan expirationTime, int servingSize, Person creator = null, Guid? id = null, bool triggerGoals = false)
    parameters:
    - id: container
      type: TinyLife.Objects.FurnitureType
      description: The <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> that an instance of should be returned, has to construct a <xref href="TinyLife.Objects.FoodTypedItem" data-throw-if-not-resolved="false"></xref>
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: expirationTime
      type: System.TimeSpan
      description: The in-game time that the resulting food should expire at. This should be based on <xref href="TinyLife.GameImpl.CurrentTime" data-throw-if-not-resolved="false"></xref>.
    - id: servingSize
      type: System.Int32
      description: The serving size
    - id: creator
      type: TinyLife.Objects.Person
      description: An optional <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> that created this food item
    - id: id
      type: System.Nullable{System.Guid}
      description: An optional id to give to the <xref href="TinyLife.Objects.Food" data-throw-if-not-resolved="false"></xref> instance returned
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.AutoGoalInfo" data-throw-if-not-resolved="false"></xref> goals should be triggered in <xref href="TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Objects.FoodTypedItem
      description: ''
    content.vb: Public Function ConstructUnfinished(container As FurnitureType, map As Map, expirationTime As TimeSpan, servingSize As Integer, creator As Person = Nothing, id As Guid? = Nothing, triggerGoals As Boolean = False) As FoodTypedItem
  overload: TinyLife.Skills.FoodType.ConstructUnfinished*
  nameWithType.vb: FoodType.ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType, TinyLife.World.Map, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
- uid: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  id: Register(TinyLife.Skills.FoodType)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Register(FoodType)
  nameWithType: FoodType.Register(FoodType)
  fullName: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 251
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nRegisters a new <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> with the given settings\n"
  example: []
  syntax:
    content: public static void Register(FoodType type)
    parameters:
    - id: type
      type: TinyLife.Skills.FoodType
      description: The food type to register
    content.vb: Public Shared Sub Register(type As FoodType)
  overload: TinyLife.Skills.FoodType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  commentId: M:TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  id: GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetActions(Int32, FoodType.IngredientSource)
  nameWithType: FoodType.GetActions(Int32, FoodType.IngredientSource)
  fullName: TinyLife.Skills.FoodType.GetActions(System.Int32, TinyLife.Skills.FoodType.IngredientSource)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetActions
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 262
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a set of action varieties for all <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> objects that match the given predicate\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionVariety> GetActions(int servingSize, FoodType.IngredientSource source)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size that should be served when using the variety
    - id: source
      type: TinyLife.Skills.FoodType.IngredientSource
      description: The ingredient source to return actions for
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: A set of action varieties representing food types
    content.vb: Public Shared Function GetActions(servingSize As Integer, source As FoodType.IngredientSource) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Skills.FoodType.GetActions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  id: GetAllContainers(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetAllContainers(Int32)
  nameWithType: FoodType.GetAllContainers(Int32)
  fullName: TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAllContainers
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 291
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns all of the <xref href=\"TinyLife.Skills.FoodType.GetContainer(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> furniture types that any registered food types will be stored in, based on the serving size.\nThis method returns a distinct array of <xref href=\"TinyLife.Skills.FoodType.GetContainer(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> instances of all <xref href=\"TinyLife.Skills.FoodType.Types\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static FurnitureType[] GetAllContainers(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size
    return:
      type: TinyLife.Objects.FurnitureType[]
      description: All food containers for the given serving size
    content.vb: Public Shared Function GetAllContainers(servingSize As Integer) As FurnitureType()
  overload: TinyLife.Skills.FoodType.GetAllContainers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.ActionType.GetIngredientsSingle
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsSingle
  isExternal: true
- uid: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  isExternal: true
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<FoodType>()
  nameWithType: Extensions.JsonCopy<FoodType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType>()
  nameWithType.vb: Extensions.JsonCopy(Of FoodType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType)()
  name.vb: JsonCopy(Of FoodType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<FoodType>
    nameWithType: Extensions.JsonCopy<FoodType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of FoodType)
    nameWithType: Extensions.JsonCopy(Of FoodType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  parent: TinyLife.Skills
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.Skills.FoodType}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.Skills.FoodType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, FoodType>
  nameWithType: IDictionary<String, FoodType>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.Skills.FoodType>
  nameWithType.vb: IDictionary(Of String, FoodType)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.Skills.FoodType)
  name.vb: IDictionary(Of String, FoodType)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Skills.FoodType.OnEaten
  commentId: P:TinyLife.Skills.FoodType.OnEaten
  isExternal: true
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Skills.FoodType}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Skills.FoodType}
  parent: System
  definition: System.Action`2
  name: Action<Action, FoodType>
  nameWithType: Action<Action, FoodType>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Skills.FoodType>
  nameWithType.vb: Action(Of Action, FoodType)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Skills.FoodType)
  name.vb: Action(Of Action, FoodType)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  isExternal: true
- uid: TinyLife.Skills.FoodType.Name
  commentId: F:TinyLife.Skills.FoodType.Name
  isExternal: true
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Skills.SkillType.Cooking
  commentId: F:TinyLife.Skills.SkillType.Cooking
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.Food.FoodLeft
  commentId: F:TinyLife.Objects.Food.FoodLeft
  isExternal: true
- uid: TinyLife.Skills.FoodType.IngredientSource
  commentId: T:TinyLife.Skills.FoodType.IngredientSource
  parent: TinyLife.Skills
  name: FoodType.IngredientSource
  nameWithType: FoodType.IngredientSource
  fullName: TinyLife.Skills.FoodType.IngredientSource
- uid: TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  commentId: M:TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource)
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Stove
  commentId: F:TinyLife.Objects.ObjectCategory.Stove
  isExternal: true
- uid: TinyLife.Skills.FoodType.NeedsCooking*
  commentId: Overload:TinyLife.Skills.FoodType.NeedsCooking
  name: NeedsCooking
  nameWithType: FoodType.NeedsCooking
  fullName: TinyLife.Skills.FoodType.NeedsCooking
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Skills.FoodType.IsInGlass*
  commentId: Overload:TinyLife.Skills.FoodType.IsInGlass
  name: IsInGlass
  nameWithType: FoodType.IsInGlass
  fullName: TinyLife.Skills.FoodType.IsInGlass
- uid: TinyLife.Skills.FoodType.OnEaten*
  commentId: Overload:TinyLife.Skills.FoodType.OnEaten
  name: OnEaten
  nameWithType: FoodType.OnEaten
  fullName: TinyLife.Skills.FoodType.OnEaten
- uid: System.Action{TinyLife.Actions.Action}
  commentId: T:System.Action{TinyLife.Actions.Action}
  parent: System
  definition: System.Action`1
  name: Action<Action>
  nameWithType: Action<Action>
  fullName: System.Action<TinyLife.Actions.Action>
  nameWithType.vb: Action(Of Action)
  fullName.vb: System.Action(Of TinyLife.Actions.Action)
  name.vb: Action(Of Action)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Skills.FoodType.CanEat*
  commentId: Overload:TinyLife.Skills.FoodType.CanEat
  name: CanEat
  nameWithType: FoodType.CanEat
  fullName: TinyLife.Skills.FoodType.CanEat
- uid: TinyLife.LnCategory.Food
  commentId: F:TinyLife.LnCategory.Food
  isExternal: true
- uid: TinyLife.Skills.FoodType.DisplayName*
  commentId: Overload:TinyLife.Skills.FoodType.DisplayName
  name: DisplayName
  nameWithType: FoodType.DisplayName
  fullName: TinyLife.Skills.FoodType.DisplayName
- uid: TinyLife.Skills.FoodType.IngredientSource.Fridge
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Fridge
  isExternal: true
- uid: TinyLife.Skills.FoodType.#ctor*
  commentId: Overload:TinyLife.Skills.FoodType.#ctor
  name: FoodType
  nameWithType: FoodType.FoodType
  fullName: TinyLife.Skills.FoodType.FoodType
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.Food
  commentId: T:TinyLife.Objects.Food
  parent: TinyLife.Objects
  name: Food
  nameWithType: Food
  fullName: TinyLife.Objects.Food
- uid: TinyLife.Skills.FoodType.IsInGlass
  commentId: P:TinyLife.Skills.FoodType.IsInGlass
  isExternal: true
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetContainer*
  commentId: Overload:TinyLife.Skills.FoodType.GetContainer
  name: GetContainer
  nameWithType: FoodType.GetContainer
  fullName: TinyLife.Skills.FoodType.GetContainer
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Skills.FoodType.GetContainer(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetContainer(System.Int32)
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetEmptyContainer*
  commentId: Overload:TinyLife.Skills.FoodType.GetEmptyContainer
  name: GetEmptyContainer
  nameWithType: FoodType.GetEmptyContainer
  fullName: TinyLife.Skills.FoodType.GetEmptyContainer
- uid: TinyLife.Skills.FoodType.GetPrice*
  commentId: Overload:TinyLife.Skills.FoodType.GetPrice
  name: GetPrice
  nameWithType: FoodType.GetPrice
  fullName: TinyLife.Skills.FoodType.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.GameImpl.CurrentTime
  commentId: P:TinyLife.GameImpl.CurrentTime
  isExternal: true
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.Construct*
  commentId: Overload:TinyLife.Skills.FoodType.Construct
  name: Construct
  nameWithType: FoodType.Construct
  fullName: TinyLife.Skills.FoodType.Construct
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.FoodTypedItem
  commentId: T:TinyLife.Objects.FoodTypedItem
  parent: TinyLife.Objects
  name: FoodTypedItem
  nameWithType: FoodTypedItem
  fullName: TinyLife.Objects.FoodTypedItem
- uid: TinyLife.Skills.FoodType.ConstructUnfinished*
  commentId: Overload:TinyLife.Skills.FoodType.ConstructUnfinished
  name: ConstructUnfinished
  nameWithType: FoodType.ConstructUnfinished
  fullName: TinyLife.Skills.FoodType.ConstructUnfinished
- uid: TinyLife.Skills.FoodType.Register*
  commentId: Overload:TinyLife.Skills.FoodType.Register
  name: Register
  nameWithType: FoodType.Register
  fullName: TinyLife.Skills.FoodType.Register
- uid: TinyLife.Skills.FoodType.GetActions*
  commentId: Overload:TinyLife.Skills.FoodType.GetActions
  name: GetActions
  nameWithType: FoodType.GetActions
  fullName: TinyLife.Skills.FoodType.GetActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.Types
  commentId: F:TinyLife.Skills.FoodType.Types
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetAllContainers*
  commentId: Overload:TinyLife.Skills.FoodType.GetAllContainers
  name: GetAllContainers
  nameWithType: FoodType.GetAllContainers
  fullName: TinyLife.Skills.FoodType.GetAllContainers
- uid: TinyLife.Objects.FurnitureType[]
  isExternal: true
  name: FurnitureType[]
  nameWithType: FurnitureType[]
  fullName: TinyLife.Objects.FurnitureType[]
  nameWithType.vb: FurnitureType()
  fullName.vb: TinyLife.Objects.FurnitureType()
  name.vb: FurnitureType()
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ()
    nameWithType: ()
    fullName: ()

### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  id: FoodType
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Skills.FoodType.IngredientSource,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.Skills.FoodType.AdditionalObject
  - TinyLife.Skills.FoodType.AllIntolerances
  - TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  - TinyLife.Skills.FoodType.CanCreateFunc
  - TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  - TinyLife.Skills.FoodType.CanEatFunc
  - TinyLife.Skills.FoodType.CanHaveCandle
  - TinyLife.Skills.FoodType.Color
  - TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  - TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  - TinyLife.Skills.FoodType.Container
  - TinyLife.Skills.FoodType.CustomTextureFunc
  - TinyLife.Skills.FoodType.DisplayName
  - TinyLife.Skills.FoodType.FoodAmount
  - TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource,System.Boolean,System.Single,TinyLife.Skills.SkillType)
  - TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  - TinyLife.Skills.FoodType.GetIntolerancesDescription(System.Boolean)
  - TinyLife.Skills.FoodType.GetPrice(System.Int32)
  - TinyLife.Skills.FoodType.GetTexture(System.Int32)
  - TinyLife.Skills.FoodType.Intolerances
  - TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  - TinyLife.Skills.FoodType.Name
  - TinyLife.Skills.FoodType.OnEaten
  - TinyLife.Skills.FoodType.OnFoodEaten
  - TinyLife.Skills.FoodType.Price
  - TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  - TinyLife.Skills.FoodType.RequiredSkill
  - TinyLife.Skills.FoodType.RequiredSkillLevel
  - TinyLife.Skills.FoodType.Sources
  - TinyLife.Skills.FoodType.Types
  langs:
  - csharp
  - vb
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
  type: Class
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FoodType
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA food type is a type of dish that can be cooked using <xref href=\"TinyLife.Actions.ActionType.GetIngredientsSingle\" data-throw-if-not-resolved=\"false\"></xref>.\nFood types store information such as their name and texture, but also the cooking level that is required to make them.\nWhether a food type has a custom <xref href=\"Microsoft.Xna.Framework.Graphics.Texture\" data-throw-if-not-resolved=\"false\"></xref> is based on its <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref>, but most foods use the <xref href=\"TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)\" data-throw-if-not-resolved=\"false\"></xref> and are loaded as as &quot;Food<xref href=\"TinyLife.Skills.FoodType.Name\" data-throw-if-not-resolved=\"false\"></xref>&quot;.\nFood types are registered using <xref href=\"TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<FoodType>), new object[]{typeof(FoodType), "PrivateTypes"})]

      public class FoodType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of FoodType)), New Object() {GetType(FoodType), "PrivateTypes"})>

      Public Class FoodType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.FoodType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.FoodType.Types
  commentId: F:TinyLife.Skills.FoodType.Types
  id: Types
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: FoodType.Types
  fullName: TinyLife.Skills.FoodType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAll of the <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> instances that are registered by the game and mods\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, FoodType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.FoodType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, FoodType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.AllIntolerances
  commentId: F:TinyLife.Skills.FoodType.AllIntolerances
  id: AllIntolerances
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: AllIntolerances
  nameWithType: FoodType.AllIntolerances
  fullName: TinyLife.Skills.FoodType.AllIntolerances
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllIntolerances
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAll of the defined <xref href=\"TinyLife.Skills.FoodType.FoodIntolerance\" data-throw-if-not-resolved=\"false\"></xref> flag values.\n"
  example: []
  syntax:
    content: public static readonly FoodType.FoodIntolerance[] AllIntolerances
    return:
      type: TinyLife.Skills.FoodType.FoodIntolerance[]
    content.vb: Public Shared ReadOnly AllIntolerances As FoodType.FoodIntolerance()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.OnFoodEaten
  commentId: E:TinyLife.Skills.FoodType.OnFoodEaten
  id: OnFoodEaten
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: OnFoodEaten
  nameWithType: FoodType.OnFoodEaten
  fullName: TinyLife.Skills.FoodType.OnFoodEaten
  type: Event
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnFoodEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn event that is invoked after a given <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s food type is eaten as part of the given <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event is invoked at the same time as <xref href=\"TinyLife.Skills.FoodType.OnEaten\" data-throw-if-not-resolved=\"false\"></xref>, but for any <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked in <xref href=\"TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action%2cTinyLife.Objects.FoodTypedItem)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static event Action<Action, FoodTypedItem, FoodType> OnFoodEaten
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem,TinyLife.Skills.FoodType}
    content.vb: Public Shared Event OnFoodEaten As Action(Of Action, FoodTypedItem, FoodType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.Name
  commentId: F:TinyLife.Skills.FoodType.Name
  id: Name
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FoodType.Name
  fullName: TinyLife.Skills.FoodType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis food type&apos;s name\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.RequiredSkillLevel
  commentId: F:TinyLife.Skills.FoodType.RequiredSkillLevel
  id: RequiredSkillLevel
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: RequiredSkillLevel
  nameWithType: FoodType.RequiredSkillLevel
  fullName: TinyLife.Skills.FoodType.RequiredSkillLevel
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredSkillLevel
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe level of the <xref href=\"TinyLife.Skills.SkillType.Cooking\" data-throw-if-not-resolved=\"false\"></xref> skill that is required to prepare this dish\n"
  example: []
  syntax:
    content: public readonly int RequiredSkillLevel
    return:
      type: System.Int32
    content.vb: Public ReadOnly RequiredSkillLevel As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Price
  commentId: F:TinyLife.Skills.FoodType.Price
  id: Price
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: FoodType.Price
  fullName: TinyLife.Skills.FoodType.Price
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 137
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe price that creating this food type has\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.FoodAmount
  commentId: F:TinyLife.Skills.FoodType.FoodAmount
  id: FoodAmount
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: FoodAmount
  nameWithType: FoodType.FoodAmount
  fullName: TinyLife.Skills.FoodType.FoodAmount
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FoodAmount
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 143
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe amount of food points that this food gives.\nThis is passed to <xref href=\"TinyLife.Objects.Food.FoodLeft\" data-throw-if-not-resolved=\"false\"></xref> when a dish is created.\nFor reference, the mac and cheese dish has a food amount of 100.\n"
  example: []
  syntax:
    content: public readonly int FoodAmount
    return:
      type: System.Int32
    content.vb: Public ReadOnly FoodAmount As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Color
  commentId: F:TinyLife.Skills.FoodType.Color
  id: Color
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: FoodType.Color
  fullName: TinyLife.Skills.FoodType.Color
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Color
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe color that this food type should display with.\n"
  example: []
  syntax:
    content: public readonly Color Color
    return:
      type: Microsoft.Xna.Framework.Color
    content.vb: Public ReadOnly Color As Color
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Sources
  commentId: F:TinyLife.Skills.FoodType.Sources
  id: Sources
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Sources
  nameWithType: FoodType.Sources
  fullName: TinyLife.Skills.FoodType.Sources
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Sources
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 151
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA set of <xref href=\"TinyLife.Skills.FoodType.IngredientSource\" data-throw-if-not-resolved=\"false\"></xref> objects that determine where this food type can be created.\n"
  example: []
  syntax:
    content: public readonly ISet<FoodType.IngredientSource> Sources
    return:
      type: System.Collections.Generic.ISet{TinyLife.Skills.FoodType.IngredientSource}
    content.vb: Public ReadOnly Sources As ISet(Of FoodType.IngredientSource)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.Intolerances
  commentId: F:TinyLife.Skills.FoodType.Intolerances
  id: Intolerances
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Intolerances
  nameWithType: FoodType.Intolerances
  fullName: TinyLife.Skills.FoodType.Intolerances
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intolerances
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 155
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA set of <xref href=\"TinyLife.Skills.FoodType.FoodIntolerance\" data-throw-if-not-resolved=\"false\"></xref> flags that determine what things this food item contains that people might be intolerant to.\n"
  example: []
  syntax:
    content: public readonly FoodType.FoodIntolerance Intolerances
    return:
      type: TinyLife.Skills.FoodType.FoodIntolerance
    content.vb: Public ReadOnly Intolerances As FoodType.FoodIntolerance
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.RequiredSkill
  commentId: P:TinyLife.Skills.FoodType.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: FoodType.RequiredSkill
  fullName: TinyLife.Skills.FoodType.RequiredSkill
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredSkill
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 161
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> required for this food type, which is linked to the <xref href=\"TinyLife.Skills.FoodType.RequiredSkillLevel\" data-throw-if-not-resolved=\"false\"></xref>.\nThis value defaults to the <xref href=\"TinyLife.Skills.SkillType.Cooking\" data-throw-if-not-resolved=\"false\"></xref> skill.\n"
  example: []
  syntax:
    content: public SkillType RequiredSkill { get; set; }
    parameters: []
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Property RequiredSkill As SkillType
  overload: TinyLife.Skills.FoodType.RequiredSkill*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.AdditionalObject
  commentId: P:TinyLife.Skills.FoodType.AdditionalObject
  id: AdditionalObject
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: AdditionalObject
  nameWithType: FoodType.AdditionalObject
  fullName: TinyLife.Skills.FoodType.AdditionalObject
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AdditionalObject
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn object category that dictates an additional object that is required for this food type to be created.\nFor default actions, the categories <xref href=\"TinyLife.Objects.ObjectCategory.Stove\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.ObjectCategory.Oven\" data-throw-if-not-resolved=\"false\"></xref> are supported.\nIf this is not set, a <xref href=\"TinyLife.Skills.FoodType.IngredientSource.Fridge\" data-throw-if-not-resolved=\"false\"></xref> food will not be cooked or baked.\n"
  example: []
  syntax:
    content: public ObjectCategory AdditionalObject { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Property AdditionalObject As ObjectCategory
  overload: TinyLife.Skills.FoodType.AdditionalObject*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.Container
  commentId: P:TinyLife.Skills.FoodType.Container
  id: Container
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Container
  nameWithType: FoodType.Container
  fullName: TinyLife.Skills.FoodType.Container
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Container
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 171
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref> that this food type should be stored in.\n"
  example: []
  syntax:
    content: public FoodType.ContainerType Container { get; set; }
    parameters: []
    return:
      type: TinyLife.Skills.FoodType.ContainerType
    content.vb: Public Property Container As FoodType.ContainerType
  overload: TinyLife.Skills.FoodType.Container*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.OnEaten
  commentId: P:TinyLife.Skills.FoodType.OnEaten
  id: OnEaten
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: OnEaten
  nameWithType: FoodType.OnEaten
  fullName: TinyLife.Skills.FoodType.OnEaten
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 177
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn optional action that is invoked when this food object has been eaten.\nThis method is called if the underlying <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed after a sufficient amount of time, so the food item has not necessarily been fully finished when this action is invoked.\nThis action is invoked in <xref href=\"TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action%2cTinyLife.Objects.FoodTypedItem)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Action<Action, FoodTypedItem> OnEaten { get; set; }
    parameters: []
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
    content.vb: Public Property OnEaten As Action(Of Action, FoodTypedItem)
  overload: TinyLife.Skills.FoodType.OnEaten*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CanEatFunc
  commentId: P:TinyLife.Skills.FoodType.CanEatFunc
  id: CanEatFunc
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanEatFunc
  nameWithType: FoodType.CanEatFunc
  fullName: TinyLife.Skills.FoodType.CanEatFunc
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanEatFunc
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 182
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn optional <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref>-style function that allows passing additional conditions to <xref href=\"TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person%2cTinyLife.Objects.FoodTypedItem%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is null, which is also the default value, no additional checks are done in <xref href=\"TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person%2cTinyLife.Objects.FoodTypedItem%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<(Person Person, FoodTypedItem Food, bool Automatic), CanExecuteResult> CanEatFunc { get; set; }
    parameters: []
    return:
      type: System.Func{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean},TinyLife.Actions.CanExecuteResult}
    content.vb: Public Property CanEatFunc As Func(Of(Person As Person, Food As FoodTypedItem, Automatic As Boolean)(Of Person , FoodTypedItem, Boolean), CanExecuteResult)
  overload: TinyLife.Skills.FoodType.CanEatFunc*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CanCreateFunc
  commentId: P:TinyLife.Skills.FoodType.CanCreateFunc
  id: CanCreateFunc
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanCreateFunc
  nameWithType: FoodType.CanCreateFunc
  fullName: TinyLife.Skills.FoodType.CanCreateFunc
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCreateFunc
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 187
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nAn optional <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref>-style function that allows passing additional conditions to <xref href=\"TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Int32%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is null, which is the default value, no additional checks are done in <xref href=\"TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Int32%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<(ActionInfo Info, bool Automatic, int ServingSize, float PriceMarkup), CanExecuteResult> CanCreateFunc { get; set; }
    parameters: []
    return:
      type: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single},TinyLife.Actions.CanExecuteResult}
    content.vb: Public Property CanCreateFunc As Func(Of(Info As ActionInfo, Automatic As Boolean, ServingSize As Integer, PriceMarkup As Single)(Of ActionInfo , Boolean, Integer, Single), CanExecuteResult)
  overload: TinyLife.Skills.FoodType.CanCreateFunc*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CustomTextureFunc
  commentId: P:TinyLife.Skills.FoodType.CustomTextureFunc
  id: CustomTextureFunc
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CustomTextureFunc
  nameWithType: FoodType.CustomTextureFunc
  fullName: TinyLife.Skills.FoodType.CustomTextureFunc
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CustomTextureFunc
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 191
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA function that can optionally return a custom texture to be used for the given serving size.\n"
  example: []
  syntax:
    content: public Func<int, TextureRegion> CustomTextureFunc { get; set; }
    parameters: []
    return:
      type: System.Func{System.Int32,MLEM.Textures.TextureRegion}
    content.vb: Public Property CustomTextureFunc As Func(Of Integer, TextureRegion)
  overload: TinyLife.Skills.FoodType.CustomTextureFunc*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CanHaveCandle
  commentId: F:TinyLife.Skills.FoodType.CanHaveCandle
  id: CanHaveCandle
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanHaveCandle
  nameWithType: FoodType.CanHaveCandle
  fullName: TinyLife.Skills.FoodType.CanHaveCandle
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanHaveCandle
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 195
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA function that returns whether the given instance of this <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> can have a candle added to it.\n"
  example: []
  syntax:
    content: public Func<Food, bool> CanHaveCandle
    return:
      type: System.Func{TinyLife.Objects.Food,System.Boolean}
    content.vb: Public CanHaveCandle As Func(Of Food, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.DisplayName
  commentId: P:TinyLife.Skills.FoodType.DisplayName
  id: DisplayName
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: FoodType.DisplayName
  fullName: TinyLife.Skills.FoodType.DisplayName
  type: Property
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThis food type&apos;s <xref href=\"TinyLife.Skills.FoodType.Name\" data-throw-if-not-resolved=\"false\"></xref>, but localized using <xref href=\"TinyLife.LnCategory.Food\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: TinyLife.Skills.FoodType.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Skills.FoodType.IngredientSource,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Skills.FoodType.#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Skills.FoodType.IngredientSource,System.Nullable{Microsoft.Xna.Framework.Color})
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32,TinyLife.Skills.FoodType.FoodIntolerance,TinyLife.Skills.FoodType.IngredientSource,System.Nullable{Microsoft.Xna.Framework.Color})'
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: FoodType(String, Int32, Int32, Int32, FoodType.FoodIntolerance, FoodType.IngredientSource, Nullable<Color>)
  nameWithType: FoodType.FoodType(String, Int32, Int32, Int32, FoodType.FoodIntolerance, FoodType.IngredientSource, Nullable<Color>)
  fullName: TinyLife.Skills.FoodType.FoodType(System.String, System.Int32, System.Int32, System.Int32, TinyLife.Skills.FoodType.FoodIntolerance, TinyLife.Skills.FoodType.IngredientSource, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 211
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new food type with the given settings.\n"
  example: []
  syntax:
    content: public FoodType(string name, int requiredSkillLevel, int price, int foodAmount, FoodType.FoodIntolerance intolerances, FoodType.IngredientSource source = null, Color? color = null)
    parameters:
    - id: name
      type: System.String
      description: The food type&apos;s name.
    - id: requiredSkillLevel
      type: System.Int32
      description: The required skill level for the <xref href="TinyLife.Skills.FoodType.RequiredSkill" data-throw-if-not-resolved="false"></xref>.
    - id: price
      type: System.Int32
      description: The price to prepare this food type.
    - id: foodAmount
      type: System.Int32
      description: The amount of food points that this food gives.
    - id: intolerances
      type: TinyLife.Skills.FoodType.FoodIntolerance
      description: A set of <xref href="TinyLife.Skills.FoodType.FoodIntolerance" data-throw-if-not-resolved="false"></xref> flags that determine what things this food item contains that people might be intolerant to.
    - id: source
      type: TinyLife.Skills.FoodType.IngredientSource
      description: The <xref href="TinyLife.Skills.FoodType.IngredientSource" data-throw-if-not-resolved="false"></xref> that this food type can be created in, defaults to <xref href="TinyLife.Skills.FoodType.IngredientSource.Fridge" data-throw-if-not-resolved="false"></xref>.
    - id: color
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that this food type should display with, or <xref uid="langword_csharp_null" name="null" href=""></xref> to use <xref href="Microsoft.Xna.Framework.Color.White" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(name As String, requiredSkillLevel As Integer, price As Integer, foodAmount As Integer, intolerances As FoodType.FoodIntolerance, source As FoodType.IngredientSource = Nothing, color As Color? = Nothing)
  overload: TinyLife.Skills.FoodType.#ctor*
  nameWithType.vb: FoodType.FoodType(String, Int32, Int32, Int32, FoodType.FoodIntolerance, FoodType.IngredientSource, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.FoodType(System.String, System.Int32, System.Int32, System.Int32, TinyLife.Skills.FoodType.FoodIntolerance, TinyLife.Skills.FoodType.IngredientSource, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: FoodType(String, Int32, Int32, Int32, FoodType.FoodIntolerance, FoodType.IngredientSource, Nullable(Of Color))
- uid: TinyLife.Skills.FoodType.GetPrice(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetPrice(System.Int32)
  id: GetPrice(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetPrice(Int32)
  nameWithType: FoodType.GetPrice(Int32)
  fullName: TinyLife.Skills.FoodType.GetPrice(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 227
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the price of this food type, based on the amount of servings provided\n"
  example: []
  syntax:
    content: public float GetPrice(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The amount of servings to get the price for
    return:
      type: System.Single
      description: The price for this food type
    content.vb: Public Function GetPrice(servingSize As Integer) As Single
  overload: TinyLife.Skills.FoodType.GetPrice*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  id: Construct(TinyLife.World.Map,TinyLife.Skills.Quality,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Construct(Map, Quality, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  nameWithType: FoodType.Construct(Map, Quality, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  fullName: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map, TinyLife.Skills.Quality, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 242
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nConstructs a new <xref href=\"TinyLife.Objects.Food\" data-throw-if-not-resolved=\"false\"></xref> furniture instance based on this food type&apos;s <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Food Construct(Map map, Quality quality, TimeSpan expirationTime, int servingSize, Person creator = null, Guid? id = null, bool triggerGoals = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: quality
      type: TinyLife.Skills.Quality
      description: The quality that the food should have, which also affects the <xref href="TinyLife.Objects.Food.FoodLeft" data-throw-if-not-resolved="false"></xref>
    - id: expirationTime
      type: System.TimeSpan
      description: The in-game time that the resulting food should expire at. This should be based on <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref>.
    - id: servingSize
      type: System.Int32
      description: The serving size
    - id: creator
      type: TinyLife.Objects.Person
      description: An optional id of a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> that created this food item
    - id: id
      type: System.Nullable{System.Guid}
      description: An optional id to give to the <xref href="TinyLife.Objects.Food" data-throw-if-not-resolved="false"></xref> instance returned
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.AutoGoalInfo" data-throw-if-not-resolved="false"></xref> goals should be triggered in <xref href="TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Objects.Food
      description: A new food instance with the given settings
    content.vb: Public Function Construct(map As Map, quality As Quality, expirationTime As TimeSpan, servingSize As Integer, creator As Person = Nothing, id As Guid? = Nothing, triggerGoals As Boolean = True) As Food
  overload: TinyLife.Skills.FoodType.Construct*
  nameWithType.vb: FoodType.Construct(Map, Quality, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.Construct(TinyLife.World.Map, TinyLife.Skills.Quality, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: Construct(Map, Quality, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
- uid: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  id: ConstructUnfinished(TinyLife.Objects.FurnitureType,TinyLife.World.Map,System.TimeSpan,System.Int32,TinyLife.Objects.Person,System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  nameWithType: FoodType.ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable<Guid>, Boolean)
  fullName: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType, TinyLife.World.Map, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructUnfinished
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 262
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nConstructs a new <xref href=\"TinyLife.Objects.FoodTypedItem\" data-throw-if-not-resolved=\"false\"></xref> furniture instance based on the passed <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public FoodTypedItem ConstructUnfinished(FurnitureType container, Map map, TimeSpan expirationTime, int servingSize, Person creator = null, Guid? id = null, bool triggerGoals = false)
    parameters:
    - id: container
      type: TinyLife.Objects.FurnitureType
      description: The <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> that an instance of should be returned, has to construct a <xref href="TinyLife.Objects.FoodTypedItem" data-throw-if-not-resolved="false"></xref>
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: expirationTime
      type: System.TimeSpan
      description: The in-game time that the resulting food should expire at. This should be based on <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref>.
    - id: servingSize
      type: System.Int32
      description: The serving size
    - id: creator
      type: TinyLife.Objects.Person
      description: An optional <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> that created this food item
    - id: id
      type: System.Nullable{System.Guid}
      description: An optional id to give to the <xref href="TinyLife.Objects.Food" data-throw-if-not-resolved="false"></xref> instance returned
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.AutoGoalInfo" data-throw-if-not-resolved="false"></xref> goals should be triggered in <xref href="TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Objects.FoodTypedItem
      description: ''
    content.vb: Public Function ConstructUnfinished(container As FurnitureType, map As Map, expirationTime As TimeSpan, servingSize As Integer, creator As Person = Nothing, id As Guid? = Nothing, triggerGoals As Boolean = False) As FoodTypedItem
  overload: TinyLife.Skills.FoodType.ConstructUnfinished*
  nameWithType.vb: FoodType.ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.ConstructUnfinished(TinyLife.Objects.FurnitureType, TinyLife.World.Map, System.TimeSpan, System.Int32, TinyLife.Objects.Person, System.Nullable(Of System.Guid), System.Boolean)
  name.vb: ConstructUnfinished(FurnitureType, Map, TimeSpan, Int32, Person, Nullable(Of Guid), Boolean)
- uid: TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  id: CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanEat(Person, FoodTypedItem, Boolean)
  nameWithType: FoodType.CanEat(Person, FoodTypedItem, Boolean)
  fullName: TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person, TinyLife.Objects.FoodTypedItem, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanEat
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 279
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> indicating whether a <xref href=\"TinyLife.Objects.FoodTypedItem\" data-throw-if-not-resolved=\"false\"></xref> that has this food type can currently be eaten.\nThis method also invokes <xref href=\"TinyLife.Skills.FoodType.CanEatFunc\" data-throw-if-not-resolved=\"false\"></xref> and checks for matching <xref href=\"TinyLife.Skills.FoodType.Intolerances\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CanExecuteResult CanEat(Person person, FoodTypedItem food, bool automatic)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person trying to eat this food item.
    - id: food
      type: TinyLife.Objects.FoodTypedItem
      description: The food item.
    - id: automatic
      type: System.Boolean
      description: Whether the action is invoked automatically.
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: A <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> indicating whether this food item can be eaten.
    content.vb: Public Function CanEat(person As Person, food As FoodTypedItem, automatic As Boolean) As CanExecuteResult
  overload: TinyLife.Skills.FoodType.CanEat*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  commentId: M:TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  id: CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: CanCreate(ActionInfo, Boolean, Int32, Single)
  nameWithType: FoodType.CanCreate(ActionInfo, Boolean, Int32, Single)
  fullName: TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo, System.Boolean, System.Int32, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCreate
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 298
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> indicating whether an item with this food type can be created in some way.\nThis method also invokes <xref href=\"TinyLife.Skills.FoodType.CanCreateFunc\" data-throw-if-not-resolved=\"false\"></xref>, checks against the <xref href=\"TinyLife.Skills.FoodType.Price\" data-throw-if-not-resolved=\"false\"></xref> and checks for an object with the <xref href=\"TinyLife.Skills.FoodType.AdditionalObject\" data-throw-if-not-resolved=\"false\"></xref> category.\n"
  example: []
  syntax:
    content: public CanExecuteResult CanCreate(ActionInfo info, bool automatic, int servingSize, float priceMarkup)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
      description: Whether the action is invoked automatically.
    - id: servingSize
      type: System.Int32
      description: The serving size that is being created.
    - id: priceMarkup
      type: System.Single
      description: A price markup that the <xref href="TinyLife.Skills.FoodType.Price" data-throw-if-not-resolved="false"></xref> should be multiplied with.
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: A <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref> indicating whether this food item can be created.
    content.vb: Public Function CanCreate(info As ActionInfo, automatic As Boolean, servingSize As Integer, priceMarkup As Single) As CanExecuteResult
  overload: TinyLife.Skills.FoodType.CanCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.GetIntolerancesDescription(System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.GetIntolerancesDescription(System.Boolean)
  id: GetIntolerancesDescription(System.Boolean)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetIntolerancesDescription(Boolean)
  nameWithType: FoodType.GetIntolerancesDescription(Boolean)
  fullName: TinyLife.Skills.FoodType.GetIntolerancesDescription(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetIntolerancesDescription
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 320
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a set of strings that describe this food item&apos;s <xref href=\"TinyLife.Skills.FoodType.Intolerances\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this item has no intolerances, no strings are returned.\n"
  example: []
  syntax:
    content: public IEnumerable<string> GetIntolerancesDescription(bool includeIcon = true)
    parameters:
    - id: includeIcon
      type: System.Boolean
      description: Whether the intolerances&apos; icons should be included.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A set of strings that describe this food item&apos;s <xref href="TinyLife.Skills.FoodType.Intolerances" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetIntolerancesDescription(includeIcon As Boolean = True) As IEnumerable(Of String)
  overload: TinyLife.Skills.FoodType.GetIntolerancesDescription*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  commentId: M:TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  id: InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: InvokeOnEaten(Action, FoodTypedItem)
  nameWithType: FoodType.InvokeOnEaten(Action, FoodTypedItem)
  fullName: TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InvokeOnEaten
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 335
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nInvokes this food type&apos;s <xref href=\"TinyLife.Skills.FoodType.OnEaten\" data-throw-if-not-resolved=\"false\"></xref> event, as well as this <xref href=\"TinyLife.Skills.FoodType.Sources\" data-throw-if-not-resolved=\"false\"></xref>&apos; <xref href=\"TinyLife.Skills.FoodType.IngredientSource.OnEaten\" data-throw-if-not-resolved=\"false\"></xref> events.\nThis method should be called when this item is consumed, but is automatically called in <xref href=\"TinyLife.Actions.ActionType.Eat\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void InvokeOnEaten(Action action, FoodTypedItem food)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The eat action.
    - id: food
      type: TinyLife.Objects.FoodTypedItem
      description: The food item being eaten.
    content.vb: Public Sub InvokeOnEaten(action As Action, food As FoodTypedItem)
  overload: TinyLife.Skills.FoodType.InvokeOnEaten*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.GetTexture(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetTexture(System.Int32)
  id: GetTexture(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetTexture(Int32)
  nameWithType: FoodType.GetTexture(Int32)
  fullName: TinyLife.Skills.FoodType.GetTexture(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTexture
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 361
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the texture region that should be drawn for the given serving size.\nThis method invokes the <xref href=\"TinyLife.Skills.FoodType.CustomTextureFunc\" data-throw-if-not-resolved=\"false\"></xref> and, by default, returns <xref href=\"TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TextureRegion GetTexture(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size to return a texture region for.
    return:
      type: MLEM.Textures.TextureRegion
      description: The texture region to draw.
    content.vb: Public Function GetTexture(servingSize As Integer) As TextureRegion
  overload: TinyLife.Skills.FoodType.GetTexture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  id: Register(TinyLife.Skills.FoodType)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: Register(FoodType)
  nameWithType: FoodType.Register(FoodType)
  fullName: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 369
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nRegisters a new <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> with the given settings\n"
  example: []
  syntax:
    content: public static void Register(FoodType type)
    parameters:
    - id: type
      type: TinyLife.Skills.FoodType
      description: The food type to register
    content.vb: Public Shared Sub Register(type As FoodType)
  overload: TinyLife.Skills.FoodType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource,System.Boolean,System.Single,TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Skills.FoodType.GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource,System.Boolean,System.Single,TinyLife.Skills.SkillType)
  id: GetActions(System.Int32,TinyLife.Skills.FoodType.IngredientSource,System.Boolean,System.Single,TinyLife.Skills.SkillType)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetActions(Int32, FoodType.IngredientSource, Boolean, Single, SkillType)
  nameWithType: FoodType.GetActions(Int32, FoodType.IngredientSource, Boolean, Single, SkillType)
  fullName: TinyLife.Skills.FoodType.GetActions(System.Int32, TinyLife.Skills.FoodType.IngredientSource, System.Boolean, System.Single, TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetActions
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 383
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a set of action varieties for all <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> objects that match the given predicate\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionVariety> GetActions(int servingSize, FoodType.IngredientSource source, bool checkConditions = true, float priceMarkup = 1F, SkillType requiredSkill = null)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size that should be served when using the variety
    - id: source
      type: TinyLife.Skills.FoodType.IngredientSource
      description: The ingredient source to return actions for
    - id: checkConditions
      type: System.Boolean
      description: Whether additional conditions like <xref href="TinyLife.Skills.FoodType.GetPrice(System.Int32)" data-throw-if-not-resolved="false"></xref> or the <xref href="TinyLife.Skills.FoodType.AdditionalObject" data-throw-if-not-resolved="false"></xref> should be checked.
    - id: priceMarkup
      type: System.Single
      description: The amount that the <xref href="TinyLife.Skills.FoodType.GetPrice(System.Int32)" data-throw-if-not-resolved="false"></xref> should be multiplied by for display and condition checking.
    - id: requiredSkill
      type: TinyLife.Skills.SkillType
      description: The required skill, or <xref uid="langword_csharp_null" name="null" href=""></xref> to use <xref href="TinyLife.Skills.SkillType.Cooking" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: A set of action varieties representing food types
    content.vb: Public Shared Function GetActions(servingSize As Integer, source As FoodType.IngredientSource, checkConditions As Boolean = True, priceMarkup As Single = 1F, requiredSkill As SkillType = Nothing) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Skills.FoodType.GetActions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  id: GetAllContainers(System.Int32)
  parent: TinyLife.Skills.FoodType
  langs:
  - csharp
  - vb
  name: GetAllContainers(Int32)
  nameWithType: FoodType.GetAllContainers(Int32)
  fullName: TinyLife.Skills.FoodType.GetAllContainers(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAllContainers
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 409
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns all of the <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref> furniture types that any registered food types will be stored in, based on the serving size.\nThis method returns a distinct array of <xref href=\"TinyLife.Skills.FoodType.ContainerType\" data-throw-if-not-resolved=\"false\"></xref> instances of all <xref href=\"TinyLife.Skills.FoodType.Types\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static FurnitureType[] GetAllContainers(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size
    return:
      type: TinyLife.Objects.FurnitureType[]
      description: All food containers for the given serving size
    content.vb: Public Shared Function GetAllContainers(servingSize As Integer) As FurnitureType()
  overload: TinyLife.Skills.FoodType.GetAllContainers*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.ActionType.GetIngredientsSingle
  commentId: F:TinyLife.Actions.ActionType.GetIngredientsSingle
  isExternal: true
- uid: Microsoft.Xna.Framework.Graphics.Texture
  commentId: T:Microsoft.Xna.Framework.Graphics.Texture
  isExternal: true
- uid: TinyLife.Skills.FoodType.ContainerType
  commentId: T:TinyLife.Skills.FoodType.ContainerType
  parent: TinyLife.Skills
  name: FoodType.ContainerType
  nameWithType: FoodType.ContainerType
  fullName: TinyLife.Skills.FoodType.ContainerType
- uid: TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  commentId: M:TinyLife.Mods.Mod.GetCustomFurnitureTextures(TinyLife.Mods.ModInfo)
  isExternal: true
- uid: TinyLife.Skills.FoodType.Name
  commentId: F:TinyLife.Skills.FoodType.Name
  isExternal: true
- uid: TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.Register(TinyLife.Skills.FoodType)
  isExternal: true
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<FoodType>()
  nameWithType: Extensions.JsonCopy<FoodType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType>()
  nameWithType.vb: Extensions.JsonCopy(Of FoodType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType)()
  name.vb: JsonCopy(Of FoodType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<FoodType>
    nameWithType: Extensions.JsonCopy<FoodType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of FoodType)
    nameWithType: Extensions.JsonCopy(Of FoodType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  parent: TinyLife.Skills
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.FoodType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.FoodType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, FoodType>
  nameWithType: ReadOnlyDictionary<String, FoodType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Skills.FoodType>
  nameWithType.vb: ReadOnlyDictionary(Of String, FoodType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Skills.FoodType)
  name.vb: ReadOnlyDictionary(Of String, FoodType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Skills.FoodType.FoodIntolerance
  commentId: T:TinyLife.Skills.FoodType.FoodIntolerance
  parent: TinyLife.Skills
  name: FoodType.FoodIntolerance
  nameWithType: FoodType.FoodIntolerance
  fullName: TinyLife.Skills.FoodType.FoodIntolerance
- uid: TinyLife.Skills.FoodType.FoodIntolerance[]
  isExternal: true
  name: FoodType.FoodIntolerance[]
  nameWithType: FoodType.FoodIntolerance[]
  fullName: TinyLife.Skills.FoodType.FoodIntolerance[]
  nameWithType.vb: FoodType.FoodIntolerance()
  fullName.vb: TinyLife.Skills.FoodType.FoodIntolerance()
  name.vb: FoodType.FoodIntolerance()
  spec.csharp:
  - uid: TinyLife.Skills.FoodType.FoodIntolerance
    name: FoodType.FoodIntolerance
    nameWithType: FoodType.FoodIntolerance
    fullName: TinyLife.Skills.FoodType.FoodIntolerance
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Skills.FoodType.FoodIntolerance
    name: FoodType.FoodIntolerance
    nameWithType: FoodType.FoodIntolerance
    fullName: TinyLife.Skills.FoodType.FoodIntolerance
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Skills.FoodType.OnEaten
  commentId: P:TinyLife.Skills.FoodType.OnEaten
  isExternal: true
- uid: TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  commentId: M:TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  isExternal: true
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem,TinyLife.Skills.FoodType}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem,TinyLife.Skills.FoodType}
  parent: System
  definition: System.Action`3
  name: Action<Action, FoodTypedItem, FoodType>
  nameWithType: Action<Action, FoodTypedItem, FoodType>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem, TinyLife.Skills.FoodType>
  nameWithType.vb: Action(Of Action, FoodTypedItem, FoodType)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem, TinyLife.Skills.FoodType)
  name.vb: Action(Of Action, FoodTypedItem, FoodType)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Skills.SkillType.Cooking
  commentId: F:TinyLife.Skills.SkillType.Cooking
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.Food.FoodLeft
  commentId: F:TinyLife.Objects.Food.FoodLeft
  isExternal: true
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Skills.FoodType.IngredientSource
  commentId: T:TinyLife.Skills.FoodType.IngredientSource
  parent: TinyLife.Skills
  name: FoodType.IngredientSource
  nameWithType: FoodType.IngredientSource
  fullName: TinyLife.Skills.FoodType.IngredientSource
- uid: System.Collections.Generic.ISet{TinyLife.Skills.FoodType.IngredientSource}
  commentId: T:System.Collections.Generic.ISet{TinyLife.Skills.FoodType.IngredientSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<FoodType.IngredientSource>
  nameWithType: ISet<FoodType.IngredientSource>
  fullName: System.Collections.Generic.ISet<TinyLife.Skills.FoodType.IngredientSource>
  nameWithType.vb: ISet(Of FoodType.IngredientSource)
  fullName.vb: System.Collections.Generic.ISet(Of TinyLife.Skills.FoodType.IngredientSource)
  name.vb: ISet(Of FoodType.IngredientSource)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.FoodType.IngredientSource
    name: FoodType.IngredientSource
    nameWithType: FoodType.IngredientSource
    fullName: TinyLife.Skills.FoodType.IngredientSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.FoodType.IngredientSource
    name: FoodType.IngredientSource
    nameWithType: FoodType.IngredientSource
    fullName: TinyLife.Skills.FoodType.IngredientSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills.FoodType.RequiredSkillLevel
  commentId: F:TinyLife.Skills.FoodType.RequiredSkillLevel
  isExternal: true
- uid: TinyLife.Skills.FoodType.RequiredSkill*
  commentId: Overload:TinyLife.Skills.FoodType.RequiredSkill
  name: RequiredSkill
  nameWithType: FoodType.RequiredSkill
  fullName: TinyLife.Skills.FoodType.RequiredSkill
- uid: TinyLife.Objects.ObjectCategory.Stove
  commentId: F:TinyLife.Objects.ObjectCategory.Stove
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.Oven
  commentId: F:TinyLife.Objects.ObjectCategory.Oven
  isExternal: true
- uid: TinyLife.Skills.FoodType.IngredientSource.Fridge
  commentId: F:TinyLife.Skills.FoodType.IngredientSource.Fridge
  isExternal: true
- uid: TinyLife.Skills.FoodType.AdditionalObject*
  commentId: Overload:TinyLife.Skills.FoodType.AdditionalObject
  name: AdditionalObject
  nameWithType: FoodType.AdditionalObject
  fullName: TinyLife.Skills.FoodType.AdditionalObject
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Skills.FoodType.Container*
  commentId: Overload:TinyLife.Skills.FoodType.Container
  name: Container
  nameWithType: FoodType.Container
  fullName: TinyLife.Skills.FoodType.Container
- uid: TinyLife.Skills.FoodType.OnEaten*
  commentId: Overload:TinyLife.Skills.FoodType.OnEaten
  name: OnEaten
  nameWithType: FoodType.OnEaten
  fullName: TinyLife.Skills.FoodType.OnEaten
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem}
  parent: System
  definition: System.Action`2
  name: Action<Action, FoodTypedItem>
  nameWithType: Action<Action, FoodTypedItem>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem>
  nameWithType.vb: Action(Of Action, FoodTypedItem)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Objects.FoodTypedItem)
  name.vb: Action(Of Action, FoodTypedItem)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.CanEat(TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean)
  isExternal: true
- uid: TinyLife.Skills.FoodType.CanEatFunc*
  commentId: Overload:TinyLife.Skills.FoodType.CanEatFunc
  name: CanEatFunc
  nameWithType: FoodType.CanEatFunc
  fullName: TinyLife.Skills.FoodType.CanEatFunc
- uid: System.Func{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean},TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Objects.Person,TinyLife.Objects.FoodTypedItem,System.Boolean},TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2, T3)<Person, FoodTypedItem, Boolean>, CanExecuteResult>
  nameWithType: Func<(T1, T2, T3)<Person, FoodTypedItem, Boolean>, CanExecuteResult>
  fullName: System.Func<System.ValueTuple<TinyLife.Objects.Person, TinyLife.Objects.FoodTypedItem, System.Boolean>, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of (T1, T2, T3)(Of Person, FoodTypedItem, Boolean), CanExecuteResult)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Objects.Person, TinyLife.Objects.FoodTypedItem, System.Boolean), TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of (T1, T2, T3)(Of Person, FoodTypedItem, Boolean), CanExecuteResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FoodTypedItem
    name: FoodTypedItem
    nameWithType: FoodTypedItem
    fullName: TinyLife.Objects.FoodTypedItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  commentId: M:TinyLife.Skills.FoodType.CanCreate(TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single)
  isExternal: true
- uid: TinyLife.Skills.FoodType.CanCreateFunc*
  commentId: Overload:TinyLife.Skills.FoodType.CanCreateFunc
  name: CanCreateFunc
  nameWithType: FoodType.CanCreateFunc
  fullName: TinyLife.Skills.FoodType.CanCreateFunc
- uid: System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single},TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{System.ValueTuple{TinyLife.Actions.ActionInfo,System.Boolean,System.Int32,System.Single},TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`2
  name: Func<(T1, T2, T3, T4)<ActionInfo, Boolean, Int32, Single>, CanExecuteResult>
  nameWithType: Func<(T1, T2, T3, T4)<ActionInfo, Boolean, Int32, Single>, CanExecuteResult>
  fullName: System.Func<System.ValueTuple<TinyLife.Actions.ActionInfo, System.Boolean, System.Int32, System.Single>, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of (T1, T2, T3, T4)(Of ActionInfo, Boolean, Int32, Single), CanExecuteResult)
  fullName.vb: System.Func(Of System.ValueTuple(Of TinyLife.Actions.ActionInfo, System.Boolean, System.Int32, System.Single), TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of (T1, T2, T3, T4)(Of ActionInfo, Boolean, Int32, Single), CanExecuteResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.CustomTextureFunc*
  commentId: Overload:TinyLife.Skills.FoodType.CustomTextureFunc
  name: CustomTextureFunc
  nameWithType: FoodType.CustomTextureFunc
  fullName: TinyLife.Skills.FoodType.CustomTextureFunc
- uid: System.Func{System.Int32,MLEM.Textures.TextureRegion}
  commentId: T:System.Func{System.Int32,MLEM.Textures.TextureRegion}
  parent: System
  definition: System.Func`2
  name: Func<Int32, TextureRegion>
  nameWithType: Func<Int32, TextureRegion>
  fullName: System.Func<System.Int32, MLEM.Textures.TextureRegion>
  nameWithType.vb: Func(Of Int32, TextureRegion)
  fullName.vb: System.Func(Of System.Int32, MLEM.Textures.TextureRegion)
  name.vb: Func(Of Int32, TextureRegion)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Objects.Food,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Food,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Food, Boolean>
  nameWithType: Func<Food, Boolean>
  fullName: System.Func<TinyLife.Objects.Food, System.Boolean>
  nameWithType.vb: Func(Of Food, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Food, System.Boolean)
  name.vb: Func(Of Food, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Food
    name: Food
    nameWithType: Food
    fullName: TinyLife.Objects.Food
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Food
    name: Food
    nameWithType: Food
    fullName: TinyLife.Objects.Food
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.LnCategory.Food
  commentId: F:TinyLife.LnCategory.Food
  isExternal: true
- uid: TinyLife.Skills.FoodType.DisplayName*
  commentId: Overload:TinyLife.Skills.FoodType.DisplayName
  name: DisplayName
  nameWithType: FoodType.DisplayName
  fullName: TinyLife.Skills.FoodType.DisplayName
- uid: TinyLife.Skills.FoodType.RequiredSkill
  commentId: P:TinyLife.Skills.FoodType.RequiredSkill
  isExternal: true
- uid: Microsoft.Xna.Framework.Color.White
  commentId: P:Microsoft.Xna.Framework.Color.White
  isExternal: true
- uid: TinyLife.Skills.FoodType.#ctor*
  commentId: Overload:TinyLife.Skills.FoodType.#ctor
  name: FoodType
  nameWithType: FoodType.FoodType
  fullName: TinyLife.Skills.FoodType.FoodType
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.GetPrice*
  commentId: Overload:TinyLife.Skills.FoodType.GetPrice
  name: GetPrice
  nameWithType: FoodType.GetPrice
  fullName: TinyLife.Skills.FoodType.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.Food
  commentId: T:TinyLife.Objects.Food
  parent: TinyLife.Objects
  name: Food
  nameWithType: Food
  fullName: TinyLife.Objects.Food
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  isExternal: true
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.Construct*
  commentId: Overload:TinyLife.Skills.FoodType.Construct
  name: Construct
  nameWithType: FoodType.Construct
  fullName: TinyLife.Skills.FoodType.Construct
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Objects.FoodTypedItem
  commentId: T:TinyLife.Objects.FoodTypedItem
  parent: TinyLife.Objects
  name: FoodTypedItem
  nameWithType: FoodTypedItem
  fullName: TinyLife.Objects.FoodTypedItem
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Skills.FoodType.ConstructUnfinished*
  commentId: Overload:TinyLife.Skills.FoodType.ConstructUnfinished
  name: ConstructUnfinished
  nameWithType: FoodType.ConstructUnfinished
  fullName: TinyLife.Skills.FoodType.ConstructUnfinished
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Skills.FoodType.CanEatFunc
  commentId: P:TinyLife.Skills.FoodType.CanEatFunc
  isExternal: true
- uid: TinyLife.Skills.FoodType.Intolerances
  commentId: F:TinyLife.Skills.FoodType.Intolerances
  isExternal: true
- uid: TinyLife.Skills.FoodType.CanEat*
  commentId: Overload:TinyLife.Skills.FoodType.CanEat
  name: CanEat
  nameWithType: FoodType.CanEat
  fullName: TinyLife.Skills.FoodType.CanEat
- uid: TinyLife.Skills.FoodType.CanCreateFunc
  commentId: P:TinyLife.Skills.FoodType.CanCreateFunc
  isExternal: true
- uid: TinyLife.Skills.FoodType.Price
  commentId: F:TinyLife.Skills.FoodType.Price
  isExternal: true
- uid: TinyLife.Skills.FoodType.AdditionalObject
  commentId: P:TinyLife.Skills.FoodType.AdditionalObject
  isExternal: true
- uid: TinyLife.Skills.FoodType.CanCreate*
  commentId: Overload:TinyLife.Skills.FoodType.CanCreate
  name: CanCreate
  nameWithType: FoodType.CanCreate
  fullName: TinyLife.Skills.FoodType.CanCreate
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Skills.FoodType.GetIntolerancesDescription*
  commentId: Overload:TinyLife.Skills.FoodType.GetIntolerancesDescription
  name: GetIntolerancesDescription
  nameWithType: FoodType.GetIntolerancesDescription
  fullName: TinyLife.Skills.FoodType.GetIntolerancesDescription
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.Sources
  commentId: F:TinyLife.Skills.FoodType.Sources
  isExternal: true
- uid: TinyLife.Skills.FoodType.IngredientSource.OnEaten
  commentId: P:TinyLife.Skills.FoodType.IngredientSource.OnEaten
  isExternal: true
- uid: TinyLife.Actions.ActionType.Eat
  commentId: F:TinyLife.Actions.ActionType.Eat
  isExternal: true
- uid: TinyLife.Skills.FoodType.InvokeOnEaten*
  commentId: Overload:TinyLife.Skills.FoodType.InvokeOnEaten
  name: InvokeOnEaten
  nameWithType: FoodType.InvokeOnEaten
  fullName: TinyLife.Skills.FoodType.InvokeOnEaten
- uid: TinyLife.Skills.FoodType.CustomTextureFunc
  commentId: P:TinyLife.Skills.FoodType.CustomTextureFunc
  isExternal: true
- uid: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetTexture*
  commentId: Overload:TinyLife.Skills.FoodType.GetTexture
  name: GetTexture
  nameWithType: FoodType.GetTexture
  fullName: TinyLife.Skills.FoodType.GetTexture
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Skills.FoodType.Register*
  commentId: Overload:TinyLife.Skills.FoodType.Register
  name: Register
  nameWithType: FoodType.Register
  fullName: TinyLife.Skills.FoodType.Register
- uid: TinyLife.Skills.FoodType.GetPrice(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.GetPrice(System.Int32)
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetActions*
  commentId: Overload:TinyLife.Skills.FoodType.GetActions
  name: GetActions
  nameWithType: FoodType.GetActions
  fullName: TinyLife.Skills.FoodType.GetActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.Types
  commentId: F:TinyLife.Skills.FoodType.Types
  isExternal: true
- uid: TinyLife.Skills.FoodType.GetAllContainers*
  commentId: Overload:TinyLife.Skills.FoodType.GetAllContainers
  name: GetAllContainers
  nameWithType: FoodType.GetAllContainers
  fullName: TinyLife.Skills.FoodType.GetAllContainers
- uid: TinyLife.Objects.FurnitureType[]
  isExternal: true
  name: FurnitureType[]
  nameWithType: FurnitureType[]
  fullName: TinyLife.Objects.FurnitureType[]
  nameWithType.vb: FurnitureType()
  fullName.vb: TinyLife.Objects.FurnitureType()
  name.vb: FurnitureType()
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ()
    nameWithType: ()
    fullName: ()

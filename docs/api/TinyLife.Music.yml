### YamlMime:ManagedReference
items:
- uid: TinyLife.Music
  commentId: T:TinyLife.Music
  id: Music
  parent: TinyLife
  children:
  - TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  langs:
  - csharp
  - vb
  name: Music
  nameWithType: Music
  fullName: TinyLife.Music
  type: Class
  source:
    remote:
      path: TinyLife/Music.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Music
    path: ../TinyLife/Music.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis class handles the game&apos;s in-game music. To register new music tracks for being selected, use <xref href=\"TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song%2cTinyLife.Music.Occasion%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class Music
    content.vb: Public Module Music
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  commentId: M:TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  id: Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  parent: TinyLife.Music
  langs:
  - csharp
  - vb
  name: Register(Song, Music.Occasion[])
  nameWithType: Music.Register(Song, Music.Occasion[])
  fullName: TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song, TinyLife.Music.Occasion[])
  type: Method
  source:
    remote:
      path: TinyLife/Music.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Music.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nRegisters a new music track to be played at the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">occasions</code>.\nThe music track will be added to the music pool and randomly selected for playing.\n"
  example: []
  syntax:
    content: public static void Register(Song song, params Music.Occasion[] occasions)
    parameters:
    - id: song
      type: Microsoft.Xna.Framework.Media.Song
      description: The song to play.
    - id: occasions
      type: TinyLife.Music.Occasion[]
      description: The occasions that this song should be allowed to play on.
    content.vb: Public Shared Sub Register(song As Song, ParamArray occasions As Music.Occasion())
  overload: TinyLife.Music.Register*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">occasions</code> is empty.
  nameWithType.vb: Music.Register(Song, Music.Occasion())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song, TinyLife.Music.Occasion())
  name.vb: Register(Song, Music.Occasion())
references:
- uid: TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  commentId: M:TinyLife.Music.Register(Microsoft.Xna.Framework.Media.Song,TinyLife.Music.Occasion[])
  isExternal: true
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: TinyLife.Music.Register*
  commentId: Overload:TinyLife.Music.Register
  name: Register
  nameWithType: Music.Register
  fullName: TinyLife.Music.Register
- uid: Microsoft.Xna.Framework.Media.Song
  commentId: T:Microsoft.Xna.Framework.Media.Song
  parent: Microsoft.Xna.Framework.Media
  isExternal: true
  name: Song
  nameWithType: Song
  fullName: Microsoft.Xna.Framework.Media.Song
- uid: TinyLife.Music.Occasion[]
  isExternal: true
  name: Music.Occasion[]
  nameWithType: Music.Occasion[]
  fullName: TinyLife.Music.Occasion[]
  nameWithType.vb: Music.Occasion()
  fullName.vb: TinyLife.Music.Occasion()
  name.vb: Music.Occasion()
  spec.csharp:
  - uid: TinyLife.Music.Occasion
    name: Music.Occasion
    nameWithType: Music.Occasion
    fullName: TinyLife.Music.Occasion
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Music.Occasion
    name: Music.Occasion
    nameWithType: Music.Occasion
    fullName: TinyLife.Music.Occasion
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Media
  commentId: N:Microsoft.Xna.Framework.Media
  isExternal: true
  name: Microsoft.Xna.Framework.Media
  nameWithType: Microsoft.Xna.Framework.Media
  fullName: Microsoft.Xna.Framework.Media

### YamlMime:ManagedReference
items:
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  id: IPricedObject
  parent: TinyLife.World
  children:
  - TinyLife.World.IPricedObject.GetPrice
  langs:
  - csharp
  - vb
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
  type: Interface
  source:
    remote:
      path: TinyLife/World/IPricedObject.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IPricedObject
    path: ../TinyLife/World/IPricedObject.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA priced object is an object that has a floating point price value attached to it.\nIn the world of Tiny Life, prices are written as &quot;tiny bucks&quot;, but they don&apos;t necessarily resemble the prices of the American dollar.\n"
  example: []
  syntax:
    content: public interface IPricedObject
    content.vb: Public Interface IPricedObject
  extensionMethods:
  - TinyLife.World.IPricedObject.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  id: GetPrice
  parent: TinyLife.World.IPricedObject
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/IPricedObject.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/IPricedObject.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Function GetPrice As Single
  overload: TinyLife.World.IPricedObject.GetPrice*
references:
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.World.IPricedObject.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<IPricedObject>()
  nameWithType: Extensions.JsonCopy<IPricedObject>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.IPricedObject>()
  nameWithType.vb: Extensions.JsonCopy(Of IPricedObject)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.IPricedObject)()
  name.vb: JsonCopy(Of IPricedObject)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<IPricedObject>
    nameWithType: Extensions.JsonCopy<IPricedObject>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.IPricedObject>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of IPricedObject)
    nameWithType: Extensions.JsonCopy(Of IPricedObject)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.IPricedObject)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Painting
  commentId: T:TinyLife.Objects.Painting
  name: Painting
  nameWithType: Painting
  fullName: TinyLife.Objects.Painting
- uid: TinyLife.Tools.FurnitureTool
  commentId: T:TinyLife.Tools.FurnitureTool
  name: FurnitureTool
  nameWithType: FurnitureTool
  fullName: TinyLife.Tools.FurnitureTool
- uid: TinyLife.World.IPricedObject.GetPrice*
  commentId: Overload:TinyLife.World.IPricedObject.GetPrice
  name: GetPrice
  nameWithType: IPricedObject.GetPrice
  fullName: TinyLife.World.IPricedObject.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System

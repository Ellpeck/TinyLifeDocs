### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  id: Furniture
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  - TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.Area
  - TinyLife.Objects.Furniture.AreUtilitiesDisabled
  - TinyLife.Objects.Furniture.AttachedWall
  - TinyLife.Objects.Furniture.CanBeDirty
  - TinyLife.Objects.Furniture.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Objects.Furniture.Colors
  - TinyLife.Objects.Furniture.Creator
  - TinyLife.Objects.Furniture.CreatorId
  - TinyLife.Objects.Furniture.CustomPrice
  - TinyLife.Objects.Furniture.DevaluedThroughUse
  - TinyLife.Objects.Furniture.Dirty
  - TinyLife.Objects.Furniture.DisplayName
  - TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  - TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  - TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  - TinyLife.Objects.Furniture.GetChildren``1
  - TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  - TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  - TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  - TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  - TinyLife.Objects.Furniture.GetOccupants(TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Objects.Furniture.GetPrice
  - TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  - TinyLife.Objects.Furniture.HideFromDraw
  - TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  - TinyLife.Objects.Furniture.IsFreeSpot(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.Furniture.IsStatic
  - TinyLife.Objects.Furniture.NotifyNeighbors
  - TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Objects.Furniture.OnAdded
  - TinyLife.Objects.Furniture.OnDirty
  - TinyLife.Objects.Furniture.OnGetDescription
  - TinyLife.Objects.Furniture.OnGetDirty
  - TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  - TinyLife.Objects.Furniture.OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer,System.Boolean)
  - TinyLife.Objects.Furniture.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.Furniture.OnRemoved
  - TinyLife.Objects.Furniture.OnSetCreator
  - TinyLife.Objects.Furniture.ParentFurniture
  - TinyLife.Objects.Furniture.ParentFurnitureId
  - TinyLife.Objects.Furniture.ParentInfo
  - TinyLife.Objects.Furniture.ParentObjectSpot
  - TinyLife.Objects.Furniture.ParentObjectSpotId
  - TinyLife.Objects.Furniture.Quality
  - TinyLife.Objects.Furniture.Random
  - TinyLife.Objects.Furniture.RemoveAndUnlink
  - TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  - TinyLife.Objects.Furniture.ResetToStatic(System.Boolean)
  - TinyLife.Objects.Furniture.Rotation
  - TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  - TinyLife.Objects.Furniture.SetChild``1(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  - TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  - TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  - TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  - TinyLife.Objects.Furniture.Type
  - TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - TinyLife.Objects.Furniture.Validate
  - TinyLife.Objects.Furniture.Visibility
  - TinyLife.Objects.Furniture.VisualRotation
  langs:
  - csharp
  - vb
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Furniture
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA furniture is an instance of a <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> which is placed in the world, or in a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s hand.\nTo register a custom furniture, use <xref href=\"TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class Furniture : MapObject, IGenericDataHolder, IPricedObject'
    content.vb: Public Class Furniture Inherits MapObject Implements IGenericDataHolder, IPricedObject
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Objects.MapObject
  derivedClasses:
  - TinyLife.Objects.Bathtub
  - TinyLife.Objects.BreakableFurniture
  - TinyLife.Objects.Chimney
  - TinyLife.Objects.CornerFurniture
  - TinyLife.Objects.Fence
  - TinyLife.Objects.FoodTypedItem
  - TinyLife.Objects.Fridge
  - TinyLife.Objects.Gravestone
  - TinyLife.Objects.LightFurniture
  - TinyLife.Objects.Newspaper
  - TinyLife.Objects.OverlayWallHanging
  - TinyLife.Objects.Painting
  - TinyLife.Objects.TrashBag
  - TinyLife.Objects.TrashCan
  - TinyLife.Objects.UnfinishedWoodwork
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - TinyLife.Objects.MapObject.PersonRotationOrder
  - TinyLife.Objects.MapObject.OnCreated
  - TinyLife.Objects.MapObject.OnValidated
  - TinyLife.Objects.MapObject.OnEventsAttachable
  - TinyLife.Objects.MapObject.OnDraw
  - TinyLife.Objects.MapObject.OnUpdate
  - TinyLife.Objects.MapObject.OnGetHoverInfo
  - TinyLife.Objects.MapObject.Position
  - TinyLife.Objects.MapObject.Id
  - TinyLife.Objects.MapObject.Map
  - TinyLife.Objects.MapObject.CurrentLot
  - TinyLife.Objects.MapObject.CurrentRoom
  - TinyLife.Objects.MapObject.IsInWorld
  - TinyLife.Objects.MapObject.HoldingPerson
  - TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  - TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.GetModCategory(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Furniture.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Objects.Furniture.Random
  commentId: F:TinyLife.Objects.Furniture.Random
  id: Random
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Furniture.Random
  fullName: TinyLife.Objects.Furniture.Random
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Random
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA <xref href=\"TinyLife.Objects.Furniture.Random\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used by furniture items.\nThis value has the default seed.\n"
  example: []
  syntax:
    content: protected static readonly Random Random
    return:
      type: System.Random
    content.vb: Protected Shared ReadOnly Random As Random
- uid: TinyLife.Objects.Furniture.OnGetDescription
  commentId: E:TinyLife.Objects.Furniture.OnGetDescription
  id: OnGetDescription
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnGetDescription
  nameWithType: Furniture.OnGetDescription
  fullName: TinyLife.Objects.Furniture.OnGetDescription
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetDescription
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when <xref href=\"TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List%7bSystem.String%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThis event can be used to change the description of furniture instances by adding to the provided <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<List<string>, bool> OnGetDescription
    return:
      type: System.Action{System.Collections.Generic.List{System.String},System.Boolean}
    content.vb: Public Event OnGetDescription As Action(Of List(Of String), Boolean)
- uid: TinyLife.Objects.Furniture.OnSetCreator
  commentId: E:TinyLife.Objects.Furniture.OnSetCreator
  id: OnSetCreator
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnSetCreator
  nameWithType: Furniture.OnSetCreator
  fullName: TinyLife.Objects.Furniture.OnSetCreator
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnSetCreator
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThe arguments passed to this event are the same that are passed to <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person, bool, EventPhase> OnSetCreator
    return:
      type: System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
    content.vb: Public Event OnSetCreator As Action(Of Person, Boolean, EventPhase)
- uid: TinyLife.Objects.Furniture.OnGetDirty
  commentId: E:TinyLife.Objects.Furniture.OnGetDirty
  id: OnGetDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnGetDirty
  nameWithType: Furniture.OnGetDirty
  fullName: TinyLife.Objects.Furniture.OnGetDirty
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetDirty
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when this furniture gets more dirty in <xref href=\"TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person%2cSystem.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person, TimeSpan> OnGetDirty
    return:
      type: System.Action{TinyLife.Objects.Person,System.TimeSpan}
    content.vb: Public Event OnGetDirty As Action(Of Person, TimeSpan)
- uid: TinyLife.Objects.Furniture.OnDirty
  commentId: E:TinyLife.Objects.Furniture.OnDirty
  id: OnDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnDirty
  nameWithType: Furniture.OnDirty
  fullName: TinyLife.Objects.Furniture.OnDirty
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnDirty
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is fired when this furniture gets dirty, meaning its <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> value is set to true.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action OnDirty
    return:
      type: System.Action
    content.vb: Public Event OnDirty As Action
- uid: TinyLife.Objects.Furniture.DisplayName
  commentId: P:TinyLife.Objects.Furniture.DisplayName
  id: DisplayName
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: Furniture.DisplayName
  fullName: TinyLife.Objects.Furniture.DisplayName
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the display name of this furniture item.\nBy default, <xref href=\"TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual string DisplayName { get; }
    parameters: []
    return:
      type: System.String
      description: This furniture item&apos;s display name.
    content.vb: Public Overridable ReadOnly Property DisplayName As String
  overload: TinyLife.Objects.Furniture.DisplayName*
- uid: TinyLife.Objects.Furniture.ParentInfo
  commentId: P:TinyLife.Objects.Furniture.ParentInfo
  id: ParentInfo
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentInfo
  nameWithType: Furniture.ParentInfo
  fullName: TinyLife.Objects.Furniture.ParentInfo
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentInfo
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 70
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> for this object in its current context.\nBy default, this method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/default\">default</a>, and <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> returns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> based on its current attachments.\n"
  example: []
  syntax:
    content: public override ParentInfo ParentInfo { get; }
    parameters: []
    return:
      type: TinyLife.Objects.ParentInfo
    content.vb: Public Overrides ReadOnly Property ParentInfo As ParentInfo
  overridden: TinyLife.Objects.MapObject.ParentInfo
  overload: TinyLife.Objects.Furniture.ParentInfo*
- uid: TinyLife.Objects.Furniture.Visibility
  commentId: P:TinyLife.Objects.Furniture.Visibility
  id: Visibility
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Visibility
  nameWithType: Furniture.Visibility
  fullName: TinyLife.Objects.Furniture.Visibility
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Visibility
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 85
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the visibility settings of this object.\nBy default, <xref href=\"TinyLife.Objects.Visibility.WhenVisible\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nFor <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Visibility\" data-throw-if-not-resolved=\"false\"></xref> is returned instead.\n"
  example: []
  syntax:
    content: public override Visibility Visibility { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Visibility
      description: This object&apos;s visibility settings
    content.vb: Public Overrides ReadOnly Property Visibility As Visibility
  overridden: TinyLife.Objects.MapObject.Visibility
  overload: TinyLife.Objects.Furniture.Visibility*
- uid: TinyLife.Objects.Furniture.Type
  commentId: F:TinyLife.Objects.Furniture.Type
  id: Type
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Furniture.Type
  fullName: TinyLife.Objects.Furniture.Type
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> that this furniture has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly FurnitureType Type
    return:
      type: TinyLife.Objects.FurnitureType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As FurnitureType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.Furniture.Rotation
  commentId: F:TinyLife.Objects.Furniture.Rotation
  id: Rotation
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: Furniture.Rotation
  fullName: TinyLife.Objects.Furniture.Rotation
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Rotation
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe current rotation of this furniture.\nSince furniture has a wide variety of looks, the specific value of the rotation doesn&apos;t necessarily have much practical meaning.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Direction2 Rotation
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <DataMember>

      Public Rotation As Direction2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  id: ParentFurniture
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentFurniture
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that this furniture is currently latched on to.\nIf this value is non-null, <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> returns the object spot that this furniture is in.\n"
  example: []
  syntax:
    content: public Furniture ParentFurniture { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Furniture
    content.vb: Public ReadOnly Property ParentFurniture As Furniture
  overload: TinyLife.Objects.Furniture.ParentFurniture*
- uid: TinyLife.Objects.Furniture.ParentObjectSpot
  commentId: P:TinyLife.Objects.Furniture.ParentObjectSpot
  id: ParentObjectSpot
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentObjectSpot
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> that this furniture is currently in.\nIf this value is non-null, <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> returns the furniture that this object spot belongs to.\n"
  example: []
  syntax:
    content: public ObjectSpot ParentObjectSpot { get; }
    parameters: []
    return:
      type: TinyLife.Objects.ObjectSpot
    content.vb: Public ReadOnly Property ParentObjectSpot As ObjectSpot
  overload: TinyLife.Objects.Furniture.ParentObjectSpot*
- uid: TinyLife.Objects.Furniture.Colors
  commentId: F:TinyLife.Objects.Furniture.Colors
  id: Colors
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Furniture.Colors
  fullName: TinyLife.Objects.Furniture.Colors
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe indices of the colors that this furniture has.\nRefer to <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref> for the actual colors that these indices represent.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int[] Colors
    return:
      type: System.Int32[]
    content.vb: >-
      <DataMember>

      Public Colors As Integer()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.Furniture.Area
  commentId: P:TinyLife.Objects.Furniture.Area
  id: Area
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Furniture.Area
  fullName: TinyLife.Objects.Furniture.Area
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 118
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this furniture piece is currently taking up, based on its <xref href=\"TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref> and its <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public RectangleF Area { get; }
    parameters: []
    return:
      type: MLEM.Misc.RectangleF
    content.vb: Public ReadOnly Property Area As RectangleF
  overload: TinyLife.Objects.Furniture.Area*
- uid: TinyLife.Objects.Furniture.DevaluedThroughUse
  commentId: F:TinyLife.Objects.Furniture.DevaluedThroughUse
  id: DevaluedThroughUse
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: DevaluedThroughUse
  nameWithType: Furniture.DevaluedThroughUse
  fullName: TinyLife.Objects.Furniture.DevaluedThroughUse
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DevaluedThroughUse
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 124
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA field that gets set to true in <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this value is true, the <xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> of this object is greatly reduced.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool DevaluedThroughUse
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public DevaluedThroughUse As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.AreUtilitiesDisabled
  commentId: P:TinyLife.Objects.Furniture.AreUtilitiesDisabled
  id: AreUtilitiesDisabled
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AreUtilitiesDisabled
  nameWithType: Furniture.AreUtilitiesDisabled
  fullName: TinyLife.Objects.Furniture.AreUtilitiesDisabled
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AreUtilitiesDisabled
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether utilities are disabled on the current lot.\nThis is a shorthand for <xref href=\"TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool AreUtilitiesDisabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AreUtilitiesDisabled As Boolean
  overload: TinyLife.Objects.Furniture.AreUtilitiesDisabled*
- uid: TinyLife.Objects.Furniture.IsStatic
  commentId: F:TinyLife.Objects.Furniture.IsStatic
  id: IsStatic
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: Furniture.IsStatic
  fullName: TinyLife.Objects.Furniture.IsStatic
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsStatic
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 134
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA field that is true for objects that are part of the exported base map that the current map is created from\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool IsStatic
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public IsStatic As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.CreatorId
  commentId: P:TinyLife.Objects.Furniture.CreatorId
  id: CreatorId
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreatorId
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 140
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that created this object in some capacity.\nThis value defaults to <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref>, meaning no creator.\nTo easily access the creator <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, see <xref href=\"TinyLife.Objects.Furniture.Creator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Guid CreatorId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property CreatorId As Guid
  overload: TinyLife.Objects.Furniture.CreatorId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.Quality
  commentId: F:TinyLife.Objects.Furniture.Quality
  id: Quality
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Quality
  nameWithType: Furniture.Quality
  fullName: TinyLife.Objects.Furniture.Quality
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Quality
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 148
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe quality of this object, which defaults to null, meaning no quality.\nThe quality is used by <xref href=\"TinyLife.Objects.Food\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, and items crafted on the woodworking table.\nIf this value is nonnull, the quality is displayed in the furniture item&apos;s description (<xref href=\"TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List%7bSystem.String%7d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>) and it influences the furniture&apos;s price (<xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref>) using <xref href=\"TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Quality? Quality
    return:
      type: System.Nullable{TinyLife.Skills.Quality}
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Quality As Quality?
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.CanBeDirty
  commentId: P:TinyLife.Objects.Furniture.CanBeDirty
  id: CanBeDirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanBeDirty
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 153
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that queries whether this object can be made dirty.\nIf this property is false, <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> will not automatically be set to true.\n"
  example: []
  syntax:
    content: public bool CanBeDirty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanBeDirty As Boolean
  overload: TinyLife.Objects.Furniture.CanBeDirty*
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  id: Dirty
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Dirty
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether this object is currently dirty.\nIf <xref href=\"TinyLife.Objects.Furniture.CanBeDirty\" data-throw-if-not-resolved=\"false\"></xref> is false, this field is usually unused.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool Dirty
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Dirty As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.CustomPrice
  commentId: F:TinyLife.Objects.Furniture.CustomPrice
  id: CustomPrice
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CustomPrice
  nameWithType: Furniture.CustomPrice
  fullName: TinyLife.Objects.Furniture.CustomPrice
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CustomPrice
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 165
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn optional custom price that this furniture item has over its regular price (<xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref>).\nIf this field has a value, the regularly calculated price from <xref href=\"TinyLife.Objects.Furniture.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> will be ignored and this value will be used as the object&apos;s price instead.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public float? CustomPrice
    return:
      type: System.Nullable{System.Single}
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public CustomPrice As Single?
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.Creator
  commentId: P:TinyLife.Objects.Furniture.Creator
  id: Creator
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Creator
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that created this object in some capacity.\nThis value is based on the underlying <xref href=\"TinyLife.Objects.Furniture.CreatorId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Person Creator { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Creator As Person
  overload: TinyLife.Objects.Furniture.Creator*
- uid: TinyLife.Objects.Furniture.AttachedWall
  commentId: P:TinyLife.Objects.Furniture.AttachedWall
  id: AttachedWall
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AttachedWall
  nameWithType: Furniture.AttachedWall
  fullName: TinyLife.Objects.Furniture.AttachedWall
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AttachedWall
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that this object is attached to.\nNote that this will return a wall regardless of whether this object is actually attached to a wall, or is even a wall-hanging object.\n"
  example: []
  syntax:
    content: public Wall AttachedWall { get; }
    parameters: []
    return:
      type: TinyLife.World.Wall
    content.vb: Public ReadOnly Property AttachedWall As Wall
  overload: TinyLife.Objects.Furniture.AttachedWall*
- uid: TinyLife.Objects.Furniture.HideFromDraw
  commentId: P:TinyLife.Objects.Furniture.HideFromDraw
  id: HideFromDraw
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: HideFromDraw
  nameWithType: Furniture.HideFromDraw
  fullName: TinyLife.Objects.Furniture.HideFromDraw
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HideFromDraw
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this object should currently be hidden from drawing.\n"
  example: []
  syntax:
    content: public bool HideFromDraw { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HideFromDraw As Boolean
  overload: TinyLife.Objects.Furniture.HideFromDraw*
- uid: TinyLife.Objects.Furniture.VisualRotation
  commentId: P:TinyLife.Objects.Furniture.VisualRotation
  id: VisualRotation
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: VisualRotation
  nameWithType: Furniture.VisualRotation
  fullName: TinyLife.Objects.Furniture.VisualRotation
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisualRotation
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 206
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe rotation that this furniture item currently has from the camera&apos;s perspective.\nThis is a combination of <xref href=\"TinyLife.Objects.Furniture.Rotation\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Direction2 VisualRotation { get; }
    parameters: []
    return:
      type: MLEM.Misc.Direction2
    content.vb: Public ReadOnly Property VisualRotation As Direction2
  overload: TinyLife.Objects.Furniture.VisualRotation*
- uid: TinyLife.Objects.Furniture.ParentObjectSpotId
  commentId: P:TinyLife.Objects.Furniture.ParentObjectSpotId
  id: ParentObjectSpotId
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentObjectSpotId
  nameWithType: Furniture.ParentObjectSpotId
  fullName: TinyLife.Objects.Furniture.ParentObjectSpotId
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentObjectSpotId
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 210
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe index of this furniture&apos;s <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on this furniture&apos;s <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public int ParentObjectSpotId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property ParentObjectSpotId As Integer
  overload: TinyLife.Objects.Furniture.ParentObjectSpotId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.ParentFurnitureId
  commentId: P:TinyLife.Objects.Furniture.ParentFurnitureId
  id: ParentFurnitureId
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ParentFurnitureId
  nameWithType: Furniture.ParentFurnitureId
  fullName: TinyLife.Objects.Furniture.ParentFurnitureId
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentFurnitureId
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> of this furniture&apos;s <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Guid ParentFurnitureId { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property ParentFurnitureId As Guid
  overload: TinyLife.Objects.Furniture.ParentFurnitureId*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
- uid: TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.Furniture.#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(System.Guid,TinyLife.Objects.FurnitureType,System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)'
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Furniture(Guid, FurnitureType, int[], Map, Vector2)
  nameWithType: Furniture.Furniture(Guid, FurnitureType, int[], Map, Vector2)
  fullName: TinyLife.Objects.Furniture.Furniture(System.Guid, TinyLife.Objects.FurnitureType, int[], TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 230
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new furniture instance.\nBy default, this is done using <xref href=\"TinyLife.Objects.FurnitureType.Construct%60%601(System.Int32%5b%5d%2cTinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bSystem.Guid%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Furniture(Guid id, FurnitureType type, int[] colors, Map map, Vector2 pos)
    parameters:
    - id: id
      type: System.Guid
      description: The id to apply to the created furniture instance
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type to create an instance of
    - id: colors
      type: System.Int32[]
      description: The colors to apply to the furniture
    - id: map
      type: TinyLife.World.Map
      description: The map to create the furniture on
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the furniture should have
    content.vb: Public Sub New(id As Guid, type As FurnitureType, colors As Integer(), map As Map, pos As Vector2)
  overload: TinyLife.Objects.Furniture.#ctor*
  nameWithType.vb: Furniture.New(Guid, FurnitureType, Integer(), Map, Vector2)
  fullName.vb: TinyLife.Objects.Furniture.New(System.Guid, TinyLife.Objects.FurnitureType, Integer(), TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  name.vb: New(Guid, FurnitureType, Integer(), Map, Vector2)
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Draw(GameTime, object, Vector2, Color?, List<Item>)
  nameWithType: Furniture.Draw(GameTime, object, Vector2, Color?, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 241
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this object on the current <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>, at the current <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\nTo draw a map object while invoking all the required events, use <xref href=\"TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime%2cSystem.Object%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Boolean%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override sealed void Draw(GameTime time, object batch, Vector2 drawPos, Color? overrideColor, List<StaticSpriteBatch.Item> items)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw this furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public NotOverridable Overrides Sub Draw(time As GameTime, batch As Object, drawPos As Vector2, overrideColor As Color?, items As List(Of StaticSpriteBatch.Item))
  overridden: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  overload: TinyLife.Objects.Furniture.Draw*
  nameWithType.vb: Furniture.Draw(GameTime, Object, Vector2, Color?, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Color?, List(Of Item))
- uid: TinyLife.Objects.Furniture.Validate
  commentId: M:TinyLife.Objects.Furniture.Validate
  id: Validate
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Furniture.Validate()
  fullName: TinyLife.Objects.Furniture.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 257
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\nBy default, this method invokes <xref href=\"TinyLife.Objects.MapObject.OnValidated\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overrides Function Validate() As Boolean
  overridden: TinyLife.Objects.MapObject.Validate
  overload: TinyLife.Objects.Furniture.Validate*
- uid: TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  id: Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Intersects(RectangleF)
  nameWithType: Furniture.Intersects(RectangleF)
  fullName: TinyLife.Objects.Furniture.Intersects(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intersects
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 284
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this map object intersects with the given rectangle.\nThis is used for <xref href=\"TinyLife.World.Map.GetObjects%60%601(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public override bool Intersects(RectangleF rectangle)
    parameters:
    - id: rectangle
      type: MLEM.Misc.RectangleF
      description: The area that should be checked for
    return:
      type: System.Boolean
      description: true if this object intersects with the given rectangle
    content.vb: Public Overrides Function Intersects(rectangle As RectangleF) As Boolean
  overridden: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  overload: TinyLife.Objects.Furniture.Intersects*
- uid: TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  id: GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetCategories(Person)
  nameWithType: Furniture.GetCategories(Person)
  fullName: TinyLife.Objects.Furniture.GetCategories(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCategories
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 289
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this object has, based on the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override sealed ObjectCategory GetCategories(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories that this object has
    content.vb: Public NotOverridable Overrides Function GetCategories(person As Person) As ObjectCategory
  overridden: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  overload: TinyLife.Objects.Furniture.GetCategories*
- uid: TinyLife.Objects.Furniture.OnAdded
  commentId: M:TinyLife.Objects.Furniture.OnAdded
  id: OnAdded
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnAdded()
  nameWithType: Furniture.OnAdded()
  fullName: TinyLife.Objects.Furniture.OnAdded()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnAdded
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 294
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is added to a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public override void OnAdded()
    content.vb: Public Overrides Sub OnAdded()
  overridden: TinyLife.Objects.MapObject.OnAdded
  overload: TinyLife.Objects.Furniture.OnAdded*
- uid: TinyLife.Objects.Furniture.OnRemoved
  commentId: M:TinyLife.Objects.Furniture.OnRemoved
  id: OnRemoved
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnRemoved()
  nameWithType: Furniture.OnRemoved()
  fullName: TinyLife.Objects.Furniture.OnRemoved()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRemoved
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 301
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is removed from a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public override void OnRemoved()
    content.vb: Public Overrides Sub OnRemoved()
  overridden: TinyLife.Objects.MapObject.OnRemoved
  overload: TinyLife.Objects.Furniture.OnRemoved*
- uid: TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: Furniture.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAiPriority
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 309
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns an integer that represents a priority for the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref>&apos;s interaction with this object.\nA higher priority means that this object will be picked over other objects (with lower priority).\nThe default return value is 0, meaning that no special priority is assigned to this object.\nFor any <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.SingleBed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.ObjectCategory.DoubleBed\" data-throw-if-not-resolved=\"false\"></xref> category that is the person&apos;s <xref href=\"TinyLife.Objects.Person.LastBedSleptIn\" data-throw-if-not-resolved=\"false\"></xref>, 10 is returned.\n"
  example: []
  syntax:
    content: public override int GetAiPriority(Person person, ObjectCategory categories)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose AI is attempting to interact with this object
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that are relevant for the ai interaction
    return:
      type: System.Int32
      description: This object&apos;s priority
    content.vb: Public Overrides Function GetAiPriority(person As Person, categories As ObjectCategory) As Integer
  overridden: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  overload: TinyLife.Objects.Furniture.GetAiPriority*
- uid: TinyLife.Objects.Furniture.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  id: CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: CanExecuteAction(ActionType, ActionInfo, bool, bool)
  nameWithType: Furniture.CanExecuteAction(ActionType, ActionInfo, bool, bool)
  fullName: TinyLife.Objects.Furniture.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteAction
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code> can be executed at this map object.\nBy default, this method returns <xref href=\"TinyLife.Actions.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> for all actions, but <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> additionally returns custom results based on whether the furniture is <xref href=\"TinyLife.Objects.BreakableFurniture.Broken\" data-throw-if-not-resolved=\"false\"></xref> or based on <xref href=\"TinyLife.Objects.Furniture.AreUtilitiesDisabled\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override CanExecuteResult CanExecuteAction(ActionType action, ActionInfo info, bool automatic, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action that is querying whether it can be executed.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
      description: Whether the action was started automatically.
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object).
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: Whether this object allows the action to be executed at it.
    content.vb: Public Overrides Function CanExecuteAction(action As ActionType, info As ActionInfo, automatic As Boolean, isAuxiliary As Boolean) As CanExecuteResult
  overridden: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  overload: TinyLife.Objects.Furniture.CanExecuteAction*
  nameWithType.vb: Furniture.CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, Boolean)
  name.vb: CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
- uid: TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnActionCompleted(Action, CompletionType, bool)
  nameWithType: Furniture.OnActionCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionCompleted
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 332
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in is completed. Note that this includes actions that are underlying (see <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets <xref href=\"TinyLife.Objects.Furniture.DevaluedThroughUse\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void OnActionCompleted(Action action, CompletionType type, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type of the action&apos;s completion
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Sub OnActionCompleted(action As Action, type As CompletionType, isAuxiliary As Boolean)
  overridden: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  overload: TinyLife.Objects.Furniture.OnActionCompleted*
  nameWithType.vb: Furniture.OnActionCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnActionCompleted(Action, CompletionType, Boolean)
- uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  id: ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: Furniture.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 342
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in updates, which is every <xref href=\"Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> frame. Note that this includes actions that are underlying (see <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref>) and actions that aren&apos;t fully in progress yet (<xref href=\"TinyLife.Actions.Action.FullyInProgress\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets deals with <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  example: []
  syntax:
    content: public override void ActionUpdate(Action action, GameTime time, TimeSpan passedInGame, float speedMultiplier, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Sub ActionUpdate(action As Action, time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single, isAuxiliary As Boolean)
  overridden: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  overload: TinyLife.Objects.Furniture.ActionUpdate*
  nameWithType.vb: Furniture.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
- uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 362
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot, packed into an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override ActionInfo GetFreeActionSpotInfo(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The first free action spot as an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Function GetFreeActionSpotInfo(person As Person, context As ObjectCategory = Nothing) As ActionInfo
  overridden: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  overload: TinyLife.Objects.Furniture.GetFreeActionSpotInfo*
- uid: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  id: GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetHoverInfo(Tooltip)
  nameWithType: Furniture.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHoverInfo
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 368
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAllows adding a set of paragraphs and other ui elements to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">tooltip</code>, which is then displayed when this object is hovered over using the cursor in the world.\nBy default, this method raises <xref href=\"TinyLife.Objects.MapObject.OnGetHoverInfo\" data-throw-if-not-resolved=\"false\"></xref> for <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref>, and adds additional information for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void GetHoverInfo(Tooltip tooltip)
    parameters:
    - id: tooltip
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip that will be displayed.
    content.vb: Public Overrides Sub GetHoverInfo(tooltip As Tooltip)
  overridden: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  overload: TinyLife.Objects.Furniture.GetHoverInfo*
- uid: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  id: GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  nameWithType: Furniture.GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  fullName: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.Skills.SkillType, float)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEfficiencyModifier
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 397
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the efficiency modifier that this object multiplies the person&apos;s productivity with.\nThis method is automatically called in <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked for all <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> of the passed <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 1, meaning the person&apos;s efficiency will not be influenced.\n"
  example: []
  syntax:
    content: public override float GetEfficiencyModifier(Person person, ActionInfo info, bool isAuxiliary, SkillType skill, float levelModifier)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose efficiency should be influenced
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object)
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The skill that should influence the efficiency
    - id: levelModifier
      type: System.Single
      description: The level modifier for the <code data-dev-comment-type="paramref" class="paramref">skill</code>
    return:
      type: System.Single
      description: The efficiency modifier for this object
    content.vb: Public Overrides Function GetEfficiencyModifier(person As Person, info As ActionInfo, isAuxiliary As Boolean, skill As SkillType, levelModifier As Single) As Single
  overridden: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  overload: TinyLife.Objects.Furniture.GetEfficiencyModifier*
  nameWithType.vb: Furniture.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName.vb: TinyLife.Objects.Furniture.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
- uid: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  id: GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  nameWithType: Furniture.GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  fullName: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.NeedType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRestoreNeedModifier
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 405
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the modifier that this object multiplies the person&apos;s restored need with.\nThis method is automatically called in <xref href=\"TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked for all <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> of the passed <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 1, meaning the need restoration modifier will not be influenced.\n"
  example: []
  syntax:
    content: public override float GetRestoreNeedModifier(Person person, ActionInfo info, bool isAuxiliary, NeedType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose need restoration should be influenced.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object).
    - id: type
      type: TinyLife.NeedType
      description: The type of need that is being restored.
    return:
      type: System.Single
      description: The need restoration modifier for this object.
    content.vb: Public Overrides Function GetRestoreNeedModifier(person As Person, info As ActionInfo, isAuxiliary As Boolean, type As NeedType) As Single
  overridden: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  overload: TinyLife.Objects.Furniture.GetRestoreNeedModifier*
  nameWithType.vb: Furniture.GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  fullName.vb: TinyLife.Objects.Furniture.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.NeedType)
  name.vb: GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
- uid: TinyLife.Objects.Furniture.IsFreeSpot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.Furniture.IsFreeSpot(Microsoft.Xna.Framework.Point)
  id: IsFreeSpot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: IsFreeSpot(Point)
  nameWithType: Furniture.IsFreeSpot(Point)
  fullName: TinyLife.Objects.Furniture.IsFreeSpot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFreeSpot
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 413
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> should be allowed to occupy or pass the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">position</code>, which is contained in this object&apos;s intersection area (<xref href=\"TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>).\nBy default, <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects return whether they have the <xref href=\"TinyLife.Objects.ObjectCategory.NonColliding\" data-throw-if-not-resolved=\"false\"></xref> category, and all other objects return <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">true</a>.\nNote that, if this object moves, <xref href=\"TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> should be invoked for its previous and resulting <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool IsFreeSpot(Point position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position whose path cost modifier is being calculated.
    return:
      type: System.Boolean
      description: Whether a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> can occupy the given <code data-dev-comment-type="paramref" class="paramref">position</code>.
    content.vb: Public Overrides Function IsFreeSpot(position As Point) As Boolean
  overridden: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  overload: TinyLife.Objects.Furniture.IsFreeSpot*
- uid: TinyLife.Objects.Furniture.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.ResetToStatic(System.Boolean)
  id: ResetToStatic(System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: ResetToStatic(bool)
  nameWithType: Furniture.ResetToStatic(bool)
  fullName: TinyLife.Objects.Furniture.ResetToStatic(bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ResetToStatic
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 419
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nResets this map object to a static state when the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref> that is on is exported.\n"
  example: []
  syntax:
    content: public override bool ResetToStatic(bool thorough)
    parameters:
    - id: thorough
      type: System.Boolean
      description: Whether a more thorough reset is expected, which usually involves normalizing additional data and cleaning up player data entirely.
    return:
      type: System.Boolean
      description: Whether this object should stay on the map after the static reset. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> is returned, this object is removed.
    content.vb: Public Overrides Function ResetToStatic(thorough As Boolean) As Boolean
  overridden: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  overload: TinyLife.Objects.Furniture.ResetToStatic*
  nameWithType.vb: Furniture.ResetToStatic(Boolean)
  fullName.vb: TinyLife.Objects.Furniture.ResetToStatic(Boolean)
  name.vb: ResetToStatic(Boolean)
- uid: TinyLife.Objects.Furniture.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.Furniture.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  id: OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnPositionChanged(Vector2)
  nameWithType: Furniture.OnPositionChanged(Vector2)
  fullName: TinyLife.Objects.Furniture.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnPositionChanged
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 425
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA method that is automatically called when this object&apos;s <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> changes.\nBy default, this method is overriden in <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> to call <xref href=\"TinyLife.Objects.Furniture.MarkDirtyForPathfinding\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method is also called if this object is not in the world (<xref href=\"TinyLife.Objects.MapObject.IsInWorld\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: protected override void OnPositionChanged(Vector2 lastPosition)
    parameters:
    - id: lastPosition
      type: Microsoft.Xna.Framework.Vector2
      description: This object&apos;s previous position.
    content.vb: Protected Overrides Sub OnPositionChanged(lastPosition As Vector2)
  overridden: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  overload: TinyLife.Objects.Furniture.OnPositionChanged*
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},MLEM.Misc.Direction2,System.Int32[],System.Single,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: Draw(GameTime, object, Vector2, Vector2, Color?, Direction2, int[], float, bool, ParentInfo, float, bool, List<Item>)
  nameWithType: Furniture.Draw(GameTime, object, Vector2, Vector2, Color?, Direction2, int[], float, bool, ParentInfo, float, bool, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, MLEM.Misc.Direction2, int[], float, bool, TinyLife.Objects.ParentInfo, float, bool, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 447
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this furniture in the world with the given settings.\nThis is a more generalized version of <xref href=\"TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime%2cSystem.Object%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, object batch, Vector2 pos, Vector2 drawPos, Color? overrideColor, Direction2 rotation, int[] colors, float drawScale, bool pivot, ParentInfo parent, float depthOffset, bool held, List<StaticSpriteBatch.Item> items)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: batch
      type: System.Object
      description: The sprite batch to draw with, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in world space, that the furniture is at
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw the furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: An optional color to override the default colors of the furniture
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation of the furniture
    - id: colors
      type: System.Int32[]
      description: The colors to draw the furniture with
    - id: drawScale
      type: System.Single
      description: The scale to draw the furniture with
    - id: pivot
      type: System.Boolean
      description: Whether or not to move the furniture by its texture&apos;s pivot point
    - id: parent
      type: TinyLife.Objects.ParentInfo
      description: The object that this furniture is latched on to, or null if there is none
    - id: depthOffset
      type: System.Single
      description: A value that is added onto the calculated depth of the object
    - id: held
      type: System.Boolean
      description: Whether or not this item is currently being held by a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref>
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As Object, pos As Vector2, drawPos As Vector2, overrideColor As Color?, rotation As Direction2, colors As Integer(), drawScale As Single, pivot As Boolean, parent As ParentInfo, depthOffset As Single, held As Boolean, items As List(Of StaticSpriteBatch.Item))
  overload: TinyLife.Objects.Furniture.Draw*
  nameWithType.vb: Furniture.Draw(GameTime, Object, Vector2, Vector2, Color?, Direction2, Integer(), Single, Boolean, ParentInfo, Single, Boolean, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, MLEM.Misc.Direction2, Integer(), Single, Boolean, TinyLife.Objects.ParentInfo, Single, Boolean, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Vector2, Color?, Direction2, Integer(), Single, Boolean, ParentInfo, Single, Boolean, List(Of Item))
- uid: TinyLife.Objects.Furniture.GetPrice
  commentId: M:TinyLife.Objects.Furniture.GetPrice
  id: GetPrice
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Furniture.GetPrice()
  fullName: TinyLife.Objects.Furniture.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 455
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Overridable Function GetPrice() As Single
  overload: TinyLife.Objects.Furniture.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
- uid: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  id: GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDescription(List<string>, bool)
  nameWithType: Furniture.GetDescription(List<string>, bool)
  fullName: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List<string>, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDescription
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 468
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method allows adding a set of strings to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">description</code> list that get displayed when the object is hovered over in the build mode or household storage UIs.\nBy default, this method adds various strings related to the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Furniture.Quality\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Furniture.Creator\" data-throw-if-not-resolved=\"false\"></xref>, and also invokes the <xref href=\"TinyLife.Objects.Furniture.OnGetDescription\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: public virtual void GetDescription(List<string> description, bool forHoverInfo)
    parameters:
    - id: description
      type: System.Collections.Generic.List{System.String}
      description: The description to add to.
    - id: forHoverInfo
      type: System.Boolean
      description: Whether this method is being called by <xref href="TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)" data-throw-if-not-resolved="false"></xref> (or by build mode).
    content.vb: Public Overridable Sub GetDescription(description As List(Of String), forHoverInfo As Boolean)
  overload: TinyLife.Objects.Furniture.GetDescription*
  nameWithType.vb: Furniture.GetDescription(List(Of String), Boolean)
  fullName.vb: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List(Of String), Boolean)
  name.vb: GetDescription(List(Of String), Boolean)
- uid: TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  commentId: M:TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  id: GetDecorativeRating(TinyLife.World.Room)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDecorativeRating(Room)
  nameWithType: Furniture.GetDecorativeRating(Room)
  fullName: TinyLife.Objects.Furniture.GetDecorativeRating(TinyLife.World.Room)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDecorativeRating
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 501
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the decorative rating of this object in the given room.\nBy default, the underlying <xref href=\"TinyLife.Objects.Furniture.Type\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating\" data-throw-if-not-resolved=\"false\"></xref>, influeced by whether this object is <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>, is returned.\n"
  example: []
  syntax:
    content: public virtual int GetDecorativeRating(Room room)
    parameters:
    - id: room
      type: TinyLife.World.Room
      description: The room that the object is in, or null if it is not in a room at all
    return:
      type: System.Int32
      description: The decorative rating of this object
    content.vb: Public Overridable Function GetDecorativeRating(room As Room) As Integer
  overload: TinyLife.Objects.Furniture.GetDecorativeRating*
- uid: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  commentId: M:TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  id: GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetDirty(Person, TimeSpan)
  nameWithType: Furniture.GetDirty(Person, TimeSpan)
  fullName: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person, System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDirty
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 512
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this object to get &quot;more dirty&quot; by increasing a timer and randomly, based on the amount of time that the timer has, turns <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> to true.\nIf this object cannot be dirty (<xref href=\"TinyLife.Objects.Furniture.CanBeDirty\" data-throw-if-not-resolved=\"false\"></xref>), or it is already <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>, this method has no effect.\nBy default, this method is called in <xref href=\"TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> every update frame if this object isn&apos;t already <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void GetDirty(Person person, TimeSpan passedInGame)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who is responsible for making this object more dirty.
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that should be simulated in game.
    content.vb: Public Overridable Sub GetDirty(person As Person, passedInGame As TimeSpan)
  overload: TinyLife.Objects.Furniture.GetDirty*
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  id: SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetCreator(Person, bool)
  nameWithType: Furniture.SetCreator(Person, bool)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCreator
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 538
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the <xref href=\"TinyLife.Objects.Furniture.CreatorId\" data-throw-if-not-resolved=\"false\"></xref> (and thus, the <xref href=\"TinyLife.Objects.Furniture.Creator\" data-throw-if-not-resolved=\"false\"></xref>) of this furniture item, optionally triggering goals that react to the <xref href=\"TinyLife.Goals.GoalTrigger.FurnitureCreated\" data-throw-if-not-resolved=\"false\"></xref> goal trigger\n"
  example: []
  syntax:
    content: public virtual void SetCreator(Person person, bool triggerGoals = true)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to set as the creator
    - id: triggerGoals
      type: System.Boolean
      description: Whether <xref href="TinyLife.Goals.GoalTrigger.FurnitureCreated" data-throw-if-not-resolved="false"></xref> goal triggers should be triggered
    content.vb: Public Overridable Sub SetCreator(person As Person, triggerGoals As Boolean = True)
  overload: TinyLife.Objects.Furniture.SetCreator*
  nameWithType.vb: Furniture.SetCreator(Person, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, Boolean)
  name.vb: SetCreator(Person, Boolean)
- uid: TinyLife.Objects.Furniture.OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer,System.Boolean)
  id: OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnPlacedInBuildMode(FurniturePlacer, bool)
  nameWithType: Furniture.OnPlacedInBuildMode(FurniturePlacer, bool)
  fullName: TinyLife.Objects.Furniture.OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnPlacedInBuildMode
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 552
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this furniture item is placed using the <xref href=\"TinyLife.Tools.FurniturePlacer\" data-throw-if-not-resolved=\"false\"></xref>. It can be used to award emotion modifiers or other information based on whether this item was <code data-dev-comment-type=\"paramref\" class=\"paramref\">freshlyBought</code>.\nBy default, this method awards emotion modifiers based on the <xref href=\"TinyLife.Objects.MapObject.CurrentLot\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>&apos;s members&apos; <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void OnPlacedInBuildMode(FurniturePlacer placer, bool freshlyBought)
    parameters:
    - id: placer
      type: TinyLife.Tools.FurniturePlacer
      description: The furniture placer used to place this object.
    - id: freshlyBought
      type: System.Boolean
      description: Whether this item was freshly bought (or placed from storage).
    content.vb: Public Overridable Sub OnPlacedInBuildMode(placer As FurniturePlacer, freshlyBought As Boolean)
  overload: TinyLife.Objects.Furniture.OnPlacedInBuildMode*
  nameWithType.vb: Furniture.OnPlacedInBuildMode(FurniturePlacer, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.OnPlacedInBuildMode(TinyLife.Tools.FurniturePlacer, Boolean)
  name.vb: OnPlacedInBuildMode(FurniturePlacer, Boolean)
- uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  id: OnNeighborChanged(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: OnNeighborChanged(Furniture)
  nameWithType: Furniture.OnNeighborChanged(Furniture)
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnNeighborChanged
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 565
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method gets called when any neighboring furniture changes in <xref href=\"TinyLife.Objects.Furniture.NotifyNeighbors\" data-throw-if-not-resolved=\"false\"></xref>. The neighboring furniture is passed.\nBy default, this method does nothing, so calling base is not necessary.\n"
  example: []
  syntax:
    content: protected virtual void OnNeighborChanged(Furniture neighbor)
    parameters:
    - id: neighbor
      type: TinyLife.Objects.Furniture
      description: The neighbor furniture that changed
    content.vb: Protected Overridable Sub OnNeighborChanged(neighbor As Furniture)
  overload: TinyLife.Objects.Furniture.OnNeighborChanged*
- uid: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  commentId: M:TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  id: DrawUi(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,MLEM.Ui.Elements.Element,System.Single,System.Int32[])
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: DrawUi(GameTime, SpriteBatch, Element, float, int[])
  nameWithType: Furniture.DrawUi(GameTime, SpriteBatch, Element, float, int[])
  fullName: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Ui.Elements.Element, float, int[])
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 576
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this furniture in a ui context, rather than a world context.\nScale is determined based on the element that is passed.\n"
  example: []
  syntax:
    content: public void DrawUi(GameTime time, SpriteBatch batch, Element element, float drawScale, int[] colors)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: element
      type: MLEM.Ui.Elements.Element
      description: The element to calculate scaling based on
    - id: drawScale
      type: System.Single
      description: The scale to draw the furniture with
    - id: colors
      type: System.Int32[]
      description: The colors to draw the furniture with
    content.vb: Public Sub DrawUi(time As GameTime, batch As SpriteBatch, element As Element, drawScale As Single, colors As Integer())
  overload: TinyLife.Objects.Furniture.DrawUi*
  nameWithType.vb: Furniture.DrawUi(GameTime, SpriteBatch, Element, Single, Integer())
  fullName.vb: TinyLife.Objects.Furniture.DrawUi(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, MLEM.Ui.Elements.Element, Single, Integer())
  name.vb: DrawUi(GameTime, SpriteBatch, Element, Single, Integer())
- uid: TinyLife.Objects.Furniture.GetOccupants(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.GetOccupants(TinyLife.Objects.ObjectCategory,System.Boolean)
  id: GetOccupants(TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetOccupants(ObjectCategory, bool)
  nameWithType: Furniture.GetOccupants(ObjectCategory, bool)
  fullName: TinyLife.Objects.Furniture.GetOccupants(TinyLife.Objects.ObjectCategory, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetOccupants
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 590
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently occupying any <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> on this furniture item in some way.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetOccupants(ObjectCategory context = null, bool visualOnly = false)
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context for the <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> to support for it to be included in the search.
    - id: visualOnly
      type: System.Boolean
      description: Whether only occupants that occupy a spot visually, using <xref href="TinyLife.Objects.Person.VisuallyOccupiedSpot" data-throw-if-not-resolved="false"></xref>, should be returned.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of people that are currently occupying this furniture item in some way.
    content.vb: Public Function GetOccupants(context As ObjectCategory = Nothing, visualOnly As Boolean = False) As IEnumerable(Of Person)
  overload: TinyLife.Objects.Furniture.GetOccupants*
  nameWithType.vb: Furniture.GetOccupants(ObjectCategory, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.GetOccupants(TinyLife.Objects.ObjectCategory, Boolean)
  name.vb: GetOccupants(ObjectCategory, Boolean)
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpots(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpots(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpots
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 603
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a list of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances that are part of this furniture, which are considered free.\nFree, in this instance, is any spot that has the given category and is not currently occupied by another person.\n"
  example: []
  syntax:
    content: public IEnumerable<(ActionSpot Spot, Direction2 Dir)> GetFreeActionSpots(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
      description: A set of action spots and the directions which they&apos;re free in
    content.vb: Public Function GetFreeActionSpots(person As Person, context As ObjectCategory = Nothing) As IEnumerable(Of (Spot As ActionSpot, Dir As Direction2))
  overload: TinyLife.Objects.Furniture.GetFreeActionSpots*
- uid: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeActionSpot(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpot(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpot
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 624
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot from <xref href=\"TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (ActionSpot Spot, Direction2 Dir) GetFreeActionSpot(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
      description: A free action spot and the direction it&apos;s free in, or an empty tuple if there is no free action spot
    content.vb: Public Function GetFreeActionSpot(person As Person, context As ObjectCategory = Nothing) As (Spot As ActionSpot, Dir As Direction2)
  overload: TinyLife.Objects.Furniture.GetFreeActionSpot*
- uid: TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  id: GetActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetActionSpotInfo(Person, ActionSpot, Direction2)
  nameWithType: Furniture.GetActionSpotInfo(Person, ActionSpot, Direction2)
  fullName: TinyLife.Objects.Furniture.GetActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetActionSpotInfo
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 637
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> that corresponds to the given <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> and rotation\n"
  example: []
  syntax:
    content: public ActionInfo GetActionSpotInfo(Person person, ActionSpot spot, Direction2 direction = Direction2.None)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to return an info for
    - id: direction
      type: MLEM.Misc.Direction2
      description: The direction to offset the <xref href="TinyLife.Actions.ActionInfo.ActionLocation" data-throw-if-not-resolved="false"></xref> by. Defaults to <xref href="MLEM.Misc.Direction2.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.ActionInfo
      description: A new action info with the given settings
    content.vb: Public Function GetActionSpotInfo(person As Person, spot As ActionSpot, direction As Direction2 = Direction2.None) As ActionInfo
  overload: TinyLife.Objects.Furniture.GetActionSpotInfo*
- uid: TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: GetFreeObjectSpot(TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetFreeObjectSpot(FurnitureType, Vector2?)
  nameWithType: Furniture.GetFreeObjectSpot(FurnitureType, Vector2?)
  fullName: TinyLife.Objects.Furniture.GetFreeObjectSpot(TinyLife.Objects.FurnitureType, Microsoft.Xna.Framework.Vector2?)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeObjectSpot
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 649
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on this furniture.\nFree, in this case, is any object spot that isn&apos;t already occupied by a different furniture.\n"
  example: []
  syntax:
    content: public ObjectSpot GetFreeObjectSpot(FurnitureType type, Vector2? position = null)
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The furniture type to find a free object spot for
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot should be closest too. If null, no position will be preferred. Defaults to null.
    return:
      type: TinyLife.Objects.ObjectSpot
      description: A free object spot, or null if there is none
    content.vb: Public Function GetFreeObjectSpot(type As FurnitureType, position As Vector2? = Nothing) As ObjectSpot
  overload: TinyLife.Objects.Furniture.GetFreeObjectSpot*
- uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  commentId: M:TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  id: SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetParent(Furniture, ObjectSpot)
  nameWithType: Furniture.SetParent(Furniture, ObjectSpot)
  fullName: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetParent
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 663
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the parent of this furniture, changing its <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> and settings its <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> value.\nNote that this does not add the object to the map (<xref href=\"TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>).\nWhen modifying furniture in the world, it is preferred to use <xref href=\"TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot%2cTinyLife.Objects.Furniture%2cMLEM.Misc.Direction2)\" data-throw-if-not-resolved=\"false\"></xref> on the parent furniture instead.\n"
  example: []
  syntax:
    content: public void SetParent(Furniture parent, ObjectSpot spot)
    parameters:
    - id: parent
      type: TinyLife.Objects.Furniture
      description: The parent furniture to slot into
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The object spot to slot into
    content.vb: Public Sub SetParent(parent As Furniture, spot As ObjectSpot)
  overload: TinyLife.Objects.Furniture.SetParent*
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  id: UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UnlinkParentsAndChildren
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 677
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nUnlinks this object from its parents and its children by setting its <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> to their default values and doing the same for all of its children (<xref href=\"TinyLife.Objects.Furniture.GetChildren%60%601\" data-throw-if-not-resolved=\"false\"></xref>) as well as any <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that is holding this object.\n"
  example: []
  syntax:
    content: public void UnlinkParentsAndChildren()
    content.vb: Public Sub UnlinkParentsAndChildren()
  overload: TinyLife.Objects.Furniture.UnlinkParentsAndChildren*
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink
  commentId: M:TinyLife.Objects.Furniture.RemoveAndUnlink
  id: RemoveAndUnlink
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: RemoveAndUnlink()
  nameWithType: Furniture.RemoveAndUnlink()
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveAndUnlink
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 688
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA compound helper method that calls <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref>.\nFor furniture that is being removed from the world entirely, this method is usually preferred over <xref href=\"TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void RemoveAndUnlink()
    content.vb: Public Sub RemoveAndUnlink()
  overload: TinyLife.Objects.Furniture.RemoveAndUnlink*
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  id: GetChildren``1
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetChildren
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 698
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a list of all of the children of this furniture.\nChildren are all furnitures in the world that have their <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> set to this furniture instance.\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetChildren<T>() where T : MapObject'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: A list of this furniture&apos;s children
    content.vb: Public Function GetChildren(Of T As MapObject)() As IEnumerable(Of T)
  overload: TinyLife.Objects.Furniture.GetChildren*
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
- uid: TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: AddChild``1(TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid},System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AddChild<T>(FurnitureType, Direction2, int[], Guid?, Vector2?)
  nameWithType: Furniture.AddChild<T>(FurnitureType, Direction2, int[], Guid?, Vector2?)
  fullName: TinyLife.Objects.Furniture.AddChild<T>(TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, int[], System.Guid?, Microsoft.Xna.Framework.Vector2?)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddChild
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 712
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds a child to this furniture, setting its parent (<xref href=\"TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectSpot)\" data-throw-if-not-resolved=\"false\"></xref>) to this furniture.\n"
  example: []
  syntax:
    content: 'public T AddChild<T>(FurnitureType type, Direction2 rotation, int[] colors = null, Guid? id = null, Vector2? position = null) where T : Furniture'
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type of furniture to construct as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture. If the child furniture does not support the given rotation, <xref href="TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)" data-throw-if-not-resolved="false"></xref> is used automatically.
    - id: colors
      type: System.Int32[]
      description: The colors that the child should have
    - id: id
      type: System.Nullable{System.Guid}
      description: The id that the child should have, random by default
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot to add this child to should be closest too. If null, no position will be preferred. Defaults to null.
    typeParameters:
    - id: T
      description: The type of furniture that the child is
    return:
      type: '{T}'
      description: The child that was added, or null if there is no space for it.
    content.vb: Public Function AddChild(Of T As Furniture)(type As FurnitureType, rotation As Direction2, colors As Integer() = Nothing, id As Guid? = Nothing, position As Vector2? = Nothing) As T
  overload: TinyLife.Objects.Furniture.AddChild*
  nameWithType.vb: Furniture.AddChild(Of T)(FurnitureType, Direction2, Integer(), Guid?, Vector2?)
  fullName.vb: TinyLife.Objects.Furniture.AddChild(Of T)(TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, Integer(), System.Guid?, Microsoft.Xna.Framework.Vector2?)
  name.vb: AddChild(Of T)(FurnitureType, Direction2, Integer(), Guid?, Vector2?)
- uid: TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  id: AddChild(TinyLife.Objects.Furniture,MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: AddChild(Furniture, Direction2, Vector2?)
  nameWithType: Furniture.AddChild(Furniture, Direction2, Vector2?)
  fullName: TinyLife.Objects.Furniture.AddChild(TinyLife.Objects.Furniture, MLEM.Misc.Direction2, Microsoft.Xna.Framework.Vector2?)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddChild
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 729
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds a child to this furniture, setting its parent (<xref href=\"TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectSpot)\" data-throw-if-not-resolved=\"false\"></xref>) to this furniture and adding it to this furniture&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nThe object spot selected is the first available object spot.\nNote that the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> has to be on the same map as this furniture item&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> when this method is called.\n"
  example: []
  syntax:
    content: public bool AddChild(Furniture item, Direction2 rotation, Vector2? position = null)
    parameters:
    - id: item
      type: TinyLife.Objects.Furniture
      description: The furniture to add as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture. If the child furniture does not support the given rotation, <xref href="TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)" data-throw-if-not-resolved="false"></xref> is used automatically.
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the object spot to add this child to should be closest too. If null, no position will be preferred. Defaults to null.
    return:
      type: System.Boolean
      description: If there was a free object spot to add the furniture to
    content.vb: Public Function AddChild(item As Furniture, rotation As Direction2, position As Vector2? = Nothing) As Boolean
  overload: TinyLife.Objects.Furniture.AddChild*
- uid: TinyLife.Objects.Furniture.SetChild``1(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  commentId: M:TinyLife.Objects.Furniture.SetChild``1(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  id: SetChild``1(TinyLife.Objects.ObjectSpot,TinyLife.Objects.FurnitureType,MLEM.Misc.Direction2,System.Int32[],System.Nullable{System.Guid})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetChild<T>(ObjectSpot, FurnitureType, Direction2, int[], Guid?)
  nameWithType: Furniture.SetChild<T>(ObjectSpot, FurnitureType, Direction2, int[], Guid?)
  fullName: TinyLife.Objects.Furniture.SetChild<T>(TinyLife.Objects.ObjectSpot, TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, int[], System.Guid?)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetChild
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 745
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the child element in the given object spot to the given furniture and adds it to this furniture&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public T SetChild<T>(ObjectSpot spot, FurnitureType type, Direction2 rotation, int[] colors = null, Guid? id = null) where T : Furniture'
    parameters:
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The spot to add the child to
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type of furniture to construct as the child
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture. If the child furniture does not support the given rotation, <xref href="TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)" data-throw-if-not-resolved="false"></xref> is used automatically.
    - id: colors
      type: System.Int32[]
      description: The colors that the child should have
    - id: id
      type: System.Nullable{System.Guid}
      description: The id that the child should have, random by default
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function SetChild(Of T As Furniture)(spot As ObjectSpot, type As FurnitureType, rotation As Direction2, colors As Integer() = Nothing, id As Guid? = Nothing) As T
  overload: TinyLife.Objects.Furniture.SetChild*
  nameWithType.vb: Furniture.SetChild(Of T)(ObjectSpot, FurnitureType, Direction2, Integer(), Guid?)
  fullName.vb: TinyLife.Objects.Furniture.SetChild(Of T)(TinyLife.Objects.ObjectSpot, TinyLife.Objects.FurnitureType, MLEM.Misc.Direction2, Integer(), System.Guid?)
  name.vb: SetChild(Of T)(ObjectSpot, FurnitureType, Direction2, Integer(), Guid?)
- uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  id: SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetChild(ObjectSpot, Furniture, Direction2)
  nameWithType: Furniture.SetChild(ObjectSpot, Furniture, Direction2)
  fullName: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.Furniture, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetChild
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 759
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the child element in the given object spot to the given furniture.\nNote that the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> has to be on the same map as this furniture item&apos;s <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> when this method is called.\n"
  example: []
  syntax:
    content: public void SetChild(ObjectSpot spot, Furniture item, Direction2 rotation)
    parameters:
    - id: spot
      type: TinyLife.Objects.ObjectSpot
      description: The spot to add the child to
    - id: item
      type: TinyLife.Objects.Furniture
      description: The furniture to add to the spot
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The desired rotation of the child furniture. If the child furniture does not support the given rotation, <xref href="TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)" data-throw-if-not-resolved="false"></xref> is used automatically.
    content.vb: Public Sub SetChild(spot As ObjectSpot, item As Furniture, rotation As Direction2)
  overload: TinyLife.Objects.Furniture.SetChild*
- uid: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  id: RemoveChild(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: RemoveChild(Furniture)
  nameWithType: Furniture.RemoveChild(Furniture)
  fullName: TinyLife.Objects.Furniture.RemoveChild(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveChild
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 770
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRemoves the given child from the world and sets its <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.ParentObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> to their default values, unlinking it from this object\n"
  example: []
  syntax:
    content: public bool RemoveChild(Furniture child)
    parameters:
    - id: child
      type: TinyLife.Objects.Furniture
      description: The child to remove
    return:
      type: System.Boolean
      description: Whether the object was actually a child of this furniture (true) or not (false)
    content.vb: Public Function RemoveChild(child As Furniture) As Boolean
  overload: TinyLife.Objects.Furniture.RemoveChild*
- uid: TinyLife.Objects.Furniture.NotifyNeighbors
  commentId: M:TinyLife.Objects.Furniture.NotifyNeighbors
  id: NotifyNeighbors
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: NotifyNeighbors()
  nameWithType: Furniture.NotifyNeighbors()
  fullName: TinyLife.Objects.Furniture.NotifyNeighbors()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotifyNeighbors
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 783
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nNotifies all of the neighboring <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects of a change by calling their <xref href=\"TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref> methods.\nThis is used by things like fences, which change their orientation if their neighbors are added or removed.\n"
  example: []
  syntax:
    content: public void NotifyNeighbors()
    content.vb: Public Sub NotifyNeighbors()
  overload: TinyLife.Objects.Furniture.NotifyNeighbors*
- uid: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  commentId: M:TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  id: SetNewId(System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  parent: TinyLife.Objects.Furniture
  langs:
  - csharp
  - vb
  name: SetNewId(IEnumerable<Furniture>)
  nameWithType: Furniture.SetNewId(IEnumerable<Furniture>)
  fullName: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Furniture.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetNewId
    path: ../TinyLife/Objects/Furniture.cs
    startLine: 796
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAssigns a new, randomly generated <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> to this furniture item&apos;s <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> and additionally updates the <xref href=\"TinyLife.Objects.Furniture.ParentFurniture\" data-throw-if-not-resolved=\"false\"></xref> relation of any objects passed that might be children of this object.\nWhen assigning a new id, it usually makes sense to pass all of the objects in this furniture item&apos;s vicinity, or all of the objects that might otherwise be attached to it.\nNote that objects which are passed as <code data-dev-comment-type=\"paramref\" class=\"paramref\">possibleChildren</code> that aren&apos;t children of this object are ignored.\n"
  example: []
  syntax:
    content: public void SetNewId(IEnumerable<Furniture> possibleChildren = null)
    parameters:
    - id: possibleChildren
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of furniture items that might (but do not have to be) children of this furniture
    content.vb: Public Sub SetNewId(possibleChildren As IEnumerable(Of Furniture) = Nothing)
  overload: TinyLife.Objects.Furniture.SetNewId*
  nameWithType.vb: Furniture.SetNewId(IEnumerable(Of Furniture))
  fullName.vb: TinyLife.Objects.Furniture.SetNewId(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture))
  name.vb: SetNewId(IEnumerable(Of Furniture))
references:
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  commentId: M:TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  name: Register(TypeSettings)
  nameWithType: FurnitureType.Register(FurnitureType.TypeSettings)
  fullName: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
    name: Register
  - name: (
  - uid: TinyLife.Objects.FurnitureType.TypeSettings
    name: TypeSettings
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.Register(TinyLife.Objects.FurnitureType.TypeSettings)
    name: Register
  - name: (
  - uid: TinyLife.Objects.FurnitureType.TypeSettings
    name: TypeSettings
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: TinyLife.Objects.MapObject.PersonRotationOrder
  commentId: F:TinyLife.Objects.MapObject.PersonRotationOrder
  parent: TinyLife.Objects.MapObject
  name: PersonRotationOrder
  nameWithType: MapObject.PersonRotationOrder
  fullName: TinyLife.Objects.MapObject.PersonRotationOrder
- uid: TinyLife.Objects.MapObject.OnCreated
  commentId: E:TinyLife.Objects.MapObject.OnCreated
  parent: TinyLife.Objects.MapObject
  name: OnCreated
  nameWithType: MapObject.OnCreated
  fullName: TinyLife.Objects.MapObject.OnCreated
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  parent: TinyLife.Objects.MapObject
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
- uid: TinyLife.Objects.MapObject.OnDraw
  commentId: E:TinyLife.Objects.MapObject.OnDraw
  parent: TinyLife.Objects.MapObject
  name: OnDraw
  nameWithType: MapObject.OnDraw
  fullName: TinyLife.Objects.MapObject.OnDraw
- uid: TinyLife.Objects.MapObject.OnUpdate
  commentId: E:TinyLife.Objects.MapObject.OnUpdate
  parent: TinyLife.Objects.MapObject
  name: OnUpdate
  nameWithType: MapObject.OnUpdate
  fullName: TinyLife.Objects.MapObject.OnUpdate
- uid: TinyLife.Objects.MapObject.OnGetHoverInfo
  commentId: E:TinyLife.Objects.MapObject.OnGetHoverInfo
  parent: TinyLife.Objects.MapObject
  name: OnGetHoverInfo
  nameWithType: MapObject.OnGetHoverInfo
  fullName: TinyLife.Objects.MapObject.OnGetHoverInfo
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  parent: TinyLife.Objects.MapObject
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.Objects.MapObject.CurrentRoom
  commentId: P:TinyLife.Objects.MapObject.CurrentRoom
  parent: TinyLife.Objects.MapObject
  name: CurrentRoom
  nameWithType: MapObject.CurrentRoom
  fullName: TinyLife.Objects.MapObject.CurrentRoom
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  parent: TinyLife.Objects.MapObject
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: TinyLife.Objects.MapObject.HoldingPerson
  commentId: P:TinyLife.Objects.MapObject.HoldingPerson
  parent: TinyLife.Objects.MapObject
  name: HoldingPerson
  nameWithType: MapObject.HoldingPerson
  fullName: TinyLife.Objects.MapObject.HoldingPerson
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: MapObject.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  parent: TinyLife.Objects.MapObject
  name: SetMapAndValidate(Map)
  nameWithType: MapObject.SetMapAndValidate(Map)
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: HasCategory(Person, ObjectCategory)
  nameWithType: MapObject.HasCategory(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetPathCostModifier(Point)
  nameWithType: MapObject.GetPathCostModifier(Point)
  fullName: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
    name: GetPathCostModifier
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
    name: GetPathCostModifier
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: DoDraw(GameTime, object, Color?, bool, List<Item>)
  nameWithType: MapObject.DoDraw(GameTime, object, Color?, bool, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Color?, bool, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.DoDraw(GameTime, Object, Color?, Boolean, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Color?, Boolean, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: DoDraw(GameTime, Object, Color?, Boolean, List(Of Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: DoUpdate(GameTime, TimeSpan, float)
  nameWithType: MapObject.DoUpdate(GameTime, TimeSpan, float)
  fullName: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: MapObject.DoUpdate(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: DoUpdate(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: DoUpdate
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: DoUpdate
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  nameWithType: MapObject.DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<StaticSpriteBatch.Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, float, Microsoft.Xna.Framework.Point, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, bool, TinyLife.Objects.ParentInfo, float, Microsoft.Xna.Framework.Graphics.SpriteEffects, bool, bool, bool)
  nameWithType.vb: MapObject.DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, Single, Microsoft.Xna.Framework.Point, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, TinyLife.Objects.ParentInfo, Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, Boolean, Boolean, Boolean)
  name.vb: DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetModCategory(string)
  nameWithType: MapObject.GetModCategory(string)
  fullName: TinyLife.Objects.MapObject.GetModCategory(string)
  nameWithType.vb: MapObject.GetModCategory(String)
  fullName.vb: TinyLife.Objects.MapObject.GetModCategory(String)
  name.vb: GetModCategory(String)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Furniture>(Furniture)
  nameWithType: Extensions.JsonCopy<Furniture>(Furniture)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Furniture>(TinyLife.Objects.Furniture)
  nameWithType.vb: Extensions.JsonCopy(Of Furniture)(Furniture)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Furniture)(TinyLife.Objects.Furniture)
  name.vb: JsonCopy(Of Furniture)(Furniture)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.Furniture)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.Furniture)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Objects.Furniture.Random
  commentId: F:TinyLife.Objects.Furniture.Random
  parent: TinyLife.Objects.Furniture
  name: Random
  nameWithType: Furniture.Random
  fullName: TinyLife.Objects.Furniture.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.random
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: GetDescription(List<string>, bool)
  nameWithType: Furniture.GetDescription(List<string>, bool)
  fullName: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List<string>, bool)
  nameWithType.vb: Furniture.GetDescription(List(Of String), Boolean)
  fullName.vb: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List(Of String), Boolean)
  name.vb: GetDescription(List(Of String), Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
    name: GetDescription
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetDescription(System.Collections.Generic.List{System.String},System.Boolean)
    name: GetDescription
  - name: (
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Action{System.Collections.Generic.List{System.String},System.Boolean}
  commentId: T:System.Action{System.Collections.Generic.List{System.String},System.Boolean}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<List<string>, bool>
  nameWithType: Action<List<string>, bool>
  fullName: System.Action<System.Collections.Generic.List<string>, bool>
  nameWithType.vb: Action(Of List(Of String), Boolean)
  fullName.vb: System.Action(Of System.Collections.Generic.List(Of String), Boolean)
  name.vb: Action(Of List(Of String), Boolean)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: SetCreator(Person, bool)
  nameWithType: Furniture.SetCreator(Person, bool)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, bool)
  nameWithType.vb: Furniture.SetCreator(Person, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, Boolean)
  name.vb: SetCreator(Person, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
  commentId: T:System.Action{TinyLife.Objects.Person,System.Boolean,TinyLife.Mods.EventPhase}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<Person, bool, EventPhase>
  nameWithType: Action<Person, bool, EventPhase>
  fullName: System.Action<TinyLife.Objects.Person, bool, TinyLife.Mods.EventPhase>
  nameWithType.vb: Action(Of Person, Boolean, EventPhase)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, Boolean, TinyLife.Mods.EventPhase)
  name.vb: Action(Of Person, Boolean, EventPhase)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  commentId: M:TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: GetDirty(Person, TimeSpan)
  nameWithType: Furniture.GetDirty(Person, TimeSpan)
  fullName: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person, System.TimeSpan)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
    name: GetDirty
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetDirty(TinyLife.Objects.Person,System.TimeSpan)
    name: GetDirty
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
- uid: System.Action{TinyLife.Objects.Person,System.TimeSpan}
  commentId: T:System.Action{TinyLife.Objects.Person,System.TimeSpan}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<Person, TimeSpan>
  nameWithType: Action<Person, TimeSpan>
  fullName: System.Action<TinyLife.Objects.Person, System.TimeSpan>
  nameWithType.vb: Action(Of Person, TimeSpan)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, System.TimeSpan)
  name.vb: Action(Of Person, TimeSpan)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  parent: TinyLife.Objects.Furniture
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)
  name: GetDisplayName(Furniture)
  nameWithType: FurnitureType.GetDisplayName(Furniture)
  fullName: TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)
    name: GetDisplayName
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.GetDisplayName(TinyLife.Objects.Furniture)
    name: GetDisplayName
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: TinyLife.Objects.Furniture.DisplayName*
  commentId: Overload:TinyLife.Objects.Furniture.DisplayName
  name: DisplayName
  nameWithType: Furniture.DisplayName
  fullName: TinyLife.Objects.Furniture.DisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Objects.MapObject.ParentInfo
  commentId: P:TinyLife.Objects.MapObject.ParentInfo
  parent: TinyLife.Objects.MapObject
  name: ParentInfo
  nameWithType: MapObject.ParentInfo
  fullName: TinyLife.Objects.MapObject.ParentInfo
- uid: TinyLife.Objects.Furniture.ParentInfo*
  commentId: Overload:TinyLife.Objects.Furniture.ParentInfo
  name: ParentInfo
  nameWithType: Furniture.ParentInfo
  fullName: TinyLife.Objects.Furniture.ParentInfo
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  parent: TinyLife.Objects
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
- uid: TinyLife.Objects.MapObject.Visibility
  commentId: P:TinyLife.Objects.MapObject.Visibility
  parent: TinyLife.Objects.MapObject
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
- uid: TinyLife.Objects.Furniture.Visibility*
  commentId: Overload:TinyLife.Objects.Furniture.Visibility
  name: Visibility
  nameWithType: Furniture.Visibility
  fullName: TinyLife.Objects.Furniture.Visibility
- uid: TinyLife.Objects.Visibility
  commentId: T:TinyLife.Objects.Visibility
  parent: TinyLife.Objects
  name: Visibility
  nameWithType: Visibility
  fullName: TinyLife.Objects.Visibility
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Furniture.ParentObjectSpot
  commentId: P:TinyLife.Objects.Furniture.ParentObjectSpot
  parent: TinyLife.Objects.Furniture
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
- uid: TinyLife.Objects.Furniture.ParentFurniture*
  commentId: Overload:TinyLife.Objects.Furniture.ParentFurniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Objects.Furniture.ParentFurniture
  commentId: P:TinyLife.Objects.Furniture.ParentFurniture
  parent: TinyLife.Objects.Furniture
  name: ParentFurniture
  nameWithType: Furniture.ParentFurniture
  fullName: TinyLife.Objects.Furniture.ParentFurniture
- uid: TinyLife.Objects.Furniture.ParentObjectSpot*
  commentId: Overload:TinyLife.Objects.Furniture.ParentObjectSpot
  name: ParentObjectSpot
  nameWithType: Furniture.ParentObjectSpot
  fullName: TinyLife.Objects.Furniture.ParentObjectSpot
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
  name: ColorSchemes
  nameWithType: FurnitureType.TypeSettings.ColorSchemes
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ColorSchemes
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
  isExternal: true
  name: GetSize(Direction2)
  nameWithType: FurnitureType.GetSize(Direction2)
  fullName: TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
    name: GetSize
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.GetSize(MLEM.Misc.Direction2)
    name: GetSize
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.Area*
  commentId: Overload:TinyLife.Objects.Furniture.Area
  name: Area
  nameWithType: Furniture.Area
  fullName: TinyLife.Objects.Furniture.Area
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  nameWithType.vb: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.GetPrice
  commentId: M:TinyLife.Objects.Furniture.GetPrice
  parent: TinyLife.Objects.Furniture
  name: GetPrice()
  nameWithType: Furniture.GetPrice()
  fullName: TinyLife.Objects.Furniture.GetPrice()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetPrice
    name: GetPrice
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetPrice
    name: GetPrice
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: AreUtilitiesDisabled(TimeSpan?)
  nameWithType: Household.AreUtilitiesDisabled(TimeSpan?)
  fullName: TinyLife.World.Household.AreUtilitiesDisabled(System.TimeSpan?)
  spec.csharp:
  - uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
    name: AreUtilitiesDisabled
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
    name: AreUtilitiesDisabled
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '?'
  - name: )
- uid: TinyLife.Objects.Furniture.AreUtilitiesDisabled*
  commentId: Overload:TinyLife.Objects.Furniture.AreUtilitiesDisabled
  name: AreUtilitiesDisabled
  nameWithType: Furniture.AreUtilitiesDisabled
  fullName: TinyLife.Objects.Furniture.AreUtilitiesDisabled
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid.empty
  name: Empty
  nameWithType: Guid.Empty
  fullName: System.Guid.Empty
- uid: TinyLife.Objects.Furniture.Creator
  commentId: P:TinyLife.Objects.Furniture.Creator
  parent: TinyLife.Objects.Furniture
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
- uid: TinyLife.Objects.Furniture.CreatorId*
  commentId: Overload:TinyLife.Objects.Furniture.CreatorId
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
- uid: TinyLife.Objects.Food
  commentId: T:TinyLife.Objects.Food
  parent: TinyLife.Objects
  name: Food
  nameWithType: Food
  fullName: TinyLife.Objects.Food
- uid: TinyLife.Objects.Painting
  commentId: T:TinyLife.Objects.Painting
  name: Painting
  nameWithType: Painting
  fullName: TinyLife.Objects.Painting
- uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  commentId: M:TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  name: GetPriceModifier(Quality)
  nameWithType: Extensions.GetPriceModifier(Quality)
  fullName: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
    name: GetPriceModifier
  - name: (
  - uid: TinyLife.Skills.Quality
    name: Quality
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetPriceModifier(TinyLife.Skills.Quality)
    name: GetPriceModifier
  - name: (
  - uid: TinyLife.Skills.Quality
    name: Quality
  - name: )
- uid: System.Nullable{TinyLife.Skills.Quality}
  commentId: T:System.Nullable{TinyLife.Skills.Quality}
  parent: System
  definition: System.Nullable`1
  name: Quality?
  nameWithType: Quality?
  fullName: TinyLife.Skills.Quality?
  spec.csharp:
  - uid: TinyLife.Skills.Quality
    name: Quality
  - name: '?'
  spec.vb:
  - uid: TinyLife.Skills.Quality
    name: Quality
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.Furniture.CanBeDirty*
  commentId: Overload:TinyLife.Objects.Furniture.CanBeDirty
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
- uid: TinyLife.Objects.Furniture.CanBeDirty
  commentId: P:TinyLife.Objects.Furniture.CanBeDirty
  parent: TinyLife.Objects.Furniture
  name: CanBeDirty
  nameWithType: Furniture.CanBeDirty
  fullName: TinyLife.Objects.Furniture.CanBeDirty
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: TinyLife.Objects.Furniture.CreatorId
  commentId: P:TinyLife.Objects.Furniture.CreatorId
  parent: TinyLife.Objects.Furniture
  name: CreatorId
  nameWithType: Furniture.CreatorId
  fullName: TinyLife.Objects.Furniture.CreatorId
- uid: TinyLife.Objects.Furniture.Creator*
  commentId: Overload:TinyLife.Objects.Furniture.Creator
  name: Creator
  nameWithType: Furniture.Creator
  fullName: TinyLife.Objects.Furniture.Creator
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.Furniture.AttachedWall*
  commentId: Overload:TinyLife.Objects.Furniture.AttachedWall
  name: AttachedWall
  nameWithType: Furniture.AttachedWall
  fullName: TinyLife.Objects.Furniture.AttachedWall
- uid: TinyLife.Objects.Furniture.HideFromDraw*
  commentId: Overload:TinyLife.Objects.Furniture.HideFromDraw
  name: HideFromDraw
  nameWithType: Furniture.HideFromDraw
  fullName: TinyLife.Objects.Furniture.HideFromDraw
- uid: TinyLife.Objects.Furniture.Rotation
  commentId: F:TinyLife.Objects.Furniture.Rotation
  parent: TinyLife.Objects.Furniture
  name: Rotation
  nameWithType: Furniture.Rotation
  fullName: TinyLife.Objects.Furniture.Rotation
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  name: CameraRotation
  nameWithType: Options.CameraRotation
  fullName: TinyLife.Options.CameraRotation
- uid: TinyLife.Objects.Furniture.VisualRotation*
  commentId: Overload:TinyLife.Objects.Furniture.VisualRotation
  name: VisualRotation
  nameWithType: Furniture.VisualRotation
  fullName: TinyLife.Objects.Furniture.VisualRotation
- uid: TinyLife.Objects.Furniture.ParentObjectSpotId*
  commentId: Overload:TinyLife.Objects.Furniture.ParentObjectSpotId
  name: ParentObjectSpotId
  nameWithType: Furniture.ParentObjectSpotId
  fullName: TinyLife.Objects.Furniture.ParentObjectSpotId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Objects.Furniture.ParentFurnitureId*
  commentId: Overload:TinyLife.Objects.Furniture.ParentFurnitureId
  name: ParentFurnitureId
  nameWithType: Furniture.ParentFurnitureId
  fullName: TinyLife.Objects.Furniture.ParentFurnitureId
- uid: TinyLife.Objects.FurnitureType.Construct``1(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
  commentId: M:TinyLife.Objects.FurnitureType.Construct``1(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: Construct<T>(int[], Map, Vector2, Guid?)
  nameWithType: FurnitureType.Construct<T>(int[], Map, Vector2, Guid?)
  fullName: TinyLife.Objects.FurnitureType.Construct<T>(int[], TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, System.Guid?)
  nameWithType.vb: FurnitureType.Construct(Of T)(Integer(), Map, Vector2, Guid?)
  fullName.vb: TinyLife.Objects.FurnitureType.Construct(Of T)(Integer(), TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, System.Guid?)
  name.vb: Construct(Of T)(Integer(), Map, Vector2, Guid?)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.Construct``1(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
    name: Construct
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.Construct``1(System.Int32[],TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Nullable{System.Guid})
    name: Construct
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
  - name: )
- uid: TinyLife.Objects.Furniture.#ctor*
  commentId: Overload:TinyLife.Objects.Furniture.#ctor
  name: Furniture
  nameWithType: Furniture.Furniture
  fullName: TinyLife.Objects.Furniture.Furniture
  nameWithType.vb: Furniture.New
  fullName.vb: TinyLife.Objects.Furniture.New
  name.vb: New
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: Draw(GameTime, object, Vector2, Color?, List<Item>)
  nameWithType: MapObject.Draw(GameTime, object, Vector2, Color?, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.Draw(GameTime, Object, Vector2, Color?, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Color?, List(Of Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.Furniture.Draw*
  commentId: Overload:TinyLife.Objects.Furniture.Draw
  name: Draw
  nameWithType: Furniture.Draw
  fullName: TinyLife.Objects.Furniture.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  commentId: T:System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<StaticSpriteBatch.Item>
  nameWithType: List<StaticSpriteBatch.Item>
  fullName: System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>
  nameWithType.vb: List(Of StaticSpriteBatch.Item)
  fullName.vb: System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item)
  name.vb: List(Of StaticSpriteBatch.Item)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  parent: TinyLife.Objects.MapObject
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.Validate*
  commentId: Overload:TinyLife.Objects.Furniture.Validate
  name: Validate
  nameWithType: Furniture.Validate
  fullName: TinyLife.Objects.Furniture.Validate
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.Intersects*
  commentId: Overload:TinyLife.Objects.Furniture.Intersects
  name: Intersects
  nameWithType: Furniture.Intersects
  fullName: TinyLife.Objects.Furniture.Intersects
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Objects.Furniture.GetCategories*
  commentId: Overload:TinyLife.Objects.Furniture.GetCategories
  name: GetCategories
  nameWithType: Furniture.GetCategories
  fullName: TinyLife.Objects.Furniture.GetCategories
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.MapObject.OnAdded
  commentId: M:TinyLife.Objects.MapObject.OnAdded
  parent: TinyLife.Objects.MapObject
  name: OnAdded()
  nameWithType: MapObject.OnAdded()
  fullName: TinyLife.Objects.MapObject.OnAdded()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.OnAdded*
  commentId: Overload:TinyLife.Objects.Furniture.OnAdded
  name: OnAdded
  nameWithType: Furniture.OnAdded
  fullName: TinyLife.Objects.Furniture.OnAdded
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  parent: TinyLife.Objects.MapObject
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.OnRemoved*
  commentId: Overload:TinyLife.Objects.Furniture.OnRemoved
  name: OnRemoved
  nameWithType: Furniture.OnRemoved
  fullName: TinyLife.Objects.Furniture.OnRemoved
- uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: MapObject.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.Furniture.GetAiPriority*
  commentId: Overload:TinyLife.Objects.Furniture.GetAiPriority
  name: GetAiPriority
  nameWithType: Furniture.GetAiPriority
  fullName: TinyLife.Objects.Furniture.GetAiPriority
- uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: CanExecuteAction(ActionType, ActionInfo, bool, bool)
  nameWithType: MapObject.CanExecuteAction(ActionType, ActionInfo, bool, bool)
  fullName: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, bool)
  nameWithType.vb: MapObject.CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, Boolean)
  name.vb: CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
    name: CanExecuteAction
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
    name: CanExecuteAction
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.CanExecuteAction*
  commentId: Overload:TinyLife.Objects.Furniture.CanExecuteAction
  name: CanExecuteAction
  nameWithType: Furniture.CanExecuteAction
  fullName: TinyLife.Objects.Furniture.CanExecuteAction
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: OnActionCompleted(Action, CompletionType, bool)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnActionCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.OnActionCompleted*
  commentId: Overload:TinyLife.Objects.Furniture.OnActionCompleted
  name: OnActionCompleted
  nameWithType: Furniture.OnActionCompleted
  fullName: TinyLife.Objects.Furniture.OnActionCompleted
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Objects.Furniture.ActionUpdate*
  commentId: Overload:TinyLife.Objects.Furniture.ActionUpdate
  name: ActionUpdate
  nameWithType: Furniture.ActionUpdate
  fullName: TinyLife.Objects.Furniture.ActionUpdate
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: Furniture.GetFreeActionSpotInfo
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo
- uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetHoverInfo(Tooltip)
  nameWithType: MapObject.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.GetHoverInfo*
  commentId: Overload:TinyLife.Objects.Furniture.GetHoverInfo
  name: GetHoverInfo
  nameWithType: Furniture.GetHoverInfo
  fullName: TinyLife.Objects.Furniture.GetHoverInfo
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  nameWithType: MapObject.GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.Skills.SkillType, float)
  nameWithType.vb: MapObject.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName.vb: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.Furniture.GetEfficiencyModifier*
  commentId: Overload:TinyLife.Objects.Furniture.GetEfficiencyModifier
  name: GetEfficiencyModifier
  nameWithType: Furniture.GetEfficiencyModifier
  fullName: TinyLife.Objects.Furniture.GetEfficiencyModifier
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
- uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  commentId: M:TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  nameWithType: MapObject.GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.NeedType)
  nameWithType.vb: MapObject.GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  fullName.vb: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.NeedType)
  name.vb: GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.NeedType
    name: NeedType
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.NeedType
    name: NeedType
  - name: )
- uid: TinyLife.Objects.Furniture.GetRestoreNeedModifier*
  commentId: Overload:TinyLife.Objects.Furniture.GetRestoreNeedModifier
  name: GetRestoreNeedModifier
  nameWithType: Furniture.GetRestoreNeedModifier
  fullName: TinyLife.Objects.Furniture.GetRestoreNeedModifier
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: IsFreeSpot(Point)
  nameWithType: MapObject.IsFreeSpot(Point)
  fullName: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
    name: IsFreeSpot
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
    name: IsFreeSpot
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.IsFreeSpot*
  commentId: Overload:TinyLife.Objects.Furniture.IsFreeSpot
  name: IsFreeSpot
  nameWithType: Furniture.IsFreeSpot
  fullName: TinyLife.Objects.Furniture.IsFreeSpot
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: ResetToStatic(bool)
  nameWithType: MapObject.ResetToStatic(bool)
  fullName: TinyLife.Objects.MapObject.ResetToStatic(bool)
  nameWithType.vb: MapObject.ResetToStatic(Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ResetToStatic(Boolean)
  name.vb: ResetToStatic(Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
    name: ResetToStatic
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
    name: ResetToStatic
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.ResetToStatic*
  commentId: Overload:TinyLife.Objects.Furniture.ResetToStatic
  name: ResetToStatic
  nameWithType: Furniture.ResetToStatic
  fullName: TinyLife.Objects.Furniture.ResetToStatic
- uid: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnPositionChanged(Vector2)
  nameWithType: MapObject.OnPositionChanged(Vector2)
  fullName: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
    name: OnPositionChanged
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
    name: OnPositionChanged
  - name: (
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.OnPositionChanged*
  commentId: Overload:TinyLife.Objects.Furniture.OnPositionChanged
  name: OnPositionChanged
  nameWithType: Furniture.OnPositionChanged
  fullName: TinyLife.Objects.Furniture.OnPositionChanged
- uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.Furniture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: Draw(GameTime, object, Vector2, Color?, List<Item>)
  nameWithType: Furniture.Draw(GameTime, object, Vector2, Color?, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: Furniture.Draw(GameTime, Object, Vector2, Color?, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Color?, List(Of Item))
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: )
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
  name: StaticSpriteBatch
  nameWithType: StaticSpriteBatch
  fullName: MLEM.Graphics.StaticSpriteBatch
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: TinyLife.Objects.Furniture.GetPrice*
  commentId: Overload:TinyLife.Objects.Furniture.GetPrice
  name: GetPrice
  nameWithType: Furniture.GetPrice
  fullName: TinyLife.Objects.Furniture.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
  - name: (
  - name: )
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  name: ElectricityRating
  nameWithType: FurnitureType.TypeSettings.ElectricityRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
- uid: TinyLife.Objects.Furniture.Quality
  commentId: F:TinyLife.Objects.Furniture.Quality
  parent: TinyLife.Objects.Furniture
  name: Quality
  nameWithType: Furniture.Quality
  fullName: TinyLife.Objects.Furniture.Quality
- uid: TinyLife.Objects.Furniture.OnGetDescription
  commentId: E:TinyLife.Objects.Furniture.OnGetDescription
  parent: TinyLife.Objects.Furniture
  name: OnGetDescription
  nameWithType: Furniture.OnGetDescription
  fullName: TinyLife.Objects.Furniture.OnGetDescription
- uid: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: GetHoverInfo(Tooltip)
  nameWithType: Furniture.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.GetDescription*
  commentId: Overload:TinyLife.Objects.Furniture.GetDescription
  name: GetDescription
  nameWithType: Furniture.GetDescription
  fullName: TinyLife.Objects.Furniture.GetDescription
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: TinyLife.Objects.Furniture.Type
  commentId: F:TinyLife.Objects.Furniture.Type
  parent: TinyLife.Objects.Furniture
  name: Type
  nameWithType: Furniture.Type
  fullName: TinyLife.Objects.Furniture.Type
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  name: DecorativeRating
  nameWithType: FurnitureType.TypeSettings.DecorativeRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
- uid: TinyLife.Objects.Furniture.GetDecorativeRating*
  commentId: Overload:TinyLife.Objects.Furniture.GetDecorativeRating
  name: GetDecorativeRating
  nameWithType: Furniture.GetDecorativeRating
  fullName: TinyLife.Objects.Furniture.GetDecorativeRating
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: Furniture.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  nameWithType.vb: Furniture.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.GetDirty*
  commentId: Overload:TinyLife.Objects.Furniture.GetDirty
  name: GetDirty
  nameWithType: Furniture.GetDirty
  fullName: TinyLife.Objects.Furniture.GetDirty
- uid: TinyLife.Goals.GoalTrigger.FurnitureCreated
  commentId: F:TinyLife.Goals.GoalTrigger.FurnitureCreated
  name: FurnitureCreated
  nameWithType: GoalTrigger.FurnitureCreated
  fullName: TinyLife.Goals.GoalTrigger.FurnitureCreated
- uid: TinyLife.Objects.Furniture.SetCreator*
  commentId: Overload:TinyLife.Objects.Furniture.SetCreator
  name: SetCreator
  nameWithType: Furniture.SetCreator
  fullName: TinyLife.Objects.Furniture.SetCreator
- uid: TinyLife.Tools.FurniturePlacer
  commentId: T:TinyLife.Tools.FurniturePlacer
  parent: TinyLife.Tools
  name: FurniturePlacer
  nameWithType: FurniturePlacer
  fullName: TinyLife.Tools.FurniturePlacer
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Objects.Furniture.OnPlacedInBuildMode*
  commentId: Overload:TinyLife.Objects.Furniture.OnPlacedInBuildMode
  name: OnPlacedInBuildMode
  nameWithType: Furniture.OnPlacedInBuildMode
  fullName: TinyLife.Objects.Furniture.OnPlacedInBuildMode
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Tools
    name: Tools
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Tools
    name: Tools
- uid: TinyLife.Objects.Furniture.NotifyNeighbors
  commentId: M:TinyLife.Objects.Furniture.NotifyNeighbors
  parent: TinyLife.Objects.Furniture
  name: NotifyNeighbors()
  nameWithType: Furniture.NotifyNeighbors()
  fullName: TinyLife.Objects.Furniture.NotifyNeighbors()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.NotifyNeighbors
    name: NotifyNeighbors
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.NotifyNeighbors
    name: NotifyNeighbors
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.OnNeighborChanged*
  commentId: Overload:TinyLife.Objects.Furniture.OnNeighborChanged
  name: OnNeighborChanged
  nameWithType: Furniture.OnNeighborChanged
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged
- uid: TinyLife.Objects.Furniture.DrawUi*
  commentId: Overload:TinyLife.Objects.Furniture.DrawUi
  name: DrawUi
  nameWithType: Furniture.DrawUi
  fullName: TinyLife.Objects.Furniture.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.Person.VisuallyOccupiedSpot
  commentId: P:TinyLife.Objects.Person.VisuallyOccupiedSpot
  name: VisuallyOccupiedSpot
  nameWithType: Person.VisuallyOccupiedSpot
  fullName: TinyLife.Objects.Person.VisuallyOccupiedSpot
- uid: TinyLife.Objects.Furniture.GetOccupants*
  commentId: Overload:TinyLife.Objects.Furniture.GetOccupants
  name: GetOccupants
  nameWithType: Furniture.GetOccupants
  fullName: TinyLife.Objects.Furniture.GetOccupants
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpots
  name: GetFreeActionSpots
  nameWithType: Furniture.GetFreeActionSpots
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(ActionSpot Spot, Direction2 Dir)>
  nameWithType: IEnumerable<(ActionSpot Spot, Direction2 Dir)>
  fullName: System.Collections.Generic.IEnumerable<(TinyLife.Objects.ActionSpot Spot, MLEM.Misc.Direction2 Dir)>
  nameWithType.vb: IEnumerable(Of (Spot As ActionSpot, Dir As Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Spot As TinyLife.Objects.ActionSpot, Dir As MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (Spot As ActionSpot, Dir As Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.dir
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.dir
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  name: GetFreeActionSpots(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpots(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpot*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeActionSpot
  name: GetFreeActionSpot
  nameWithType: Furniture.GetFreeActionSpot
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpot
- uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.spot
  name: (ActionSpot Spot, Direction2 Dir)
  nameWithType: (ActionSpot Spot, Direction2 Dir)
  fullName: (TinyLife.Objects.ActionSpot Spot, MLEM.Misc.Direction2 Dir)
  nameWithType.vb: (Spot As ActionSpot, Dir As Direction2)
  fullName.vb: (Spot As TinyLife.Objects.ActionSpot, Dir As MLEM.Misc.Direction2)
  name.vb: (Spot As ActionSpot, Dir As Direction2)
  spec.csharp:
  - name: (
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.dir
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Spot
    name: Spot
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.spot
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}.Dir
    name: Dir
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.objects.actionspot,mlem.misc.direction2-.dir
  - name: " "
  - name: As
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Actions.ActionInfo.ActionLocation
  commentId: F:TinyLife.Actions.ActionInfo.ActionLocation
  name: ActionLocation
  nameWithType: ActionInfo.ActionLocation
  fullName: TinyLife.Actions.ActionInfo.ActionLocation
- uid: MLEM.Misc.Direction2.None
  commentId: F:MLEM.Misc.Direction2.None
  isExternal: true
  name: None
  nameWithType: Direction2.None
  fullName: MLEM.Misc.Direction2.None
- uid: TinyLife.Objects.Furniture.GetActionSpotInfo*
  commentId: Overload:TinyLife.Objects.Furniture.GetActionSpotInfo
  name: GetActionSpotInfo
  nameWithType: Furniture.GetActionSpotInfo
  fullName: TinyLife.Objects.Furniture.GetActionSpotInfo
- uid: TinyLife.Objects.Furniture.GetFreeObjectSpot*
  commentId: Overload:TinyLife.Objects.Furniture.GetFreeObjectSpot
  name: GetFreeObjectSpot
  nameWithType: Furniture.GetFreeObjectSpot
  fullName: TinyLife.Objects.Furniture.GetFreeObjectSpot
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Vector2?
  nameWithType: Vector2?
  fullName: Microsoft.Xna.Framework.Vector2?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
- uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  name: AddObject(MapObject)
  nameWithType: Map.AddObject(MapObject)
  fullName: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
    name: AddObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.AddObject(TinyLife.Objects.MapObject)
    name: AddObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetChild(ObjectSpot, Furniture, Direction2)
  nameWithType: Furniture.SetChild(ObjectSpot, Furniture, Direction2)
  fullName: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot, TinyLife.Objects.Furniture, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
    name: SetChild
  - name: (
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetChild(TinyLife.Objects.ObjectSpot,TinyLife.Objects.Furniture,MLEM.Misc.Direction2)
    name: SetChild
  - name: (
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.SetParent*
  commentId: Overload:TinyLife.Objects.Furniture.SetParent
  name: SetParent
  nameWithType: Furniture.SetParent
  fullName: TinyLife.Objects.Furniture.SetParent
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  parent: TinyLife.Objects.Furniture
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren*
  commentId: Overload:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  name: UnlinkParentsAndChildren
  nameWithType: Furniture.UnlinkParentsAndChildren
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
- uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  commentId: M:TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  name: RemoveObject(MapObject)
  nameWithType: Map.RemoveObject(MapObject)
  fullName: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
    name: RemoveObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.RemoveObject(TinyLife.Objects.MapObject)
    name: RemoveObject
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
  - name: (
  - name: )
- uid: TinyLife.Objects.Furniture.RemoveAndUnlink*
  commentId: Overload:TinyLife.Objects.Furniture.RemoveAndUnlink
  name: RemoveAndUnlink
  nameWithType: Furniture.RemoveAndUnlink
  fullName: TinyLife.Objects.Furniture.RemoveAndUnlink
- uid: TinyLife.Objects.Furniture.GetChildren*
  commentId: Overload:TinyLife.Objects.Furniture.GetChildren
  name: GetChildren
  nameWithType: Furniture.GetChildren
  fullName: TinyLife.Objects.Furniture.GetChildren
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  commentId: M:TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
  parent: TinyLife.Objects.Furniture
  name: SetParent(Furniture, ObjectSpot)
  nameWithType: Furniture.SetParent(Furniture, ObjectSpot)
  fullName: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
    name: SetParent
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetParent(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot)
    name: SetParent
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
  - name: )
- uid: TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)
  isExternal: true
  name: GetBestRotation(Direction2)
  nameWithType: FurnitureType.GetBestRotation(Direction2)
  fullName: TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)
    name: GetBestRotation
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.GetBestRotation(MLEM.Misc.Direction2)
    name: GetBestRotation
  - name: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: )
- uid: TinyLife.Objects.Furniture.AddChild*
  commentId: Overload:TinyLife.Objects.Furniture.AddChild
  name: AddChild
  nameWithType: Furniture.AddChild
  fullName: TinyLife.Objects.Furniture.AddChild
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid?
  nameWithType: Guid?
  fullName: System.Guid?
  spec.csharp:
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
  spec.vb:
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: '?'
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Objects.Furniture.SetChild*
  commentId: Overload:TinyLife.Objects.Furniture.SetChild
  name: SetChild
  nameWithType: Furniture.SetChild
  fullName: TinyLife.Objects.Furniture.SetChild
- uid: TinyLife.Objects.Furniture.RemoveChild*
  commentId: Overload:TinyLife.Objects.Furniture.RemoveChild
  name: RemoveChild
  nameWithType: Furniture.RemoveChild
  fullName: TinyLife.Objects.Furniture.RemoveChild
- uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.Furniture
  name: OnNeighborChanged(Furniture)
  nameWithType: Furniture.OnNeighborChanged(Furniture)
  fullName: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
    name: OnNeighborChanged
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.OnNeighborChanged(TinyLife.Objects.Furniture)
    name: OnNeighborChanged
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: TinyLife.Objects.Furniture.NotifyNeighbors*
  commentId: Overload:TinyLife.Objects.Furniture.NotifyNeighbors
  name: NotifyNeighbors
  nameWithType: Furniture.NotifyNeighbors
  fullName: TinyLife.Objects.Furniture.NotifyNeighbors
- uid: TinyLife.Objects.Furniture.SetNewId*
  commentId: Overload:TinyLife.Objects.Furniture.SetNewId
  name: SetNewId
  nameWithType: Furniture.SetNewId
  fullName: TinyLife.Objects.Furniture.SetNewId
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )

### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  id: TypelessAction
  parent: TinyLife.Actions.Typeless
  children:
  - TinyLife.Actions.Typeless.TypelessAction.#ctor(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.ForceFail
  - TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  - TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  - TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  - TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Typeless.TypelessAction.Info
  - TinyLife.Actions.Typeless.TypelessAction.Initialize
  - TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  - TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  - TinyLife.Actions.Typeless.TypelessAction.Map
  - TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  - TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  - TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  - TinyLife.Actions.Typeless.TypelessAction.Person
  - TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  - TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  - TinyLife.Actions.Typeless.TypelessAction.Random
  - TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  - TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  - TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Typeless.TypelessAction.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TypelessAction
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA typeless action is the underlying type of any <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> class, with the only difference being that it does not have an underlying <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>.\nTypeless actions cannot be used directly for enqueuing on a person, but can be used in <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref> as auxiliary helper actions.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public abstract class TypelessAction : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public MustInherit Class TypelessAction
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Actions.Action
  - TinyLife.Actions.Typeless.PathfindToPersonAction
  - TinyLife.Actions.Typeless.SpawnItemInHandAction
  - TinyLife.Actions.Typeless.TellPeopleToLeaveRoomAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Typeless.TypelessAction.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Actions.Typeless.TypelessAction.Random
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.Random
  id: Random
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: TypelessAction.Random
  fullName: TinyLife.Actions.Typeless.TypelessAction.Random
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Random
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Random\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used by actions.\nThis value has the default seed.\n"
  example: []
  syntax:
    content: public static readonly Random Random
    return:
      type: System.Random
    content.vb: Public Shared ReadOnly Random As Random
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.Info
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.Info
  id: Info
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: TypelessAction.Info
  fullName: TinyLife.Actions.Typeless.TypelessAction.Info
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Info
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for this action that contains the clicked (or otherwise targeted) objects and more\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly ActionInfo Info
    return:
      type: TinyLife.Actions.ActionInfo
    content.vb: >-
      <DataMember>

      Public ReadOnly Info As ActionInfo
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  id: StartedAutomatically
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StartedAutomatically
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nIf this value is true, this action was started using <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> or through another action rather than by the player\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool StartedAutomatically { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public ReadOnly Property StartedAutomatically As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  id: IsUnderlying
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: IsUnderlying
  nameWithType: TypelessAction.IsUnderlying
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsUnderlying
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nStores whether this action is an underlying action of either a <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref> or a <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsUnderlying { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUnderlying As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.Map
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Map
  id: Map
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: TypelessAction.Map
  fullName: TinyLife.Actions.Typeless.TypelessAction.Map
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThe <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Map\" data-throw-if-not-resolved=\"false\"></xref> that this action occurs on\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.Actions.Typeless.TypelessAction.Map*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.Person
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Person
  id: Person
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: TypelessAction.Person
  fullName: TinyLife.Actions.Typeless.TypelessAction.Person
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThe <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> that this action is being executed by\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Actions.Typeless.TypelessAction.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  id: ElapsedTime
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: ElapsedTime
  nameWithType: TypelessAction.ElapsedTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ElapsedTime
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThe amount of in-game time that has elapsed since this action has started\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan ElapsedTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property ElapsedTime As TimeSpan
  overload: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  id: PlayerPromptOpen
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: PlayerPromptOpen
  nameWithType: TypelessAction.PlayerPromptOpen
  fullName: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlayerPromptOpen
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA property that stores whether a player prompt is currently open. A prompt can be opened using <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String%2cSystem.Predicate%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Action%7bMLEM.Ui.Elements.Panel%7d%2cSystem.Boolean%2cSystem.Func%7bTinyLife.Uis.CoveringGroup%2cSystem.Collections.Generic.IEnumerable%7bMLEM.Ui.Elements.Element%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis property can be used to ensure that an action is not paused or canceled while a player prompt is open, as, based on the implementation of the action, there might be certain update frames that still occur while the prompt is open.\n"
  example: []
  syntax:
    content: public bool PlayerPromptOpen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property PlayerPromptOpen As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  id: InProgressTime
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: InProgressTime
  nameWithType: TypelessAction.InProgressTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InProgressTime
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nRepresents the amount of time that this action has &quot;properly&quot; been in progress for.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, <xref href=\"TinyLife.Actions.Typeless.TypelessAction.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual TimeSpan InProgressTime { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overridable ReadOnly Property InProgressTime As TimeSpan
  overload: TinyLife.Actions.Typeless.TypelessAction.InProgressTime*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  id: FullyInProgress
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FullyInProgress
  nameWithType: TypelessAction.FullyInProgress
  fullName: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullyInProgress
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nReturns whether this action is currently &quot;properly&quot; in progress.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, this property is true if <xref href=\"TinyLife.Actions.Typeless.TypelessAction.InProgressTime\" data-throw-if-not-resolved=\"false\"></xref> is greater than <xref href=\"System.TimeSpan.Zero\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool FullyInProgress { get; }
    parameters: []
    return:
      type: System.Boolean
      description: Whether this action is fully in progress
    content.vb: Public Overridable ReadOnly Property FullyInProgress As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: TinyLife.Actions.Typeless.TypelessAction.ForceFail
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.ForceFail
  id: ForceFail
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: ForceFail
  nameWithType: TypelessAction.ForceFail
  fullName: TinyLife.Actions.Typeless.TypelessAction.ForceFail
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ForceFail
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThis value can be set to true to force <xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref> to return <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is useful if there is an erroring calculation in your <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> code etc.\n"
  example: []
  syntax:
    content: protected bool ForceFail
    return:
      type: System.Boolean
    content.vb: Protected ForceFail As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Typeless.TypelessAction.#ctor(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.#ctor(TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: TypelessAction(ActionInfo)
  nameWithType: TypelessAction.TypelessAction(ActionInfo)
  fullName: TinyLife.Actions.Typeless.TypelessAction.TypelessAction(TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nCreates a new typeless action with the given action information\n"
  example: []
  syntax:
    content: protected TypelessAction(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action
    content.vb: Protected Sub New(info As ActionInfo)
  overload: TinyLife.Actions.Typeless.TypelessAction.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Typeless.TypelessAction.Initialize
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Initialize
  id: Initialize
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: TypelessAction.Initialize()
  fullName: TinyLife.Actions.Typeless.TypelessAction.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 107
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThis method is called when the action is first started by a <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that it is not called when the action gets added to the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>, but when it is moved to <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Initialize()
    content.vb: Public MustOverride Sub Initialize
  overload: TinyLife.Actions.Typeless.TypelessAction.Initialize*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: TypelessAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 116
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThis method is called every update frame if this action is currently active.\nBy default, only the <xref href=\"TinyLife.Actions.Typeless.TypelessAction.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is modified in this method and <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.Typeless.TypelessAction.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: TypelessAction.IsCompleted()
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThis method is called every update frame by a <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> if this action is currently active to check if it should be stopped.\nIf this returns a result other than <xref href=\"MLEM.Animations.SpriteAnimation.Completed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> will be called and the action is stopped.\nBy default, only <xref href=\"TinyLife.Actions.Typeless.TypelessAction.ForceFail\" data-throw-if-not-resolved=\"false\"></xref> modifies the completion type, otherwise <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public virtual CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: The current completion type of this action
    content.vb: Public Overridable Function IsCompleted As CompletionType
  overload: TinyLife.Actions.Typeless.TypelessAction.IsCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: TypelessAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 135
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nThis method is called when this action <xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, or if it is canceled from an outside source.\nNote that, if this method is called as a result of <xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> passed will be the same.\n"
  example: []
  syntax:
    content: public virtual void OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    content.vb: Public Overridable Sub OnCompleted(type As CompletionType)
  overload: TinyLife.Actions.Typeless.TypelessAction.OnCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Typeless.TypelessAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: TypelessAction.Validate(Person)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 144
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nValidates this action&apos;s data.\nThis is called when a map is loaded from disk.\nWhen returning false on this method, the action is removed from the <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action belongs to
    return:
      type: System.Boolean
      description: Whether or not the action is still valid (or if it has invalid data)
    content.vb: Public Overridable Function Validate(person As Person) As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  id: OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  nameWithType: TypelessAction.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenPlayerPrompt
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 160
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nOpens a prompt for the player with the given elements, also pausing the game.\nThis behavior is used for things like the <xref href=\"TinyLife.Actions.ActionType.QuitJob\" data-throw-if-not-resolved=\"false\"></xref> action, where a confirmation panel pops up.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CoveringGroup OpenPlayerPrompt(string title, Predicate<Panel> canFinish, Action<Panel> onFinished, bool canExit, Func<CoveringGroup, IEnumerable<Element>> children)
    parameters:
    - id: title
      type: System.String
      description: The title that should be displayed in the box, has to be localized if required
    - id: canFinish
      type: System.Predicate{MLEM.Ui.Elements.Panel}
      description: A function that determines whether the Okay button can be pressed. If the function is null, no button is displayed.
    - id: onFinished
      type: System.Action{MLEM.Ui.Elements.Panel}
      description: A function that is called once the Okay button is pressed. Can be null.
    - id: canExit
      type: System.Boolean
      description: Whether the user can exit the window without making a decision by clicking the background
    - id: children
      type: System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
      description: The elements that should be displayed in this prompt, along with the title and possibly the Okay button if <code data-dev-comment-type="paramref" class="paramref">canFinish</code> is used
    return:
      type: TinyLife.Uis.CoveringGroup
    content.vb: Public Function OpenPlayerPrompt(title As String, canFinish As Predicate(Of Panel), onFinished As Action(Of Panel), canExit As Boolean, children As Func(Of CoveringGroup, IEnumerable(Of Element))) As CoveringGroup
  overload: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this action was <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
  nameWithType.vb: TypelessAction.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)))
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  id: OpenYesNoPrompt(System.String,System.Action,System.Action)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: OpenYesNoPrompt(String, Action, Action)
  nameWithType: TypelessAction.OpenYesNoPrompt(String, Action, Action)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String, System.Action, System.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenYesNoPrompt
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 195
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nOpens a prompt for the player that contains a yes and a no button along with some text.\nThis prompt can be used to ensure that a player selected the right option in an important decision.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void OpenYesNoPrompt(string title, Action onYes, Action onNo = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onYes
      type: System.Action
      description: The action that should be executed when the yes button is pressed
    - id: onNo
      type: System.Action
      description: The action that should be executed when the no button is pressed
    content.vb: Public Sub OpenYesNoPrompt(title As String, onYes As Action, onNo As Action = Nothing)
  overload: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  id: OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  nameWithType: TypelessAction.OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action<System.String>, System.Predicate<System.String>, MLEM.Ui.Elements.TextField.Rule, System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenTextPrompt
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 222
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nOpens a prompt with a text box that allows the player to input a string.\nTo check whether a player prompt is currently opened, see <xref href=\"TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void OpenTextPrompt(string title, Action<string> onFinished, Predicate<string> isNameValid = null, TextField.Rule rule = null, string defaultText = null)
    parameters:
    - id: title
      type: System.String
      description: The text to display in the prompt
    - id: onFinished
      type: System.Action{System.String}
      description: An action that is executed when the okay button is pressed, which contains the string that was input into the text box
    - id: isNameValid
      type: System.Predicate{System.String}
      description: A function that determines whether the name is valid. If this is null, all text inputs (except an empty string) will be valid.
    - id: rule
      type: MLEM.Ui.Elements.TextField.Rule
      description: A rule to use for the <xref href="MLEM.Ui.Elements.TextField" data-throw-if-not-resolved="false"></xref>
    - id: defaultText
      type: System.String
      description: The text that should be displayed in the text field by default, or null to display no default text
    content.vb: Public Sub OpenTextPrompt(title As String, onFinished As Action(Of String), isNameValid As Predicate(Of String) = Nothing, rule As TextField.Rule = Nothing, defaultText As String = Nothing)
  overload: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt*
  nameWithType.vb: TypelessAction.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action(Of System.String), System.Predicate(Of System.String), MLEM.Ui.Elements.TextField.Rule, System.String)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  id: SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  nameWithType: TypelessAction.SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakAlone
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 240
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nDisplays emotes for this action&apos;s <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> with the given settings as if they were talking to themselves out loud.\nThis is used by actions like <xref href=\"TinyLife.Actions.ActionType.PracticeJokes\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.ActionType.PracticeSpeech\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool SpeakAlone(GameTime time, float speedMultiplier, EmoteCategory emoteCategories, SpeakStyle speakStyles, int totalAmount = 2147483647)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: The categories to pick emotes from, can be a combined flag
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes to display, defaults to an infinite amount (<xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>)
    return:
      type: System.Boolean
      description: Whether all emotes were succesfully displayed. This method only returns true if <code data-dev-comment-type="paramref" class="paramref">totalAmount</code> is less than the default value
    content.vb: Public Function SpeakAlone(time As GameTime, speedMultiplier As Single, emoteCategories As EmoteCategory, speakStyles As SpeakStyle, totalAmount As Integer = 2147483647) As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  id: SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  nameWithType: TypelessAction.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable<TinyLife.Actions.EmoteCategory>, System.Nullable<TinyLife.Objects.SpeakStyle>, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakInConversation
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 257
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nHelper method to display emotes over each conversation partner in a back and forth fashion to make it seem like they are conversing.\nWhen used in <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref>, only the action that <xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref> should call this method.\n"
  example: []
  syntax:
    content: public bool SpeakInConversation(Person partner, GameTime time, float speedMultiplier, EmoteCategory emoteCategories, SpeakStyle speakStyles, EmoteCategory? partnerEmoteCategories = null, SpeakStyle? partnerSpeakStyles = null, int totalAmount = 2147483647)
    parameters:
    - id: partner
      type: TinyLife.Objects.Person
      description: The partner to speak in conversation with.
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: A combined flag representing the categories that emotes can be picked from
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to use for speech sounds, can be a combined flag
    - id: partnerEmoteCategories
      type: System.Nullable{TinyLife.Actions.EmoteCategory}
      description: The emote categories for the interaction partner to use, or null to use <code data-dev-comment-type="paramref" class="paramref">emoteCategories</code>
    - id: partnerSpeakStyles
      type: System.Nullable{TinyLife.Objects.SpeakStyle}
      description: The speak styles for the interaction partner to use, or null to use <code data-dev-comment-type="paramref" class="paramref">speakStyles</code>
    - id: totalAmount
      type: System.Int32
      description: The total amount of emotes that should be shown (not per person, but in total)
    return:
      type: System.Boolean
      description: If <code data-dev-comment-type="paramref" class="paramref">totalAmount</code> is set, true is returned if the emote back-and-forth is completed
    content.vb: Public Function SpeakInConversation(partner As Person, time As GameTime, speedMultiplier As Single, emoteCategories As EmoteCategory, speakStyles As SpeakStyle, partnerEmoteCategories As EmoteCategory? = Nothing, partnerSpeakStyles As SpeakStyle? = Nothing, totalAmount As Integer = 2147483647) As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation*
  nameWithType.vb: TypelessAction.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable(Of TinyLife.Actions.EmoteCategory), System.Nullable(Of TinyLife.Objects.SpeakStyle), System.Int32)
  name.vb: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  id: CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  nameWithType: TypelessAction.CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan, System.Boolean, TinyLife.Skills.SkillType, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CompleteInTime
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method that returns <xref href=\"MLEM.Animations.SpriteAnimation.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">time</code> has passed.\nThis method makes use of <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> to return true faster or slower based on the person&apos;s current mood and skill levels.\n"
  example: []
  syntax:
    content: protected CompletionType CompleteInTime(TimeSpan time, bool efficiencyMatters = false, SkillType skill = null, float levelModifier = 0.1F, bool autoOnly = false)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The (total!) amount of time after which this action should be completed
    - id: efficiencyMatters
      type: System.Boolean
      description: Whether the person&apos;s efficiency modifier (<xref href="TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>) should be taken into account for the total time required
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the completion time
    - id: levelModifier
      type: System.Single
      description: The amount that each <code data-dev-comment-type="paramref" class="paramref">skill</code> level should influence the returned time by. Defaults to 0.1.
    - id: autoOnly
      type: System.Boolean
      description: Whether the action should only be completed in the given amount of time if it has been <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref>. If both this value and <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref> are true, this method always returns <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Actions.CompletionType
      description: <xref href="MLEM.Animations.SpriteAnimation.Completed" data-throw-if-not-resolved="false"></xref> if the time has passed, <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> otherwise
    content.vb: Protected Function CompleteInTime(time As TimeSpan, efficiencyMatters As Boolean = False, skill As SkillType = Nothing, levelModifier As Single = 0.1F, autoOnly As Boolean = False) As CompletionType
  overload: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  id: CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: CompleteIfNeedFull(Person, NeedType, CompletionType)
  nameWithType: TypelessAction.CompleteIfNeedFull(Person, NeedType, CompletionType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person, TinyLife.NeedType, TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CompleteIfNeedFull
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 313
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method that returns <xref href=\"MLEM.Animations.SpriteAnimation.Completed\" data-throw-if-not-resolved=\"false\"></xref> if the given <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref>&apos;s value is at <xref href=\"TinyLife.Need.Max\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static CompletionType CompleteIfNeedFull(Person person, NeedType type, CompletionType els = CompletionType.Active)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose needs should be queried
    - id: type
      type: TinyLife.NeedType
      description: The need that should be completed
    - id: els
      type: TinyLife.Actions.CompletionType
      description: The action type that is returned if the need is not completed. <xref href="TinyLife.Actions.CompletionType.Active" data-throw-if-not-resolved="false"></xref> by default.
    return:
      type: TinyLife.Actions.CompletionType
      description: The appropriate completion type
    content.vb: Public Shared Function CompleteIfNeedFull(person As Person, type As NeedType, els As CompletionType = CompletionType.Active) As CompletionType
  overload: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  id: PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType[])
  nameWithType: TypelessAction.PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType[])
  fullName: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType[])
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PutDownOrGoTo
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method used by <xref href=\"TinyLife.Actions.PrepareFoodAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.CookFoodAction\" data-throw-if-not-resolved=\"false\"></xref> that causes the <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> to walk to a valid surface with the action item on it, plcae the action item down on a valid surface or move the action object from its current location to a valid surface.\nThe validity of the surface is determined by <code data-dev-comment-type=\"paramref\" class=\"paramref\">parentToPutOn</code>, and the item to find is any of <code data-dev-comment-type=\"paramref\" class=\"paramref\">items</code>.\n"
  example: []
  syntax:
    content: public static IEnumerable<Action> PutDownOrGoTo(ActionInfo info, ObjectCategory parentToPutOn, params FurnitureType[] items)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action&apos;s action information
    - id: parentToPutOn
      type: TinyLife.Objects.ObjectCategory
      description: An object category that the object&apos;s surface should have
    - id: items
      type: TinyLife.Objects.FurnitureType[]
      description: The items that should be found on the surface
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: A set of actions that cause the person to set the action object up correctly
    content.vb: Public Shared Function PutDownOrGoTo(info As ActionInfo, parentToPutOn As ObjectCategory, ParamArray items As FurnitureType()) As IEnumerable(Of Action)
  overload: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo*
  nameWithType.vb: TypelessAction.PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType())
  name.vb: PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType())
- uid: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  id: GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: GetPlaceDirection(Person, FurnitureType)
  nameWithType: TypelessAction.GetPlaceDirection(Person, FurnitureType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person, TinyLife.Objects.FurnitureType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPlaceDirection
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 353
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nReturns a <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that represents the facing that the given <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> should be placed with.\nThe direction is determined by the <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s current rotation.\n"
  example: []
  syntax:
    content: public static Direction2 GetPlaceDirection(Person person, FurnitureType item = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person placing the object
    - id: item
      type: TinyLife.Objects.FurnitureType
      description: The item to place
    return:
      type: MLEM.Misc.Direction2
      description: The facing the item should be placed with
    content.vb: Public Shared Function GetPlaceDirection(person As Person, item As FurnitureType = Nothing) As Direction2
  overload: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  id: Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: Sit(Person, Furniture, Single, ActionSpot)
  nameWithType: TypelessAction.Sit(Person, Furniture, Single, ActionSpot)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Single, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Sit
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 370
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method that causes the <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> to sit on the given object.\nThis method causes the action spot to be occupied and the person&apos;s <xref href=\"TinyLife.Objects.Person.CurrentPose\" data-throw-if-not-resolved=\"false\"></xref> to be changed to <xref href=\"TinyLife.Objects.Person.Pose.Sitting\" data-throw-if-not-resolved=\"false\"></xref>.\nAdditionally, the <xref href=\"TinyLife.NeedType.Energy\" data-throw-if-not-resolved=\"false\"></xref> need is restored a little bit.\nNote that this method has to be called every <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame for the person to stay sat down.\n"
  example: []
  syntax:
    content: public static bool Sit(Person person, Furniture chair, float speedMultiplier, ActionSpot spot = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that should sit down
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to sit on
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to sit on, or null to select one automatically
    return:
      type: System.Boolean
      description: Whether or not the chair can be sat on
    content.vb: Public Shared Function Sit(person As Person, chair As Furniture, speedMultiplier As Single, spot As ActionSpot = Nothing) As Boolean
  overload: TinyLife.Actions.Typeless.TypelessAction.Sit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  id: GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: GetFreeChair(Person, Furniture)
  nameWithType: TypelessAction.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeChair
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 388
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method that returns an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.Chair\" data-throw-if-not-resolved=\"false\"></xref> category that is closest to the given object which is on a desk or table.\nThe furniture returned is the one that the person should <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person%2cTinyLife.Objects.Furniture%2cSystem.Single%2cTinyLife.Objects.ActionSpot)\" data-throw-if-not-resolved=\"false\"></xref> on when interacting with the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>.\nThis method will return the <code data-dev-comment-type=\"paramref\" class=\"paramref\">deskObject</code>&apos;s parent itself if it is a picnic-style table that has benches directly attached to it.\n"
  example: []
  syntax:
    content: public static (Furniture Chair, ActionSpot Spot, Direction2 Direction) GetFreeChair(Person person, Furniture deskObject)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the free chair for
    - id: deskObject
      type: TinyLife.Objects.Furniture
      description: The object that is sat on a desk
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
      description: The corresponding chair, <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref> and the action spot&apos;s rotation, or default if there is none
    content.vb: Public Shared Function GetFreeChair(person As Person, deskObject As Furniture) As(Chair As Furniture, Spot As ActionSpot, Direction As Direction2)(Of Furniture , ActionSpot, Direction2)
  overload: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  id: GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  nameWithType: TypelessAction.GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func<MLEM.Misc.Direction2, System.Boolean>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeChairs
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 405
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nReturns a set of free chair furniture paired with an <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> and accessible direction.\nThis method is used by <xref href=\"TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person%2cTinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method will return the <code data-dev-comment-type=\"paramref\" class=\"paramref\">table</code> itself if it is a picnic-style table that has benches directly attached to it.\n"
  example: []
  syntax:
    content: public static IEnumerable<(Furniture Chair, ActionSpot Spot, Direction2 Direction)> GetFreeChairs(Person person, Furniture table, Func<Direction2, bool> canSitThisWay = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get the free chairs for
    - id: table
      type: TinyLife.Objects.Furniture
      description: The table that the chairs should be connected to
    - id: canSitThisWay
      type: System.Func{MLEM.Misc.Direction2,System.Boolean}
      description: A function that determines whether a person can sit the given way, or null to allow all seating directions
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
      description: A set of chairs, their action spots and their seating directions
    content.vb: Public Shared Function GetFreeChairs(person As Person, table As Furniture, canSitThisWay As Func(Of Direction2, Boolean) = Nothing) As IEnumerable(Of(Chair As Furniture, Spot As ActionSpot, Direction As Direction2)(Of Furniture , ActionSpot, Direction2))
  overload: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs*
  nameWithType.vb: TypelessAction.GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func(Of MLEM.Misc.Direction2, System.Boolean))
  name.vb: GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreePeople
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 431
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Person> FindAllFreePeople(Person person, ActionType type = null, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action we want to start
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of valid interaction partners
    content.vb: Public Shared Function FindAllFreePeople(person As Person, type As ActionType = Nothing, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Person)
  overload: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople*
  nameWithType.vb: TypelessAction.FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  id: FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeFurniture
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 456
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Furniture> FindAllFreeFurniture(Person person, ObjectCategory categories = null, FurnitureType objectSpotType = null, bool needsFreeActionSpot = true, Vector2? position = null, float? radius = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: needsFreeActionSpot
      type: System.Boolean
      description: Whether or not the furniture returned needs a non-occupied <xref href="TinyLife.Objects.ActionSpot" data-throw-if-not-resolved="false"></xref>
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for people in, or 32 by default
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of valid furniture
    content.vb: Public Shared Function FindAllFreeFurniture(person As Person, categories As ObjectCategory = Nothing, objectSpotType As FurnitureType = Nothing, needsFreeActionSpot As Boolean = True, position As Vector2? = Nothing, radius As Single? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As IEnumerable(Of Furniture)
  overload: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture*
  nameWithType.vb: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeWalls
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 474
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method to find a set of all <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently valid for interaction with the passed <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Wall> FindAllFreeWalls(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the walls should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for walls in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
      description: A set of valid walls
    content.vb: Public Shared Function FindAllFreeWalls(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Wall)
  overload: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls*
  nameWithType.vb: TypelessAction.FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  id: FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindAllFreeGround
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 489
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method to find a set of all positions on the ground that are currently valid for interaction\n"
  example: []
  syntax:
    content: public static IEnumerable<Point> FindAllFreeGround(Person person, Vector2? position = null, float? radius = null, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that the ground should be around, or null to use the <code data-dev-comment-type="paramref" class="paramref">person</code>&apos;s position
    - id: radius
      type: System.Nullable{System.Single}
      description: The radius that should be searched for ground positions in, or 32 by default
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
      description: A set of valid locations
    content.vb: Public Shared Function FindAllFreeGround(person As Person, position As Vector2? = Nothing, radius As Single? = Nothing, ignoreVisibility As Boolean = False) As IEnumerable(Of Point)
  overload: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround*
  nameWithType.vb: TypelessAction.FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
- uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  id: FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindFreeFurniture
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 507
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method to find the best <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> instance to interact with based on the given data.\nNote that this method always returns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> related to the first result from <xref href=\"TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory%2cTinyLife.Objects.FurnitureType%2cSystem.Boolean%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Vector2%7d%2cSystem.Nullable%7bSystem.Single%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionInfo FindFreeFurniture(Person person, ObjectCategory categories, FurnitureType objectSpotType = null, Vector2? position = null, bool allowBroken = false, bool ignoreVisibility = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that wants to start the aciton
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that the furniture should have
    - id: objectSpotType
      type: TinyLife.Objects.FurnitureType
      description: The type of item that an object spot should be available for, or null if this is not required
    - id: position
      type: System.Nullable{Microsoft.Xna.Framework.Vector2}
      description: The position that we should find people around, or null to use the passed person&apos;s position
    - id: allowBroken
      type: System.Boolean
      description: Whether furniture that is <xref href="TinyLife.Objects.BreakableFurniture.Broken" data-throw-if-not-resolved="false"></xref> can be returned
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether the visibility (<xref href="TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)" data-throw-if-not-resolved="false"></xref>) of the object&apos;s lot should be ignored, or false by default
    return:
      type: TinyLife.Actions.ActionInfo
      description: An action info for the best furniture, or null if there is none
    content.vb: Public Shared Function FindFreeFurniture(person As Person, categories As ObjectCategory, objectSpotType As FurnitureType = Nothing, position As Vector2? = Nothing, allowBroken As Boolean = False, ignoreVisibility As Boolean = False) As ActionInfo
  overload: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture*
  nameWithType.vb: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
- uid: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  id: GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: TypelessAction.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTableSpot
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 519
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nA helper method that returns the <xref href=\"TinyLife.Objects.ObjectSpot\" data-throw-if-not-resolved=\"false\"></xref> on the table or desk that the given chair is connected to.\nThis is the object spot that should be used for interaction if a person sits on the given chair.\n"
  example: []
  syntax:
    content: public static (Furniture Table, ObjectSpot Spot) GetTableSpot(Furniture chair, ActionSpot actionSpot = null)
    parameters:
    - id: chair
      type: TinyLife.Objects.Furniture
      description: The chair to get the table spot for
    - id: actionSpot
      type: TinyLife.Objects.ActionSpot
      description: The action spot on the <code data-dev-comment-type="paramref" class="paramref">chair</code> to get the table spot for
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
      description: The table spot, or null if there is none
    content.vb: Public Shared Function GetTableSpot(chair As Furniture, actionSpot As ActionSpot = Nothing) As(Table As Furniture, Spot As ObjectSpot)(Of Furniture , ObjectSpot)
  overload: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  id: InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.Typeless.TypelessAction
  langs:
  - csharp
  - vb
  name: InvokeForBoth(Person, Person, Action<Person, Person>)
  nameWithType: TypelessAction.InvokeForBoth(Person, Person, Action<Person, Person>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Typeless/TypelessAction.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InvokeForBoth
    path: ../TinyLife/Actions/Typeless/TypelessAction.cs
    startLine: 536
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Typeless
  summary: "\nInvokes the given action for two people while passing both of them, first as the main, and then as the second, parameter to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code>.\nThis method is used by <xref href=\"TinyLife.Actions.SocialAction.InvokeForBoth(System.Action%7bTinyLife.Objects.Person%2cTinyLife.Objects.Person%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void InvokeForBoth(Person person, Person other, Action<Person, Person> action)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The first person.
    - id: other
      type: TinyLife.Objects.Person
      description: The second person.
    - id: action
      type: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
      description: The action to invoke for both people passed.
    content.vb: Public Shared Sub InvokeForBoth(person As Person, other As Person, action As Action(Of Person, Person))
  overload: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth*
  nameWithType.vb: TypelessAction.InvokeForBoth(Person, Person, Action(Of Person, Person))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Person, Person, Action(Of Person, Person))
references:
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler
  commentId: T:TinyLife.Actions.Handlers.UnderlyingActionHandler
  name: UnderlyingActionHandler
  nameWithType: UnderlyingActionHandler
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  parent: TinyLife.Actions.Handlers
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<TypelessAction>()
  nameWithType: Extensions.JsonCopy<TypelessAction>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Typeless.TypelessAction>()
  nameWithType.vb: Extensions.JsonCopy(Of TypelessAction)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Typeless.TypelessAction)()
  name.vb: JsonCopy(Of TypelessAction)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<TypelessAction>
    nameWithType: Extensions.JsonCopy<TypelessAction>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Typeless.TypelessAction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of TypelessAction)
    nameWithType: Extensions.JsonCopy(Of TypelessAction)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Typeless.TypelessAction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Typeless.TypelessAction.Random
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.Random
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Random
  nameWithType: TypelessAction.Random
  fullName: TinyLife.Actions.Typeless.TypelessAction.Random
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  name: IsUnderlying
  nameWithType: TypelessAction.IsUnderlying
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
- uid: TinyLife.Actions.Typeless.TypelessAction.Map
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Map
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Map
  nameWithType: TypelessAction.Map
  fullName: TinyLife.Actions.Typeless.TypelessAction.Map
- uid: TinyLife.Actions.Typeless.TypelessAction.Map*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Map
  name: Map
  nameWithType: TypelessAction.Map
  fullName: TinyLife.Actions.Typeless.TypelessAction.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Actions.Typeless.TypelessAction.Person
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Person
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Person
  nameWithType: TypelessAction.Person
  fullName: TinyLife.Actions.Typeless.TypelessAction.Person
- uid: TinyLife.Actions.Typeless.TypelessAction.Person*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Person
  name: Person
  nameWithType: TypelessAction.Person
  fullName: TinyLife.Actions.Typeless.TypelessAction.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  name: ElapsedTime
  nameWithType: TypelessAction.ElapsedTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  nameWithType: TypelessAction.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>)
  nameWithType.vb: TypelessAction.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)))
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
    name: OpenPlayerPrompt
    nameWithType: TypelessAction.OpenPlayerPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
    name: OpenPlayerPrompt
    nameWithType: TypelessAction.OpenPlayerPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  name: PlayerPromptOpen
  nameWithType: TypelessAction.PlayerPromptOpen
  fullName: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: ElapsedTime
  nameWithType: TypelessAction.ElapsedTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
- uid: TinyLife.Actions.Typeless.TypelessAction.InProgressTime*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  name: InProgressTime
  nameWithType: TypelessAction.InProgressTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.InProgressTime
- uid: TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.InProgressTime
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: InProgressTime
  nameWithType: TypelessAction.InProgressTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.InProgressTime
- uid: System.TimeSpan.Zero
  commentId: F:System.TimeSpan.Zero
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  name: FullyInProgress
  nameWithType: TypelessAction.FullyInProgress
  fullName: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
- uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: IsCompleted()
  nameWithType: TypelessAction.IsCompleted()
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CompletionType.Failed
  commentId: F:TinyLife.Actions.CompletionType.Failed
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: TypelessAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: TypelessAction.Update
    fullName: TinyLife.Actions.Typeless.TypelessAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: TypelessAction.Update
    fullName: TinyLife.Actions.Typeless.TypelessAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.#ctor*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.#ctor
  name: TypelessAction
  nameWithType: TypelessAction.TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction.TypelessAction
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentActions
  commentId: F:TinyLife.Objects.Person.CurrentActions
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.Initialize*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Initialize
  name: Initialize
  nameWithType: TypelessAction.Initialize
  fullName: TinyLife.Actions.Typeless.TypelessAction.Initialize
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.Update*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Update
  name: Update
  nameWithType: TypelessAction.Update
  fullName: TinyLife.Actions.Typeless.TypelessAction.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: MLEM.Animations.SpriteAnimation.Completed
  commentId: T:MLEM.Animations.SpriteAnimation.Completed
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: OnCompleted(CompletionType)
  nameWithType: TypelessAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: TypelessAction.OnCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: TypelessAction.OnCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.ForceFail
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.ForceFail
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: ForceFail
  nameWithType: TypelessAction.ForceFail
  fullName: TinyLife.Actions.Typeless.TypelessAction.ForceFail
- uid: TinyLife.Actions.CompletionType.Active
  commentId: F:TinyLife.Actions.CompletionType.Active
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  name: IsCompleted
  nameWithType: TypelessAction.IsCompleted
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Typeless.TypelessAction.OnCompleted*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.OnCompleted
  name: OnCompleted
  nameWithType: TypelessAction.OnCompleted
  fullName: TinyLife.Actions.Typeless.TypelessAction.OnCompleted
- uid: TinyLife.Actions.Typeless.TypelessAction.Validate*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Validate
  name: Validate
  nameWithType: TypelessAction.Validate
  fullName: TinyLife.Actions.Typeless.TypelessAction.Validate
- uid: TinyLife.Actions.ActionType.QuitJob
  commentId: F:TinyLife.Actions.ActionType.QuitJob
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: PlayerPromptOpen
  nameWithType: TypelessAction.PlayerPromptOpen
  fullName: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
  name: OpenPlayerPrompt
  nameWithType: TypelessAction.OpenPlayerPrompt
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Predicate{MLEM.Ui.Elements.Panel}
  commentId: T:System.Predicate{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Panel>
  nameWithType: Predicate<Panel>
  fullName: System.Predicate<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Predicate(Of Panel)
  fullName.vb: System.Predicate(Of MLEM.Ui.Elements.Panel)
  name.vb: Predicate(Of Panel)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{MLEM.Ui.Elements.Panel}
  commentId: T:System.Action{MLEM.Ui.Elements.Panel}
  parent: System
  definition: System.Action`1
  name: Action<Panel>
  nameWithType: Action<Panel>
  fullName: System.Action<MLEM.Ui.Elements.Panel>
  nameWithType.vb: Action(Of Panel)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Panel)
  name.vb: Action(Of Panel)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
  commentId: T:System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}}
  parent: System
  definition: System.Func`2
  name: Func<CoveringGroup, IEnumerable<Element>>
  nameWithType: Func<CoveringGroup, IEnumerable<Element>>
  fullName: System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>
  nameWithType.vb: Func(Of CoveringGroup, IEnumerable(Of Element))
  fullName.vb: System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element))
  name.vb: Func(Of CoveringGroup, IEnumerable(Of Element))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.CoveringGroup
  commentId: T:TinyLife.Uis.CoveringGroup
  parent: TinyLife.Uis
  name: CoveringGroup
  nameWithType: CoveringGroup
  fullName: TinyLife.Uis.CoveringGroup
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt
  name: OpenYesNoPrompt
  nameWithType: TypelessAction.OpenYesNoPrompt
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: MLEM.Ui.Elements.TextField
  commentId: T:MLEM.Ui.Elements.TextField
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
  name: OpenTextPrompt
  nameWithType: TypelessAction.OpenTextPrompt
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  name: Action<String>
  nameWithType: Action<String>
  fullName: System.Action<System.String>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of System.String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{System.String}
  commentId: T:System.Predicate{System.String}
  parent: System
  definition: System.Predicate`1
  name: Predicate<String>
  nameWithType: Predicate<String>
  fullName: System.Predicate<System.String>
  nameWithType.vb: Predicate(Of String)
  fullName.vb: System.Predicate(Of System.String)
  name.vb: Predicate(Of String)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Ui.Elements.TextField.Rule
  commentId: T:MLEM.Ui.Elements.TextField.Rule
  parent: MLEM.Ui.Elements
  isExternal: true
  name: TextField.Rule
  nameWithType: TextField.Rule
  fullName: MLEM.Ui.Elements.TextField.Rule
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Actions.ActionType.PracticeJokes
  commentId: F:TinyLife.Actions.ActionType.PracticeJokes
  isExternal: true
- uid: TinyLife.Actions.ActionType.PracticeSpeech
  commentId: F:TinyLife.Actions.ActionType.PracticeSpeech
  isExternal: true
- uid: System.Int32.MaxValue
  commentId: F:System.Int32.MaxValue
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.SpeakAlone
  name: SpeakAlone
  nameWithType: TypelessAction.SpeakAlone
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  parent: TinyLife.Actions.SocialAction
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation
  name: SpeakInConversation
  nameWithType: TypelessAction.SpeakInConversation
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation
- uid: System.Nullable{TinyLife.Actions.EmoteCategory}
  commentId: T:System.Nullable{TinyLife.Actions.EmoteCategory}
  parent: System
  definition: System.Nullable`1
  name: Nullable<EmoteCategory>
  nameWithType: Nullable<EmoteCategory>
  fullName: System.Nullable<TinyLife.Actions.EmoteCategory>
  nameWithType.vb: Nullable(Of EmoteCategory)
  fullName.vb: System.Nullable(Of TinyLife.Actions.EmoteCategory)
  name.vb: Nullable(Of EmoteCategory)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{TinyLife.Objects.SpeakStyle}
  commentId: T:System.Nullable{TinyLife.Objects.SpeakStyle}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SpeakStyle>
  nameWithType: Nullable<SpeakStyle>
  fullName: System.Nullable<TinyLife.Objects.SpeakStyle>
  nameWithType.vb: Nullable(Of SpeakStyle)
  fullName.vb: System.Nullable(Of TinyLife.Objects.SpeakStyle)
  name.vb: Nullable(Of SpeakStyle)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.CompleteInTime
  name: CompleteInTime
  nameWithType: TypelessAction.CompleteInTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
- uid: TinyLife.Need.Max
  commentId: F:TinyLife.Need.Max
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull
  name: CompleteIfNeedFull
  nameWithType: TypelessAction.CompleteIfNeedFull
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Actions.PrepareFoodAction
  commentId: T:TinyLife.Actions.PrepareFoodAction
  isExternal: true
- uid: TinyLife.Actions.CookFoodAction
  commentId: T:TinyLife.Actions.CookFoodAction
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo
  name: PutDownOrGoTo
  nameWithType: TypelessAction.PutDownOrGoTo
  fullName: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.FurnitureType[]
  isExternal: true
  name: FurnitureType[]
  nameWithType: FurnitureType[]
  fullName: TinyLife.Objects.FurnitureType[]
  nameWithType.vb: FurnitureType()
  fullName.vb: TinyLife.Objects.FurnitureType()
  name.vb: FurnitureType()
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection
  name: GetPlaceDirection
  nameWithType: TypelessAction.GetPlaceDirection
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection
- uid: TinyLife.Objects.Person.CurrentPose
  commentId: F:TinyLife.Objects.Person.CurrentPose
  isExternal: true
- uid: TinyLife.Objects.Person.Pose.Sitting
  commentId: F:TinyLife.Objects.Person.Pose.Sitting
  isExternal: true
- uid: TinyLife.NeedType.Energy
  commentId: F:TinyLife.NeedType.Energy
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.Sit*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.Sit
  name: Sit
  nameWithType: TypelessAction.Sit
  fullName: TinyLife.Actions.Typeless.TypelessAction.Sit
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.ObjectCategory.Chair
  commentId: F:TinyLife.Objects.ObjectCategory.Chair
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: Sit(Person, Furniture, Single, ActionSpot)
  nameWithType: TypelessAction.Sit(Person, Furniture, Single, ActionSpot)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Single, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: TypelessAction.Sit
    fullName: TinyLife.Actions.Typeless.TypelessAction.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: TypelessAction.Sit
    fullName: TinyLife.Actions.Typeless.TypelessAction.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
  name: GetFreeChair
  nameWithType: TypelessAction.GetFreeChair
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Furniture, ActionSpot, Direction2>
  nameWithType: (T1, T2, T3)<Furniture, ActionSpot, Direction2>
  fullName: System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2>
  nameWithType.vb: (T1, T2, T3)(Of Furniture, ActionSpot, Direction2)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2)
  name.vb: (T1, T2, T3)(Of Furniture, ActionSpot, Direction2)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: GetFreeChair(Person, Furniture)
  nameWithType: TypelessAction.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: TypelessAction.GetFreeChair
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: TypelessAction.GetFreeChair
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs
  name: GetFreeChairs
  nameWithType: TypelessAction.GetFreeChairs
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs
- uid: System.Func{MLEM.Misc.Direction2,System.Boolean}
  commentId: T:System.Func{MLEM.Misc.Direction2,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Direction2, Boolean>
  nameWithType: Func<Direction2, Boolean>
  fullName: System.Func<MLEM.Misc.Direction2, System.Boolean>
  nameWithType.vb: Func(Of Direction2, Boolean)
  fullName.vb: System.Func(Of MLEM.Misc.Direction2, System.Boolean)
  name.vb: Func(Of Direction2, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,MLEM.Misc.Direction2}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2, T3)<Furniture, ActionSpot, Direction2>>
  nameWithType: IEnumerable<(T1, T2, T3)<Furniture, ActionSpot, Direction2>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2>>
  nameWithType.vb: IEnumerable(Of (T1, T2, T3)(Of Furniture, ActionSpot, Direction2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, MLEM.Misc.Direction2))
  name.vb: IEnumerable(Of (T1, T2, T3)(Of Furniture, ActionSpot, Direction2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople
  name: FindAllFreePeople
  nameWithType: TypelessAction.FindAllFreePeople
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople
- uid: System.Nullable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Vector2>
  nameWithType: Nullable<Vector2>
  fullName: System.Nullable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: Nullable(Of Vector2)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: Nullable(Of Vector2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.BreakableFurniture.Broken
  commentId: F:TinyLife.Objects.BreakableFurniture.Broken
  parent: TinyLife.Objects.BreakableFurniture
  name: Broken
  nameWithType: BreakableFurniture.Broken
  fullName: TinyLife.Objects.BreakableFurniture.Broken
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
  name: FindAllFreeFurniture
  nameWithType: TypelessAction.FindAllFreeFurniture
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls
  name: FindAllFreeWalls
  nameWithType: TypelessAction.FindAllFreeWalls
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Wall>
  nameWithType: IEnumerable<Wall>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Wall>
  nameWithType.vb: IEnumerable(Of Wall)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Wall)
  name.vb: IEnumerable(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround
  name: FindAllFreeGround
  nameWithType: TypelessAction.FindAllFreeGround
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  nameWithType.vb: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: TypelessAction.FindAllFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: TypelessAction.FindAllFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
  name: FindFreeFurniture
  nameWithType: TypelessAction.FindFreeFurniture
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
- uid: TinyLife.Objects.ObjectSpot
  commentId: T:TinyLife.Objects.ObjectSpot
  parent: TinyLife.Objects
  name: ObjectSpot
  nameWithType: ObjectSpot
  fullName: TinyLife.Objects.ObjectSpot
- uid: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.GetTableSpot
  name: GetTableSpot
  nameWithType: TypelessAction.GetTableSpot
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ObjectSpot}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Furniture, ObjectSpot>
  nameWithType: (T1, T2)<Furniture, ObjectSpot>
  fullName: System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot>
  nameWithType.vb: (T1, T2)(Of Furniture, ObjectSpot)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ObjectSpot)
  name.vb: (T1, T2)(Of Furniture, ObjectSpot)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectSpot
    name: ObjectSpot
    nameWithType: ObjectSpot
    fullName: TinyLife.Objects.ObjectSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.SocialAction
  isExternal: true
  name: InvokeForBoth(Action<Person, Person>)
  nameWithType: SocialAction.InvokeForBoth(Action<Person, Person>)
  fullName: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  nameWithType.vb: SocialAction.InvokeForBoth(Action(Of Person, Person))
  fullName.vb: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Action(Of Person, Person))
  spec.csharp:
  - uid: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: SocialAction.InvokeForBoth
    fullName: TinyLife.Actions.SocialAction.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: SocialAction.InvokeForBoth
    fullName: TinyLife.Actions.SocialAction.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth*
  commentId: Overload:TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth
  name: InvokeForBoth
  nameWithType: TypelessAction.InvokeForBoth
  fullName: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth
- uid: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  parent: System
  definition: System.Action`2
  name: Action<Person, Person>
  nameWithType: Action<Person, Person>
  fullName: System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>
  nameWithType.vb: Action(Of Person, Person)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person)
  name.vb: Action(Of Person, Person)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )

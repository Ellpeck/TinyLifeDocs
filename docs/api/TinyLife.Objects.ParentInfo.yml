### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  id: ParentInfo
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Person)
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  - TinyLife.Objects.ParentInfo.IsAttached
  - TinyLife.Objects.ParentInfo.LayerDepth
  - TinyLife.Objects.ParentInfo.ShouldDraw
  langs:
  - csharp
  - vb
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
  type: Struct
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 749
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA parent info is a set of information used by <xref href=\"TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Object%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Textures.TextureRegion%2cMicrosoft.Xna.Framework.Color%2cSystem.Single%2cMicrosoft.Xna.Framework.Point%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d%2cSystem.Boolean%2cTinyLife.Objects.ParentInfo%2cSystem.Single%2cMicrosoft.Xna.Framework.Graphics.SpriteEffects%2cSystem.Boolean%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> that allows for objects to be made to look like they&apos;re attached to another object.\nCurrently, <xref href=\"TinyLife.Objects.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> supports <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> parents.\n"
  example: []
  syntax:
    content: public readonly struct ParentInfo
    content.vb: Public Structure ParentInfo
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.ParentInfo.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Objects.ParentInfo.IsAttached
  commentId: P:TinyLife.Objects.ParentInfo.IsAttached
  id: IsAttached
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: IsAttached
  nameWithType: ParentInfo.IsAttached
  fullName: TinyLife.Objects.ParentInfo.IsAttached
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsAttached
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 754
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this parent info is valid, meaning it represents an existing attachment to an object.\n"
  example: []
  syntax:
    content: public bool IsAttached { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAttached As Boolean
  overload: TinyLife.Objects.ParentInfo.IsAttached*
- uid: TinyLife.Objects.ParentInfo.LayerDepth
  commentId: P:TinyLife.Objects.ParentInfo.LayerDepth
  id: LayerDepth
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: LayerDepth
  nameWithType: ParentInfo.LayerDepth
  fullName: TinyLife.Objects.ParentInfo.LayerDepth
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LayerDepth
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 759
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the layer depth that objects with this parent info should be displayed with.\nThis results in objects in shelves and on tables being &quot;squished&quot; in terms of depth calculations so that higher shelf levels don&apos;t intersect.\n"
  example: []
  syntax:
    content: public float LayerDepth { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property LayerDepth As Single
  overload: TinyLife.Objects.ParentInfo.LayerDepth*
- uid: TinyLife.Objects.ParentInfo.ShouldDraw
  commentId: P:TinyLife.Objects.ParentInfo.ShouldDraw
  id: ShouldDraw
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ShouldDraw
  nameWithType: ParentInfo.ShouldDraw
  fullName: TinyLife.Objects.ParentInfo.ShouldDraw
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldDraw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 763
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether the object with this parent info should be drawn. This value is determined by the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that is holding the object.\n"
  example: []
  syntax:
    content: public bool ShouldDraw { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ShouldDraw As Boolean
  overload: TinyLife.Objects.ParentInfo.ShouldDraw*
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Person)
  id: '#ctor(TinyLife.Objects.Person)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Person)
  nameWithType: ParentInfo.ParentInfo(Person)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.Objects.Person)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 775
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Person holdingPerson)
    parameters:
    - id: holdingPerson
      type: TinyLife.Objects.Person
      description: The person to be attached to.
    content.vb: Public Sub New(holdingPerson As Person)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  nameWithType.vb: ParentInfo.New(Person)
  fullName.vb: TinyLife.Objects.ParentInfo.New(TinyLife.Objects.Person)
  name.vb: New(Person)
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  id: '#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Furniture, AbstractSpot)
  nameWithType: ParentInfo.ParentInfo(Furniture, AbstractSpot)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 784
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Furniture furniture, AbstractSpot spot)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture to be attached to.
    - id: spot
      type: TinyLife.Objects.AbstractSpot
      description: The spot to be attached to.
    content.vb: Public Sub New(furniture As Furniture, spot As AbstractSpot)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  nameWithType.vb: ParentInfo.New(Furniture, AbstractSpot)
  fullName.vb: TinyLife.Objects.ParentInfo.New(TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot)
  name.vb: New(Furniture, AbstractSpot)
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  id: '#ctor(TinyLife.World.Wall)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Wall)
  nameWithType: ParentInfo.ParentInfo(Wall)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.World.Wall)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 793
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Wall wall)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
      description: The wall to be attached to.
    content.vb: Public Sub New(wall As Wall)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  nameWithType.vb: ParentInfo.New(Wall)
  fullName.vb: TinyLife.Objects.ParentInfo.New(TinyLife.World.Wall)
  name.vb: New(Wall)
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  id: '#ctor(TinyLife.World.Roof)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Roof)
  nameWithType: ParentInfo.ParentInfo(Roof)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.World.Roof)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 801
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to be attached to.
    content.vb: Public Sub New(roof As Roof)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  nameWithType.vb: ParentInfo.New(Roof)
  fullName.vb: TinyLife.Objects.ParentInfo.New(TinyLife.World.Roof)
  name.vb: New(Roof)
references:
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  nameWithType: MapObject.DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<StaticSpriteBatch.Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, float, Microsoft.Xna.Framework.Point, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, bool, TinyLife.Objects.ParentInfo, float, Microsoft.Xna.Framework.Graphics.SpriteEffects, bool, bool, bool)
  nameWithType.vb: MapObject.DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, Single, Microsoft.Xna.Framework.Point, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, TinyLife.Objects.ParentInfo, Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, Boolean, Boolean, Boolean)
  name.vb: DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  parent: TinyLife.Objects
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Objects.ParentInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ParentInfo>(ParentInfo)
  nameWithType: Extensions.JsonCopy<ParentInfo>(ParentInfo)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ParentInfo>(TinyLife.Objects.ParentInfo)
  nameWithType.vb: Extensions.JsonCopy(Of ParentInfo)(ParentInfo)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ParentInfo)(TinyLife.Objects.ParentInfo)
  name.vb: JsonCopy(Of ParentInfo)(ParentInfo)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.ParentInfo)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.ParentInfo)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: )
  - name: (
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Objects.ParentInfo.IsAttached*
  commentId: Overload:TinyLife.Objects.ParentInfo.IsAttached
  name: IsAttached
  nameWithType: ParentInfo.IsAttached
  fullName: TinyLife.Objects.ParentInfo.IsAttached
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.ParentInfo.LayerDepth*
  commentId: Overload:TinyLife.Objects.ParentInfo.LayerDepth
  name: LayerDepth
  nameWithType: ParentInfo.LayerDepth
  fullName: TinyLife.Objects.ParentInfo.LayerDepth
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.ParentInfo.ShouldDraw*
  commentId: Overload:TinyLife.Objects.ParentInfo.ShouldDraw
  name: ShouldDraw
  nameWithType: ParentInfo.ShouldDraw
  fullName: TinyLife.Objects.ParentInfo.ShouldDraw
- uid: TinyLife.Objects.ParentInfo.#ctor*
  commentId: Overload:TinyLife.Objects.ParentInfo.#ctor
  name: ParentInfo
  nameWithType: ParentInfo.ParentInfo
  fullName: TinyLife.Objects.ParentInfo.ParentInfo
  nameWithType.vb: ParentInfo.New
  fullName.vb: TinyLife.Objects.ParentInfo.New
  name.vb: New
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot

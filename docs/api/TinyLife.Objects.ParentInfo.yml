### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  id: ParentInfo
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  - TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  - TinyLife.Objects.ParentInfo.IsAttached
  langs:
  - csharp
  - vb
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
  type: Struct
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 632
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA parent info is a set of information used by <xref href=\"TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Textures.TextureRegion%2cColor%2cSystem.Single%2cPoint%2cSystem.Boolean%2cTinyLife.Objects.ParentInfo%2cSystem.Single%2cSpriteEffects%2cSystem.Boolean%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> that allows for objects to be made to look like they&apos;re attached to another object.\nCurrently, <xref href=\"TinyLife.Objects.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> supports <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> parents.\n"
  example: []
  syntax:
    content: public readonly struct ParentInfo
    content.vb: Public Structure ParentInfo
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.ParentInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Objects.ParentInfo.IsAttached
  commentId: P:TinyLife.Objects.ParentInfo.IsAttached
  id: IsAttached
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: IsAttached
  nameWithType: ParentInfo.IsAttached
  fullName: TinyLife.Objects.ParentInfo.IsAttached
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsAttached
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 637
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this parent info is valid, meaning it represents an existing attachment to an object.\n"
  example: []
  syntax:
    content: public readonly bool IsAttached { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAttached As Boolean
  overload: TinyLife.Objects.ParentInfo.IsAttached*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)
  id: '#ctor(TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Furniture, AbstractSpot)
  nameWithType: ParentInfo.ParentInfo(Furniture, AbstractSpot)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 649
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Furniture furniture, AbstractSpot spot)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture to be attached to.
    - id: spot
      type: TinyLife.Objects.AbstractSpot
      description: The spot to be attached to.
    content.vb: Public Sub New(furniture As Furniture, spot As AbstractSpot)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Wall)
  id: '#ctor(TinyLife.World.Wall)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Wall)
  nameWithType: ParentInfo.ParentInfo(Wall)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.World.Wall)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 658
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Wall wall)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
      description: The wall to be attached to.
    content.vb: Public Sub New(wall As Wall)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  commentId: M:TinyLife.Objects.ParentInfo.#ctor(TinyLife.World.Roof)
  id: '#ctor(TinyLife.World.Roof)'
  parent: TinyLife.Objects.ParentInfo
  langs:
  - csharp
  - vb
  name: ParentInfo(Roof)
  nameWithType: ParentInfo.ParentInfo(Roof)
  fullName: TinyLife.Objects.ParentInfo.ParentInfo(TinyLife.World.Roof)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 666
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new parent info from the given parent.\n"
  example: []
  syntax:
    content: public ParentInfo(Roof roof)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to be attached to.
    content.vb: Public Sub New(roof As Roof)
  overload: TinyLife.Objects.ParentInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Color,System.Single,Point,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Color,System.Single,Point,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  nameWithType: MapObject.DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, SpriteBatch, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Color, System.Single, Point, System.Boolean, TinyLife.Objects.ParentInfo, System.Single, SpriteEffects, System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Color,System.Single,Point,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Point
    name: Point
    nameWithType: Point
    fullName: Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    nameWithType: ParentInfo
    fullName: TinyLife.Objects.ParentInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Color,System.Single,Point,System.Boolean,TinyLife.Objects.ParentInfo,System.Single,SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Point
    name: Point
    nameWithType: Point
    fullName: Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    nameWithType: ParentInfo
    fullName: TinyLife.Objects.ParentInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  parent: TinyLife.Objects
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ParentInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ParentInfo>()
  nameWithType: Extensions.JsonCopy<ParentInfo>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ParentInfo>()
  nameWithType.vb: Extensions.JsonCopy(Of ParentInfo)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ParentInfo)()
  name.vb: JsonCopy(Of ParentInfo)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ParentInfo>
    nameWithType: Extensions.JsonCopy<ParentInfo>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ParentInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ParentInfo)
    nameWithType: Extensions.JsonCopy(Of ParentInfo)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ParentInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.ParentInfo.IsAttached*
  commentId: Overload:TinyLife.Objects.ParentInfo.IsAttached
  name: IsAttached
  nameWithType: ParentInfo.IsAttached
  fullName: TinyLife.Objects.ParentInfo.IsAttached
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.ParentInfo.#ctor*
  commentId: Overload:TinyLife.Objects.ParentInfo.#ctor
  name: ParentInfo
  nameWithType: ParentInfo.ParentInfo
  fullName: TinyLife.Objects.ParentInfo.ParentInfo
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot

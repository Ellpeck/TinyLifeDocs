### YamlMime:ManagedReference
items:
- uid: TinyLife.Tools.RemoveTool
  commentId: T:TinyLife.Tools.RemoveTool
  id: RemoveTool
  parent: TinyLife.Tools
  children:
  - TinyLife.Tools.RemoveTool.#ctor
  - TinyLife.Tools.RemoveTool.CanUndoRedo
  - TinyLife.Tools.RemoveTool.Draw(GameTime,SpriteBatch)
  - TinyLife.Tools.RemoveTool.GetMouseCursor
  - TinyLife.Tools.RemoveTool.PlayDestroySound
  - TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  - TinyLife.Tools.RemoveTool.RemoveRoof(TinyLife.World.Roof,TinyLife.Tools.UndoableAction,System.Nullable{Rectangle})
  - TinyLife.Tools.RemoveTool.RemoveWall(TinyLife.World.Wall,TinyLife.Tools.UndoableAction)
  - TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject
  - TinyLife.Tools.RemoveTool.SpawnDestroyParticles(MLEM.Misc.RectangleF,System.Single,System.ValueTuple{MLEM.Textures.TextureRegion,Color}[])
  - TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  - TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  - TinyLife.Tools.RemoveTool.Update(GameTime)
  langs:
  - csharp
  - vb
  name: RemoveTool
  nameWithType: RemoveTool
  fullName: TinyLife.Tools.RemoveTool
  type: Class
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveTool
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nA tool is a type of game mode that is currently active.\nTools are split up into the <xref href=\"TinyLife.Tools.Tool.PlayModeTool\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Tools.Tool.BuildTools\" data-throw-if-not-resolved=\"false\"></xref>, the latter of which holds all tools that can be found in the build menu.\n"
  example: []
  syntax:
    content: 'public class RemoveTool : Tool'
    content.vb: >-
      Public Class RemoveTool
          Inherits Tool
  inheritance:
  - System.Object
  - TinyLife.Tools.Tool
  inheritedMembers:
  - TinyLife.Tools.Tool.RemoveTool
  - TinyLife.Tools.Tool.MoveTool
  - TinyLife.Tools.Tool.PlayModeTool
  - TinyLife.Tools.Tool.BuildTools
  - TinyLife.Tools.Tool.SelectedObject
  - TinyLife.Tools.Tool.SelectedWall
  - TinyLife.Tools.Tool.IsRotateCwPressed
  - TinyLife.Tools.Tool.IsRotateCcwPressed
  - TinyLife.Tools.Tool.IsCopyPressed
  - TinyLife.Tools.Tool.OnOpened
  - TinyLife.Tools.Tool.OnClosed
  - TinyLife.Tools.Tool.OnUpdate
  - TinyLife.Tools.Tool.OnDraw
  - TinyLife.Tools.Tool.OnInitBuildModeUi
  - TinyLife.Tools.Tool.Input
  - TinyLife.Tools.Tool.Map
  - TinyLife.Tools.Tool.Money
  - TinyLife.Tools.Tool.Texture
  - TinyLife.Tools.Tool.DisplayAsTab
  - TinyLife.Tools.Tool.MousePos
  - TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  - TinyLife.Tools.Tool.Opened
  - TinyLife.Tools.Tool.Closed
  - TinyLife.Tools.Tool.ForceWallsUp
  - TinyLife.Tools.Tool.CanSwitchGameModes
  - TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  - TinyLife.Tools.Tool.IsOnLot(Point)
  - TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  - TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  - TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Tools.RemoveTool.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Tools.RemoveTool.#ctor
  commentId: M:TinyLife.Tools.RemoveTool.#ctor
  id: '#ctor'
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: RemoveTool()
  nameWithType: RemoveTool.RemoveTool()
  fullName: TinyLife.Tools.RemoveTool.RemoveTool()
  type: Constructor
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  example: []
  syntax:
    content: public RemoveTool()
    content.vb: Public Sub New
  overload: TinyLife.Tools.RemoveTool.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Tools.RemoveTool.Update(GameTime)
  commentId: M:TinyLife.Tools.RemoveTool.Update(GameTime)
  id: Update(GameTime)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: RemoveTool.Update(GameTime)
  fullName: TinyLife.Tools.RemoveTool.Update(GameTime)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThis method is called every update frame for the <xref href=\"TinyLife.GameImpl.CurrentTool\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method updates the <xref href=\"TinyLife.Tools.Tool.MousePos\" data-throw-if-not-resolved=\"false\"></xref> and invokes <xref href=\"TinyLife.Tools.Tool.OnUpdate\" data-throw-if-not-resolved=\"false\"></xref>, and also manages the <xref href=\"TinyLife.Tools.UndoRedoStack\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void Update(GameTime time)
    parameters:
    - id: time
      type: GameTime
      description: The game&apos;s time
    content.vb: Public Overrides Sub Update(time As GameTime)
  overridden: TinyLife.Tools.Tool.Update(GameTime)
  overload: TinyLife.Tools.RemoveTool.Update*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Tools.RemoveTool.Draw(GameTime,SpriteBatch)
  commentId: M:TinyLife.Tools.RemoveTool.Draw(GameTime,SpriteBatch)
  id: Draw(GameTime,SpriteBatch)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch)
  nameWithType: RemoveTool.Draw(GameTime, SpriteBatch)
  fullName: TinyLife.Tools.RemoveTool.Draw(GameTime, SpriteBatch)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nThis method is called every draw frame for the <xref href=\"TinyLife.GameImpl.CurrentTool\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method is only called if the mouse is not hovering over any ui elements.\nBy default, this method invokes <xref href=\"TinyLife.Tools.Tool.OnDraw\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void Draw(GameTime time, SpriteBatch batch)
    parameters:
    - id: time
      type: GameTime
      description: The game&apos;s time
    - id: batch
      type: SpriteBatch
      description: The sprite batch used for drawing
    content.vb: Public Overrides Sub Draw(time As GameTime, batch As SpriteBatch)
  overridden: TinyLife.Tools.Tool.Draw(GameTime,SpriteBatch)
  overload: TinyLife.Tools.RemoveTool.Draw*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Tools.RemoveTool.GetMouseCursor
  commentId: M:TinyLife.Tools.RemoveTool.GetMouseCursor
  id: GetMouseCursor
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: GetMouseCursor()
  nameWithType: RemoveTool.GetMouseCursor()
  fullName: TinyLife.Tools.RemoveTool.GetMouseCursor()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMouseCursor
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns the <xref href=\"TinyLife.Uis.CursorType\" data-throw-if-not-resolved=\"false\"></xref> that this tool should currently display.\nBy default, <xref href=\"TinyLife.Uis.CursorType.Default\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public override CursorType GetMouseCursor()
    return:
      type: TinyLife.Uis.CursorType
      description: The cursor type
    content.vb: Public Overrides Function GetMouseCursor As CursorType
  overridden: TinyLife.Tools.Tool.GetMouseCursor
  overload: TinyLife.Tools.RemoveTool.GetMouseCursor*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Tools.RemoveTool.CanUndoRedo
  commentId: M:TinyLife.Tools.RemoveTool.CanUndoRedo
  id: CanUndoRedo
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: CanUndoRedo()
  nameWithType: RemoveTool.CanUndoRedo()
  fullName: TinyLife.Tools.RemoveTool.CanUndoRedo()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanUndoRedo
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 64
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nReturns whether or not the <xref href=\"TinyLife.Tools.UndoRedoStack\" data-throw-if-not-resolved=\"false\"></xref> can currently operate and thus, whether the <xref href=\"TinyLife.Tools.UndoRedoStack.Undo\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Tools.UndoRedoStack.Redo\" data-throw-if-not-resolved=\"false\"></xref> actions can be called.\n"
  example: []
  syntax:
    content: public override bool CanUndoRedo()
    return:
      type: System.Boolean
      description: Whether the undo or redo commands can be used right now.
    content.vb: Public Overrides Function CanUndoRedo As Boolean
  overridden: TinyLife.Tools.Tool.CanUndoRedo
  overload: TinyLife.Tools.RemoveTool.CanUndoRedo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject
  commentId: M:TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject
  id: ShouldHighlightSelectedObject
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: ShouldHighlightSelectedObject()
  nameWithType: RemoveTool.ShouldHighlightSelectedObject()
  fullName: TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldHighlightSelectedObject
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nWhether or not the <xref href=\"TinyLife.Tools.Tool.SelectedObject\" data-throw-if-not-resolved=\"false\"></xref> should currently have a white highlight around it.\nThis method defaults to return true if <xref href=\"TinyLife.GameImpl.IsCursorOnUi\" data-throw-if-not-resolved=\"false\"></xref> is false.\n"
  example: []
  syntax:
    content: public override bool ShouldHighlightSelectedObject()
    return:
      type: System.Boolean
      description: Whether or not the selected object should be highlighted
    content.vb: Public Overrides Function ShouldHighlightSelectedObject As Boolean
  overridden: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  overload: TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Tools.RemoveTool.RemoveRoof(TinyLife.World.Roof,TinyLife.Tools.UndoableAction,System.Nullable{Rectangle})
  commentId: M:TinyLife.Tools.RemoveTool.RemoveRoof(TinyLife.World.Roof,TinyLife.Tools.UndoableAction,System.Nullable{Rectangle})
  id: RemoveRoof(TinyLife.World.Roof,TinyLife.Tools.UndoableAction,System.Nullable{Rectangle})
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: RemoveRoof(Roof, UndoableAction, Nullable<Rectangle>)
  nameWithType: RemoveTool.RemoveRoof(Roof, UndoableAction, Nullable<Rectangle>)
  fullName: TinyLife.Tools.RemoveTool.RemoveRoof(TinyLife.World.Roof, TinyLife.Tools.UndoableAction, System.Nullable<Rectangle>)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveRoof
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 171
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nRemoves the given roof from the world, additionally removing any <xref href=\"TinyLife.Objects.ObjectCategory.CeilingHanging\" data-throw-if-not-resolved=\"false\"></xref> furniture below it and returning the money for the objects\n"
  example: []
  syntax:
    content: public static void RemoveRoof(Roof roof, UndoableAction action, Rectangle? newRoof = null)
    parameters:
    - id: roof
      type: TinyLife.World.Roof
      description: The roof to remove
    - id: action
      type: TinyLife.Tools.UndoableAction
      description: The undoable action that this method should add its actions to. If this method should be executed immediately, use the <xref href="TinyLife.Tools.UndoableAction" data-throw-if-not-resolved="false"></xref> immediate constructor.
    - id: newRoof
      type: System.Nullable{Rectangle}
      description: The area of a roof that replaces this one, or null if this roof is just being removed without a replacement.
    content.vb: Public Shared Sub RemoveRoof(roof As Roof, action As UndoableAction, newRoof As Rectangle? = Nothing)
  overload: TinyLife.Tools.RemoveTool.RemoveRoof*
  nameWithType.vb: RemoveTool.RemoveRoof(Roof, UndoableAction, Nullable(Of Rectangle))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Tools.RemoveTool.RemoveRoof(TinyLife.World.Roof, TinyLife.Tools.UndoableAction, System.Nullable(Of Rectangle))
  name.vb: RemoveRoof(Roof, UndoableAction, Nullable(Of Rectangle))
- uid: TinyLife.Tools.RemoveTool.RemoveWall(TinyLife.World.Wall,TinyLife.Tools.UndoableAction)
  commentId: M:TinyLife.Tools.RemoveTool.RemoveWall(TinyLife.World.Wall,TinyLife.Tools.UndoableAction)
  id: RemoveWall(TinyLife.World.Wall,TinyLife.Tools.UndoableAction)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: RemoveWall(Wall, UndoableAction)
  nameWithType: RemoveTool.RemoveWall(Wall, UndoableAction)
  fullName: TinyLife.Tools.RemoveTool.RemoveWall(TinyLife.World.Wall, TinyLife.Tools.UndoableAction)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveWall
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 194
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nRemoves the given wall from the world, additionally removing any hanging <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and adding the required amount of <xref href=\"TinyLife.Tools.Tool.Money\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static void RemoveWall(Wall wall, UndoableAction action)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
      description: The wall to remove
    - id: action
      type: TinyLife.Tools.UndoableAction
      description: The undoable action that this method should add its actions to. If this method should be executed immediately, use the <xref href="TinyLife.Tools.UndoableAction" data-throw-if-not-resolved="false"></xref> immediate constructor.
    content.vb: Public Shared Sub RemoveWall(wall As Wall, action As UndoableAction)
  overload: TinyLife.Tools.RemoveTool.RemoveWall*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  commentId: M:TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  id: RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: RemoveFurniture(Furniture, UndoableAction)
  nameWithType: RemoveTool.RemoveFurniture(Furniture, UndoableAction)
  fullName: TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture, TinyLife.Tools.UndoableAction)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveFurniture
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nRemoves the given furniture from the world, additionally removing all of its <xref href=\"TinyLife.Objects.Furniture.GetChildren%60%601\" data-throw-if-not-resolved=\"false\"></xref> and adding the required amount of <xref href=\"TinyLife.Tools.Tool.Money\" data-throw-if-not-resolved=\"false\"></xref>\nNote that the furniture&apos;s parent-child relationships are not edited or removed, so <xref href=\"TinyLife.Objects.Furniture.UnlinkParentsAndChildren\" data-throw-if-not-resolved=\"false\"></xref> should be called if the furniture is added into a household storage or similar.\n"
  example: []
  syntax:
    content: public static bool RemoveFurniture(Furniture furniture, UndoableAction action)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture item to remove
    - id: action
      type: TinyLife.Tools.UndoableAction
      description: The undoable action that this method should add its actions to. If this method should be executed immediately, use the <xref href="TinyLife.Tools.UndoableAction" data-throw-if-not-resolved="false"></xref> immediate constructor.
    return:
      type: System.Boolean
      description: Whether the removal was a success, which is only false if the passed <code data-dev-comment-type="paramref" class="paramref">furniture</code> has the <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> category
    content.vb: Public Shared Function RemoveFurniture(furniture As Furniture, action As UndoableAction) As Boolean
  overload: TinyLife.Tools.RemoveTool.RemoveFurniture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  commentId: M:TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  id: StoreOrRemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: StoreOrRemoveFurniture(Furniture, UndoableAction)
  nameWithType: RemoveTool.StoreOrRemoveFurniture(Furniture, UndoableAction)
  fullName: TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture(TinyLife.Objects.Furniture, TinyLife.Tools.UndoableAction)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StoreOrRemoveFurniture
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nStores the passed <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> into the current household&apos;s <xref href=\"TinyLife.World.Household.FurnitureStorage\" data-throw-if-not-resolved=\"false\"></xref>, or, if there is no current household, removes the object using <xref href=\"TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture%2cTinyLife.Tools.UndoableAction)\" data-throw-if-not-resolved=\"false\"></xref> instead.\nIf the passed furniture is in the world and has children, the children are also stored (or removed) recursively.\n"
  example: []
  syntax:
    content: public static bool StoreOrRemoveFurniture(Furniture furniture, UndoableAction action)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture to store (or remove)
    - id: action
      type: TinyLife.Tools.UndoableAction
      description: The undoable action that this method should add its actions to. If this method should be executed immediately, use the <xref href="TinyLife.Tools.UndoableAction" data-throw-if-not-resolved="false"></xref> immediate constructor.
    return:
      type: System.Boolean
      description: Whether the storage or removal was a success, which is only false if there is no current household and the passed <code data-dev-comment-type="paramref" class="paramref">furniture</code> has the <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> category
    content.vb: Public Shared Function StoreOrRemoveFurniture(furniture As Furniture, action As UndoableAction) As Boolean
  overload: TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.RemoveTool.PlayDestroySound
  commentId: M:TinyLife.Tools.RemoveTool.PlayDestroySound
  id: PlayDestroySound
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: PlayDestroySound()
  nameWithType: RemoveTool.PlayDestroySound()
  fullName: TinyLife.Tools.RemoveTool.PlayDestroySound()
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PlayDestroySound
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 279
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nPlays the destroy sound\n"
  example: []
  syntax:
    content: public static void PlayDestroySound()
    content.vb: Public Shared Sub PlayDestroySound
  overload: TinyLife.Tools.RemoveTool.PlayDestroySound*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  id: SpawnDestroyParticles(TinyLife.Objects.Furniture)
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: SpawnDestroyParticles(Furniture)
  nameWithType: RemoveTool.SpawnDestroyParticles(Furniture)
  fullName: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpawnDestroyParticles
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 288
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nSpawns a set of particles for the given <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> being destroyed.\nThe particles are based on the furniture&apos;s textures and colors.\n"
  example: []
  syntax:
    content: public static void SpawnDestroyParticles(Furniture furniture)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture whose particles to spawn.
    content.vb: Public Shared Sub SpawnDestroyParticles(furniture As Furniture)
  overload: TinyLife.Tools.RemoveTool.SpawnDestroyParticles*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(MLEM.Misc.RectangleF,System.Single,System.ValueTuple{MLEM.Textures.TextureRegion,Color}[])
  commentId: M:TinyLife.Tools.RemoveTool.SpawnDestroyParticles(MLEM.Misc.RectangleF,System.Single,System.ValueTuple{MLEM.Textures.TextureRegion,Color}[])
  id: SpawnDestroyParticles(MLEM.Misc.RectangleF,System.Single,System.ValueTuple{MLEM.Textures.TextureRegion,Color}[])
  parent: TinyLife.Tools.RemoveTool
  langs:
  - csharp
  - vb
  name: SpawnDestroyParticles(RectangleF, Single, (TextureRegion, Color)[])
  nameWithType: RemoveTool.SpawnDestroyParticles(RectangleF, Single, (TextureRegion, Color)[])
  fullName: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(MLEM.Misc.RectangleF, System.Single, System.ValueTuple<MLEM.Textures.TextureRegion, Color>[])
  type: Method
  source:
    remote:
      path: TinyLife/Tools/RemoveTool.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpawnDestroyParticles
    path: ../TinyLife/Tools/RemoveTool.cs
    startLine: 300
  assemblies:
  - Tiny Life
  namespace: TinyLife.Tools
  summary: "\nSpawns a set of particles for an arbitrary object being destroyed.\nIf a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> is destroyed, <xref href=\"TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)\" data-throw-if-not-resolved=\"false\"></xref> should be used instead.\n"
  example: []
  syntax:
    content: public static void SpawnDestroyParticles(RectangleF area, float amountMultiplier, params (TextureRegion, Color)[] textures)
    parameters:
    - id: area
      type: MLEM.Misc.RectangleF
      description: The area to spawn particles in.
    - id: amountMultiplier
      type: System.Single
      description: The amount of particles that should be spawned, which will be multiplied with the size of the <code data-dev-comment-type="paramref" class="paramref">area</code>
    - id: textures
      type: System.ValueTuple{MLEM.Textures.TextureRegion,Color}[]
      description: The textures and their colors to choose from when spawning the particles.
    content.vb: Public Shared Sub SpawnDestroyParticles(area As RectangleF, amountMultiplier As Single, ParamArray textures As(TextureRegion, Color)(Of TextureRegion , Color)())
  overload: TinyLife.Tools.RemoveTool.SpawnDestroyParticles*
  nameWithType.vb: RemoveTool.SpawnDestroyParticles(RectangleF, Single, (TextureRegion, Color)(Of TextureRegion, Color)())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(MLEM.Misc.RectangleF, System.Single, System.ValueTuple(Of MLEM.Textures.TextureRegion, Color)())
  name.vb: SpawnDestroyParticles(RectangleF, Single, (TextureRegion, Color)(Of TextureRegion, Color)())
references:
- uid: TinyLife.Tools
  commentId: N:TinyLife.Tools
  name: TinyLife.Tools
  nameWithType: TinyLife.Tools
  fullName: TinyLife.Tools
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Tools.Tool
  commentId: T:TinyLife.Tools.Tool
  parent: TinyLife.Tools
  name: Tool
  nameWithType: Tool
  fullName: TinyLife.Tools.Tool
- uid: TinyLife.Tools.Tool.RemoveTool
  commentId: F:TinyLife.Tools.Tool.RemoveTool
  parent: TinyLife.Tools.Tool
  name: RemoveTool
  nameWithType: Tool.RemoveTool
  fullName: TinyLife.Tools.Tool.RemoveTool
- uid: TinyLife.Tools.Tool.MoveTool
  commentId: F:TinyLife.Tools.Tool.MoveTool
  parent: TinyLife.Tools.Tool
  name: MoveTool
  nameWithType: Tool.MoveTool
  fullName: TinyLife.Tools.Tool.MoveTool
- uid: TinyLife.Tools.Tool.PlayModeTool
  commentId: F:TinyLife.Tools.Tool.PlayModeTool
  parent: TinyLife.Tools.Tool
  name: PlayModeTool
  nameWithType: Tool.PlayModeTool
  fullName: TinyLife.Tools.Tool.PlayModeTool
- uid: TinyLife.Tools.Tool.BuildTools
  commentId: F:TinyLife.Tools.Tool.BuildTools
  parent: TinyLife.Tools.Tool
  name: BuildTools
  nameWithType: Tool.BuildTools
  fullName: TinyLife.Tools.Tool.BuildTools
- uid: TinyLife.Tools.Tool.SelectedObject
  commentId: P:TinyLife.Tools.Tool.SelectedObject
  parent: TinyLife.Tools.Tool
  name: SelectedObject
  nameWithType: Tool.SelectedObject
  fullName: TinyLife.Tools.Tool.SelectedObject
- uid: TinyLife.Tools.Tool.SelectedWall
  commentId: P:TinyLife.Tools.Tool.SelectedWall
  parent: TinyLife.Tools.Tool
  name: SelectedWall
  nameWithType: Tool.SelectedWall
  fullName: TinyLife.Tools.Tool.SelectedWall
- uid: TinyLife.Tools.Tool.IsRotateCwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCwPressed
  parent: TinyLife.Tools.Tool
  name: IsRotateCwPressed
  nameWithType: Tool.IsRotateCwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCwPressed
- uid: TinyLife.Tools.Tool.IsRotateCcwPressed
  commentId: P:TinyLife.Tools.Tool.IsRotateCcwPressed
  parent: TinyLife.Tools.Tool
  name: IsRotateCcwPressed
  nameWithType: Tool.IsRotateCcwPressed
  fullName: TinyLife.Tools.Tool.IsRotateCcwPressed
- uid: TinyLife.Tools.Tool.IsCopyPressed
  commentId: P:TinyLife.Tools.Tool.IsCopyPressed
  parent: TinyLife.Tools.Tool
  name: IsCopyPressed
  nameWithType: Tool.IsCopyPressed
  fullName: TinyLife.Tools.Tool.IsCopyPressed
- uid: TinyLife.Tools.Tool.OnOpened
  commentId: E:TinyLife.Tools.Tool.OnOpened
  parent: TinyLife.Tools.Tool
  name: OnOpened
  nameWithType: Tool.OnOpened
  fullName: TinyLife.Tools.Tool.OnOpened
- uid: TinyLife.Tools.Tool.OnClosed
  commentId: E:TinyLife.Tools.Tool.OnClosed
  parent: TinyLife.Tools.Tool
  name: OnClosed
  nameWithType: Tool.OnClosed
  fullName: TinyLife.Tools.Tool.OnClosed
- uid: TinyLife.Tools.Tool.OnUpdate
  commentId: E:TinyLife.Tools.Tool.OnUpdate
  parent: TinyLife.Tools.Tool
  name: OnUpdate
  nameWithType: Tool.OnUpdate
  fullName: TinyLife.Tools.Tool.OnUpdate
- uid: TinyLife.Tools.Tool.OnDraw
  commentId: E:TinyLife.Tools.Tool.OnDraw
  parent: TinyLife.Tools.Tool
  name: OnDraw
  nameWithType: Tool.OnDraw
  fullName: TinyLife.Tools.Tool.OnDraw
- uid: TinyLife.Tools.Tool.OnInitBuildModeUi
  commentId: E:TinyLife.Tools.Tool.OnInitBuildModeUi
  parent: TinyLife.Tools.Tool
  name: OnInitBuildModeUi
  nameWithType: Tool.OnInitBuildModeUi
  fullName: TinyLife.Tools.Tool.OnInitBuildModeUi
- uid: TinyLife.Tools.Tool.Input
  commentId: P:TinyLife.Tools.Tool.Input
  parent: TinyLife.Tools.Tool
  name: Input
  nameWithType: Tool.Input
  fullName: TinyLife.Tools.Tool.Input
- uid: TinyLife.Tools.Tool.Map
  commentId: P:TinyLife.Tools.Tool.Map
  parent: TinyLife.Tools.Tool
  name: Map
  nameWithType: Tool.Map
  fullName: TinyLife.Tools.Tool.Map
- uid: TinyLife.Tools.Tool.Money
  commentId: P:TinyLife.Tools.Tool.Money
  parent: TinyLife.Tools.Tool
  name: Money
  nameWithType: Tool.Money
  fullName: TinyLife.Tools.Tool.Money
- uid: TinyLife.Tools.Tool.Texture
  commentId: F:TinyLife.Tools.Tool.Texture
  parent: TinyLife.Tools.Tool
  name: Texture
  nameWithType: Tool.Texture
  fullName: TinyLife.Tools.Tool.Texture
- uid: TinyLife.Tools.Tool.DisplayAsTab
  commentId: F:TinyLife.Tools.Tool.DisplayAsTab
  parent: TinyLife.Tools.Tool
  name: DisplayAsTab
  nameWithType: Tool.DisplayAsTab
  fullName: TinyLife.Tools.Tool.DisplayAsTab
- uid: TinyLife.Tools.Tool.MousePos
  commentId: F:TinyLife.Tools.Tool.MousePos
  parent: TinyLife.Tools.Tool
  name: MousePos
  nameWithType: Tool.MousePos
  fullName: TinyLife.Tools.Tool.MousePos
- uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  commentId: M:TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: InitBuildModeUi(Panel, Panel)
  nameWithType: Tool.InitBuildModeUi(Panel, Panel)
  fullName: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel, MLEM.Ui.Elements.Panel)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
    name: InitBuildModeUi
    nameWithType: Tool.InitBuildModeUi
    fullName: TinyLife.Tools.Tool.InitBuildModeUi
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.InitBuildModeUi(MLEM.Ui.Elements.Panel,MLEM.Ui.Elements.Panel)
    name: InitBuildModeUi
    nameWithType: Tool.InitBuildModeUi
    fullName: TinyLife.Tools.Tool.InitBuildModeUi
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.Opened
  commentId: M:TinyLife.Tools.Tool.Opened
  parent: TinyLife.Tools.Tool
  name: Opened()
  nameWithType: Tool.Opened()
  fullName: TinyLife.Tools.Tool.Opened()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Opened
    name: Opened
    nameWithType: Tool.Opened
    fullName: TinyLife.Tools.Tool.Opened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Opened
    name: Opened
    nameWithType: Tool.Opened
    fullName: TinyLife.Tools.Tool.Opened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.Closed
  commentId: M:TinyLife.Tools.Tool.Closed
  parent: TinyLife.Tools.Tool
  name: Closed()
  nameWithType: Tool.Closed()
  fullName: TinyLife.Tools.Tool.Closed()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Closed
    name: Closed
    nameWithType: Tool.Closed
    fullName: TinyLife.Tools.Tool.Closed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Closed
    name: Closed
    nameWithType: Tool.Closed
    fullName: TinyLife.Tools.Tool.Closed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.ForceWallsUp
  commentId: M:TinyLife.Tools.Tool.ForceWallsUp
  parent: TinyLife.Tools.Tool
  name: ForceWallsUp()
  nameWithType: Tool.ForceWallsUp()
  fullName: TinyLife.Tools.Tool.ForceWallsUp()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ForceWallsUp
    name: ForceWallsUp
    nameWithType: Tool.ForceWallsUp
    fullName: TinyLife.Tools.Tool.ForceWallsUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ForceWallsUp
    name: ForceWallsUp
    nameWithType: Tool.ForceWallsUp
    fullName: TinyLife.Tools.Tool.ForceWallsUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.CanSwitchGameModes
  commentId: M:TinyLife.Tools.Tool.CanSwitchGameModes
  parent: TinyLife.Tools.Tool
  name: CanSwitchGameModes()
  nameWithType: Tool.CanSwitchGameModes()
  fullName: TinyLife.Tools.Tool.CanSwitchGameModes()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.CanSwitchGameModes
    name: CanSwitchGameModes
    nameWithType: Tool.CanSwitchGameModes
    fullName: TinyLife.Tools.Tool.CanSwitchGameModes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.CanSwitchGameModes
    name: CanSwitchGameModes
    nameWithType: Tool.CanSwitchGameModes
    fullName: TinyLife.Tools.Tool.CanSwitchGameModes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  commentId: M:TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: OnButtonCreated(Button)
  nameWithType: Tool.OnButtonCreated(Button)
  fullName: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
    name: OnButtonCreated
    nameWithType: Tool.OnButtonCreated
    fullName: TinyLife.Tools.Tool.OnButtonCreated
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Button
    name: Button
    nameWithType: Button
    fullName: MLEM.Ui.Elements.Button
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.OnButtonCreated(MLEM.Ui.Elements.Button)
    name: OnButtonCreated
    nameWithType: Tool.OnButtonCreated
    fullName: TinyLife.Tools.Tool.OnButtonCreated
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Button
    name: Button
    nameWithType: Button
    fullName: MLEM.Ui.Elements.Button
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.IsOnLot(Point)
  commentId: M:TinyLife.Tools.Tool.IsOnLot(Point)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: IsOnLot(Point)
  nameWithType: Tool.IsOnLot(Point)
  fullName: TinyLife.Tools.Tool.IsOnLot(Point)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.IsOnLot(Point)
    name: IsOnLot
    nameWithType: Tool.IsOnLot
    fullName: TinyLife.Tools.Tool.IsOnLot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Point
    name: Point
    nameWithType: Point
    fullName: Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.IsOnLot(Point)
    name: IsOnLot
    nameWithType: Tool.IsOnLot
    fullName: TinyLife.Tools.Tool.IsOnLot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Point
    name: Point
    nameWithType: Point
    fullName: Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme[], Action<Int32, Int32>, Func<Int32, Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[], System.Action<System.Int32, System.Int32>, System.Func<System.Int32, System.Int32, System.Boolean>)
  nameWithType.vb: Tool.ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme(), System.Action(Of System.Int32, System.Int32), System.Func(Of System.Int32, System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme(), Action(Of Int32, Int32), Func(Of Int32, Int32, Boolean))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme[],System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  commentId: M:TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  nameWithType: Tool.ColorSelection(ColorScheme, Action<Int32>, Func<Int32, Boolean>)
  fullName: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action<System.Int32>, System.Func<System.Int32, System.Boolean>)
  nameWithType.vb: Tool.ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
  fullName.vb: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme, System.Action(Of System.Int32), System.Func(Of System.Int32, System.Boolean))
  name.vb: ColorSelection(ColorScheme, Action(Of Int32), Func(Of Int32, Boolean))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ColorSelection(TinyLife.Utilities.ColorScheme,System.Action{System.Int32},System.Func{System.Int32,System.Boolean})
    name: ColorSelection
    nameWithType: Tool.ColorSelection
    fullName: TinyLife.Tools.Tool.ColorSelection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  commentId: M:TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  nameWithType: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable<String>, Nullable<Single>)
  fullName: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<System.Single>)
  nameWithType.vb: Tool.BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
  fullName.vb: TinyLife.Tools.Tool.BuildModeButton(System.String, MLEM.Ui.Elements.Element.GenericCallback, MLEM.Ui.Elements.Element.DrawCallback, System.Single, MLEM.Textures.TextureRegion, System.Collections.Generic.IEnumerable(Of System.String), System.Nullable(Of System.Single))
  name.vb: BuildModeButton(String, Element.GenericCallback, Element.DrawCallback, Single, TextureRegion, IEnumerable(Of String), Nullable(Of Single))
  spec.csharp:
  - uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
    name: BuildModeButton
    nameWithType: Tool.BuildModeButton
    fullName: TinyLife.Tools.Tool.BuildModeButton
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: Element.GenericCallback
    nameWithType: Element.GenericCallback
    fullName: MLEM.Ui.Elements.Element.GenericCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: Element.DrawCallback
    nameWithType: Element.DrawCallback
    fullName: MLEM.Ui.Elements.Element.DrawCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.BuildModeButton(System.String,MLEM.Ui.Elements.Element.GenericCallback,MLEM.Ui.Elements.Element.DrawCallback,System.Single,MLEM.Textures.TextureRegion,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single})
    name: BuildModeButton
    nameWithType: Tool.BuildModeButton
    fullName: TinyLife.Tools.Tool.BuildModeButton
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.GenericCallback
    name: Element.GenericCallback
    nameWithType: Element.GenericCallback
    fullName: MLEM.Ui.Elements.Element.GenericCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.Element.DrawCallback
    name: Element.DrawCallback
    nameWithType: Element.DrawCallback
    fullName: MLEM.Ui.Elements.Element.DrawCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<RemoveTool>()
  nameWithType: Extensions.JsonCopy<RemoveTool>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.RemoveTool>()
  nameWithType.vb: Extensions.JsonCopy(Of RemoveTool)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.RemoveTool)()
  name.vb: JsonCopy(Of RemoveTool)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<RemoveTool>
    nameWithType: Extensions.JsonCopy<RemoveTool>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Tools.RemoveTool>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of RemoveTool)
    nameWithType: Extensions.JsonCopy(Of RemoveTool)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Tools.RemoveTool)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Tools.RemoveTool.#ctor*
  commentId: Overload:TinyLife.Tools.RemoveTool.#ctor
  name: RemoveTool
  nameWithType: RemoveTool.RemoveTool
  fullName: TinyLife.Tools.RemoveTool.RemoveTool
- uid: TinyLife.Tools.Tool.Update(GameTime)
  commentId: M:TinyLife.Tools.Tool.Update(GameTime)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: Update(GameTime)
  nameWithType: Tool.Update(GameTime)
  fullName: TinyLife.Tools.Tool.Update(GameTime)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Update(GameTime)
    name: Update
    nameWithType: Tool.Update
    fullName: TinyLife.Tools.Tool.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Update(GameTime)
    name: Update
    nameWithType: Tool.Update
    fullName: TinyLife.Tools.Tool.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.Update*
  commentId: Overload:TinyLife.Tools.RemoveTool.Update
  name: Update
  nameWithType: RemoveTool.Update
  fullName: TinyLife.Tools.RemoveTool.Update
- uid: GameTime
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: GameTime
- uid: TinyLife.Tools.Tool.Draw(GameTime,SpriteBatch)
  commentId: M:TinyLife.Tools.Tool.Draw(GameTime,SpriteBatch)
  parent: TinyLife.Tools.Tool
  isExternal: true
  name: Draw(GameTime, SpriteBatch)
  nameWithType: Tool.Draw(GameTime, SpriteBatch)
  fullName: TinyLife.Tools.Tool.Draw(GameTime, SpriteBatch)
  spec.csharp:
  - uid: TinyLife.Tools.Tool.Draw(GameTime,SpriteBatch)
    name: Draw
    nameWithType: Tool.Draw
    fullName: TinyLife.Tools.Tool.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: SpriteBatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.Draw(GameTime,SpriteBatch)
    name: Draw
    nameWithType: Tool.Draw
    fullName: TinyLife.Tools.Tool.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: SpriteBatch
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.Draw*
  commentId: Overload:TinyLife.Tools.RemoveTool.Draw
  name: Draw
  nameWithType: RemoveTool.Draw
  fullName: TinyLife.Tools.RemoveTool.Draw
- uid: SpriteBatch
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: SpriteBatch
- uid: TinyLife.Tools.Tool.GetMouseCursor
  commentId: M:TinyLife.Tools.Tool.GetMouseCursor
  parent: TinyLife.Tools.Tool
  name: GetMouseCursor()
  nameWithType: Tool.GetMouseCursor()
  fullName: TinyLife.Tools.Tool.GetMouseCursor()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.GetMouseCursor
    name: GetMouseCursor
    nameWithType: Tool.GetMouseCursor
    fullName: TinyLife.Tools.Tool.GetMouseCursor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.GetMouseCursor
    name: GetMouseCursor
    nameWithType: Tool.GetMouseCursor
    fullName: TinyLife.Tools.Tool.GetMouseCursor
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.GetMouseCursor*
  commentId: Overload:TinyLife.Tools.RemoveTool.GetMouseCursor
  name: GetMouseCursor
  nameWithType: RemoveTool.GetMouseCursor
  fullName: TinyLife.Tools.RemoveTool.GetMouseCursor
- uid: TinyLife.Uis.CursorType
  commentId: T:TinyLife.Uis.CursorType
  parent: TinyLife.Uis
  name: CursorType
  nameWithType: CursorType
  fullName: TinyLife.Uis.CursorType
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: TinyLife.Tools.Tool.CanUndoRedo
  commentId: M:TinyLife.Tools.Tool.CanUndoRedo
  parent: TinyLife.Tools.Tool
  name: CanUndoRedo()
  nameWithType: Tool.CanUndoRedo()
  fullName: TinyLife.Tools.Tool.CanUndoRedo()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.CanUndoRedo
    name: CanUndoRedo
    nameWithType: Tool.CanUndoRedo
    fullName: TinyLife.Tools.Tool.CanUndoRedo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.CanUndoRedo
    name: CanUndoRedo
    nameWithType: Tool.CanUndoRedo
    fullName: TinyLife.Tools.Tool.CanUndoRedo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.CanUndoRedo*
  commentId: Overload:TinyLife.Tools.RemoveTool.CanUndoRedo
  name: CanUndoRedo
  nameWithType: RemoveTool.CanUndoRedo
  fullName: TinyLife.Tools.RemoveTool.CanUndoRedo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  commentId: M:TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  parent: TinyLife.Tools.Tool
  name: ShouldHighlightSelectedObject()
  nameWithType: Tool.ShouldHighlightSelectedObject()
  fullName: TinyLife.Tools.Tool.ShouldHighlightSelectedObject()
  spec.csharp:
  - uid: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
    name: ShouldHighlightSelectedObject
    nameWithType: Tool.ShouldHighlightSelectedObject
    fullName: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
    name: ShouldHighlightSelectedObject
    nameWithType: Tool.ShouldHighlightSelectedObject
    fullName: TinyLife.Tools.Tool.ShouldHighlightSelectedObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject*
  commentId: Overload:TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject
  name: ShouldHighlightSelectedObject
  nameWithType: RemoveTool.ShouldHighlightSelectedObject
  fullName: TinyLife.Tools.RemoveTool.ShouldHighlightSelectedObject
- uid: TinyLife.Objects.ObjectCategory.CeilingHanging
  commentId: F:TinyLife.Objects.ObjectCategory.CeilingHanging
  isExternal: true
- uid: TinyLife.Tools.UndoableAction
  commentId: T:TinyLife.Tools.UndoableAction
  parent: TinyLife.Tools
  name: UndoableAction
  nameWithType: UndoableAction
  fullName: TinyLife.Tools.UndoableAction
- uid: TinyLife.Tools.RemoveTool.RemoveRoof*
  commentId: Overload:TinyLife.Tools.RemoveTool.RemoveRoof
  name: RemoveRoof
  nameWithType: RemoveTool.RemoveRoof
  fullName: TinyLife.Tools.RemoveTool.RemoveRoof
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: System.Nullable{Rectangle}
  commentId: T:System.Nullable{Rectangle}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Rectangle>
  nameWithType: Nullable<Rectangle>
  fullName: System.Nullable<Rectangle>
  nameWithType.vb: Nullable(Of Rectangle)
  fullName.vb: System.Nullable(Of Rectangle)
  name.vb: Nullable(Of Rectangle)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Rectangle
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Rectangle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Tools.RemoveTool.RemoveWall*
  commentId: Overload:TinyLife.Tools.RemoveTool.RemoveWall
  name: RemoveWall
  nameWithType: RemoveTool.RemoveWall
  fullName: TinyLife.Tools.RemoveTool.RemoveWall
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.Furniture.GetChildren``1
  commentId: M:TinyLife.Objects.Furniture.GetChildren``1
  parent: TinyLife.Objects.Furniture
  name: GetChildren<T>()
  nameWithType: Furniture.GetChildren<T>()
  fullName: TinyLife.Objects.Furniture.GetChildren<T>()
  nameWithType.vb: Furniture.GetChildren(Of T)()
  fullName.vb: TinyLife.Objects.Furniture.GetChildren(Of T)()
  name.vb: GetChildren(Of T)()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren<T>
    nameWithType: Furniture.GetChildren<T>
    fullName: TinyLife.Objects.Furniture.GetChildren<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetChildren``1
    name: GetChildren(Of T)
    nameWithType: Furniture.GetChildren(Of T)
    fullName: TinyLife.Objects.Furniture.GetChildren(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  commentId: M:TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  parent: TinyLife.Objects.Furniture
  name: UnlinkParentsAndChildren()
  nameWithType: Furniture.UnlinkParentsAndChildren()
  fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
    name: UnlinkParentsAndChildren
    nameWithType: Furniture.UnlinkParentsAndChildren
    fullName: TinyLife.Objects.Furniture.UnlinkParentsAndChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  isExternal: true
- uid: TinyLife.Tools.RemoveTool.RemoveFurniture*
  commentId: Overload:TinyLife.Tools.RemoveTool.RemoveFurniture
  name: RemoveFurniture
  nameWithType: RemoveTool.RemoveFurniture
  fullName: TinyLife.Tools.RemoveTool.RemoveFurniture
- uid: TinyLife.World.Household.FurnitureStorage
  commentId: F:TinyLife.World.Household.FurnitureStorage
  isExternal: true
- uid: TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  commentId: M:TinyLife.Tools.RemoveTool.RemoveFurniture(TinyLife.Objects.Furniture,TinyLife.Tools.UndoableAction)
  isExternal: true
- uid: TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture*
  commentId: Overload:TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture
  name: StoreOrRemoveFurniture
  nameWithType: RemoveTool.StoreOrRemoveFurniture
  fullName: TinyLife.Tools.RemoveTool.StoreOrRemoveFurniture
- uid: TinyLife.Tools.RemoveTool.PlayDestroySound*
  commentId: Overload:TinyLife.Tools.RemoveTool.PlayDestroySound
  name: PlayDestroySound
  nameWithType: RemoveTool.PlayDestroySound
  fullName: TinyLife.Tools.RemoveTool.PlayDestroySound
- uid: TinyLife.Tools.RemoveTool.SpawnDestroyParticles*
  commentId: Overload:TinyLife.Tools.RemoveTool.SpawnDestroyParticles
  name: SpawnDestroyParticles
  nameWithType: RemoveTool.SpawnDestroyParticles
  fullName: TinyLife.Tools.RemoveTool.SpawnDestroyParticles
- uid: TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Tools.RemoveTool.SpawnDestroyParticles(TinyLife.Objects.Furniture)
  isExternal: true
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.ValueTuple{MLEM.Textures.TextureRegion,Color}[]
  isExternal: true
  name: (T1, T2)<TextureRegion, Color>[]
  nameWithType: (T1, T2)<TextureRegion, Color>[]
  fullName: System.ValueTuple<MLEM.Textures.TextureRegion, Color>[]
  nameWithType.vb: (T1, T2)(Of TextureRegion, Color)()
  fullName.vb: System.ValueTuple(Of MLEM.Textures.TextureRegion, Color)()
  name.vb: (T1, T2)(Of TextureRegion, Color)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Color
    name: Color
    nameWithType: Color
    fullName: Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc

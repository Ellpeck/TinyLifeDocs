### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  id: Opening
  parent: TinyLife.World
  children:
  - TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32)
  - TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  - TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  - TinyLife.World.Opening.Color
  - TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Opening.GetPrice
  - TinyLife.World.Opening.Type
  langs:
  - csharp
  - vb
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
  type: Class
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Opening
    path: World/Opening.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn opening is some sort of extrusion in a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, like a window or a door.\nOpenings are created from their underlying <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Opening : IPricedObject
    content.vb: >-
      <DataContract>

      Public Class Opening

          Implements IPricedObject
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.World.Door
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Opening.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Opening.Type
  commentId: F:TinyLife.World.Opening.Type
  id: Type
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Opening.Type
  fullName: TinyLife.World.Opening.Type
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: World/Opening.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref> that this opening has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly OpeningType Type
    return:
      type: TinyLife.World.OpeningType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As OpeningType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Opening.Color
  commentId: F:TinyLife.World.Opening.Color
  id: Color
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: Opening.Color
  fullName: TinyLife.World.Opening.Color
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Color
    path: World/Opening.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe index of the <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.OpeningType.ColorScheme\" data-throw-if-not-resolved=\"false\"></xref> that this opening instance has\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly int Color
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Color As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32)
  commentId: M:TinyLife.World.Opening.#ctor(TinyLife.World.OpeningType,System.Int32)
  id: '#ctor(TinyLife.World.OpeningType,System.Int32)'
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Opening(OpeningType, Int32)
  nameWithType: Opening.Opening(OpeningType, Int32)
  fullName: TinyLife.World.Opening.Opening(TinyLife.World.OpeningType, System.Int32)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: World/Opening.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new opening from the given opening type and color\n"
  example: []
  syntax:
    content: public Opening(OpeningType type, int color)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The opening type
    - id: color
      type: System.Int32
      description: The index of the color
    content.vb: Public Sub New(type As OpeningType, color As Integer)
  overload: TinyLife.World.Opening.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  nameWithType: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  fullName: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: World/Opening.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this opening in the world with the given settings\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Map map, Wall wall, Vector2 drawPos, bool vertical, float scale, float depth, Color? overrideColor)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: map
      type: TinyLife.World.Map
      description: The map that the opening is on
    - id: wall
      type: TinyLife.World.Wall
      description: The wall that the opening is in
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw the opening on
    - id: vertical
      type: System.Boolean
      description: Whether the wall that the opening is on is vertical
    - id: scale
      type: System.Single
      description: The scale to draw the opening with
    - id: depth
      type: System.Single
      description: The depth to use for drawing the opening
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that should be used instead of this opening&apos;s default color, or null to use the opening&apos;s default color
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, map As Map, wall As Wall, drawPos As Vector2, vertical As Boolean, scale As Single, depth As Single, overrideColor As Color?)
  overload: TinyLife.World.Opening.Draw*
  nameWithType.vb: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
- uid: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  id: CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: CanWalkThrough(Wall, Person)
  nameWithType: Opening.CanWalkThrough(Wall, Person)
  fullName: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanWalkThrough
    path: World/Opening.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is able to walk through a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that has this opening.\nThis returns true for <xref href=\"TinyLife.World.Door\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.SwingingDoor\" data-throw-if-not-resolved=\"false\"></xref> and false for <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool CanWalkThrough(Wall wall, Person person)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overridable Function CanWalkThrough(wall As Wall, person As Person) As Boolean
  overload: TinyLife.World.Opening.CanWalkThrough*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  id: CanPlaceOn(TinyLife.Objects.FurnitureType)
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: CanPlaceOn(FurnitureType)
  nameWithType: Opening.CanPlaceOn(FurnitureType)
  fullName: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanPlaceOn
    path: World/Opening.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether the given <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> can be attached to this opening.\nBy default, this method returns true when the furniture has the <xref href=\"TinyLife.Objects.ObjectCategory.CanCoverWindow\" data-throw-if-not-resolved=\"false\"></xref> category.\n"
  example: []
  syntax:
    content: public virtual bool CanPlaceOn(FurnitureType type)
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
    return:
      type: System.Boolean
      description: Whether the opening is a window
    content.vb: Public Overridable Function CanPlaceOn(type As FurnitureType) As Boolean
  overload: TinyLife.World.Opening.CanPlaceOn*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Opening.GetPrice
  commentId: M:TinyLife.World.Opening.GetPrice
  id: GetPrice
  parent: TinyLife.World.Opening
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Opening.GetPrice()
  fullName: TinyLife.World.Opening.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: World/Opening.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.World.Opening.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Opening.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Opening>()
  nameWithType: Extensions.JsonCopy<Opening>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Opening>()
  nameWithType.vb: Extensions.JsonCopy(Of Opening)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Opening)()
  name.vb: JsonCopy(Of Opening)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Opening>
    nameWithType: Extensions.JsonCopy<Opening>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Opening>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Opening)
    nameWithType: Extensions.JsonCopy(Of Opening)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Opening)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.OpeningType.ColorScheme
  commentId: F:TinyLife.World.OpeningType.ColorScheme
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Opening.#ctor*
  commentId: Overload:TinyLife.World.Opening.#ctor
  name: Opening
  nameWithType: Opening.Opening
  fullName: TinyLife.World.Opening.Opening
- uid: TinyLife.World.Opening.Draw*
  commentId: Overload:TinyLife.World.Opening.Draw
  name: Draw
  nameWithType: Opening.Draw
  fullName: TinyLife.World.Opening.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Door
  commentId: T:TinyLife.World.Door
  parent: TinyLife.World
  name: Door
  nameWithType: Door
  fullName: TinyLife.World.Door
- uid: TinyLife.World.SwingingDoor
  commentId: T:TinyLife.World.SwingingDoor
  name: SwingingDoor
  nameWithType: SwingingDoor
  fullName: TinyLife.World.SwingingDoor
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.Opening.CanWalkThrough*
  commentId: Overload:TinyLife.World.Opening.CanWalkThrough
  name: CanWalkThrough
  nameWithType: Opening.CanWalkThrough
  fullName: TinyLife.World.Opening.CanWalkThrough
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Objects.ObjectCategory.CanCoverWindow
  commentId: F:TinyLife.Objects.ObjectCategory.CanCoverWindow
  isExternal: true
- uid: TinyLife.World.Opening.CanPlaceOn*
  commentId: Overload:TinyLife.World.Opening.CanPlaceOn
  name: CanPlaceOn
  nameWithType: Opening.CanPlaceOn
  fullName: TinyLife.World.Opening.CanPlaceOn
- uid: TinyLife.World.Opening.GetPrice*
  commentId: Overload:TinyLife.World.Opening.GetPrice
  name: GetPrice
  nameWithType: Opening.GetPrice
  fullName: TinyLife.World.Opening.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )

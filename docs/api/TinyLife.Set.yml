### YamlMime:ManagedReference
items:
- uid: TinyLife.Set
  commentId: T:TinyLife.Set
  id: Set
  parent: TinyLife
  children:
  - TinyLife.Set.ChildClothes
  - TinyLife.Set.Woodworking
  - TinyLife.Set.Workout
  langs:
  - csharp
  - vb
  name: Set
  nameWithType: Set
  fullName: TinyLife.Set
  type: Enum
  source:
    remote:
      path: TinyLife/GameImpl.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Set
    path: ../TinyLife/GameImpl.cs
    startLine: 1070
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn enumeration that represents all of the sets of the game.\nSets are groups of themed game content whose art were created by an artist from the community.\n"
  example: []
  syntax:
    content: public enum Set
    content.vb: Public Enum Set
  extensionMethods:
  - TinyLife.Set.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: TinyLife.Set.Woodworking
  commentId: F:TinyLife.Set.Woodworking
  id: Woodworking
  parent: TinyLife.Set
  langs:
  - csharp
  - vb
  name: Woodworking
  nameWithType: Set.Woodworking
  fullName: TinyLife.Set.Woodworking
  type: Field
  source:
    remote:
      path: TinyLife/GameImpl.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Woodworking
    path: ../TinyLife/GameImpl.cs
    startLine: 1076
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe woodworking set with art by Kat\n"
  example: []
  syntax:
    content: Woodworking = 0
    return:
      type: TinyLife.Set
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Set.Workout
  commentId: F:TinyLife.Set.Workout
  id: Workout
  parent: TinyLife.Set
  langs:
  - csharp
  - vb
  name: Workout
  nameWithType: Set.Workout
  fullName: TinyLife.Set.Workout
  type: Field
  source:
    remote:
      path: TinyLife/GameImpl.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Workout
    path: ../TinyLife/GameImpl.cs
    startLine: 1080
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe workout set with art by Tector\n"
  example: []
  syntax:
    content: Workout = 1
    return:
      type: TinyLife.Set
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Set.ChildClothes
  commentId: F:TinyLife.Set.ChildClothes
  id: ChildClothes
  parent: TinyLife.Set
  langs:
  - csharp
  - vb
  name: ChildClothes
  nameWithType: Set.ChildClothes
  fullName: TinyLife.Set.ChildClothes
  type: Field
  source:
    remote:
      path: TinyLife/GameImpl.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChildClothes
    path: ../TinyLife/GameImpl.cs
    startLine: 1084
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe child clothes set with art by Tector\n"
  example: []
  syntax:
    content: ChildClothes = 2
    return:
      type: TinyLife.Set
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Set.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Set>()
  nameWithType: Extensions.JsonCopy<Set>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Set>()
  nameWithType.vb: Extensions.JsonCopy(Of Set)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Set)()
  name.vb: JsonCopy(Of Set)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Set>
    nameWithType: Extensions.JsonCopy<Set>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Set>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Set)
    nameWithType: Extensions.JsonCopy(Of Set)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Set)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Set
  commentId: T:TinyLife.Set
  parent: TinyLife
  name: Set
  nameWithType: Set
  fullName: TinyLife.Set

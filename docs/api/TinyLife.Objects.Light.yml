### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Light
  commentId: T:TinyLife.Objects.Light
  id: Light
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Light.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)
  - TinyLife.Objects.Light.CircleTexture
  - TinyLife.Objects.Light.Color
  - TinyLife.Objects.Light.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  - TinyLife.Objects.Light.IsDisabled
  - TinyLife.Objects.Light.Map
  - TinyLife.Objects.Light.Position
  - TinyLife.Objects.Light.Size
  - TinyLife.Objects.Light.Texture
  - TinyLife.Objects.Light.UpwardsOffset
  langs:
  - csharp
  - vb
  name: Light
  nameWithType: Light
  fullName: TinyLife.Objects.Light
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Light
    path: ../TinyLife/Objects/Light.cs
    startLine: 13
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA light is a semi-object that can be added to a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"TinyLife.World.Map.AddLight(TinyLife.Objects.Light)\" data-throw-if-not-resolved=\"false\"></xref>.\nA light draws a light texture onto a lightmap and, as such, adds lighting to the rendered world.\n"
  example: []
  syntax:
    content: public class Light
    content.vb: Public Class Light
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Light.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Light.CircleTexture
  commentId: F:TinyLife.Objects.Light.CircleTexture
  id: CircleTexture
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: CircleTexture
  nameWithType: Light.CircleTexture
  fullName: TinyLife.Objects.Light.CircleTexture
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CircleTexture
    path: ../TinyLife/Objects/Light.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA texture that can be used as the <xref href=\"TinyLife.Objects.Light.Texture\" data-throw-if-not-resolved=\"false\"></xref> of a light that is circular\n"
  example: []
  syntax:
    content: public static readonly TextureRegion CircleTexture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Shared ReadOnly CircleTexture As TextureRegion
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Light.Map
  commentId: F:TinyLife.Objects.Light.Map
  id: Map
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Light.Map
  fullName: TinyLife.Objects.Light.Map
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Objects/Light.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe map that this light is on\n"
  example: []
  syntax:
    content: public readonly Map Map
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Map As Map
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Light.Texture
  commentId: F:TinyLife.Objects.Light.Texture
  id: Texture
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: Light.Texture
  fullName: TinyLife.Objects.Light.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/Objects/Light.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe texture that this light currently has.\nA custom texture can be used, or any of the static texture regions in this class, including <xref href=\"TinyLife.Objects.Light.CircleTexture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Light.UpwardsOffset
  commentId: F:TinyLife.Objects.Light.UpwardsOffset
  id: UpwardsOffset
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: UpwardsOffset
  nameWithType: Light.UpwardsOffset
  fullName: TinyLife.Objects.Light.UpwardsOffset
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpwardsOffset
    path: ../TinyLife/Objects/Light.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn offset from this light&apos;s <xref href=\"TinyLife.Objects.Light.Position\" data-throw-if-not-resolved=\"false\"></xref>, in world space, that is vertical-only (and transformed using <xref href=\"TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public Vector2 UpwardsOffset
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public UpwardsOffset As Vector2
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.Position
  commentId: P:TinyLife.Objects.Light.Position
  id: Position
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Light.Position
  fullName: TinyLife.Objects.Light.Position
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Position
    path: ../TinyLife/Objects/Light.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe position of this light, in world space.\nNote that, if this position is changed, this light&apos;s current <xref href=\"TinyLife.World.MapSection\" data-throw-if-not-resolved=\"false\"></xref> is changed automatically if needed.\n"
  example: []
  syntax:
    content: public Vector2 Position { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property Position As Vector2
  overload: TinyLife.Objects.Light.Position*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.Size
  commentId: F:TinyLife.Objects.Light.Size
  id: Size
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: Light.Size
  fullName: TinyLife.Objects.Light.Size
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Size
    path: ../TinyLife/Objects/Light.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe size, in world space, of this light, centered on its <xref href=\"TinyLife.Objects.Light.Position\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Vector2 Size
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Size As Vector2
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.Color
  commentId: F:TinyLife.Objects.Light.Color
  id: Color
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: Light.Color
  fullName: TinyLife.Objects.Light.Color
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Color
    path: ../TinyLife/Objects/Light.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe color that this light renders with.\nNote that, when drawing, this color is passed through <xref href=\"MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)\" data-throw-if-not-resolved=\"false\"></xref> due to the way the lightmap is drawn.\n"
  example: []
  syntax:
    content: public Color Color
    return:
      type: Microsoft.Xna.Framework.Color
    content.vb: Public Color As Color
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.IsDisabled
  commentId: F:TinyLife.Objects.Light.IsDisabled
  id: IsDisabled
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: IsDisabled
  nameWithType: Light.IsDisabled
  fullName: TinyLife.Objects.Light.IsDisabled
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsDisabled
    path: ../TinyLife/Objects/Light.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether this light is currently disabled.\nIf a light is disabled, it will not be rendered.\n"
  example: []
  syntax:
    content: public bool IsDisabled
    return:
      type: System.Boolean
    content.vb: Public IsDisabled As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)
  commentId: M:TinyLife.Objects.Light.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)
  id: '#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)'
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Light(Map, Vector2, TextureRegion, Vector2, Color)
  nameWithType: Light.Light(Map, Vector2, TextureRegion, Vector2, Color)
  fullName: TinyLife.Objects.Light.Light(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/Light.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new light with the given settings\n"
  example: []
  syntax:
    content: public Light(Map map, Vector2 position, TextureRegion texture, Vector2 size, Color color)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to add the light to
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The light&apos;s position, in world space
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The light&apos;s texture
    - id: size
      type: Microsoft.Xna.Framework.Vector2
      description: The size of the light, centered on its <code data-dev-comment-type="paramref" class="paramref">position</code>
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to render the light with
    content.vb: Public Sub New(map As Map, position As Vector2, texture As TextureRegion, size As Vector2, color As Color)
  overload: TinyLife.Objects.Light.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Light.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  commentId: M:TinyLife.Objects.Light.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)
  parent: TinyLife.Objects.Light
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch)
  nameWithType: Light.Draw(GameTime, SpriteBatch)
  fullName: TinyLife.Objects.Light.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Light.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/Light.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws the light in the world with the given sprite batch, at its current <xref href=\"TinyLife.Objects.Light.Position\" data-throw-if-not-resolved=\"false\"></xref> and with its current <xref href=\"TinyLife.Objects.Light.Color\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time, which can be used for animations
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw the light with
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch)
  overload: TinyLife.Objects.Light.Draw*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  commentId: M:TinyLife.World.Map.AddLight(TinyLife.Objects.Light)
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Light.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Light>()
  nameWithType: Extensions.JsonCopy<Light>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Light>()
  nameWithType.vb: Extensions.JsonCopy(Of Light)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Light)()
  name.vb: JsonCopy(Of Light)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Light>
    nameWithType: Extensions.JsonCopy<Light>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Light>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Light)
    nameWithType: Extensions.JsonCopy(Of Light)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Light)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Light.Texture
  commentId: F:TinyLife.Objects.Light.Texture
  isExternal: true
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Objects.Light.CircleTexture
  commentId: F:TinyLife.Objects.Light.CircleTexture
  isExternal: true
- uid: TinyLife.Objects.Light.Position
  commentId: P:TinyLife.Objects.Light.Position
  isExternal: true
- uid: TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Utilities.Extensions.ToVisualY(Microsoft.Xna.Framework.Vector2)
  isExternal: true
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.MapSection
  commentId: T:TinyLife.World.MapSection
  parent: TinyLife.World
  name: MapSection
  nameWithType: MapSection
  fullName: TinyLife.World.MapSection
- uid: TinyLife.Objects.Light.Position*
  commentId: Overload:TinyLife.Objects.Light.Position
  name: Position
  nameWithType: Light.Position
  fullName: TinyLife.Objects.Light.Position
- uid: MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  isExternal: true
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.Light.#ctor*
  commentId: Overload:TinyLife.Objects.Light.#ctor
  name: Light
  nameWithType: Light.Light
  fullName: TinyLife.Objects.Light.Light
- uid: TinyLife.Objects.Light.Color
  commentId: F:TinyLife.Objects.Light.Color
  isExternal: true
- uid: TinyLife.Objects.Light.Draw*
  commentId: Overload:TinyLife.Objects.Light.Draw
  name: Draw
  nameWithType: Light.Draw
  fullName: TinyLife.Objects.Light.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics

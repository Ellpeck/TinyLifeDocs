### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  id: ActionSpot
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  - TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2[])
  - TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  - TinyLife.Objects.ActionSpot.AllSpots(Microsoft.Xna.Framework.Point,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.ActionSpot.BedSpots(System.Boolean,System.Int32,System.Int32)
  - TinyLife.Objects.ActionSpot.BenchSpots(System.Boolean,System.Int32)
  - TinyLife.Objects.ActionSpot.CategoryRestriction
  - TinyLife.Objects.ActionSpot.ChairSpots(System.Int32)
  - TinyLife.Objects.ActionSpot.GetFreeDirections(TinyLife.Objects.Furniture,TinyLife.Objects.Person)
  - TinyLife.Objects.ActionSpot.GetOccupants(TinyLife.Objects.Furniture,System.Boolean,System.Boolean)
  - TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer(TinyLife.Objects.Furniture)
  - TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  langs:
  - csharp
  - vb
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
  type: Class
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionSpot
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn action spot is a <xref href=\"TinyLife.Objects.AbstractSpot\" data-throw-if-not-resolved=\"false\"></xref> extension that is used by <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> to declare a location that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can interact with the furniture at\n"
  example: []
  syntax:
    content: 'public class ActionSpot : AbstractSpot'
    content.vb: >-
      Public Class ActionSpot
          Inherits AbstractSpot
  inheritance:
  - System.Object
  - TinyLife.Objects.AbstractSpot
  inheritedMembers:
  - TinyLife.Objects.AbstractSpot.YOffset
  - TinyLife.Objects.AbstractSpot.Offset
  - TinyLife.Objects.AbstractSpot.VisualOffset
  - TinyLife.Objects.AbstractSpot.ValidDirections
  - TinyLife.Objects.AbstractSpot.Group
  - TinyLife.Objects.AbstractSpot.DrawLayer
  - TinyLife.Objects.AbstractSpot.IsOnGround
  - TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  - TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.ActionSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.ActionSpot.CategoryRestriction
  commentId: F:TinyLife.Objects.ActionSpot.CategoryRestriction
  id: CategoryRestriction
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: CategoryRestriction
  nameWithType: ActionSpot.CategoryRestriction
  fullName: TinyLife.Objects.ActionSpot.CategoryRestriction
  type: Field
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CategoryRestriction
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe categories that this <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> is restricted to.\nThis is used by things like <xref href=\"TinyLife.Objects.FurnitureType.ModernBed\" data-throw-if-not-resolved=\"false\"></xref> to declare separate spots for sitting on and sleeping on.\nBy default, this is set to null.\n"
  example: []
  syntax:
    content: public ObjectCategory CategoryRestriction
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public CategoryRestriction As ObjectCategory
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: ActionSpot(Vector2, Direction2[])
  nameWithType: ActionSpot.ActionSpot(Vector2, Direction2[])
  fullName: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new action spot with the given settings\n"
  example: []
  syntax:
    content: public ActionSpot(Vector2 offset, params Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Public Sub New(offset As Vector2, ParamArray validDirections As Direction2())
  overload: TinyLife.Objects.ActionSpot.#ctor*
  nameWithType.vb: ActionSpot.ActionSpot(Vector2, Direction2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, MLEM.Misc.Direction2())
  name.vb: ActionSpot(Vector2, Direction2())
- uid: TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: ActionSpot(Vector2, Single, Direction2[])
  nameWithType: ActionSpot.ActionSpot(Vector2, Single, Direction2[])
  fullName: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 128
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new action spot with the given settings\n"
  example: []
  syntax:
    content: public ActionSpot(Vector2 offset, float yOffset, params Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Public Sub New(offset As Vector2, yOffset As Single, ParamArray validDirections As Direction2())
  overload: TinyLife.Objects.ActionSpot.#ctor*
  nameWithType.vb: ActionSpot.ActionSpot(Vector2, Single, Direction2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2())
  name.vb: ActionSpot(Vector2, Single, Direction2())
- uid: TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  commentId: M:TinyLife.Objects.ActionSpot.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])
  id: '#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2[])'
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: ActionSpot(Vector2, Vector2, Single, Direction2[])
  nameWithType: ActionSpot.ActionSpot(Vector2, Vector2, Single, Direction2[])
  fullName: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new action spot with the given settings\n"
  example: []
  syntax:
    content: public ActionSpot(Vector2 offset, Vector2 visualOffset, float yOffset, params Direction2[] validDirections)
    parameters:
    - id: offset
      type: Microsoft.Xna.Framework.Vector2
      description: The offset on both the x and y axis that this spot has
    - id: visualOffset
      type: Microsoft.Xna.Framework.Vector2
      description: The visual offset on both the x and y axis that this spot has
    - id: yOffset
      type: System.Single
      description: The offset on the visual y axis
    - id: validDirections
      type: MLEM.Misc.Direction2[]
      description: The directions that this spot can be accessed from
    content.vb: Public Sub New(offset As Vector2, visualOffset As Vector2, yOffset As Single, ParamArray validDirections As Direction2())
  overload: TinyLife.Objects.ActionSpot.#ctor*
  nameWithType.vb: ActionSpot.ActionSpot(Vector2, Vector2, Single, Direction2())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.ActionSpot.ActionSpot(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2())
  name.vb: ActionSpot(Vector2, Vector2, Single, Direction2())
- uid: TinyLife.Objects.ActionSpot.GetFreeDirections(TinyLife.Objects.Furniture,TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.ActionSpot.GetFreeDirections(TinyLife.Objects.Furniture,TinyLife.Objects.Person)
  id: GetFreeDirections(TinyLife.Objects.Furniture,TinyLife.Objects.Person)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: GetFreeDirections(Furniture, Person)
  nameWithType: ActionSpot.GetFreeDirections(Furniture, Person)
  fullName: TinyLife.Objects.ActionSpot.GetFreeDirections(TinyLife.Objects.Furniture, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeDirections
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 149
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> values that this spot can be accessed from.\nValid directions will have an empty space that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can stand in, but not necessarily walk to.\nThe returned value is used by <xref href=\"TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref> to find a location adjacent to this action spot that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can walk to.\n"
  example: []
  syntax:
    content: public IEnumerable<Direction2> GetFreeDirections(Furniture furniture, Person person)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furnituret that this action spot belongs to
    - id: person
      type: TinyLife.Objects.Person
      description: The person trying to use this action spot
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
      description: A set of directions that are considered free, or an empty set if there are none
    content.vb: Public Function GetFreeDirections(furniture As Furniture, person As Person) As IEnumerable(Of Direction2)
  overload: TinyLife.Objects.ActionSpot.GetFreeDirections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.ActionSpot.GetOccupants(TinyLife.Objects.Furniture,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.ActionSpot.GetOccupants(TinyLife.Objects.Furniture,System.Boolean,System.Boolean)
  id: GetOccupants(TinyLife.Objects.Furniture,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: GetOccupants(Furniture, Boolean, Boolean)
  nameWithType: ActionSpot.GetOccupants(Furniture, Boolean, Boolean)
  fullName: TinyLife.Objects.ActionSpot.GetOccupants(TinyLife.Objects.Furniture, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetOccupants
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are currently occupying this action spot.\nNote that an action spot is also marked as occupied if the person is currently on their way to it.\n"
  example: []
  syntax:
    content: public IEnumerable<Person> GetOccupants(Furniture furniture, bool visualOnly = false, bool includeGroup = false)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furnituret that this action spot belongs to
    - id: visualOnly
      type: System.Boolean
      description: Whether only occupants that occupy this spot visually, using <xref href="TinyLife.Objects.Person.VisuallyOccupiedSpot" data-throw-if-not-resolved="false"></xref>, should be returned.
    - id: includeGroup
      type: System.Boolean
      description: Whether to include other action spots that have at least one of the same <xref href="TinyLife.Objects.AbstractSpot.Group" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of people interacting with this action spot
    content.vb: Public Function GetOccupants(furniture As Furniture, visualOnly As Boolean = False, includeGroup As Boolean = False) As IEnumerable(Of Person)
  overload: TinyLife.Objects.ActionSpot.GetOccupants*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.ActionSpot.BedSpots(System.Boolean,System.Int32,System.Int32)
  commentId: M:TinyLife.Objects.ActionSpot.BedSpots(System.Boolean,System.Int32,System.Int32)
  id: BedSpots(System.Boolean,System.Int32,System.Int32)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: BedSpots(Boolean, Int32, Int32)
  nameWithType: ActionSpot.BedSpots(Boolean, Int32, Int32)
  fullName: TinyLife.Objects.ActionSpot.BedSpots(System.Boolean, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BedSpots
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 201
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that returns an array of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances at the locations that they have to be for a bed.\nThe spots returned also contain spots that a person can sit on if there&apos;s not already someone laying in the bed.\nThis method can be used for single and double beds.\n"
  example: []
  syntax:
    content: public static ActionSpot[] BedSpots(bool single = false, int sleepDrawLayer = 3, int sitDrawLayer = 4)
    parameters:
    - id: single
      type: System.Boolean
      description: Whether the bed in question is a single bed (or a double bed)
    - id: sleepDrawLayer
      type: System.Int32
      description: The layer that sleeping people should be drawn on.
    - id: sitDrawLayer
      type: System.Int32
      description: The layer that sitting people should be drawn on.
    return:
      type: TinyLife.Objects.ActionSpot[]
      description: A set of action spots for the bed
    content.vb: Public Shared Function BedSpots(single As Boolean = False, sleepDrawLayer As Integer = 3, sitDrawLayer As Integer = 4) As ActionSpot()
  overload: TinyLife.Objects.ActionSpot.BedSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ActionSpot.BenchSpots(System.Boolean,System.Int32)
  commentId: M:TinyLife.Objects.ActionSpot.BenchSpots(System.Boolean,System.Int32)
  id: BenchSpots(System.Boolean,System.Int32)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: BenchSpots(Boolean, Int32)
  nameWithType: ActionSpot.BenchSpots(Boolean, Int32)
  fullName: TinyLife.Objects.ActionSpot.BenchSpots(System.Boolean, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BenchSpots
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 229
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that returns an array of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances at locations relevant for benches and sofas.\nThis is used by objects like <xref href=\"TinyLife.Objects.FurnitureType.SimpleBench\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.SimpleSofa\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionSpot[] BenchSpots(bool threeSeater = false, int drawLayer = 2)
    parameters:
    - id: threeSeater
      type: System.Boolean
      description: Whether the bench is a three-seater (three tiles large)
    - id: drawLayer
      type: System.Int32
      description: The layer that people should be drawn on when sitting.
    return:
      type: TinyLife.Objects.ActionSpot[]
      description: An array of action spots for benches and sofas
    content.vb: Public Shared Function BenchSpots(threeSeater As Boolean = False, drawLayer As Integer = 2) As ActionSpot()
  overload: TinyLife.Objects.ActionSpot.BenchSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ActionSpot.ChairSpots(System.Int32)
  commentId: M:TinyLife.Objects.ActionSpot.ChairSpots(System.Int32)
  id: ChairSpots(System.Int32)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: ChairSpots(Int32)
  nameWithType: ActionSpot.ChairSpots(Int32)
  fullName: TinyLife.Objects.ActionSpot.ChairSpots(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChairSpots
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 249
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that returns an array of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances at locations relevant for regular chairs.\n"
  example: []
  syntax:
    content: public static ActionSpot[] ChairSpots(int drawLayer = 1)
    parameters:
    - id: drawLayer
      type: System.Int32
      description: The layer that people should be drawn on when sitting.
    return:
      type: TinyLife.Objects.ActionSpot[]
      description: An array of action spots for chairs
    content.vb: Public Shared Function ChairSpots(drawLayer As Integer = 1) As ActionSpot()
  overload: TinyLife.Objects.ActionSpot.ChairSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  id: PicnicTableSpots(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: PicnicTableSpots(Point)
  nameWithType: ActionSpot.PicnicTableSpots(Point)
  fullName: TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PicnicTableSpots
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 259
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that returns an array of <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> instances at locations relevant for picnic-style tables that have attached benches.\nThis is used by objects like <xref href=\"TinyLife.Objects.FurnitureType.SimplePicnicTable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionSpot[] PicnicTableSpots(Point size)
    parameters:
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size of the picnic table furniture
    return:
      type: TinyLife.Objects.ActionSpot[]
      description: An array of action spots for picnic tables
    content.vb: Public Shared Function PicnicTableSpots(size As Point) As ActionSpot()
  overload: TinyLife.Objects.ActionSpot.PicnicTableSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ActionSpot.AllSpots(Microsoft.Xna.Framework.Point,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.ActionSpot.AllSpots(Microsoft.Xna.Framework.Point,TinyLife.Objects.ObjectCategory)
  id: AllSpots(Microsoft.Xna.Framework.Point,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: AllSpots(Point, ObjectCategory)
  nameWithType: ActionSpot.AllSpots(Point, ObjectCategory)
  fullName: TinyLife.Objects.ActionSpot.AllSpots(Microsoft.Xna.Framework.Point, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllSpots
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 282
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns an array of action spots with four valid directions for each location within the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">size</code>.\nThis is the default behavior for furniture that doesn&apos;t have manually set action spots.\n"
  example: []
  syntax:
    content: public static ActionSpot[] AllSpots(Point size, ObjectCategory categoryRestriction = null)
    parameters:
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size of the furniture
    - id: categoryRestriction
      type: TinyLife.Objects.ObjectCategory
      description: An optional <xref href="TinyLife.Objects.ActionSpot.CategoryRestriction" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.Objects.ActionSpot[]
      description: An array of all spots within the size
    content.vb: Public Shared Function AllSpots(size As Point, categoryRestriction As ObjectCategory = Nothing) As ActionSpot()
  overload: TinyLife.Objects.ActionSpot.AllSpots*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer(TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer(TinyLife.Objects.Furniture)
  id: GetPicnicBenchDrawLayer(TinyLife.Objects.Furniture)
  parent: TinyLife.Objects.ActionSpot
  langs:
  - csharp
  - vb
  name: GetPicnicBenchDrawLayer(Furniture)
  nameWithType: ActionSpot.GetPicnicBenchDrawLayer(Furniture)
  fullName: TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer(TinyLife.Objects.Furniture)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/ActionSpot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPicnicBenchDrawLayer
    path: ../TinyLife/Objects/ActionSpot.cs
    startLine: 297
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis is a helper method used by <xref href=\"TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref>.\nSince picnic tables have their benches attached, their <xref href=\"TinyLife.Objects.AbstractSpot.DrawLayer\" data-throw-if-not-resolved=\"false\"></xref> needs to be based on the <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref>, which is what this method calculates.\n"
  example: []
  syntax:
    content: public static int GetPicnicBenchDrawLayer(Furniture furniture)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The object whose draw layer to get
    return:
      type: System.Int32
      description: The draw layer as required by <xref href="TinyLife.Objects.AbstractSpot.DrawLayer" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Function GetPicnicBenchDrawLayer(furniture As Furniture) As Integer
  overload: TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Objects.AbstractSpot.YOffset
  commentId: P:TinyLife.Objects.AbstractSpot.YOffset
  parent: TinyLife.Objects.AbstractSpot
  name: YOffset
  nameWithType: AbstractSpot.YOffset
  fullName: TinyLife.Objects.AbstractSpot.YOffset
- uid: TinyLife.Objects.AbstractSpot.Offset
  commentId: F:TinyLife.Objects.AbstractSpot.Offset
  parent: TinyLife.Objects.AbstractSpot
  name: Offset
  nameWithType: AbstractSpot.Offset
  fullName: TinyLife.Objects.AbstractSpot.Offset
- uid: TinyLife.Objects.AbstractSpot.VisualOffset
  commentId: F:TinyLife.Objects.AbstractSpot.VisualOffset
  parent: TinyLife.Objects.AbstractSpot
  name: VisualOffset
  nameWithType: AbstractSpot.VisualOffset
  fullName: TinyLife.Objects.AbstractSpot.VisualOffset
- uid: TinyLife.Objects.AbstractSpot.ValidDirections
  commentId: F:TinyLife.Objects.AbstractSpot.ValidDirections
  parent: TinyLife.Objects.AbstractSpot
  name: ValidDirections
  nameWithType: AbstractSpot.ValidDirections
  fullName: TinyLife.Objects.AbstractSpot.ValidDirections
- uid: TinyLife.Objects.AbstractSpot.Group
  commentId: F:TinyLife.Objects.AbstractSpot.Group
  parent: TinyLife.Objects.AbstractSpot
  name: Group
  nameWithType: AbstractSpot.Group
  fullName: TinyLife.Objects.AbstractSpot.Group
- uid: TinyLife.Objects.AbstractSpot.DrawLayer
  commentId: F:TinyLife.Objects.AbstractSpot.DrawLayer
  parent: TinyLife.Objects.AbstractSpot
  name: DrawLayer
  nameWithType: AbstractSpot.DrawLayer
  fullName: TinyLife.Objects.AbstractSpot.DrawLayer
- uid: TinyLife.Objects.AbstractSpot.IsOnGround
  commentId: P:TinyLife.Objects.AbstractSpot.IsOnGround
  parent: TinyLife.Objects.AbstractSpot
  name: IsOnGround
  nameWithType: AbstractSpot.IsOnGround
  fullName: TinyLife.Objects.AbstractSpot.IsOnGround
- uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  parent: TinyLife.Objects.AbstractSpot
  isExternal: true
  name: GetValidDirections(Direction2)
  nameWithType: AbstractSpot.GetValidDirections(Direction2)
  fullName: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
    name: GetValidDirections
    nameWithType: AbstractSpot.GetValidDirections
    fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.GetValidDirections(MLEM.Misc.Direction2)
    name: GetValidDirections
    nameWithType: AbstractSpot.GetValidDirections
    fullName: TinyLife.Objects.AbstractSpot.GetValidDirections
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.AbstractSpot
  isExternal: true
  name: GetLocation(Furniture, Boolean)
  nameWithType: AbstractSpot.GetLocation(Furniture, Boolean)
  fullName: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
    name: GetLocation
    nameWithType: AbstractSpot.GetLocation
    fullName: TinyLife.Objects.AbstractSpot.GetLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.GetLocation(TinyLife.Objects.Furniture,System.Boolean)
    name: GetLocation
    nameWithType: AbstractSpot.GetLocation
    fullName: TinyLife.Objects.AbstractSpot.GetLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  commentId: M:TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  parent: TinyLife.Objects.AbstractSpot
  name: DoGroupsOverlap(AbstractSpot)
  nameWithType: AbstractSpot.DoGroupsOverlap(AbstractSpot)
  fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
  spec.csharp:
  - uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
    name: DoGroupsOverlap
    nameWithType: AbstractSpot.DoGroupsOverlap
    fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.AbstractSpot.DoGroupsOverlap(TinyLife.Objects.AbstractSpot)
    name: DoGroupsOverlap
    nameWithType: AbstractSpot.DoGroupsOverlap
    fullName: TinyLife.Objects.AbstractSpot.DoGroupsOverlap
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AbstractSpot
    name: AbstractSpot
    nameWithType: AbstractSpot
    fullName: TinyLife.Objects.AbstractSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ActionSpot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionSpot>()
  nameWithType: Extensions.JsonCopy<ActionSpot>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ActionSpot>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionSpot)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ActionSpot)()
  name.vb: JsonCopy(Of ActionSpot)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionSpot>
    nameWithType: Extensions.JsonCopy<ActionSpot>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.ActionSpot>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionSpot)
    nameWithType: Extensions.JsonCopy(Of ActionSpot)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.ActionSpot)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.FurnitureType.ModernBed
  commentId: F:TinyLife.Objects.FurnitureType.ModernBed
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.ActionSpot.#ctor*
  commentId: Overload:TinyLife.Objects.ActionSpot.#ctor
  name: ActionSpot
  nameWithType: ActionSpot.ActionSpot
  fullName: TinyLife.Objects.ActionSpot.ActionSpot
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  name: GetFreeActionSpots(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpots(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
    nameWithType: Furniture.GetFreeActionSpots
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpots(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpots
    nameWithType: Furniture.GetFreeActionSpots
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpots
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: Furniture.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: Furniture.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ActionSpot.GetFreeDirections*
  commentId: Overload:TinyLife.Objects.ActionSpot.GetFreeDirections
  name: GetFreeDirections
  nameWithType: ActionSpot.GetFreeDirections
  fullName: TinyLife.Objects.ActionSpot.GetFreeDirections
- uid: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Direction2>
  nameWithType: IEnumerable<Direction2>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Misc.Direction2>
  nameWithType.vb: IEnumerable(Of Direction2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Misc.Direction2)
  name.vb: IEnumerable(Of Direction2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.Person.VisuallyOccupiedSpot
  commentId: P:TinyLife.Objects.Person.VisuallyOccupiedSpot
  isExternal: true
- uid: TinyLife.Objects.ActionSpot.GetOccupants*
  commentId: Overload:TinyLife.Objects.ActionSpot.GetOccupants
  name: GetOccupants
  nameWithType: ActionSpot.GetOccupants
  fullName: TinyLife.Objects.ActionSpot.GetOccupants
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ActionSpot.BedSpots*
  commentId: Overload:TinyLife.Objects.ActionSpot.BedSpots
  name: BedSpots
  nameWithType: ActionSpot.BedSpots
  fullName: TinyLife.Objects.ActionSpot.BedSpots
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.ActionSpot[]
  isExternal: true
  name: ActionSpot[]
  nameWithType: ActionSpot[]
  fullName: TinyLife.Objects.ActionSpot[]
  nameWithType.vb: ActionSpot()
  fullName.vb: TinyLife.Objects.ActionSpot()
  name.vb: ActionSpot()
  spec.csharp:
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.FurnitureType.SimpleBench
  commentId: F:TinyLife.Objects.FurnitureType.SimpleBench
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.SimpleSofa
  commentId: F:TinyLife.Objects.FurnitureType.SimpleSofa
  isExternal: true
- uid: TinyLife.Objects.ActionSpot.BenchSpots*
  commentId: Overload:TinyLife.Objects.ActionSpot.BenchSpots
  name: BenchSpots
  nameWithType: ActionSpot.BenchSpots
  fullName: TinyLife.Objects.ActionSpot.BenchSpots
- uid: TinyLife.Objects.ActionSpot.ChairSpots*
  commentId: Overload:TinyLife.Objects.ActionSpot.ChairSpots
  name: ChairSpots
  nameWithType: ActionSpot.ChairSpots
  fullName: TinyLife.Objects.ActionSpot.ChairSpots
- uid: TinyLife.Objects.FurnitureType.SimplePicnicTable
  commentId: F:TinyLife.Objects.FurnitureType.SimplePicnicTable
  isExternal: true
- uid: TinyLife.Objects.ActionSpot.PicnicTableSpots*
  commentId: Overload:TinyLife.Objects.ActionSpot.PicnicTableSpots
  name: PicnicTableSpots
  nameWithType: ActionSpot.PicnicTableSpots
  fullName: TinyLife.Objects.ActionSpot.PicnicTableSpots
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.ActionSpot.CategoryRestriction
  commentId: F:TinyLife.Objects.ActionSpot.CategoryRestriction
  isExternal: true
- uid: TinyLife.Objects.ActionSpot.AllSpots*
  commentId: Overload:TinyLife.Objects.ActionSpot.AllSpots
  name: AllSpots
  nameWithType: ActionSpot.AllSpots
  fullName: TinyLife.Objects.ActionSpot.AllSpots
- uid: TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.ActionSpot.PicnicTableSpots(Microsoft.Xna.Framework.Point)
  isExternal: true
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  isExternal: true
- uid: TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer*
  commentId: Overload:TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer
  name: GetPicnicBenchDrawLayer
  nameWithType: ActionSpot.GetPicnicBenchDrawLayer
  fullName: TinyLife.Objects.ActionSpot.GetPicnicBenchDrawLayer

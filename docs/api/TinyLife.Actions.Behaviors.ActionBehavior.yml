### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  id: ActionBehavior
  parent: TinyLife.Actions.Behaviors
  children:
  - TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ActionBehavior.Action
  - TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions
  - TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  - TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  - TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  - TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  - TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  langs:
  - csharp
  - vb
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionBehavior
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nAn action behavior is a generic, non-serialized set of things that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> does throughout an action.\nThis class is intended to be used with <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref>, which is a <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> that makes use of a behavior.\nNote that action behaviors do not have the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref>, which means they are not saved to disk. This differentiates them from the various action handlers in <xref href=\"TinyLife.Actions.Handlers\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class ActionBehavior
    content.vb: Public MustInherit Class ActionBehavior
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.Actions.Behaviors.GetAndSitDownBehavior
  - TinyLife.Actions.Behaviors.PhoneBehavior
  - TinyLife.Actions.Behaviors.PickUpOrSpawnBehavior
  - TinyLife.Actions.Behaviors.SinkBehavior
  - TinyLife.Actions.Behaviors.WorkAtDeskObjectBehavior
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Behaviors.ActionBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Action
  commentId: F:TinyLife.Actions.Behaviors.ActionBehavior.Action
  id: Action
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: ActionBehavior.Action
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Action
  type: Field
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Action
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 19
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nThe action that this behavior is acting upon\n"
  example: []
  syntax:
    content: protected readonly Action Action
    return:
      type: TinyLife.Actions.Action
    content.vb: Protected ReadOnly Action As Action
- uid: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  commentId: P:TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  id: FullyInProgress
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: FullyInProgress
  nameWithType: ActionBehavior.FullyInProgress
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullyInProgress
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns whether this action behavior is fully in progress.\nThis is the action behavior version of <xref href=\"TinyLife.Actions.Action.FullyInProgress\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool FullyInProgress { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property FullyInProgress As Boolean
  overload: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  id: '#ctor(TinyLife.Actions.Action)'
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: ActionBehavior(Action)
  nameWithType: ActionBehavior.ActionBehavior(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.ActionBehavior(TinyLife.Actions.Action)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a new action behavior with the given underlying action.\nTo create an action behavior of a given type automatically, use <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type%2cTinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ActionBehavior(Action action)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action that this behavior is acting upon
    content.vb: Protected Sub New(action As Action)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.#ctor*
  nameWithType.vb: ActionBehavior.New(Action)
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.New(TinyLife.Actions.Action)
  name.vb: New(Action)
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions
  id: CreateFirstActions
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: CreateFirstActions()
  nameWithType: ActionBehavior.CreateFirstActions()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateFirstActions
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a set of actions that should be executed before the main <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref> starts.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.BehaviorAction.CreateFirstActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<Action> CreateFirstActions()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: ''
    content.vb: Public MustOverride Function CreateFirstActions() As IEnumerable(Of Action)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  id: CreateLastActions
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: CreateLastActions()
  nameWithType: ActionBehavior.CreateLastActions()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateLastActions
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a set of actions that should be executed after the main <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref> finished.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.BehaviorAction.CreateLastActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<Action> CreateLastActions()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: ''
    content.vb: Public Overridable Function CreateLastActions() As IEnumerable(Of Action)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  id: Initialize
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: ActionBehavior.Initialize()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nInitializes this action behavior.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.MultiAction.AndThenInitialize\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize()
  overload: TinyLife.Actions.Behaviors.ActionBehavior.Initialize*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: ActionBehavior.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nUpdates this action behavior every update frame.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed since the last update frame
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.Update*
  nameWithType.vb: ActionBehavior.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  id: GetIconObject
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: GetIconObject()
  nameWithType: ActionBehavior.GetIconObject()
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetIconObject
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns this action behavior&apos;s icon object.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Action.GetIconObject\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns the underlying <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual MapObject GetIconObject()
    return:
      type: TinyLife.Objects.MapObject
      description: The icon object
    content.vb: Public Overridable Function GetIconObject() As MapObject
  overload: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: ActionBehavior.CanMultitask(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanMultitask
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturn true on this method if this action can be multi-tasked along with the passed <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nA multi-tasking is an action that is currently active along with another action.\nBy default, multi-tasking is disallowed for any action.\n"
  example: []
  syntax:
    content: public virtual bool CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: System.Boolean
      description: Whether this action can be multi-tasked
    content.vb: Public Overridable Function CanMultitask(other As Action) As Boolean
  overload: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: ActionBehavior.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCauses any activities that this action behavior executes to be marked as completed.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void OnCompleted(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: ''
    content.vb: Public Overridable Sub OnCompleted(completion As CompletionType)
  overload: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  id: GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: GetNextAction(CompletionType)
  nameWithType: ActionBehavior.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetNextAction
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nReturns the action that should be executed after this action behavior&apos;s underlying <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.Action\" data-throw-if-not-resolved=\"false\"></xref> completes.\nThis method is automatically called when using <xref href=\"TinyLife.Actions.BehaviorAction\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual Action GetNextAction(CompletionType completion)
    parameters:
    - id: completion
      type: TinyLife.Actions.CompletionType
      description: The underlying action&apos;s completion type
    return:
      type: TinyLife.Actions.Action
      description: The action that should be executed next, or null
    content.vb: Public Overridable Function GetNextAction(completion As CompletionType) As Action
  overload: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction*
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  id: CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  langs:
  - csharp
  - vb
  name: CreateDefaultInstance(Type, Action)
  nameWithType: ActionBehavior.CreateDefaultInstance(Type, Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type, TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Behaviors/ActionBehavior.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateDefaultInstance
    path: ../TinyLife/Actions/Behaviors/ActionBehavior.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Behaviors
  summary: "\nCreates a default instance of the type <code data-dev-comment-type=\"paramref\" class=\"paramref\">type</code>, using the default constructor <xref href=\"TinyLife.Actions.Behaviors.ActionBehavior.%23ctor(TinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the type used doesn&apos;t have a default constructor, this method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static ActionBehavior CreateDefaultInstance(Type type, Action action)
    parameters:
    - id: type
      type: System.Type
      description: The type of the behavior to construct
    - id: action
      type: TinyLife.Actions.Action
      description: The action that is constructing this behavior
    return:
      type: TinyLife.Actions.Behaviors.ActionBehavior
      description: The behavior instance constructed
    content.vb: Public Shared Function CreateDefaultInstance(type As Type, action As Action) As ActionBehavior
  overload: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the <code data-dev-comment-type="paramref" class="paramref">type</code> does not have a default constructor
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.BehaviorAction
  commentId: T:TinyLife.Actions.BehaviorAction
  parent: TinyLife.Actions
  name: BehaviorAction
  nameWithType: BehaviorAction
  fullName: TinyLife.Actions.BehaviorAction
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: System.Runtime.Serialization.DataContractAttribute
  commentId: T:System.Runtime.Serialization.DataContractAttribute
  parent: System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization.datacontractattribute
  name: DataContractAttribute
  nameWithType: DataContractAttribute
  fullName: System.Runtime.Serialization.DataContractAttribute
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
- uid: TinyLife.Actions.Behaviors
  commentId: N:TinyLife.Actions.Behaviors
  name: TinyLife.Actions.Behaviors
  nameWithType: TinyLife.Actions.Behaviors
  fullName: TinyLife.Actions.Behaviors
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Behaviors
    name: Behaviors
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Behaviors
    name: Behaviors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionBehavior>(ActionBehavior)
  nameWithType: Extensions.JsonCopy<ActionBehavior>(ActionBehavior)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Behaviors.ActionBehavior>(TinyLife.Actions.Behaviors.ActionBehavior)
  nameWithType.vb: Extensions.JsonCopy(Of ActionBehavior)(ActionBehavior)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Behaviors.ActionBehavior)(TinyLife.Actions.Behaviors.ActionBehavior)
  name.vb: JsonCopy(Of ActionBehavior)(ActionBehavior)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Behaviors.ActionBehavior)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Actions.Behaviors.ActionBehavior
    name: ActionBehavior
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.Behaviors.ActionBehavior
    name: ActionBehavior
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.Behaviors.ActionBehavior)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Behaviors.ActionBehavior
    name: ActionBehavior
  - name: )
  - name: (
  - uid: TinyLife.Actions.Behaviors.ActionBehavior
    name: ActionBehavior
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  parent: TinyLife.Actions.Action
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
  name: FullyInProgress
  nameWithType: ActionBehavior.FullyInProgress
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.FullyInProgress
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: CreateDefaultInstance(Type, Action)
  nameWithType: ActionBehavior.CreateDefaultInstance(Type, Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
    name: CreateDefaultInstance
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance(System.Type,TinyLife.Actions.Action)
    name: CreateDefaultInstance
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.#ctor
  name: ActionBehavior
  nameWithType: ActionBehavior.ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.ActionBehavior
  nameWithType.vb: ActionBehavior.New
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.New
  name.vb: New
- uid: TinyLife.Actions.Behaviors.ActionBehavior
  commentId: T:TinyLife.Actions.Behaviors.ActionBehavior
  parent: TinyLife.Actions.Behaviors
  name: ActionBehavior
  nameWithType: ActionBehavior
  fullName: TinyLife.Actions.Behaviors.ActionBehavior
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Action
  commentId: F:TinyLife.Actions.Behaviors.ActionBehavior.Action
  parent: TinyLife.Actions.Behaviors.ActionBehavior
  name: Action
  nameWithType: ActionBehavior.Action
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Action
- uid: TinyLife.Actions.BehaviorAction.CreateFirstActions
  commentId: M:TinyLife.Actions.BehaviorAction.CreateFirstActions
  parent: TinyLife.Actions.BehaviorAction
  name: CreateFirstActions()
  nameWithType: BehaviorAction.CreateFirstActions()
  fullName: TinyLife.Actions.BehaviorAction.CreateFirstActions()
  spec.csharp:
  - uid: TinyLife.Actions.BehaviorAction.CreateFirstActions
    name: CreateFirstActions
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.BehaviorAction.CreateFirstActions
    name: CreateFirstActions
  - name: (
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions
  name: CreateFirstActions
  nameWithType: ActionBehavior.CreateFirstActions
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateFirstActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.BehaviorAction.CreateLastActions
  commentId: M:TinyLife.Actions.BehaviorAction.CreateLastActions
  parent: TinyLife.Actions.BehaviorAction
  name: CreateLastActions()
  nameWithType: BehaviorAction.CreateLastActions()
  fullName: TinyLife.Actions.BehaviorAction.CreateLastActions()
  spec.csharp:
  - uid: TinyLife.Actions.BehaviorAction.CreateLastActions
    name: CreateLastActions
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.BehaviorAction.CreateLastActions
    name: CreateLastActions
  - name: (
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
  name: CreateLastActions
  nameWithType: ActionBehavior.CreateLastActions
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateLastActions
- uid: TinyLife.Actions.MultiAction.AndThenInitialize
  commentId: M:TinyLife.Actions.MultiAction.AndThenInitialize
  parent: TinyLife.Actions.MultiAction
  name: AndThenInitialize()
  nameWithType: MultiAction.AndThenInitialize()
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
  - name: (
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Initialize*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.Initialize
  name: Initialize
  nameWithType: ActionBehavior.Initialize
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Initialize
- uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: AndThenUpdate(GameTime, TimeSpan, float)
  nameWithType: MultiAction.AndThenUpdate(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: MultiAction.AndThenUpdate(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: AndThenUpdate(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: AndThenUpdate
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: AndThenUpdate
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Actions.Behaviors.ActionBehavior.Update*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.Update
  name: Update
  nameWithType: ActionBehavior.Update
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
  name: GetIconObject
  nameWithType: ActionBehavior.GetIconObject
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetIconObject
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask
  name: CanMultitask
  nameWithType: ActionBehavior.CanMultitask
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CanMultitask
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
  name: OnCompleted
  nameWithType: ActionBehavior.OnCompleted
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.OnCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction
  name: GetNextAction
  nameWithType: ActionBehavior.GetNextAction
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.GetNextAction
- uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
  name: ActionBehavior(Action)
  nameWithType: ActionBehavior.ActionBehavior(Action)
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.ActionBehavior(TinyLife.Actions.Action)
  nameWithType.vb: ActionBehavior.New(Action)
  fullName.vb: TinyLife.Actions.Behaviors.ActionBehavior.New(TinyLife.Actions.Action)
  name.vb: New(Action)
  spec.csharp:
  - uid: TinyLife.Actions.Behaviors.ActionBehavior.#ctor(TinyLife.Actions.Action)
    name: ActionBehavior
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - name: New
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance*
  commentId: Overload:TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
  name: CreateDefaultInstance
  nameWithType: ActionBehavior.CreateDefaultInstance
  fullName: TinyLife.Actions.Behaviors.ActionBehavior.CreateDefaultInstance
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type

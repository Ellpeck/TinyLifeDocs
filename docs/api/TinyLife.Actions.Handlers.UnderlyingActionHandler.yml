### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler
  commentId: T:TinyLife.Actions.Handlers.UnderlyingActionHandler
  id: UnderlyingActionHandler
  parent: TinyLife.Actions.Handlers
  children:
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact(TinyLife.Actions.Typeless.TypelessAction,System.Boolean)
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: UnderlyingActionHandler
  nameWithType: UnderlyingActionHandler
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler
  type: Class
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UnderlyingActionHandler
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nAn UnderlyingAction is a class that can instantiate a single <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Action\" data-throw-if-not-resolved=\"false\"></xref> that will be executed as part of the action it is used in.\nNote that, when using this class, <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> and especially <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> have to be called in the appropriate places.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class UnderlyingActionHandler
    content.vb: >-
      <DataContract>

      Public Class UnderlyingActionHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.Handlers.UnderlyingActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  commentId: P:TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  id: Action
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: UnderlyingActionHandler.Action
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  type: Property
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Action
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nThe underlying action.\nThis should be initialized using <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TypelessAction Action { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Typeless.TypelessAction
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Action As TypelessAction
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  id: Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: Initialize(ActionType, ActionInfo, Boolean, Boolean)
  nameWithType: UnderlyingActionHandler.Initialize(ActionType, ActionInfo, Boolean, Boolean)
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nInitializes the underlying action of this action\n"
  example: []
  syntax:
    content: public TypelessAction Initialize(ActionType type, ActionInfo info, bool automatic = false, bool force = true)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action to initialize
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The info to pass to the action
    - id: automatic
      type: System.Boolean
      description: Whether the action should be considered <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
    - id: force
      type: System.Boolean
      description: Whether the action should be created even if <xref href="TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> returns false
    return:
      type: TinyLife.Actions.Typeless.TypelessAction
    content.vb: Public Function Initialize(type As ActionType, info As ActionInfo, automatic As Boolean = False, force As Boolean = True) As TypelessAction
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact(TinyLife.Actions.Typeless.TypelessAction,System.Boolean)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact(TinyLife.Actions.Typeless.TypelessAction,System.Boolean)
  id: InitializeExact(TinyLife.Actions.Typeless.TypelessAction,System.Boolean)
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: InitializeExact(TypelessAction, Boolean)
  nameWithType: UnderlyingActionHandler.InitializeExact(TypelessAction, Boolean)
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact(TinyLife.Actions.Typeless.TypelessAction, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InitializeExact
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nInitializes the underlying action of this action using the given <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should be tested, <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> can be used instead.\n"
  example: []
  syntax:
    content: public void InitializeExact(TypelessAction action, bool automatic = false)
    parameters:
    - id: action
      type: TinyLife.Actions.Typeless.TypelessAction
      description: The action to initialize
    - id: automatic
      type: System.Boolean
      description: Whether the action should be considered <xref href="TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub InitializeExact(action As TypelessAction, automatic As Boolean = False)
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: UnderlyingActionHandler.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nUpdates the <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Action\" data-throw-if-not-resolved=\"false\"></xref>, if it exists.\nThis action should be called at the end of <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> or any derived methods.\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: UnderlyingActionHandler.Validate(Person)
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nValidates this action container and its <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method should be called in <xref href=\"TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: UnderlyingActionHandler.IsCompleted()
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nReturns whether the current <xref href=\"TinyLife.Actions.Handlers.UnderlyingActionHandler.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed, or returns <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref> if there is no current action.\n"
  example: []
  syntax:
    content: public CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: Whether this underlying action handler is completed.
    content.vb: Public Function IsCompleted As CompletionType
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Handlers.UnderlyingActionHandler
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: UnderlyingActionHandler.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/Handlers/UnderlyingActionHandler.cs
    startLine: 102
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions.Handlers
  summary: "\nCalls this underlying action&apos;s <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> method.\nThis should be called for any completion type that the action that uses this underlying action experiences, even <xref href=\"TinyLife.Actions.CompletionType.Canceled\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.CompletionType.Failed\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the underlying action is null or already completed, this method has no effect.\n"
  example: []
  syntax:
    content: public bool OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion type
    return:
      type: System.Boolean
      description: Whether the completion type was consumed by this underlying action handler
    content.vb: Public Function OnCompleted(type As CompletionType) As Boolean
  overload: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  commentId: P:TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted(TinyLife.Actions.CompletionType)
  isExternal: true
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<UnderlyingActionHandler>()
  nameWithType: Extensions.JsonCopy<UnderlyingActionHandler>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Handlers.UnderlyingActionHandler>()
  nameWithType.vb: Extensions.JsonCopy(Of UnderlyingActionHandler)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Handlers.UnderlyingActionHandler)()
  name.vb: JsonCopy(Of UnderlyingActionHandler)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<UnderlyingActionHandler>
    nameWithType: Extensions.JsonCopy<UnderlyingActionHandler>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.Handlers.UnderlyingActionHandler>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of UnderlyingActionHandler)
    nameWithType: Extensions.JsonCopy(Of UnderlyingActionHandler)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.Handlers.UnderlyingActionHandler)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
  name: Action
  nameWithType: UnderlyingActionHandler.Action
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Action
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
- uid: TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.CanExecute(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize
  name: Initialize
  nameWithType: UnderlyingActionHandler.Initialize
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Initialize
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact
  name: InitializeExact
  nameWithType: UnderlyingActionHandler.InitializeExact
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.InitializeExact
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Action.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.Update
  name: Update
  nameWithType: UnderlyingActionHandler.Update
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: Action.Validate
    fullName: TinyLife.Actions.Action.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate
  name: Validate
  nameWithType: UnderlyingActionHandler.Validate
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.Validate
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted
  name: IsCompleted
  nameWithType: UnderlyingActionHandler.IsCompleted
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.IsCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: Action.OnCompleted
    fullName: TinyLife.Actions.Action.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CompletionType.Canceled
  commentId: F:TinyLife.Actions.CompletionType.Canceled
  isExternal: true
- uid: TinyLife.Actions.CompletionType.Failed
  commentId: F:TinyLife.Actions.CompletionType.Failed
  isExternal: true
- uid: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted*
  commentId: Overload:TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted
  name: OnCompleted
  nameWithType: UnderlyingActionHandler.OnCompleted
  fullName: TinyLife.Actions.Handlers.UnderlyingActionHandler.OnCompleted

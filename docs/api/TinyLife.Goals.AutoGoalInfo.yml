### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  id: AutoGoalInfo
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.AutoGoalInfo.#ctor(System.String,TinyLife.Goals.GoalTrigger[],System.Func{System.Object,System.Boolean},System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal})
  - TinyLife.Goals.AutoGoalInfo.Amount``1(System.String,System.Single,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  - TinyLife.Goals.AutoGoalInfo.Condition
  - TinyLife.Goals.AutoGoalInfo.Conditioned``1(System.String,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  - TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  - TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Int32,System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  - TinyLife.Goals.AutoGoalInfo.Timed``1(System.String,System.TimeSpan,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  - TinyLife.Goals.AutoGoalInfo.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  - TinyLife.Goals.AutoGoalInfo.Trigger(TinyLife.Goals.GoalSet,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  - TinyLife.Goals.AutoGoalInfo.Triggers
  langs:
  - csharp
  - vb
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
  type: Class
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AutoGoalInfo
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA <xref href=\"TinyLife.Goals.GoalInfo\" data-throw-if-not-resolved=\"false\"></xref> for an auto-triggered goal, specifically a <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nTo construct a new auto goal info, use the provided static methods in this class.\n"
  example: []
  syntax:
    content: 'public class AutoGoalInfo : GoalInfo, IGenericDataHolder'
    content.vb: >-
      Public Class AutoGoalInfo
          Inherits GoalInfo
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  - TinyLife.Goals.GoalInfo
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Goals.GoalInfo.Name
  - TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.AutoGoalInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.AutoGoalInfo.Triggers
  commentId: F:TinyLife.Goals.AutoGoalInfo.Triggers
  id: Triggers
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Triggers
  nameWithType: AutoGoalInfo.Triggers
  fullName: TinyLife.Goals.AutoGoalInfo.Triggers
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Triggers
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA set of <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> instances that trigger this auto goal.\nThis value is used in <xref href=\"TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly GoalTrigger[] Triggers
    return:
      type: TinyLife.Goals.GoalTrigger[]
    content.vb: Public ReadOnly Triggers As GoalTrigger()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AutoGoalInfo.Condition
  commentId: F:TinyLife.Goals.AutoGoalInfo.Condition
  id: Condition
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Condition
  nameWithType: AutoGoalInfo.Condition
  fullName: TinyLife.Goals.AutoGoalInfo.Condition
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Condition
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA condition, which takes in an object and returns whether this auto goal can be triggered.\nThis value is used in <xref href=\"TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly Func<object, bool> Condition
    return:
      type: System.Func{System.Object,System.Boolean}
    content.vb: Public ReadOnly Condition As Func(Of Object, Boolean)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.AutoGoalInfo.#ctor(System.String,TinyLife.Goals.GoalTrigger[],System.Func{System.Object,System.Boolean},System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal})
  commentId: M:TinyLife.Goals.AutoGoalInfo.#ctor(System.String,TinyLife.Goals.GoalTrigger[],System.Func{System.Object,System.Boolean},System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal})
  id: '#ctor(System.String,TinyLife.Goals.GoalTrigger[],System.Func{System.Object,System.Boolean},System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal})'
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: AutoGoalInfo(String, GoalTrigger[], Func<Object, Boolean>, Func<GoalSet, AutoGoalInfo, Goal>)
  nameWithType: AutoGoalInfo.AutoGoalInfo(String, GoalTrigger[], Func<Object, Boolean>, Func<GoalSet, AutoGoalInfo, Goal>)
  fullName: TinyLife.Goals.AutoGoalInfo.AutoGoalInfo(System.String, TinyLife.Goals.GoalTrigger[], System.Func<System.Object, System.Boolean>, System.Func<TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo, TinyLife.Goals.Goal>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new auto goal info with the given settings.\nTo create a new auto goal info of an API-provided type, use any of the static methods in this class.\n"
  example: []
  syntax:
    content: protected AutoGoalInfo(string name, GoalTrigger[] triggers, Func<object, bool> condition, Func<GoalSet, AutoGoalInfo, Goal> constructor)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    - id: condition
      type: System.Func{System.Object,System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: constructor
      type: System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal}
      description: The function that should be called to construct a goal instance
    content.vb: Protected Sub New(name As String, triggers As GoalTrigger(), condition As Func(Of Object, Boolean), constructor As Func(Of GoalSet, AutoGoalInfo, Goal))
  overload: TinyLife.Goals.AutoGoalInfo.#ctor*
  nameWithType.vb: AutoGoalInfo.AutoGoalInfo(String, GoalTrigger(), Func(Of Object, Boolean), Func(Of GoalSet, AutoGoalInfo, Goal))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Goals.AutoGoalInfo.AutoGoalInfo(System.String, TinyLife.Goals.GoalTrigger(), System.Func(Of System.Object, System.Boolean), System.Func(Of TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo, TinyLife.Goals.Goal))
  name.vb: AutoGoalInfo(String, GoalTrigger(), Func(Of Object, Boolean), Func(Of GoalSet, AutoGoalInfo, Goal))
- uid: TinyLife.Goals.AutoGoalInfo.Timed``1(System.String,System.TimeSpan,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Timed``1(System.String,System.TimeSpan,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  id: Timed``1(System.String,System.TimeSpan,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Timed<T>(String, TimeSpan, Func<T, Boolean>, GoalTrigger[])
  nameWithType: AutoGoalInfo.Timed<T>(String, TimeSpan, Func<T, Boolean>, GoalTrigger[])
  fullName: TinyLife.Goals.AutoGoalInfo.Timed<T>(System.String, System.TimeSpan, System.Func<T, System.Boolean>, TinyLife.Goals.GoalTrigger[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Timed
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new timed auto goal info which will construct a <xref href=\"TinyLife.Goals.TimedGoal\" data-throw-if-not-resolved=\"false\"></xref>\nCheck <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> documentation to see if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> are compatible with the type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and this type of goal.\n"
  example: []
  syntax:
    content: public static AutoGoalInfo Timed<T>(string name, TimeSpan goalTime, Func<T, bool> condition = null, params GoalTrigger[] triggers)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: goalTime
      type: System.TimeSpan
      description: The total time until this goal is considered completed
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    typeParameters:
    - id: T
      description: The type of object that this goal is related to. See the documentation for the chosen <code data-dev-comment-type="paramref" class="paramref">triggers</code> for compatibility between goal objects and goal triggers
    return:
      type: TinyLife.Goals.AutoGoalInfo
      description: An auto goal info with the given settings
    content.vb: Public Shared Function Timed(Of T)(name As String, goalTime As TimeSpan, condition As Func(Of T, Boolean) = Nothing, ParamArray triggers As GoalTrigger()) As AutoGoalInfo
  overload: TinyLife.Goals.AutoGoalInfo.Timed*
  nameWithType.vb: AutoGoalInfo.Timed(Of T)(String, TimeSpan, Func(Of T, Boolean), GoalTrigger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Timed(Of T)(System.String, System.TimeSpan, System.Func(Of T, System.Boolean), TinyLife.Goals.GoalTrigger())
  name.vb: Timed(Of T)(String, TimeSpan, Func(Of T, Boolean), GoalTrigger())
- uid: TinyLife.Goals.AutoGoalInfo.Amount``1(System.String,System.Single,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Amount``1(System.String,System.Single,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  id: Amount``1(System.String,System.Single,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Amount<T>(String, Single, Func<T, Boolean>, GoalTrigger[])
  nameWithType: AutoGoalInfo.Amount<T>(String, Single, Func<T, Boolean>, GoalTrigger[])
  fullName: TinyLife.Goals.AutoGoalInfo.Amount<T>(System.String, System.Single, System.Func<T, System.Boolean>, TinyLife.Goals.GoalTrigger[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Amount
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new amount-based auto goal info which will construct an <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>\nCheck <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> documentation to see if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> are compatible with the type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and this type of goal.\n"
  example: []
  syntax:
    content: public static AutoGoalInfo Amount<T>(string name, float goalAmount, Func<T, bool> condition = null, params GoalTrigger[] triggers)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: goalAmount
      type: System.Single
      description: The total amount that needs to be reached until this goal is completed
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    typeParameters:
    - id: T
      description: The type of object that this goal is related to. See the documentation for the chosen <code data-dev-comment-type="paramref" class="paramref">triggers</code> for compatibility between goal objects and goal triggers
    return:
      type: TinyLife.Goals.AutoGoalInfo
      description: An auto goal info with the given settings
    content.vb: Public Shared Function Amount(Of T)(name As String, goalAmount As Single, condition As Func(Of T, Boolean) = Nothing, ParamArray triggers As GoalTrigger()) As AutoGoalInfo
  overload: TinyLife.Goals.AutoGoalInfo.Amount*
  nameWithType.vb: AutoGoalInfo.Amount(Of T)(String, Single, Func(Of T, Boolean), GoalTrigger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Amount(Of T)(System.String, System.Single, System.Func(Of T, System.Boolean), TinyLife.Goals.GoalTrigger())
  name.vb: Amount(Of T)(String, Single, Func(Of T, Boolean), GoalTrigger())
- uid: TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Int32,System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Int32,System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  id: Distinct``1(System.String,System.Int32,System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Distinct<T>(String, Int32, Func<T, String>, Func<T, Boolean>, GoalTrigger[])
  nameWithType: AutoGoalInfo.Distinct<T>(String, Int32, Func<T, String>, Func<T, Boolean>, GoalTrigger[])
  fullName: TinyLife.Goals.AutoGoalInfo.Distinct<T>(System.String, System.Int32, System.Func<T, System.String>, System.Func<T, System.Boolean>, TinyLife.Goals.GoalTrigger[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Distinct
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 120
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new auto goal info which will construct a <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method creates a distinct goal that requires a set of distinctly named objects and that is completed when the <code data-dev-comment-type=\"paramref\" class=\"paramref\">goalItemAmount</code> is reached.\nCheck <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> documentation to see if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> are compatible with the type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and this type of goal.\n"
  example: []
  syntax:
    content: public static AutoGoalInfo Distinct<T>(string name, int goalItemAmount, Func<T, string> goalItemNameSelector, Func<T, bool> condition = null, params GoalTrigger[] triggers)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: goalItemAmount
      type: System.Int32
      description: The amount of distinct items that need to be triggered for this goal to be completed
    - id: goalItemNameSelector
      type: System.Func{{T},System.String}
      description: A function that determines the distinct name of an object that this goal has been triggered for
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    typeParameters:
    - id: T
      description: The type of object that this goal is related to. See the documentation for the chosen <code data-dev-comment-type="paramref" class="paramref">triggers</code> for compatibility between goal objects and goal triggers
    return:
      type: TinyLife.Goals.AutoGoalInfo
      description: An auto goal info with the given settings
    content.vb: Public Shared Function Distinct(Of T)(name As String, goalItemAmount As Integer, goalItemNameSelector As Func(Of T, String), condition As Func(Of T, Boolean) = Nothing, ParamArray triggers As GoalTrigger()) As AutoGoalInfo
  overload: TinyLife.Goals.AutoGoalInfo.Distinct*
  nameWithType.vb: AutoGoalInfo.Distinct(Of T)(String, Int32, Func(Of T, String), Func(Of T, Boolean), GoalTrigger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Distinct(Of T)(System.String, System.Int32, System.Func(Of T, System.String), System.Func(Of T, System.Boolean), TinyLife.Goals.GoalTrigger())
  name.vb: Distinct(Of T)(String, Int32, Func(Of T, String), Func(Of T, Boolean), GoalTrigger())
- uid: TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Distinct``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  id: Distinct``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{``0,System.String},System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Distinct<T>(String, IEnumerable<String>, Func<T, String>, Func<T, Boolean>, GoalTrigger[])
  nameWithType: AutoGoalInfo.Distinct<T>(String, IEnumerable<String>, Func<T, String>, Func<T, Boolean>, GoalTrigger[])
  fullName: TinyLife.Goals.AutoGoalInfo.Distinct<T>(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Func<T, System.String>, System.Func<T, System.Boolean>, TinyLife.Goals.GoalTrigger[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Distinct
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 139
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new auto goal info which will construct a <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method creates a distinct goal that requires a set of distinctly named objects and that is completed when the set of objects matches the <code data-dev-comment-type=\"paramref\" class=\"paramref\">goalItems</code> exactly.\nCheck <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> documentation to see if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> are compatible with the type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and this type of goal.\n"
  example: []
  syntax:
    content: public static AutoGoalInfo Distinct<T>(string name, IEnumerable<string> goalItems, Func<T, string> goalItemNameSelector, Func<T, bool> condition = null, params GoalTrigger[] triggers)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: goalItems
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A set of items that this goal has to be triggered for for the goal to be completed
    - id: goalItemNameSelector
      type: System.Func{{T},System.String}
      description: A function that determines the distinct name of an object that this goal has been triggered for
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    typeParameters:
    - id: T
      description: The type of object that this goal is related to. See the documentation for the chosen <code data-dev-comment-type="paramref" class="paramref">triggers</code> for compatibility between goal objects and goal triggers
    return:
      type: TinyLife.Goals.AutoGoalInfo
      description: An auto goal info with the given settings
    content.vb: Public Shared Function Distinct(Of T)(name As String, goalItems As IEnumerable(Of String), goalItemNameSelector As Func(Of T, String), condition As Func(Of T, Boolean) = Nothing, ParamArray triggers As GoalTrigger()) As AutoGoalInfo
  overload: TinyLife.Goals.AutoGoalInfo.Distinct*
  nameWithType.vb: AutoGoalInfo.Distinct(Of T)(String, IEnumerable(Of String), Func(Of T, String), Func(Of T, Boolean), GoalTrigger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Distinct(Of T)(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Func(Of T, System.String), System.Func(Of T, System.Boolean), TinyLife.Goals.GoalTrigger())
  name.vb: Distinct(Of T)(String, IEnumerable(Of String), Func(Of T, String), Func(Of T, Boolean), GoalTrigger())
- uid: TinyLife.Goals.AutoGoalInfo.Conditioned``1(System.String,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Conditioned``1(System.String,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  id: Conditioned``1(System.String,System.Func{``0,System.Boolean},TinyLife.Goals.GoalTrigger[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Conditioned<T>(String, Func<T, Boolean>, GoalTrigger[])
  nameWithType: AutoGoalInfo.Conditioned<T>(String, Func<T, Boolean>, GoalTrigger[])
  fullName: TinyLife.Goals.AutoGoalInfo.Conditioned<T>(System.String, System.Func<T, System.Boolean>, TinyLife.Goals.GoalTrigger[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Conditioned
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 155
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new auto goal info which will construct a <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nCheck <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref> documentation to see if the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">triggers</code> are compatible with the type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and this type of goal.\n"
  example: []
  syntax:
    content: public static AutoGoalInfo Conditioned<T>(string name, Func<T, bool> condition = null, params GoalTrigger[] triggers)
    parameters:
    - id: name
      type: System.String
      description: The name of the goal
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: A condition that determines whether the goal should be triggered or advanced
    - id: triggers
      type: TinyLife.Goals.GoalTrigger[]
      description: A set of <xref href="TinyLife.Goals.GoalTrigger" data-throw-if-not-resolved="false"></xref> instances which represents the triggers that this goal should react to
    typeParameters:
    - id: T
      description: The type of object that this goal is related to. See the documentation for the chosen <code data-dev-comment-type="paramref" class="paramref">triggers</code> for compatibility between goal objects and goal triggers
    return:
      type: TinyLife.Goals.AutoGoalInfo
      description: An auto goal info with the given settings
    content.vb: Public Shared Function Conditioned(Of T)(name As String, condition As Func(Of T, Boolean) = Nothing, ParamArray triggers As GoalTrigger()) As AutoGoalInfo
  overload: TinyLife.Goals.AutoGoalInfo.Conditioned*
  nameWithType.vb: AutoGoalInfo.Conditioned(Of T)(String, Func(Of T, Boolean), GoalTrigger())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Conditioned(Of T)(System.String, System.Func(Of T, System.Boolean), TinyLife.Goals.GoalTrigger())
  name.vb: Conditioned(Of T)(String, Func(Of T, Boolean), GoalTrigger())
- uid: TinyLife.Goals.AutoGoalInfo.Trigger(TinyLife.Goals.GoalSet,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Trigger(TinyLife.Goals.GoalSet,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  id: Trigger(TinyLife.Goals.GoalSet,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Trigger(GoalSet, Object, GoalTrigger, Object[])
  nameWithType: AutoGoalInfo.Trigger(GoalSet, Object, GoalTrigger, Object[])
  fullName: TinyLife.Goals.AutoGoalInfo.Trigger(TinyLife.Goals.GoalSet, System.Object, TinyLife.Goals.GoalTrigger, System.Object[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Trigger
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 168
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nTriggers all auto-triggered goals with the specified type constraint in the given <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method, it should ideally be called on a specific subclass like <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, their <xref href=\"TinyLife.Objects.Person.GetCurrentGoals\" data-throw-if-not-resolved=\"false\"></xref> should be used.\n"
  example: []
  syntax:
    content: public static void Trigger(GoalSet set, object obj, GoalTrigger trigger, params object[] values)
    parameters:
    - id: set
      type: TinyLife.Goals.GoalSet
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: System.Object
      description: The object that should be passed to the <xref href="TinyLife.Goals.AutoGoalInfo.Condition" data-throw-if-not-resolved="false"></xref>
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this goal
    - id: values
      type: System.Object[]
      description: The values that should be passed to <xref href="TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Sub Trigger(set As GoalSet, obj As Object, trigger As GoalTrigger, ParamArray values As Object())
  overload: TinyLife.Goals.AutoGoalInfo.Trigger*
  nameWithType.vb: AutoGoalInfo.Trigger(GoalSet, Object, GoalTrigger, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Trigger(TinyLife.Goals.GoalSet, System.Object, TinyLife.Goals.GoalTrigger, System.Object())
  name.vb: Trigger(GoalSet, Object, GoalTrigger, Object())
- uid: TinyLife.Goals.AutoGoalInfo.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.AutoGoalInfo.Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  id: Trigger(System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet},System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  parent: TinyLife.Goals.AutoGoalInfo
  langs:
  - csharp
  - vb
  name: Trigger(IEnumerable<GoalSet>, Object, GoalTrigger, Object[])
  nameWithType: AutoGoalInfo.Trigger(IEnumerable<GoalSet>, Object, GoalTrigger, Object[])
  fullName: TinyLife.Goals.AutoGoalInfo.Trigger(System.Collections.Generic.IEnumerable<TinyLife.Goals.GoalSet>, System.Object, TinyLife.Goals.GoalTrigger, System.Object[])
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Trigger
    path: ../TinyLife/Goals/GoalInfo.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nTriggers all auto-triggered goals with the specified type constraint in the given set of <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> instances.\nWhen calling this method, it should ideally be called on a specific subclass like <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, their <xref href=\"TinyLife.Objects.Person.GetCurrentGoals\" data-throw-if-not-resolved=\"false\"></xref> should be used.\n"
  example: []
  syntax:
    content: public static void Trigger(IEnumerable<GoalSet> sets, object obj, GoalTrigger trigger, params object[] values)
    parameters:
    - id: sets
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet}
      description: The set of goal set instances to search for auto-triggered goals
    - id: obj
      type: System.Object
      description: The object that should be passed to the <xref href="TinyLife.Goals.AutoGoalInfo.Condition" data-throw-if-not-resolved="false"></xref>
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this goal
    - id: values
      type: System.Object[]
      description: The values that should be passed to <xref href="TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Sub Trigger(sets As IEnumerable(Of GoalSet), obj As Object, trigger As GoalTrigger, ParamArray values As Object())
  overload: TinyLife.Goals.AutoGoalInfo.Trigger*
  nameWithType.vb: AutoGoalInfo.Trigger(IEnumerable(Of GoalSet), Object, GoalTrigger, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoGoalInfo.Trigger(System.Collections.Generic.IEnumerable(Of TinyLife.Goals.GoalSet), System.Object, TinyLife.Goals.GoalTrigger, System.Object())
  name.vb: Trigger(IEnumerable(Of GoalSet), Object, GoalTrigger, Object())
references:
- uid: TinyLife.Goals.GoalInfo
  commentId: T:TinyLife.Goals.GoalInfo
  parent: TinyLife.Goals
  name: GoalInfo
  nameWithType: GoalInfo
  fullName: TinyLife.Goals.GoalInfo
- uid: TinyLife.Goals.AmountGoal
  commentId: T:TinyLife.Goals.AmountGoal
  name: AmountGoal
  nameWithType: AmountGoal
  fullName: TinyLife.Goals.AmountGoal
- uid: TinyLife.Goals.ConditionedGoal
  commentId: T:TinyLife.Goals.ConditionedGoal
  name: ConditionedGoal
  nameWithType: ConditionedGoal
  fullName: TinyLife.Goals.ConditionedGoal
- uid: TinyLife.Goals.DistinctGoal
  commentId: T:TinyLife.Goals.DistinctGoal
  name: DistinctGoal
  nameWithType: DistinctGoal
  fullName: TinyLife.Goals.DistinctGoal
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Goals.GoalInfo.Name
  commentId: F:TinyLife.Goals.GoalInfo.Name
  parent: TinyLife.Goals.GoalInfo
  name: Name
  nameWithType: GoalInfo.Name
  fullName: TinyLife.Goals.GoalInfo.Name
- uid: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  commentId: M:TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  parent: TinyLife.Goals.GoalInfo
  name: Construct(GoalSet)
  nameWithType: GoalInfo.Construct(GoalSet)
  fullName: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
  spec.csharp:
  - uid: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
    name: Construct
    nameWithType: GoalInfo.Construct
    fullName: TinyLife.Goals.GoalInfo.Construct
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.GoalInfo.Construct(TinyLife.Goals.GoalSet)
    name: Construct
    nameWithType: GoalInfo.Construct
    fullName: TinyLife.Goals.GoalInfo.Construct
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AutoGoalInfo.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<AutoGoalInfo>()
  nameWithType: Extensions.JsonCopy<AutoGoalInfo>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AutoGoalInfo>()
  nameWithType.vb: Extensions.JsonCopy(Of AutoGoalInfo)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AutoGoalInfo)()
  name.vb: JsonCopy(Of AutoGoalInfo)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<AutoGoalInfo>
    nameWithType: Extensions.JsonCopy<AutoGoalInfo>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AutoGoalInfo>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of AutoGoalInfo)
    nameWithType: Extensions.JsonCopy(Of AutoGoalInfo)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AutoGoalInfo)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  parent: TinyLife.Goals
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  name: Trigger(T)
  nameWithType: AutoTriggerGoal<T>.Trigger(T)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger(T)
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger(T)
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger(T)
  spec.csharp:
  - uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
    name: Trigger
    nameWithType: AutoTriggerGoal<T>.Trigger
    fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
    name: Trigger
    nameWithType: AutoTriggerGoal(Of T).Trigger
    fullName: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger[]
  isExternal: true
  name: GoalTrigger[]
  nameWithType: GoalTrigger[]
  fullName: TinyLife.Goals.GoalTrigger[]
  nameWithType.vb: GoalTrigger()
  fullName.vb: TinyLife.Goals.GoalTrigger()
  name.vb: GoalTrigger()
  spec.csharp:
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{System.Object,System.Boolean}
  commentId: T:System.Func{System.Object,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Object, Boolean>
  nameWithType: Func<Object, Boolean>
  fullName: System.Func<System.Object, System.Boolean>
  nameWithType.vb: Func(Of Object, Boolean)
  fullName.vb: System.Func(Of System.Object, System.Boolean)
  name.vb: Func(Of Object, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AutoGoalInfo.#ctor*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.#ctor
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo.AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo.AutoGoalInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal}
  commentId: T:System.Func{TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo,TinyLife.Goals.Goal}
  parent: System
  definition: System.Func`3
  name: Func<GoalSet, AutoGoalInfo, Goal>
  nameWithType: Func<GoalSet, AutoGoalInfo, Goal>
  fullName: System.Func<TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo, TinyLife.Goals.Goal>
  nameWithType.vb: Func(Of GoalSet, AutoGoalInfo, Goal)
  fullName.vb: System.Func(Of TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo, TinyLife.Goals.Goal)
  name.vb: Func(Of GoalSet, AutoGoalInfo, Goal)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.AutoGoalInfo
    name: AutoGoalInfo
    nameWithType: AutoGoalInfo
    fullName: TinyLife.Goals.AutoGoalInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.Goal
    name: Goal
    nameWithType: Goal
    fullName: TinyLife.Goals.Goal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.AutoGoalInfo
    name: AutoGoalInfo
    nameWithType: AutoGoalInfo
    fullName: TinyLife.Goals.AutoGoalInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.Goal
    name: Goal
    nameWithType: Goal
    fullName: TinyLife.Goals.Goal
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.TimedGoal
  commentId: T:TinyLife.Goals.TimedGoal
  name: TimedGoal
  nameWithType: TimedGoal
  fullName: TinyLife.Goals.TimedGoal
- uid: TinyLife.Goals.AutoGoalInfo.Timed*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.Timed
  name: Timed
  nameWithType: AutoGoalInfo.Timed
  fullName: TinyLife.Goals.AutoGoalInfo.Timed
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: TinyLife.Goals.AutoGoalInfo.Amount*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.Amount
  name: Amount
  nameWithType: AutoGoalInfo.Amount
  fullName: TinyLife.Goals.AutoGoalInfo.Amount
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Goals.AutoGoalInfo.Distinct*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.Distinct
  name: Distinct
  nameWithType: AutoGoalInfo.Distinct
  fullName: TinyLife.Goals.AutoGoalInfo.Distinct
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{{T},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: System.Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullName.vb: System.Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Goals.AutoGoalInfo.Conditioned*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.Conditioned
  name: Conditioned
  nameWithType: AutoGoalInfo.Conditioned
  fullName: TinyLife.Goals.AutoGoalInfo.Conditioned
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.GetCurrentGoals
  commentId: M:TinyLife.Objects.Person.GetCurrentGoals
  isExternal: true
- uid: TinyLife.Goals.AutoGoalInfo.Condition
  commentId: F:TinyLife.Goals.AutoGoalInfo.Condition
  isExternal: true
- uid: TinyLife.Goals.AutoGoalInfo.Trigger*
  commentId: Overload:TinyLife.Goals.AutoGoalInfo.Trigger
  name: Trigger
  nameWithType: AutoGoalInfo.Trigger
  fullName: TinyLife.Goals.AutoGoalInfo.Trigger
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Goals.GoalSet}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GoalSet>
  nameWithType: IEnumerable<GoalSet>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Goals.GoalSet>
  nameWithType.vb: IEnumerable(Of GoalSet)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Goals.GoalSet)
  name.vb: IEnumerable(Of GoalSet)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: )
    nameWithType: )
    fullName: )

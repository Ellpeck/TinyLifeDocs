### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  id: SocialAction
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.SocialAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.SocialAction.AndThenInitialize
  - TinyLife.Actions.SocialAction.AndThenIsCompleted
  - TinyLife.Actions.SocialAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.SocialAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.SocialAction.CanCancel(TinyLife.Actions.Action)
  - TinyLife.Actions.SocialAction.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.SocialAction.ConversationTime
  - TinyLife.Actions.SocialAction.CreateFirstActions
  - TinyLife.Actions.SocialAction.EnqueuePartnerAction(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.SocialAction.GetDisplayName
  - TinyLife.Actions.SocialAction.GetMaxWaitTime
  - TinyLife.Actions.SocialAction.Id
  - TinyLife.Actions.SocialAction.InitializeConversation
  - TinyLife.Actions.SocialAction.InProgressTime
  - TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - TinyLife.Actions.SocialAction.IsConversationCompleted
  - TinyLife.Actions.SocialAction.IsMain
  - TinyLife.Actions.SocialAction.Partner
  - TinyLife.Actions.SocialAction.PartnerAction
  - TinyLife.Actions.SocialAction.PartnerCompletion
  - TinyLife.Actions.SocialAction.UpdateConversation(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  langs:
  - csharp
  - vb
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
  type: Class
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SocialAction
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA social action is an action that involves two <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances.\nBefore a social action &quot;actually&quot; starts, both parties have to have the action as their current action.\nFor this to happen, the person that initiates the action follows the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref> until they reach them (or give up).\n"
  example: []
  syntax:
    content: 'public abstract class SocialAction : MultiAction, IGenericDataHolder'
    content.vb: >-
      Public MustInherit Class SocialAction
          Inherits MultiAction
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Actions.Typeless.TypelessAction
  - TinyLife.Actions.Action
  - TinyLife.Actions.MultiAction
  derivedClasses:
  - TinyLife.Actions.OrderFromStaffAction
  - TinyLife.Actions.TalkAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Actions.MultiAction.Handler
  - TinyLife.Actions.MultiAction.MainElapsedTime
  - TinyLife.Actions.MultiAction.PreInitialize
  - TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.MultiAction.Initialize
  - TinyLife.Actions.MultiAction.IsCompleted
  - TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  - TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,TinyLife.Actions.CanExecuteResult,TinyLife.Objects.MapObject)
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - TinyLife.Actions.Typeless.TypelessAction.Random
  - TinyLife.Actions.Typeless.TypelessAction.Info
  - TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  - TinyLife.Actions.Typeless.TypelessAction.Parent
  - TinyLife.Actions.Typeless.TypelessAction.Map
  - TinyLife.Actions.Typeless.TypelessAction.Person
  - TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  - TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  - TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  - TinyLife.Actions.Typeless.TypelessAction.ForceResult
  - TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  - TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  - TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  - TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  - TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  - TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  - TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  - TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.SocialAction.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  id: IsMain
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsMain
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nWhether or not this is the action that started the social interaction\nThe <xref href=\"TinyLife.Actions.SocialAction.PartnerAction\" data-throw-if-not-resolved=\"false\"></xref> will always have the inverse value of this value.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool IsMain { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property IsMain As Boolean
  overload: TinyLife.Actions.SocialAction.IsMain*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Actions.SocialAction.Partner
  commentId: P:TinyLife.Actions.SocialAction.Partner
  id: Partner
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: Partner
  nameWithType: SocialAction.Partner
  fullName: TinyLife.Actions.SocialAction.Partner
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Partner
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> that we&apos;re interacting with\n"
  example: []
  syntax:
    content: public Person Partner { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Partner As Person
  overload: TinyLife.Actions.SocialAction.Partner*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.SocialAction.PartnerAction
  commentId: P:TinyLife.Actions.SocialAction.PartnerAction
  id: PartnerAction
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: PartnerAction
  nameWithType: SocialAction.PartnerAction
  fullName: TinyLife.Actions.SocialAction.PartnerAction
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PartnerAction
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref> of this action instantiated as part of the interaction\n"
  example: []
  syntax:
    content: public SocialAction PartnerAction { get; }
    parameters: []
    return:
      type: TinyLife.Actions.SocialAction
    content.vb: Public ReadOnly Property PartnerAction As SocialAction
  overload: TinyLife.Actions.SocialAction.PartnerAction*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.SocialAction.ConversationTime
  commentId: P:TinyLife.Actions.SocialAction.ConversationTime
  id: ConversationTime
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: ConversationTime
  nameWithType: SocialAction.ConversationTime
  fullName: TinyLife.Actions.SocialAction.ConversationTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConversationTime
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of time that the actual conversation has been going on for.\nThis is the total amount of time (<xref href=\"TinyLife.Actions.Typeless.TypelessAction.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref>) minus the amount of time it took for the <xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> to reach the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan ConversationTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property ConversationTime As TimeSpan
  overload: TinyLife.Actions.SocialAction.ConversationTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Actions.SocialAction.InProgressTime
  commentId: P:TinyLife.Actions.SocialAction.InProgressTime
  id: InProgressTime
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: InProgressTime
  nameWithType: SocialAction.InProgressTime
  fullName: TinyLife.Actions.SocialAction.InProgressTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InProgressTime
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nRepresents the amount of time that this action has &quot;properly&quot; been in progress for.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, <xref href=\"TinyLife.Actions.Typeless.TypelessAction.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public override TimeSpan InProgressTime { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overrides ReadOnly Property InProgressTime As TimeSpan
  overridden: TinyLife.Actions.MultiAction.InProgressTime
  overload: TinyLife.Actions.SocialAction.InProgressTime*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: TinyLife.Actions.SocialAction.Id
  commentId: P:TinyLife.Actions.SocialAction.Id
  id: Id
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: SocialAction.Id
  fullName: TinyLife.Actions.SocialAction.Id
  type: Property
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe internal id of this action\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      protected Guid Id { get; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Protected ReadOnly Property Id As Guid
  overload: TinyLife.Actions.SocialAction.Id*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: TinyLife.Actions.SocialAction.PartnerCompletion
  commentId: F:TinyLife.Actions.SocialAction.PartnerCompletion
  id: PartnerCompletion
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: PartnerCompletion
  nameWithType: SocialAction.PartnerCompletion
  fullName: TinyLife.Actions.SocialAction.PartnerCompletion
  type: Field
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PartnerCompletion
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe current completion type of the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref>&apos;s action.\nIf this is not set, the partner completion is irrelevant for this action&apos;s completion behavior.\n"
  example: []
  syntax:
    content: protected CompletionType? PartnerCompletion
    return:
      type: System.Nullable{TinyLife.Actions.CompletionType}
    content.vb: Protected PartnerCompletion As CompletionType?
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Actions.SocialAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.SocialAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: SocialAction(ActionType, ActionInfo)
  nameWithType: SocialAction.SocialAction(ActionType, ActionInfo)
  fullName: TinyLife.Actions.SocialAction.SocialAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action from the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public SocialAction(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type to create this action from
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action
    content.vb: Public Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.SocialAction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.SocialAction.CreateFirstActions
  commentId: M:TinyLife.Actions.SocialAction.CreateFirstActions
  id: CreateFirstActions
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: CreateFirstActions()
  nameWithType: SocialAction.CreateFirstActions()
  fullName: TinyLife.Actions.SocialAction.CreateFirstActions()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateFirstActions
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn a set of actions that should be executed before this action.\nEven if the yield statement is used, all actions will be collected into a list at the start of this action&apos;s invocation.\nIf no action gets returned in this function, this action fails.\nIf a null action is returned as the first item, no first actions will be executed.\n"
  example: []
  syntax:
    content: protected override IEnumerable<TypelessAction> CreateFirstActions()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
      description: A set of actions that sohuld run before this action
    content.vb: Protected Overrides Function CreateFirstActions As IEnumerable(Of TypelessAction)
  overridden: TinyLife.Actions.MultiAction.CreateFirstActions
  overload: TinyLife.Actions.SocialAction.CreateFirstActions*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TinyLife.Actions.SocialAction.UpdateConversation(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.SocialAction.UpdateConversation(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: UpdateConversation(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: UpdateConversation(GameTime, TimeSpan, Single)
  nameWithType: SocialAction.UpdateConversation(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.SocialAction.UpdateConversation(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpdateConversation
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nSocialAction version of <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is called every update frame during an active conversation for both conversation partners.\nBy default, this method only increases <xref href=\"TinyLife.Actions.SocialAction.ConversationTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void UpdateConversation(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time passed in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Overridable Sub UpdateConversation(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.SocialAction.UpdateConversation*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.SocialAction.IsConversationCompleted
  commentId: M:TinyLife.Actions.SocialAction.IsConversationCompleted
  id: IsConversationCompleted
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: IsConversationCompleted()
  nameWithType: SocialAction.IsConversationCompleted()
  fullName: TinyLife.Actions.SocialAction.IsConversationCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsConversationCompleted
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 85
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nSocialAction version of <xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method returns whether or not the conversation should be marked as completed.\nNote that this method is only called for the <xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref> part of the conversation.\n"
  example: []
  syntax:
    content: protected virtual CompletionType IsConversationCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: Whether or not this conversation is completed
    content.vb: Protected Overridable Function IsConversationCompleted As CompletionType
  overload: TinyLife.Actions.SocialAction.IsConversationCompleted*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.SocialAction.InitializeConversation
  commentId: M:TinyLife.Actions.SocialAction.InitializeConversation
  id: InitializeConversation
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: InitializeConversation()
  nameWithType: SocialAction.InitializeConversation()
  fullName: TinyLife.Actions.SocialAction.InitializeConversation()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InitializeConversation
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 94
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nSocialAction version of <xref href=\"TinyLife.Actions.Typeless.TypelessAction.Initialize\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is called when the conversation part of this action first starts.\nBy default, this method does nothing.\n"
  example: []
  syntax:
    content: protected virtual void InitializeConversation()
    content.vb: Protected Overridable Sub InitializeConversation
  overload: TinyLife.Actions.SocialAction.InitializeConversation*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.SocialAction.GetMaxWaitTime
  commentId: M:TinyLife.Actions.SocialAction.GetMaxWaitTime
  id: GetMaxWaitTime
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: GetMaxWaitTime()
  nameWithType: SocialAction.GetMaxWaitTime()
  fullName: TinyLife.Actions.SocialAction.GetMaxWaitTime()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMaxWaitTime
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the amount of time that the action <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> should wait next to the person they want to talk to before the action is canceled.\nBy default, this returns 30 minutes for an action that was <xref href=\"TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically\" data-throw-if-not-resolved=\"false\"></xref>, and 2 hours for a manual action.\n"
  example: []
  syntax:
    content: protected virtual TimeSpan GetMaxWaitTime()
    return:
      type: System.TimeSpan
      description: The amount of time until this action is canceled.
    content.vb: Protected Overridable Function GetMaxWaitTime As TimeSpan
  overload: TinyLife.Actions.SocialAction.GetMaxWaitTime*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.SocialAction.EnqueuePartnerAction(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.SocialAction.EnqueuePartnerAction(TinyLife.Actions.ActionInfo)
  id: EnqueuePartnerAction(TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: EnqueuePartnerAction(ActionInfo)
  nameWithType: SocialAction.EnqueuePartnerAction(ActionInfo)
  fullName: TinyLife.Actions.SocialAction.EnqueuePartnerAction(TinyLife.Actions.ActionInfo)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EnqueuePartnerAction
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA method that is called to enqueue the action that the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref> should execute.\nBy default, this causes a non-<xref href=\"TinyLife.Actions.SocialAction.IsMain\" data-throw-if-not-resolved=\"false\"></xref> version of this action&apos;s <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to be enqueued using <xref href=\"TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cTinyLife.Actions.ActionVariety%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual Action EnqueuePartnerAction(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info to use.
    return:
      type: TinyLife.Actions.Action
      description: The action that was enqueued for the <xref href="TinyLife.Actions.SocialAction.Partner" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Overridable Function EnqueuePartnerAction(info As ActionInfo) As Action
  overload: TinyLife.Actions.SocialAction.EnqueuePartnerAction*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: TinyLife.Actions.SocialAction.AndThenInitialize
  commentId: M:TinyLife.Actions.SocialAction.AndThenInitialize
  id: AndThenInitialize
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: AndThenInitialize()
  nameWithType: SocialAction.AndThenInitialize()
  fullName: TinyLife.Actions.SocialAction.AndThenInitialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenInitialize
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 116
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInitializes the main action.\nThis method is called after <xref href=\"TinyLife.Actions.MultiAction.Handler\" data-throw-if-not-resolved=\"false\"></xref> has all completed.\n"
  example: []
  syntax:
    content: protected override void AndThenInitialize()
    content.vb: Protected Overrides Sub AndThenInitialize
  overridden: TinyLife.Actions.MultiAction.AndThenInitialize
  overload: TinyLife.Actions.SocialAction.AndThenInitialize*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TinyLife.Actions.SocialAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.SocialAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: AndThenUpdate(GameTime, TimeSpan, Single)
  nameWithType: SocialAction.AndThenUpdate(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.SocialAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenUpdate
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is called every update frame while the main action is active.\nBy default, only <xref href=\"TinyLife.Actions.MultiAction.MainElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is increased.\n"
  example: []
  syntax:
    content: protected override void AndThenUpdate(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Overrides Sub AndThenUpdate(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overridden: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  overload: TinyLife.Actions.SocialAction.AndThenUpdate*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TinyLife.Actions.SocialAction.AndThenIsCompleted
  commentId: M:TinyLife.Actions.SocialAction.AndThenIsCompleted
  id: AndThenIsCompleted
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: AndThenIsCompleted()
  nameWithType: SocialAction.AndThenIsCompleted()
  fullName: TinyLife.Actions.SocialAction.AndThenIsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenIsCompleted
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 158
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method returns whether or not the main action is completed.\n"
  example: []
  syntax:
    content: protected sealed override CompletionType AndThenIsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: Whether the main action is completed
    content.vb: Protected NotOverridable Overrides Function AndThenIsCompleted As CompletionType
  overridden: TinyLife.Actions.MultiAction.AndThenIsCompleted
  overload: TinyLife.Actions.SocialAction.AndThenIsCompleted*
  modifiers.csharp:
  - protected
  - sealed
  - override
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
- uid: TinyLife.Actions.SocialAction.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.SocialAction.CanCancel(TinyLife.Actions.Action)
  id: CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: CanCancel(Action)
  nameWithType: SocialAction.CanCancel(Action)
  fullName: TinyLife.Actions.SocialAction.CanCancel(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCancel
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether or not this action can be canceled by the given outside source.\nNote that the outside source can be null, and if it is, it means that the player canceled the action manually.\nBy default, actions can only be canceled if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">cancelSource</code> is null.\n"
  example: []
  syntax:
    content: public override bool CanCancel(Action cancelSource)
    parameters:
    - id: cancelSource
      type: TinyLife.Actions.Action
      description: The source of the cancelation, or null if the player canceled it
    return:
      type: System.Boolean
      description: true if the action can be canceled
    content.vb: Public Overrides Function CanCancel(cancelSource As Action) As Boolean
  overridden: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  overload: TinyLife.Actions.SocialAction.CanCancel*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.SocialAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.SocialAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  id: AndThenOnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: AndThenOnCompleted(CompletionType)
  nameWithType: SocialAction.AndThenOnCompleted(CompletionType)
  fullName: TinyLife.Actions.SocialAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenOnCompleted
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method gets called when the main action completes.\n"
  example: []
  syntax:
    content: protected override void AndThenOnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion of the main action
    content.vb: Protected Overrides Sub AndThenOnCompleted(type As CompletionType)
  overridden: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  overload: TinyLife.Actions.SocialAction.AndThenOnCompleted*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TinyLife.Actions.SocialAction.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.SocialAction.CanMultitask(TinyLife.Actions.Action)
  id: CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: CanMultitask(Action)
  nameWithType: SocialAction.CanMultitask(Action)
  fullName: TinyLife.Actions.SocialAction.CanMultitask(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanMultitask
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn true on this method if this action can be multi-tasked along with the passed <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref>.\nTo actually check this property, <xref href=\"TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action%2cTinyLife.Actions.Action)\" data-throw-if-not-resolved=\"false\"></xref> should be used as it compares both objects.\nA multi-tasking is an action that is currently active along with another action.\nBy default, multi-tasking is disallowed for any action.\n"
  example: []
  syntax:
    content: public override bool CanMultitask(Action other)
    parameters:
    - id: other
      type: TinyLife.Actions.Action
      description: The action to multi-task with
    return:
      type: System.Boolean
      description: Whether this action can be multi-tasked
    content.vb: Public Overrides Function CanMultitask(other As Action) As Boolean
  overridden: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  overload: TinyLife.Actions.SocialAction.CanMultitask*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.SocialAction.GetDisplayName
  commentId: M:TinyLife.Actions.SocialAction.GetDisplayName
  id: GetDisplayName
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: SocialAction.GetDisplayName()
  fullName: TinyLife.Actions.SocialAction.GetDisplayName()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayName
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 203
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns a localized string that explains this action in short.\nBy default, this method returns <xref href=\"TinyLife.Actions.ActionType.GetDisplayName(TinyLife.Actions.ActionInfo%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string GetDisplayName()
    return:
      type: System.String
      description: This action&apos;s display name
    content.vb: Public Overrides Function GetDisplayName As String
  overridden: TinyLife.Actions.Action.GetDisplayName
  overload: TinyLife.Actions.SocialAction.GetDisplayName*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.SocialAction.InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  id: InvokeForBoth(System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.SocialAction
  langs:
  - csharp
  - vb
  name: InvokeForBoth(Action<Person, Person>)
  nameWithType: SocialAction.InvokeForBoth(Action<Person, Person>)
  fullName: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/SocialAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InvokeForBoth
    path: ../TinyLife/Actions/SocialAction.cs
    startLine: 211
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInvokes the given action for both the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"TinyLife.Actions.SocialAction.Partner\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person%2cTinyLife.Objects.Person%2cSystem.Action%7bTinyLife.Objects.Person%2cTinyLife.Objects.Person%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected void InvokeForBoth(Action<Person, Person> action)
    parameters:
    - id: action
      type: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
      description: The action to invoke for both people of this conversation
    content.vb: Protected Sub InvokeForBoth(action As Action(Of Person, Person))
  overload: TinyLife.Actions.SocialAction.InvokeForBoth*
  nameWithType.vb: SocialAction.InvokeForBoth(Action(Of Person, Person))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Actions.SocialAction.InvokeForBoth(System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Action(Of Person, Person))
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions.SocialAction.Partner
  commentId: P:TinyLife.Actions.SocialAction.Partner
  parent: TinyLife.Actions.SocialAction
  name: Partner
  nameWithType: SocialAction.Partner
  fullName: TinyLife.Actions.SocialAction.Partner
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Actions.MultiAction.Handler
  commentId: F:TinyLife.Actions.MultiAction.Handler
  parent: TinyLife.Actions.MultiAction
  name: Handler
  nameWithType: MultiAction.Handler
  fullName: TinyLife.Actions.MultiAction.Handler
- uid: TinyLife.Actions.MultiAction.MainElapsedTime
  commentId: P:TinyLife.Actions.MultiAction.MainElapsedTime
  parent: TinyLife.Actions.MultiAction
  name: MainElapsedTime
  nameWithType: MultiAction.MainElapsedTime
  fullName: TinyLife.Actions.MultiAction.MainElapsedTime
- uid: TinyLife.Actions.MultiAction.PreInitialize
  commentId: M:TinyLife.Actions.MultiAction.PreInitialize
  parent: TinyLife.Actions.MultiAction
  name: PreInitialize()
  nameWithType: MultiAction.PreInitialize()
  fullName: TinyLife.Actions.MultiAction.PreInitialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.PreInitialize
    name: PreInitialize
    nameWithType: MultiAction.PreInitialize
    fullName: TinyLife.Actions.MultiAction.PreInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.PreInitialize
    name: PreInitialize
    nameWithType: MultiAction.PreInitialize
    fullName: TinyLife.Actions.MultiAction.PreInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: MultiAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: MultiAction.Update
    fullName: TinyLife.Actions.MultiAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: MultiAction.Update
    fullName: TinyLife.Actions.MultiAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.Initialize
  commentId: M:TinyLife.Actions.MultiAction.Initialize
  parent: TinyLife.Actions.MultiAction
  name: Initialize()
  nameWithType: MultiAction.Initialize()
  fullName: TinyLife.Actions.MultiAction.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.Initialize
    name: Initialize
    nameWithType: MultiAction.Initialize
    fullName: TinyLife.Actions.MultiAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.Initialize
    name: Initialize
    nameWithType: MultiAction.Initialize
    fullName: TinyLife.Actions.MultiAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.IsCompleted
  commentId: M:TinyLife.Actions.MultiAction.IsCompleted
  parent: TinyLife.Actions.MultiAction
  name: IsCompleted()
  nameWithType: MultiAction.IsCompleted()
  fullName: TinyLife.Actions.MultiAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.IsCompleted
    name: IsCompleted
    nameWithType: MultiAction.IsCompleted
    fullName: TinyLife.Actions.MultiAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.IsCompleted
    name: IsCompleted
    nameWithType: MultiAction.IsCompleted
    fullName: TinyLife.Actions.MultiAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  name: OnCompleted(CompletionType)
  nameWithType: MultiAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: MultiAction.OnCompleted
    fullName: TinyLife.Actions.MultiAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: MultiAction.OnCompleted
    fullName: TinyLife.Actions.MultiAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.MultiAction
  name: Validate(Person)
  nameWithType: MultiAction.Validate(Person)
  fullName: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: MultiAction.Validate
    fullName: TinyLife.Actions.MultiAction.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: MultiAction.Validate
    fullName: TinyLife.Actions.MultiAction.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Actions.MultiAction
  name: GoToActionLocation(ObjectCategory)
  nameWithType: MultiAction.GoToActionLocation(ObjectCategory)
  fullName: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
    name: GoToActionLocation
    nameWithType: MultiAction.GoToActionLocation
    fullName: TinyLife.Actions.MultiAction.GoToActionLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
    name: GoToActionLocation
    nameWithType: MultiAction.GoToActionLocation
    fullName: TinyLife.Actions.MultiAction.GoToActionLocation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  parent: TinyLife.Actions.Action
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  spec.csharp:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
    nameWithType: Action.CausesExtremelyFastSpeed
    fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
    nameWithType: Action.CausesExtremelyFastSpeed
    fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,TinyLife.Actions.CanExecuteResult,TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,TinyLife.Actions.CanExecuteResult,TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.Action
  name: TryForceResult(CompletionType, CanExecuteResult, MapObject)
  nameWithType: Action.TryForceResult(CompletionType, CanExecuteResult, MapObject)
  fullName: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType, TinyLife.Actions.CanExecuteResult, TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,TinyLife.Actions.CanExecuteResult,TinyLife.Objects.MapObject)
    name: TryForceResult
    nameWithType: Action.TryForceResult
    fullName: TinyLife.Actions.Action.TryForceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,TinyLife.Actions.CanExecuteResult,TinyLife.Objects.MapObject)
    name: TryForceResult
    nameWithType: Action.TryForceResult
    fullName: TinyLife.Actions.Action.TryForceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
    nameWithType: Action.CanEnqueueConversation
    fullName: TinyLife.Actions.Action.CanEnqueueConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
    nameWithType: Action.CanEnqueueConversation
    fullName: TinyLife.Actions.Action.CanEnqueueConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.Random
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.Random
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Random
  nameWithType: TypelessAction.Random
  fullName: TinyLife.Actions.Typeless.TypelessAction.Random
- uid: TinyLife.Actions.Typeless.TypelessAction.Info
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.Info
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Info
  nameWithType: TypelessAction.Info
  fullName: TinyLife.Actions.Typeless.TypelessAction.Info
- uid: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: StartedAutomatically
  nameWithType: TypelessAction.StartedAutomatically
  fullName: TinyLife.Actions.Typeless.TypelessAction.StartedAutomatically
- uid: TinyLife.Actions.Typeless.TypelessAction.Parent
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Parent
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Parent
  nameWithType: TypelessAction.Parent
  fullName: TinyLife.Actions.Typeless.TypelessAction.Parent
- uid: TinyLife.Actions.Typeless.TypelessAction.Map
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Map
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Map
  nameWithType: TypelessAction.Map
  fullName: TinyLife.Actions.Typeless.TypelessAction.Map
- uid: TinyLife.Actions.Typeless.TypelessAction.Person
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.Person
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Person
  nameWithType: TypelessAction.Person
  fullName: TinyLife.Actions.Typeless.TypelessAction.Person
- uid: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: ElapsedTime
  nameWithType: TypelessAction.ElapsedTime
  fullName: TinyLife.Actions.Typeless.TypelessAction.ElapsedTime
- uid: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: PlayerPromptOpen
  nameWithType: TypelessAction.PlayerPromptOpen
  fullName: TinyLife.Actions.Typeless.TypelessAction.PlayerPromptOpen
- uid: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: FullyInProgress
  nameWithType: TypelessAction.FullyInProgress
  fullName: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
- uid: TinyLife.Actions.Typeless.TypelessAction.ForceResult
  commentId: F:TinyLife.Actions.Typeless.TypelessAction.ForceResult
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: ForceResult
  nameWithType: TypelessAction.ForceResult
  fullName: TinyLife.Actions.Typeless.TypelessAction.ForceResult
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  nameWithType: TypelessAction.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>)
  nameWithType.vb: TypelessAction.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)))
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)))
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
    name: OpenPlayerPrompt
    nameWithType: TypelessAction.OpenPlayerPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}})
    name: OpenPlayerPrompt
    nameWithType: TypelessAction.OpenPlayerPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: OpenYesNoPrompt(String, Action, Action)
  nameWithType: TypelessAction.OpenYesNoPrompt(String, Action, Action)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String, System.Action, System.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
    name: OpenYesNoPrompt
    nameWithType: TypelessAction.OpenYesNoPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt(System.String,System.Action,System.Action)
    name: OpenYesNoPrompt
    nameWithType: TypelessAction.OpenYesNoPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenYesNoPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  nameWithType: TypelessAction.OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action<System.String>, System.Predicate<System.String>, MLEM.Ui.Elements.TextField.Rule, System.String)
  nameWithType.vb: TypelessAction.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action(Of System.String), System.Predicate(Of System.String), MLEM.Ui.Elements.TextField.Rule, System.String)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
    name: OpenTextPrompt
    nameWithType: TypelessAction.OpenTextPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
    name: OpenTextPrompt
    nameWithType: TypelessAction.OpenTextPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  nameWithType: TypelessAction.SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Int32)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
    nameWithType: TypelessAction.SpeakAlone
    fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
    nameWithType: TypelessAction.SpeakAlone
    fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakAlone
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  nameWithType: TypelessAction.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable<TinyLife.Actions.EmoteCategory>, System.Nullable<TinyLife.Objects.SpeakStyle>, System.Int32)
  nameWithType.vb: TypelessAction.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable(Of TinyLife.Actions.EmoteCategory), System.Nullable(Of TinyLife.Objects.SpeakStyle), System.Int32)
  name.vb: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
    nameWithType: TypelessAction.SpeakInConversation
    fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
    nameWithType: TypelessAction.SpeakInConversation
    fullName: TinyLife.Actions.Typeless.TypelessAction.SpeakInConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  nameWithType: TypelessAction.CompleteInTime(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan, System.Boolean, TinyLife.Skills.SkillType, System.Single, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteInTime
    nameWithType: TypelessAction.CompleteInTime
    fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteInTime
    nameWithType: TypelessAction.CompleteInTime
    fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteInTime
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: CompleteIfNeedFull(Person, NeedType, CompletionType)
  nameWithType: TypelessAction.CompleteIfNeedFull(Person, NeedType, CompletionType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person, TinyLife.NeedType, TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
    name: CompleteIfNeedFull
    nameWithType: TypelessAction.CompleteIfNeedFull
    fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull(TinyLife.Objects.Person,TinyLife.NeedType,TinyLife.Actions.CompletionType)
    name: CompleteIfNeedFull
    nameWithType: TypelessAction.CompleteIfNeedFull
    fullName: TinyLife.Actions.Typeless.TypelessAction.CompleteIfNeedFull
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType[])
  nameWithType: TypelessAction.PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType[])
  fullName: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType[])
  nameWithType.vb: TypelessAction.PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType())
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType())
  name.vb: PutDownOrGoTo(ActionInfo, ObjectCategory, FurnitureType())
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
    name: PutDownOrGoTo
    nameWithType: TypelessAction.PutDownOrGoTo
    fullName: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType[])
    name: PutDownOrGoTo
    nameWithType: TypelessAction.PutDownOrGoTo
    fullName: TinyLife.Actions.Typeless.TypelessAction.PutDownOrGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: GetPlaceDirection(Person, FurnitureType)
  nameWithType: TypelessAction.GetPlaceDirection(Person, FurnitureType)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person, TinyLife.Objects.FurnitureType)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
    name: GetPlaceDirection
    nameWithType: TypelessAction.GetPlaceDirection
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection(TinyLife.Objects.Person,TinyLife.Objects.FurnitureType)
    name: GetPlaceDirection
    nameWithType: TypelessAction.GetPlaceDirection
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetPlaceDirection
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: Sit(Person, Furniture, Single, ActionSpot)
  nameWithType: TypelessAction.Sit(Person, Furniture, Single, ActionSpot)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Single, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: TypelessAction.Sit
    fullName: TinyLife.Actions.Typeless.TypelessAction.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Sit(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: TypelessAction.Sit
    fullName: TinyLife.Actions.Typeless.TypelessAction.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: GetFreeChair(Person, Furniture)
  nameWithType: TypelessAction.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: TypelessAction.GetFreeChair
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: TypelessAction.GetFreeChair
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  nameWithType: TypelessAction.GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func<MLEM.Misc.Direction2, System.Boolean>)
  nameWithType.vb: TypelessAction.GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func(Of MLEM.Misc.Direction2, System.Boolean))
  name.vb: GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
    nameWithType: TypelessAction.GetFreeChairs
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
    nameWithType: TypelessAction.GetFreeChairs
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetFreeChairs
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: TypelessAction.FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreePeople
    nameWithType: TypelessAction.FindAllFreePeople
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreePeople
    nameWithType: TypelessAction.FindAllFreePeople
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreePeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  nameWithType.vb: TypelessAction.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: TypelessAction.FindAllFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: TypelessAction.FindAllFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: TypelessAction.FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: TypelessAction.FindAllFreeWalls
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: TypelessAction.FindAllFreeWalls
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: TypelessAction.FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: TypelessAction.FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
    nameWithType: TypelessAction.FindAllFreeGround
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
    nameWithType: TypelessAction.FindAllFreeGround
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllFreeGround
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  nameWithType.vb: TypelessAction.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: TypelessAction.FindFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: TypelessAction.FindFreeFurniture
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindAllActionObjects(Person, ActionType, Nullable<Vector2>)
  nameWithType: TypelessAction.FindAllActionObjects(Person, ActionType, Nullable<Vector2>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable<Microsoft.Xna.Framework.Vector2>)
  nameWithType.vb: TypelessAction.FindAllActionObjects(Person, ActionType, Nullable(Of Vector2))
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable(Of Microsoft.Xna.Framework.Vector2))
  name.vb: FindAllActionObjects(Person, ActionType, Nullable(Of Vector2))
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
    nameWithType: TypelessAction.FindAllActionObjects
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
    nameWithType: TypelessAction.FindAllActionObjects
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindAllActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: FindValidActionObjects(Person, ActionType, Boolean, Nullable<Vector2>, Boolean)
  nameWithType: TypelessAction.FindValidActionObjects(Person, ActionType, Boolean, Nullable<Vector2>, Boolean)
  fullName: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean)
  nameWithType.vb: TypelessAction.FindValidActionObjects(Person, ActionType, Boolean, Nullable(Of Vector2), Boolean)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean)
  name.vb: FindValidActionObjects(Person, ActionType, Boolean, Nullable(Of Vector2), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
    name: FindValidActionObjects
    nameWithType: TypelessAction.FindValidActionObjects
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean)
    name: FindValidActionObjects
    nameWithType: TypelessAction.FindValidActionObjects
    fullName: TinyLife.Actions.Typeless.TypelessAction.FindValidActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  nameWithType: TypelessAction.GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>, TinyLife.Actions.ActionInfo)
  nameWithType.vb: TypelessAction.GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety), TinyLife.Actions.ActionInfo)
  name.vb: GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomVariety
    nameWithType: TypelessAction.GetRandomVariety
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomVariety
    nameWithType: TypelessAction.GetRandomVariety
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetRandomVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: TypelessAction.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
    nameWithType: TypelessAction.GetTableSpot
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
    nameWithType: TypelessAction.GetTableSpot
    fullName: TinyLife.Actions.Typeless.TypelessAction.GetTableSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: InvokeForBoth(Person, Person, Action<Person, Person>)
  nameWithType: TypelessAction.InvokeForBoth(Person, Person, Action<Person, Person>)
  fullName: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  nameWithType.vb: TypelessAction.InvokeForBoth(Person, Person, Action(Of Person, Person))
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Person, Person, Action(Of Person, Person))
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: TypelessAction.InvokeForBoth
    fullName: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: TypelessAction.InvokeForBoth
    fullName: TinyLife.Actions.Typeless.TypelessAction.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<SocialAction>()
  nameWithType: Extensions.JsonCopy<SocialAction>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.SocialAction>()
  nameWithType.vb: Extensions.JsonCopy(Of SocialAction)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.SocialAction)()
  name.vb: JsonCopy(Of SocialAction)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<SocialAction>
    nameWithType: Extensions.JsonCopy<SocialAction>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.SocialAction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of SocialAction)
    nameWithType: Extensions.JsonCopy(Of SocialAction)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.SocialAction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.SocialAction
  commentId: T:TinyLife.Actions.SocialAction
  parent: TinyLife.Actions
  name: SocialAction
  nameWithType: SocialAction
  fullName: TinyLife.Actions.SocialAction
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.SocialAction.PartnerAction
  commentId: P:TinyLife.Actions.SocialAction.PartnerAction
  parent: TinyLife.Actions.SocialAction
  name: PartnerAction
  nameWithType: SocialAction.PartnerAction
  fullName: TinyLife.Actions.SocialAction.PartnerAction
- uid: TinyLife.Actions.SocialAction.IsMain*
  commentId: Overload:TinyLife.Actions.SocialAction.IsMain
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Actions.SocialAction.Partner*
  commentId: Overload:TinyLife.Actions.SocialAction.Partner
  name: Partner
  nameWithType: SocialAction.Partner
  fullName: TinyLife.Actions.SocialAction.Partner
- uid: TinyLife.Actions.SocialAction.PartnerAction*
  commentId: Overload:TinyLife.Actions.SocialAction.PartnerAction
  name: PartnerAction
  nameWithType: SocialAction.PartnerAction
  fullName: TinyLife.Actions.SocialAction.PartnerAction
- uid: TinyLife.Actions.SocialAction.IsMain
  commentId: P:TinyLife.Actions.SocialAction.IsMain
  parent: TinyLife.Actions.SocialAction
  name: IsMain
  nameWithType: SocialAction.IsMain
  fullName: TinyLife.Actions.SocialAction.IsMain
- uid: TinyLife.Actions.SocialAction.ConversationTime*
  commentId: Overload:TinyLife.Actions.SocialAction.ConversationTime
  name: ConversationTime
  nameWithType: SocialAction.ConversationTime
  fullName: TinyLife.Actions.SocialAction.ConversationTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.MultiAction.InProgressTime
  commentId: P:TinyLife.Actions.MultiAction.InProgressTime
  parent: TinyLife.Actions.MultiAction
  name: InProgressTime
  nameWithType: MultiAction.InProgressTime
  fullName: TinyLife.Actions.MultiAction.InProgressTime
- uid: TinyLife.Actions.SocialAction.InProgressTime*
  commentId: Overload:TinyLife.Actions.SocialAction.InProgressTime
  name: InProgressTime
  nameWithType: SocialAction.InProgressTime
  fullName: TinyLife.Actions.SocialAction.InProgressTime
- uid: TinyLife.Actions.SocialAction.Id*
  commentId: Overload:TinyLife.Actions.SocialAction.Id
  name: Id
  nameWithType: SocialAction.Id
  fullName: TinyLife.Actions.SocialAction.Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Nullable{TinyLife.Actions.CompletionType}
  commentId: T:System.Nullable{TinyLife.Actions.CompletionType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CompletionType>
  nameWithType: Nullable<CompletionType>
  fullName: System.Nullable<TinyLife.Actions.CompletionType>
  nameWithType.vb: Nullable(Of CompletionType)
  fullName.vb: System.Nullable(Of TinyLife.Actions.CompletionType)
  name.vb: Nullable(Of CompletionType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.#ctor*
  commentId: Overload:TinyLife.Actions.SocialAction.#ctor
  name: SocialAction
  nameWithType: SocialAction.SocialAction
  fullName: TinyLife.Actions.SocialAction.SocialAction
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.MultiAction.CreateFirstActions
  commentId: M:TinyLife.Actions.MultiAction.CreateFirstActions
  parent: TinyLife.Actions.MultiAction
  name: CreateFirstActions()
  nameWithType: MultiAction.CreateFirstActions()
  fullName: TinyLife.Actions.MultiAction.CreateFirstActions()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
    nameWithType: MultiAction.CreateFirstActions
    fullName: TinyLife.Actions.MultiAction.CreateFirstActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
    nameWithType: MultiAction.CreateFirstActions
    fullName: TinyLife.Actions.MultiAction.CreateFirstActions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.CreateFirstActions*
  commentId: Overload:TinyLife.Actions.SocialAction.CreateFirstActions
  name: CreateFirstActions
  nameWithType: SocialAction.CreateFirstActions
  fullName: TinyLife.Actions.SocialAction.CreateFirstActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Typeless.TypelessAction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypelessAction>
  nameWithType: IEnumerable<TypelessAction>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Typeless.TypelessAction>
  nameWithType.vb: IEnumerable(Of TypelessAction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Typeless.TypelessAction)
  name.vb: IEnumerable(Of TypelessAction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Typeless.TypelessAction
    name: TypelessAction
    nameWithType: TypelessAction
    fullName: TinyLife.Actions.Typeless.TypelessAction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: TypelessAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: TypelessAction.Update
    fullName: TinyLife.Actions.Typeless.TypelessAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: TypelessAction.Update
    fullName: TinyLife.Actions.Typeless.TypelessAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.ConversationTime
  commentId: P:TinyLife.Actions.SocialAction.ConversationTime
  parent: TinyLife.Actions.SocialAction
  name: ConversationTime
  nameWithType: SocialAction.ConversationTime
  fullName: TinyLife.Actions.SocialAction.ConversationTime
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Actions.SocialAction.UpdateConversation*
  commentId: Overload:TinyLife.Actions.SocialAction.UpdateConversation
  name: UpdateConversation
  nameWithType: SocialAction.UpdateConversation
  fullName: TinyLife.Actions.SocialAction.UpdateConversation
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: IsCompleted()
  nameWithType: TypelessAction.IsCompleted()
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
    name: IsCompleted
    nameWithType: TypelessAction.IsCompleted
    fullName: TinyLife.Actions.Typeless.TypelessAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.IsConversationCompleted*
  commentId: Overload:TinyLife.Actions.SocialAction.IsConversationCompleted
  name: IsConversationCompleted
  nameWithType: SocialAction.IsConversationCompleted
  fullName: TinyLife.Actions.SocialAction.IsConversationCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Typeless.TypelessAction.Initialize
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.Initialize
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: Initialize()
  nameWithType: TypelessAction.Initialize()
  fullName: TinyLife.Actions.Typeless.TypelessAction.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Initialize
    name: Initialize
    nameWithType: TypelessAction.Initialize
    fullName: TinyLife.Actions.Typeless.TypelessAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.Initialize
    name: Initialize
    nameWithType: TypelessAction.Initialize
    fullName: TinyLife.Actions.Typeless.TypelessAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.InitializeConversation*
  commentId: Overload:TinyLife.Actions.SocialAction.InitializeConversation
  name: InitializeConversation
  nameWithType: SocialAction.InitializeConversation
  fullName: TinyLife.Actions.SocialAction.InitializeConversation
- uid: TinyLife.Actions.SocialAction.GetMaxWaitTime*
  commentId: Overload:TinyLife.Actions.SocialAction.GetMaxWaitTime
  name: GetMaxWaitTime
  nameWithType: SocialAction.GetMaxWaitTime
  fullName: TinyLife.Actions.SocialAction.GetMaxWaitTime
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Actions.SocialAction.EnqueuePartnerAction*
  commentId: Overload:TinyLife.Actions.SocialAction.EnqueuePartnerAction
  name: EnqueuePartnerAction
  nameWithType: SocialAction.EnqueuePartnerAction
  fullName: TinyLife.Actions.SocialAction.EnqueuePartnerAction
- uid: TinyLife.Actions.MultiAction.AndThenInitialize
  commentId: M:TinyLife.Actions.MultiAction.AndThenInitialize
  parent: TinyLife.Actions.MultiAction
  name: AndThenInitialize()
  nameWithType: MultiAction.AndThenInitialize()
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
    nameWithType: MultiAction.AndThenInitialize
    fullName: TinyLife.Actions.MultiAction.AndThenInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
    nameWithType: MultiAction.AndThenInitialize
    fullName: TinyLife.Actions.MultiAction.AndThenInitialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.AndThenInitialize*
  commentId: Overload:TinyLife.Actions.SocialAction.AndThenInitialize
  name: AndThenInitialize
  nameWithType: SocialAction.AndThenInitialize
  fullName: TinyLife.Actions.SocialAction.AndThenInitialize
- uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  isExternal: true
  name: AndThenUpdate(GameTime, TimeSpan, Single)
  nameWithType: MultiAction.AndThenUpdate(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: AndThenUpdate
    nameWithType: MultiAction.AndThenUpdate
    fullName: TinyLife.Actions.MultiAction.AndThenUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: AndThenUpdate
    nameWithType: MultiAction.AndThenUpdate
    fullName: TinyLife.Actions.MultiAction.AndThenUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.AndThenUpdate*
  commentId: Overload:TinyLife.Actions.SocialAction.AndThenUpdate
  name: AndThenUpdate
  nameWithType: SocialAction.AndThenUpdate
  fullName: TinyLife.Actions.SocialAction.AndThenUpdate
- uid: TinyLife.Actions.MultiAction.AndThenIsCompleted
  commentId: M:TinyLife.Actions.MultiAction.AndThenIsCompleted
  parent: TinyLife.Actions.MultiAction
  name: AndThenIsCompleted()
  nameWithType: MultiAction.AndThenIsCompleted()
  fullName: TinyLife.Actions.MultiAction.AndThenIsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenIsCompleted
    name: AndThenIsCompleted
    nameWithType: MultiAction.AndThenIsCompleted
    fullName: TinyLife.Actions.MultiAction.AndThenIsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenIsCompleted
    name: AndThenIsCompleted
    nameWithType: MultiAction.AndThenIsCompleted
    fullName: TinyLife.Actions.MultiAction.AndThenIsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.AndThenIsCompleted*
  commentId: Overload:TinyLife.Actions.SocialAction.AndThenIsCompleted
  name: AndThenIsCompleted
  nameWithType: SocialAction.AndThenIsCompleted
  fullName: TinyLife.Actions.SocialAction.AndThenIsCompleted
- uid: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.MultiAction
  name: CanCancel(Action)
  nameWithType: MultiAction.CanCancel(Action)
  fullName: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: MultiAction.CanCancel
    fullName: TinyLife.Actions.MultiAction.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: MultiAction.CanCancel
    fullName: TinyLife.Actions.MultiAction.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.CanCancel*
  commentId: Overload:TinyLife.Actions.SocialAction.CanCancel
  name: CanCancel
  nameWithType: SocialAction.CanCancel
  fullName: TinyLife.Actions.SocialAction.CanCancel
- uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  name: AndThenOnCompleted(CompletionType)
  nameWithType: MultiAction.AndThenOnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
    name: AndThenOnCompleted
    nameWithType: MultiAction.AndThenOnCompleted
    fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
    name: AndThenOnCompleted
    nameWithType: MultiAction.AndThenOnCompleted
    fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.AndThenOnCompleted*
  commentId: Overload:TinyLife.Actions.SocialAction.AndThenOnCompleted
  name: AndThenOnCompleted
  nameWithType: SocialAction.AndThenOnCompleted
  fullName: TinyLife.Actions.SocialAction.AndThenOnCompleted
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.CanMultitask*
  commentId: Overload:TinyLife.Actions.SocialAction.CanMultitask
  name: CanMultitask
  nameWithType: SocialAction.CanMultitask
  fullName: TinyLife.Actions.SocialAction.CanMultitask
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  parent: TinyLife.Actions.Action
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.SocialAction.GetDisplayName*
  commentId: Overload:TinyLife.Actions.SocialAction.GetDisplayName
  name: GetDisplayName
  nameWithType: SocialAction.GetDisplayName
  fullName: TinyLife.Actions.SocialAction.GetDisplayName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.SocialAction.InvokeForBoth*
  commentId: Overload:TinyLife.Actions.SocialAction.InvokeForBoth
  name: InvokeForBoth
  nameWithType: SocialAction.InvokeForBoth
  fullName: TinyLife.Actions.SocialAction.InvokeForBoth
- uid: System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person}
  parent: System
  definition: System.Action`2
  name: Action<Person, Person>
  nameWithType: Action<Person, Person>
  fullName: System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>
  nameWithType.vb: Action(Of Person, Person)
  fullName.vb: System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person)
  name.vb: Action(Of Person, Person)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )

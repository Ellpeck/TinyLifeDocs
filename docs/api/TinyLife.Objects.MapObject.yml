### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  id: MapObject
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  - TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.CurrentLot
  - TinyLife.Objects.MapObject.CurrentRoom
  - TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  - TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  - TinyLife.Objects.MapObject.GetModCategory(System.String)
  - TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  - TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.HoldingPerson
  - TinyLife.Objects.MapObject.Id
  - TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  - TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.MapObject.IsInWorld
  - TinyLife.Objects.MapObject.Map
  - TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Objects.MapObject.OnAdded
  - TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.Objects.MapObject.OnCreated
  - TinyLife.Objects.MapObject.OnDraw
  - TinyLife.Objects.MapObject.OnEventsAttachable
  - TinyLife.Objects.MapObject.OnGetHoverInfo
  - TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.MapObject.OnRemoved
  - TinyLife.Objects.MapObject.OnUpdate
  - TinyLife.Objects.MapObject.OnValidated
  - TinyLife.Objects.MapObject.ParentInfo
  - TinyLife.Objects.MapObject.PersonRotationOrder
  - TinyLife.Objects.MapObject.Position
  - TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  - TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  - TinyLife.Objects.MapObject.Validate
  - TinyLife.Objects.MapObject.Visibility
  langs:
  - csharp
  - vb
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
  type: Class
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MapObject
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn instance of this class represents an object that can be, or is, part of a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class MapObject : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class MapObject Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Objects.Furniture
  - TinyLife.Objects.Person
  - TinyLife.Objects.Vehicle
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.MapObject.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.MapObject.PersonRotationOrder
  commentId: F:TinyLife.Objects.MapObject.PersonRotationOrder
  id: PersonRotationOrder
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: PersonRotationOrder
  nameWithType: MapObject.PersonRotationOrder
  fullName: TinyLife.Objects.MapObject.PersonRotationOrder
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonRotationOrder
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe order of <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that the texture atlas for <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> has for its textures, from left to right\n"
  example: []
  syntax:
    content: public static readonly Direction2[] PersonRotationOrder
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly PersonRotationOrder As Direction2()
- uid: TinyLife.Objects.MapObject.OnCreated
  commentId: E:TinyLife.Objects.MapObject.OnCreated
  id: OnCreated
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnCreated
  nameWithType: MapObject.OnCreated
  fullName: TinyLife.Objects.MapObject.OnCreated
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCreated
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when a map object is created.\nThis event is invoked in the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnCreated
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnCreated As Action(Of MapObject)
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  id: OnValidated
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnValidated
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when a map object is validated.\nThis event si invoked in <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref>, which is usually called after subclass validation.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnValidated
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnValidated As Action(Of MapObject)
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  id: OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEventsAttachable
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when non-static events for an object are ready to be attached to.\nThis event is invoked in the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> constructor, and in the <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnEventsAttachable
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnEventsAttachable As Action(Of MapObject)
- uid: TinyLife.Objects.MapObject.OnDraw
  commentId: E:TinyLife.Objects.MapObject.OnDraw
  id: OnDraw
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnDraw
  nameWithType: MapObject.OnDraw
  fullName: TinyLife.Objects.MapObject.OnDraw
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnDraw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this object is drawn, right after <xref href=\"TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime%2cSystem.Object%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event DrawDelegate OnDraw
    return:
      type: TinyLife.World.DrawDelegate
    content.vb: Public Event OnDraw As DrawDelegate
- uid: TinyLife.Objects.MapObject.OnUpdate
  commentId: E:TinyLife.Objects.MapObject.OnUpdate
  id: OnUpdate
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: MapObject.OnUpdate
  fullName: TinyLife.Objects.MapObject.OnUpdate
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnUpdate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this object is updated, right after <xref href=\"Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nNote that, if this object does not extend <xref href=\"Microsoft.Xna.Framework.IUpdateable\" data-throw-if-not-resolved=\"false\"></xref>, this event is not invoked.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event UpdateDelegate OnUpdate
    return:
      type: TinyLife.World.UpdateDelegate
    content.vb: Public Event OnUpdate As UpdateDelegate
- uid: TinyLife.Objects.MapObject.OnGetHoverInfo
  commentId: E:TinyLife.Objects.MapObject.OnGetHoverInfo
  id: OnGetHoverInfo
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnGetHoverInfo
  nameWithType: MapObject.OnGetHoverInfo
  fullName: TinyLife.Objects.MapObject.OnGetHoverInfo
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetHoverInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this object&apos;s <xref href=\"TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)\" data-throw-if-not-resolved=\"false\"></xref> method is called.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Tooltip> OnGetHoverInfo
    return:
      type: System.Action{MLEM.Ui.Elements.Tooltip}
    content.vb: Public Event OnGetHoverInfo As Action(Of Tooltip)
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  id: Position
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Position
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 73
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe position on the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref> of this object.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Vector2 Position { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: >-
      <DataMember>

      Public Property Position As Vector2
  overload: TinyLife.Objects.MapObject.Position*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.MapObject.ParentInfo
  commentId: P:TinyLife.Objects.MapObject.ParentInfo
  id: ParentInfo
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: ParentInfo
  nameWithType: MapObject.ParentInfo
  fullName: TinyLife.Objects.MapObject.ParentInfo
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 107
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> for this object in its current context.\nBy default, this method returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/default\">default</a>, and <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> returns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> based on its current attachments.\n"
  example: []
  syntax:
    content: public virtual ParentInfo ParentInfo { get; }
    parameters: []
    return:
      type: TinyLife.Objects.ParentInfo
    content.vb: Public Overridable ReadOnly Property ParentInfo As ParentInfo
  overload: TinyLife.Objects.MapObject.ParentInfo*
- uid: TinyLife.Objects.MapObject.Visibility
  commentId: P:TinyLife.Objects.MapObject.Visibility
  id: Visibility
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Visibility
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the visibility settings of this object.\nBy default, <xref href=\"TinyLife.Objects.Visibility.WhenVisible\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nFor <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Visibility\" data-throw-if-not-resolved=\"false\"></xref> is returned instead.\n"
  example: []
  syntax:
    content: public virtual Visibility Visibility { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Visibility
      description: This object&apos;s visibility settings
    content.vb: Public Overridable ReadOnly Property Visibility As Visibility
  overload: TinyLife.Objects.MapObject.Visibility*
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  id: Id
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of this object instance\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid Id { get; protected set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public Property Id As Guid
  overload: TinyLife.Objects.MapObject.Id*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  id: Map
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 125
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe map that this object is currently on.\nIf this is null, the object is not currently on a map.\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public Property Map As Map
  overload: TinyLife.Objects.MapObject.Map*
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  id: CurrentLot
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentLot
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns the <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that this object is currently on, or <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> if there is none.\n"
  example: []
  syntax:
    content: public Lot CurrentLot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property CurrentLot As Lot
  overload: TinyLife.Objects.MapObject.CurrentLot*
- uid: TinyLife.Objects.MapObject.CurrentRoom
  commentId: P:TinyLife.Objects.MapObject.CurrentRoom
  id: CurrentRoom
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: CurrentRoom
  nameWithType: MapObject.CurrentRoom
  fullName: TinyLife.Objects.MapObject.CurrentRoom
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentRoom
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns the <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref> that this object is currently in, or <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> if there is none.\n"
  example: []
  syntax:
    content: public Room CurrentRoom { get; }
    parameters: []
    return:
      type: TinyLife.World.Room
    content.vb: Public ReadOnly Property CurrentRoom As Room
  overload: TinyLife.Objects.MapObject.CurrentRoom*
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  id: IsInWorld
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInWorld
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 137
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns true if this object is currently present on a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsInWorld { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInWorld As Boolean
  overload: TinyLife.Objects.MapObject.IsInWorld*
- uid: TinyLife.Objects.MapObject.HoldingPerson
  commentId: P:TinyLife.Objects.MapObject.HoldingPerson
  id: HoldingPerson
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: HoldingPerson
  nameWithType: MapObject.HoldingPerson
  fullName: TinyLife.Objects.MapObject.HoldingPerson
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HoldingPerson
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 142
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe person that is currently holding this object.\nIf no person is currently holding this object, this property returns <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a>.\n"
  example: []
  syntax:
    content: public Person HoldingPerson { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property HoldingPerson As Person
  overload: TinyLife.Objects.MapObject.HoldingPerson*
- uid: TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)'
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: MapObject(Guid, Map, Vector2)
  nameWithType: MapObject.MapObject(Guid, Map, Vector2)
  fullName: TinyLife.Objects.MapObject.MapObject(System.Guid, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 162
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new map object with the given settings\n"
  example: []
  syntax:
    content: public MapObject(Guid id, Map map, Vector2 position)
    parameters:
    - id: id
      type: System.Guid
      description: The object&apos;s id
    - id: map
      type: TinyLife.World.Map
      description: The map the object should be on
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the object should have
    content.vb: Public Sub New(id As Guid, map As Map, position As Vector2)
  overload: TinyLife.Objects.MapObject.#ctor*
  nameWithType.vb: MapObject.New(Guid, Map, Vector2)
  fullName.vb: TinyLife.Objects.MapObject.New(System.Guid, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  name.vb: New(Guid, Map, Vector2)
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Draw(GameTime, object, Vector2, Color?, List<Item>)
  nameWithType: MapObject.Draw(GameTime, object, Vector2, Color?, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 182
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this object on the current <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>, at the current <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\nTo draw a map object while invoking all the required events, use <xref href=\"TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime%2cSystem.Object%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Boolean%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, object batch, Vector2 drawPos, Color? overrideColor, List<StaticSpriteBatch.Item> items)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw this furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As Object, drawPos As Vector2, overrideColor As Color?, items As List(Of StaticSpriteBatch.Item))
  overload: TinyLife.Objects.MapObject.Draw*
  nameWithType.vb: MapObject.Draw(GameTime, Object, Vector2, Color?, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Color?, List(Of Item))
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  id: Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intersects
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this map object intersects with the given rectangle.\nThis is used for <xref href=\"TinyLife.World.Map.GetObjects%60%601(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual bool Intersects(RectangleF rectangle)
    parameters:
    - id: rectangle
      type: MLEM.Misc.RectangleF
      description: The area that should be checked for
    return:
      type: System.Boolean
      description: true if this object intersects with the given rectangle
    content.vb: Public Overridable Function Intersects(rectangle As RectangleF) As Boolean
  overload: TinyLife.Objects.MapObject.Intersects*
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  id: Validate
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 200
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\nBy default, this method invokes <xref href=\"TinyLife.Objects.MapObject.OnValidated\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overridable Function Validate() As Boolean
  overload: TinyLife.Objects.MapObject.Validate*
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  id: GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCategories
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 211
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this object has, based on the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual ObjectCategory GetCategories(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories that this object has
    content.vb: Public Overridable Function GetCategories(person As Person) As ObjectCategory
  overload: TinyLife.Objects.MapObject.GetCategories*
- uid: TinyLife.Objects.MapObject.OnAdded
  commentId: M:TinyLife.Objects.MapObject.OnAdded
  id: OnAdded
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnAdded()
  nameWithType: MapObject.OnAdded()
  fullName: TinyLife.Objects.MapObject.OnAdded()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnAdded
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 219
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is added to a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public virtual void OnAdded()
    content.vb: Public Overridable Sub OnAdded()
  overload: TinyLife.Objects.MapObject.OnAdded*
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  id: OnRemoved
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRemoved
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 225
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is removed from a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public virtual void OnRemoved()
    content.vb: Public Overridable Sub OnRemoved()
  overload: TinyLife.Objects.MapObject.OnRemoved*
- uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  id: GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetHoverInfo(Tooltip)
  nameWithType: MapObject.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHoverInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 232
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAllows adding a set of paragraphs and other ui elements to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">tooltip</code>, which is then displayed when this object is hovered over using the cursor in the world.\nBy default, this method raises <xref href=\"TinyLife.Objects.MapObject.OnGetHoverInfo\" data-throw-if-not-resolved=\"false\"></xref> for <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref>, and adds additional information for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void GetHoverInfo(Tooltip tooltip)
    parameters:
    - id: tooltip
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip that will be displayed.
    content.vb: Public Overridable Sub GetHoverInfo(tooltip As Tooltip)
  overload: TinyLife.Objects.MapObject.GetHoverInfo*
- uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: MapObject.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAiPriority
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 245
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns an integer that represents a priority for the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref>&apos;s interaction with this object.\nA higher priority means that this object will be picked over other objects (with lower priority).\nThe default return value is 0, meaning that no special priority is assigned to this object.\nFor any <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.SingleBed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.ObjectCategory.DoubleBed\" data-throw-if-not-resolved=\"false\"></xref> category that is the person&apos;s <xref href=\"TinyLife.Objects.Person.LastBedSleptIn\" data-throw-if-not-resolved=\"false\"></xref>, 10 is returned.\n"
  example: []
  syntax:
    content: public virtual int GetAiPriority(Person person, ObjectCategory categories)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose AI is attempting to interact with this object
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that are relevant for the ai interaction
    return:
      type: System.Int32
      description: This object&apos;s priority
    content.vb: Public Overridable Function GetAiPriority(person As Person, categories As ObjectCategory) As Integer
  overload: TinyLife.Objects.MapObject.GetAiPriority*
- uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  id: CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: CanExecuteAction(ActionType, ActionInfo, bool, bool)
  nameWithType: MapObject.CanExecuteAction(ActionType, ActionInfo, bool, bool)
  fullName: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteAction
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 258
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code> can be executed at this map object.\nBy default, this method returns <xref href=\"TinyLife.Actions.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> for all actions, but <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> additionally returns custom results based on whether the furniture is <xref href=\"TinyLife.Objects.BreakableFurniture.Broken\" data-throw-if-not-resolved=\"false\"></xref> or based on <xref href=\"TinyLife.Objects.Furniture.AreUtilitiesDisabled\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual CanExecuteResult CanExecuteAction(ActionType action, ActionInfo info, bool automatic, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action that is querying whether it can be executed.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
      description: Whether the action was started automatically.
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object).
    return:
      type: TinyLife.Actions.CanExecuteResult
      description: Whether this object allows the action to be executed at it.
    content.vb: Public Overridable Function CanExecuteAction(action As ActionType, info As ActionInfo, automatic As Boolean, isAuxiliary As Boolean) As CanExecuteResult
  overload: TinyLife.Objects.MapObject.CanExecuteAction*
  nameWithType.vb: MapObject.CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, Boolean)
  name.vb: CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnActionCompleted(Action, CompletionType, bool)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionCompleted
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 270
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in is completed. Note that this includes actions that are underlying (see <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets <xref href=\"TinyLife.Objects.Furniture.DevaluedThroughUse\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void OnActionCompleted(Action action, CompletionType type, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type of the action&apos;s completion
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub OnActionCompleted(action As Action, type As CompletionType, isAuxiliary As Boolean)
  overload: TinyLife.Objects.MapObject.OnActionCompleted*
  nameWithType.vb: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnActionCompleted(Action, CompletionType, Boolean)
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  id: ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, float, bool)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, float, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 282
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in updates, which is every <xref href=\"Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> frame. Note that this includes actions that are underlying (see <xref href=\"TinyLife.Actions.Action.Parent\" data-throw-if-not-resolved=\"false\"></xref>) and actions that aren&apos;t fully in progress yet (<xref href=\"TinyLife.Actions.Action.FullyInProgress\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets deals with <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  example: []
  syntax:
    content: public virtual void ActionUpdate(Action action, GameTime time, TimeSpan passedInGame, float speedMultiplier, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601(System.Boolean)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub ActionUpdate(action As Action, time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single, isAuxiliary As Boolean)
  overload: TinyLife.Objects.MapObject.ActionUpdate*
  nameWithType.vb: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single, Boolean)
  name.vb: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 290
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot, packed into an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual ActionInfo GetFreeActionSpotInfo(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The first free action spot as an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Function GetFreeActionSpotInfo(person As Person, context As ObjectCategory = Nothing) As ActionInfo
  overload: TinyLife.Objects.MapObject.GetFreeActionSpotInfo*
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  id: OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: MapObject.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCameraRotationChanged
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 300
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is invoked when the game&apos;s camera rotation changes.\nAdditionally, the old and new rotations are passed.\n"
  example: []
  syntax:
    content: public virtual void OnCameraRotationChanged(Direction2 oldRotation, Direction2 newRotation)
    parameters:
    - id: oldRotation
      type: MLEM.Misc.Direction2
      description: The old camera rotation
    - id: newRotation
      type: MLEM.Misc.Direction2
      description: The new camera rotation
    content.vb: Public Overridable Sub OnCameraRotationChanged(oldRotation As Direction2, newRotation As Direction2)
  overload: TinyLife.Objects.MapObject.OnCameraRotationChanged*
- uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  id: SetMapAndValidate(TinyLife.World.Map)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: SetMapAndValidate(Map)
  nameWithType: MapObject.SetMapAndValidate(Map)
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetMapAndValidate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 307
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is the same as <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref>, but it also sets the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool SetMapAndValidate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to set
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function SetMapAndValidate(map As Map) As Boolean
  overload: TinyLife.Objects.MapObject.SetMapAndValidate*
- uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: HasCategory(Person, ObjectCategory)
  nameWithType: MapObject.HasCategory(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasCategory
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 318
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA shorthand that checks whether <xref href=\"TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> overlaps with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">category</code> flags\n"
  example: []
  syntax:
    content: public bool HasCategory(Person person, ObjectCategory category)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories, one of which this object needs to match
    return:
      type: System.Boolean
      description: Whether this object contains at least one of the given categories
    content.vb: Public Function HasCategory(person As Person, category As ObjectCategory) As Boolean
  overload: TinyLife.Objects.MapObject.HasCategory*
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  id: GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  nameWithType: MapObject.GetEfficiencyModifier(Person, ActionInfo, bool, SkillType, float)
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.Skills.SkillType, float)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEfficiencyModifier
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 334
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the efficiency modifier that this object multiplies the person&apos;s productivity with.\nThis method is automatically called in <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked for all <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> of the passed <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 1, meaning the person&apos;s efficiency will not be influenced.\n"
  example: []
  syntax:
    content: public virtual float GetEfficiencyModifier(Person person, ActionInfo info, bool isAuxiliary, SkillType skill, float levelModifier)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose efficiency should be influenced
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object)
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The skill that should influence the efficiency
    - id: levelModifier
      type: System.Single
      description: The level modifier for the <code data-dev-comment-type="paramref" class="paramref">skill</code>
    return:
      type: System.Single
      description: The efficiency modifier for this object
    content.vb: Public Overridable Function GetEfficiencyModifier(person As Person, info As ActionInfo, isAuxiliary As Boolean, skill As SkillType, levelModifier As Single) As Single
  overload: TinyLife.Objects.MapObject.GetEfficiencyModifier*
  nameWithType.vb: MapObject.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName.vb: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
- uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  commentId: M:TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  id: GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  nameWithType: MapObject.GetRestoreNeedModifier(Person, ActionInfo, bool, NeedType)
  fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, bool, TinyLife.NeedType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRestoreNeedModifier
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 349
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the modifier that this object multiplies the person&apos;s restored need with.\nThis method is automatically called in <xref href=\"TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis action is invoked for all <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> of the passed <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 1, meaning the need restoration modifier will not be influenced.\n"
  example: []
  syntax:
    content: public virtual float GetRestoreNeedModifier(Person person, ActionInfo info, bool isAuxiliary, NeedType type)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose need restoration should be influenced.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object).
    - id: type
      type: TinyLife.NeedType
      description: The type of need that is being restored.
    return:
      type: System.Single
      description: The need restoration modifier for this object.
    content.vb: Public Overridable Function GetRestoreNeedModifier(person As Person, info As ActionInfo, isAuxiliary As Boolean, type As NeedType) As Single
  overload: TinyLife.Objects.MapObject.GetRestoreNeedModifier*
  nameWithType.vb: MapObject.GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  fullName.vb: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, Boolean, TinyLife.NeedType)
  name.vb: GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
- uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  id: IsFreeSpot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: IsFreeSpot(Point)
  nameWithType: MapObject.IsFreeSpot(Point)
  fullName: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsFreeSpot
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 360
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> should be allowed to occupy or pass the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">position</code>, which is contained in this object&apos;s intersection area (<xref href=\"TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>).\nBy default, <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects return whether they have the <xref href=\"TinyLife.Objects.ObjectCategory.NonColliding\" data-throw-if-not-resolved=\"false\"></xref> category, and all other objects return <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">true</a>.\nNote that, if this object moves, <xref href=\"TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> should be invoked for its previous and resulting <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool IsFreeSpot(Point position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position whose path cost modifier is being calculated.
    return:
      type: System.Boolean
      description: Whether a <xref href="TinyLife.Objects.Person" data-throw-if-not-resolved="false"></xref> can occupy the given <code data-dev-comment-type="paramref" class="paramref">position</code>.
    content.vb: Public Overridable Function IsFreeSpot(position As Point) As Boolean
  overload: TinyLife.Objects.MapObject.IsFreeSpot*
- uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  id: GetPathCostModifier(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetPathCostModifier(Point)
  nameWithType: MapObject.GetPathCostModifier(Point)
  fullName: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPathCostModifier
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 372
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a modifier that indicates the &quot;cost&quot; for pathfinding over this object.\nIf this object is a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> object, it has to have the <xref href=\"TinyLife.Objects.ObjectCategory.NonColliding\" data-throw-if-not-resolved=\"false\"></xref> category for the returned value to have an effect.\nNote that, if this object moves, <xref href=\"TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)\" data-throw-if-not-resolved=\"false\"></xref> should be invoked for its previous and resulting <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 0, meaning no additional pathfinding cost is added.\n"
  example: []
  syntax:
    content: public virtual float GetPathCostModifier(Point position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Point
      description: The position whose path cost modifier is being calculated.
    return:
      type: System.Single
      description: This object&apos;s path cost modifier for the given <code data-dev-comment-type="paramref" class="paramref">position</code>
    content.vb: Public Overridable Function GetPathCostModifier(position As Point) As Single
  overload: TinyLife.Objects.MapObject.GetPathCostModifier*
- uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  id: ResetToStatic(System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: ResetToStatic(bool)
  nameWithType: MapObject.ResetToStatic(bool)
  fullName: TinyLife.Objects.MapObject.ResetToStatic(bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ResetToStatic
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 381
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nResets this map object to a static state when the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref> that is on is exported.\n"
  example: []
  syntax:
    content: public virtual bool ResetToStatic(bool thorough)
    parameters:
    - id: thorough
      type: System.Boolean
      description: Whether a more thorough reset is expected, which usually involves normalizing additional data and cleaning up player data entirely.
    return:
      type: System.Boolean
      description: Whether this object should stay on the map after the static reset. If <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a> is returned, this object is removed.
    content.vb: Public Overridable Function ResetToStatic(thorough As Boolean) As Boolean
  overload: TinyLife.Objects.MapObject.ResetToStatic*
  nameWithType.vb: MapObject.ResetToStatic(Boolean)
  fullName.vb: TinyLife.Objects.MapObject.ResetToStatic(Boolean)
  name.vb: ResetToStatic(Boolean)
- uid: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  id: OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnPositionChanged(Vector2)
  nameWithType: MapObject.OnPositionChanged(Vector2)
  fullName: TinyLife.Objects.MapObject.OnPositionChanged(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnPositionChanged
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 391
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA method that is automatically called when this object&apos;s <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> changes.\nBy default, this method is overriden in <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> to call <xref href=\"TinyLife.Objects.Furniture.MarkDirtyForPathfinding\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method is also called if this object is not in the world (<xref href=\"TinyLife.Objects.MapObject.IsInWorld\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: protected virtual void OnPositionChanged(Vector2 lastPosition)
    parameters:
    - id: lastPosition
      type: Microsoft.Xna.Framework.Vector2
      description: This object&apos;s previous position.
    content.vb: Protected Overridable Sub OnPositionChanged(lastPosition As Vector2)
  overload: TinyLife.Objects.MapObject.OnPositionChanged*
- uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  id: DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: DoDraw(GameTime, object, Color?, bool, List<Item>)
  nameWithType: MapObject.DoDraw(GameTime, object, Color?, bool, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Color?, bool, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DoDraw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 401
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this map object, additionally invoking all required events and checking the <xref href=\"TinyLife.Objects.MapObject.Visibility\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void DoDraw(GameTime time, object batch, Color? color, bool ignoreVisibility, List<StaticSpriteBatch.Item> items)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: color
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    - id: ignoreVisibility
      type: System.Boolean
      description: Whether this object&apos;s <xref href="TinyLife.Objects.MapObject.Visibility" data-throw-if-not-resolved="false"></xref> should be ignored.
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub DoDraw(time As GameTime, batch As Object, color As Color?, ignoreVisibility As Boolean, items As List(Of StaticSpriteBatch.Item))
  overload: TinyLife.Objects.MapObject.DoDraw*
  nameWithType.vb: MapObject.DoDraw(GameTime, Object, Color?, Boolean, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Color?, Boolean, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: DoDraw(GameTime, Object, Color?, Boolean, List(Of Item))
- uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: DoUpdate(GameTime, TimeSpan, float)
  nameWithType: MapObject.DoUpdate(GameTime, TimeSpan, float)
  fullName: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DoUpdate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 418
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nUpdates this map object if it is an <xref href=\"TinyLife.Objects.IUpdatingObject\" data-throw-if-not-resolved=\"false\"></xref>, additionally invoking all required events.\n\n"
  example: []
  syntax:
    content: public void DoUpdate(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed since the last call
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub DoUpdate(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Objects.MapObject.DoUpdate*
  nameWithType.vb: MapObject.DoUpdate(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: DoUpdate(GameTime, TimeSpan, Single)
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  id: DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  nameWithType: MapObject.DrawColumns(Map, Vector2, object, Vector2, TextureRegion, Color, float, Point, List<StaticSpriteBatch.Item>, bool, ParentInfo, float, SpriteEffects, bool, bool, bool)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, float, Microsoft.Xna.Framework.Point, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, bool, TinyLife.Objects.ParentInfo, float, Microsoft.Xna.Framework.Graphics.SpriteEffects, bool, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawColumns
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 447
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws the given texture region in columns, which allows for depth calculation in isometric view to be possible.\nBigger objects, including all furniture, are drawn in this matter.\nWhen drawing a furniture item, <xref href=\"TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Object%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Misc.Direction2%2cMLEM.Textures.TextureRegion%2cMicrosoft.Xna.Framework.Color%2cSystem.Single%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d%2cSystem.Boolean%2cTinyLife.Objects.ParentInfo%2cSystem.Single%2cSystem.Boolean%2cMicrosoft.Xna.Framework.Graphics.SpriteEffects)\" data-throw-if-not-resolved=\"false\"></xref> should be used instead, which automatically supplies various values based on <xref href=\"TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void DrawColumns(Map map, Vector2 position, object batch, Vector2 drawPos, TextureRegion texture, Color color, float scale, Point size, List<StaticSpriteBatch.Item> items, bool pivot = true, ParentInfo parent = default, float depthOffset = 0, SpriteEffects effects = SpriteEffects.None, bool groundItem = false, bool ceilingHanging = false, bool editDrawPos = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the object is on
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the object is on, in world space
    - id: batch
      type: System.Object
      description: The sprite batch to draw with, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw at, in draw space
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The texture region to draw
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to draw with
    - id: scale
      type: System.Single
      description: The scale to draw at
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size, in tiles, that this object has
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: pivot
      type: System.Boolean
      description: The texture&apos;s pivot point, in texture-space pixels
    - id: parent
      type: TinyLife.Objects.ParentInfo
      description: The object&apos;s parent object
    - id: depthOffset
      type: System.Single
      description: A value that is added to the calculated object&apos;s depth
    - id: effects
      type: Microsoft.Xna.Framework.Graphics.SpriteEffects
      description: The sprite effects to use when rendering
    - id: groundItem
      type: System.Boolean
      description: Whether or not this item is considered a ground item (that doesn&apos;t have any collisions)
    - id: ceilingHanging
      type: System.Boolean
      description: Whether this object is hanging on the ceiling. If it is, its <code data-dev-comment-type="paramref" class="paramref">drawPos</code> is offset by the height of walls
    - id: editDrawPos
      type: System.Boolean
      description: Whether this object&apos;s <code data-dev-comment-type="paramref" class="paramref">drawPos</code> should be changed based on this object&apos;s circumstances, especially based on its <code data-dev-comment-type="paramref" class="paramref">parent</code>
    content.vb: Public Shared Sub DrawColumns(map As Map, position As Vector2, batch As Object, drawPos As Vector2, texture As TextureRegion, color As Color, scale As Single, size As Point, items As List(Of StaticSpriteBatch.Item), pivot As Boolean = True, parent As ParentInfo = Nothing, depthOffset As Single = 0, effects As SpriteEffects = SpriteEffects.None, groundItem As Boolean = False, ceilingHanging As Boolean = False, editDrawPos As Boolean = True)
  overload: TinyLife.Objects.MapObject.DrawColumns*
  nameWithType.vb: MapObject.DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, Single, Microsoft.Xna.Framework.Point, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, TinyLife.Objects.ParentInfo, Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, Boolean, Boolean, Boolean)
  name.vb: DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  id: GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetModCategory(string)
  nameWithType: MapObject.GetModCategory(string)
  fullName: TinyLife.Objects.MapObject.GetModCategory(string)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetModCategory
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 512
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds and returns a custom <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> with the given name.\nThe returned category is guaranteed to be unique and mapped to the given name. Additionally, it can be used in combined flags, as it is not a combined flag itself.\n"
  example: []
  syntax:
    content: public static ObjectCategory GetModCategory(string name)
    parameters:
    - id: name
      type: System.String
      description: The name that the category should have
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A new object category
    content.vb: Public Shared Function GetModCategory(name As String) As ObjectCategory
  overload: TinyLife.Objects.MapObject.GetModCategory*
  nameWithType.vb: MapObject.GetModCategory(String)
  fullName.vb: TinyLife.Objects.MapObject.GetModCategory(String)
  name.vb: GetModCategory(String)
references:
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Objects.MapObject.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MapObject>(MapObject)
  nameWithType: Extensions.JsonCopy<MapObject>(MapObject)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.MapObject>(TinyLife.Objects.MapObject)
  nameWithType.vb: Extensions.JsonCopy(Of MapObject)(MapObject)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.MapObject)(TinyLife.Objects.MapObject)
  name.vb: JsonCopy(Of MapObject)(MapObject)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.MapObject)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Objects.MapObject)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  - name: (
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: (
  - name: )
- uid: System.Action{TinyLife.Objects.MapObject}
  commentId: T:System.Action{TinyLife.Objects.MapObject}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<MapObject>
  nameWithType: Action<MapObject>
  fullName: System.Action<TinyLife.Objects.MapObject>
  nameWithType.vb: Action(Of MapObject)
  fullName.vb: System.Action(Of TinyLife.Objects.MapObject)
  name.vb: Action(Of MapObject)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  parent: TinyLife.Objects.MapObject
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
  - name: (
  - name: )
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: Draw(GameTime, object, Vector2, Color?, List<Item>)
  nameWithType: MapObject.Draw(GameTime, object, Vector2, Color?, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.Draw(GameTime, Object, Vector2, Color?, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Color?, List(Of Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: )
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
- uid: TinyLife.World.DrawDelegate
  commentId: T:TinyLife.World.DrawDelegate
  parent: TinyLife.World
  name: DrawDelegate
  nameWithType: DrawDelegate
  fullName: TinyLife.World.DrawDelegate
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
  isExternal: true
  name: Update(GameTime)
  nameWithType: IUpdateable.Update(GameTime)
  fullName: Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
- uid: Microsoft.Xna.Framework.IUpdateable
  commentId: T:Microsoft.Xna.Framework.IUpdateable
  isExternal: true
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Microsoft.Xna.Framework.IUpdateable
- uid: TinyLife.World.UpdateDelegate
  commentId: T:TinyLife.World.UpdateDelegate
  parent: TinyLife.World
  name: UpdateDelegate
  nameWithType: UpdateDelegate
  fullName: TinyLife.World.UpdateDelegate
- uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetHoverInfo(Tooltip)
  nameWithType: MapObject.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
  - name: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
- uid: System.Action{MLEM.Ui.Elements.Tooltip}
  commentId: T:System.Action{MLEM.Ui.Elements.Tooltip}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Tooltip>
  nameWithType: Action<Tooltip>
  fullName: System.Action<MLEM.Ui.Elements.Tooltip>
  nameWithType.vb: Action(Of Tooltip)
  fullName.vb: System.Action(Of MLEM.Ui.Elements.Tooltip)
  name.vb: Action(Of Tooltip)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    isExternal: true
  - name: )
- uid: TinyLife.Objects.MapObject.Position*
  commentId: Overload:TinyLife.Objects.MapObject.Position
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Objects.MapObject.ParentInfo
  commentId: P:TinyLife.Objects.MapObject.ParentInfo
  parent: TinyLife.Objects.MapObject
  name: ParentInfo
  nameWithType: MapObject.ParentInfo
  fullName: TinyLife.Objects.MapObject.ParentInfo
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.MapObject.ParentInfo*
  commentId: Overload:TinyLife.Objects.MapObject.ParentInfo
  name: ParentInfo
  nameWithType: MapObject.ParentInfo
  fullName: TinyLife.Objects.MapObject.ParentInfo
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  parent: TinyLife.Objects
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
- uid: TinyLife.Objects.Visibility.WhenVisible
  commentId: F:TinyLife.Objects.Visibility.WhenVisible
  name: WhenVisible
  nameWithType: Visibility.WhenVisible
  fullName: TinyLife.Objects.Visibility.WhenVisible
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  name: Visibility
  nameWithType: FurnitureType.TypeSettings.Visibility
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.Visibility
- uid: TinyLife.Objects.MapObject.Visibility*
  commentId: Overload:TinyLife.Objects.MapObject.Visibility
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
- uid: TinyLife.Objects.Visibility
  commentId: T:TinyLife.Objects.Visibility
  parent: TinyLife.Objects
  name: Visibility
  nameWithType: Visibility
  fullName: TinyLife.Objects.Visibility
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.MapObject.Id*
  commentId: Overload:TinyLife.Objects.MapObject.Id
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Objects.MapObject.Map*
  commentId: Overload:TinyLife.Objects.MapObject.Map
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.MapObject.CurrentLot*
  commentId: Overload:TinyLife.Objects.MapObject.CurrentLot
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.Objects.MapObject.CurrentRoom*
  commentId: Overload:TinyLife.Objects.MapObject.CurrentRoom
  name: CurrentRoom
  nameWithType: MapObject.CurrentRoom
  fullName: TinyLife.Objects.MapObject.CurrentRoom
- uid: TinyLife.Objects.MapObject.IsInWorld*
  commentId: Overload:TinyLife.Objects.MapObject.IsInWorld
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.MapObject.HoldingPerson*
  commentId: Overload:TinyLife.Objects.MapObject.HoldingPerson
  name: HoldingPerson
  nameWithType: MapObject.HoldingPerson
  fullName: TinyLife.Objects.MapObject.HoldingPerson
- uid: TinyLife.Objects.MapObject.#ctor*
  commentId: Overload:TinyLife.Objects.MapObject.#ctor
  name: MapObject
  nameWithType: MapObject.MapObject
  fullName: TinyLife.Objects.MapObject.MapObject
  nameWithType.vb: MapObject.New
  fullName.vb: TinyLife.Objects.MapObject.New
  name.vb: New
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: DoDraw(GameTime, object, Color?, bool, List<Item>)
  nameWithType: MapObject.DoDraw(GameTime, object, Color?, bool, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, object, Microsoft.Xna.Framework.Color?, bool, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.DoDraw(GameTime, Object, Color?, Boolean, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, Object, Microsoft.Xna.Framework.Color?, Boolean, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: DoDraw(GameTime, Object, Color?, Boolean, List(Of Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: )
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
  name: StaticSpriteBatch
  nameWithType: StaticSpriteBatch
  fullName: MLEM.Graphics.StaticSpriteBatch
- uid: TinyLife.Objects.MapObject.Draw*
  commentId: Overload:TinyLife.Objects.MapObject.Draw
  name: Draw
  nameWithType: MapObject.Draw
  fullName: TinyLife.Objects.MapObject.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  commentId: T:System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<StaticSpriteBatch.Item>
  nameWithType: List<StaticSpriteBatch.Item>
  fullName: System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>
  nameWithType.vb: List(Of StaticSpriteBatch.Item)
  fullName.vb: System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item)
  name.vb: List(Of StaticSpriteBatch.Item)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch
    name: StaticSpriteBatch
    isExternal: true
  - name: .
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  isExternal: true
  name: GetObjects<T>(RectangleF)
  nameWithType: Map.GetObjects<T>(RectangleF)
  fullName: TinyLife.World.Map.GetObjects<T>(MLEM.Misc.RectangleF)
  nameWithType.vb: Map.GetObjects(Of T)(RectangleF)
  fullName.vb: TinyLife.World.Map.GetObjects(Of T)(MLEM.Misc.RectangleF)
  name.vb: GetObjects(Of T)(RectangleF)
  spec.csharp:
  - uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
    name: GetObjects
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
    name: GetObjects
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
- uid: TinyLife.Objects.MapObject.Intersects*
  commentId: Overload:TinyLife.Objects.MapObject.Intersects
  name: Intersects
  nameWithType: MapObject.Intersects
  fullName: TinyLife.Objects.MapObject.Intersects
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  parent: TinyLife.Objects.MapObject
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
- uid: TinyLife.Objects.MapObject.Validate*
  commentId: Overload:TinyLife.Objects.MapObject.Validate
  name: Validate
  nameWithType: MapObject.Validate
  fullName: TinyLife.Objects.MapObject.Validate
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.MapObject.GetCategories*
  commentId: Overload:TinyLife.Objects.MapObject.GetCategories
  name: GetCategories
  nameWithType: MapObject.GetCategories
  fullName: TinyLife.Objects.MapObject.GetCategories
- uid: TinyLife.Objects.MapObject.OnAdded*
  commentId: Overload:TinyLife.Objects.MapObject.OnAdded
  name: OnAdded
  nameWithType: MapObject.OnAdded
  fullName: TinyLife.Objects.MapObject.OnAdded
- uid: TinyLife.Objects.MapObject.OnRemoved*
  commentId: Overload:TinyLife.Objects.MapObject.OnRemoved
  name: OnRemoved
  nameWithType: MapObject.OnRemoved
  fullName: TinyLife.Objects.MapObject.OnRemoved
- uid: TinyLife.Objects.MapObject.OnGetHoverInfo
  commentId: E:TinyLife.Objects.MapObject.OnGetHoverInfo
  parent: TinyLife.Objects.MapObject
  name: OnGetHoverInfo
  nameWithType: MapObject.OnGetHoverInfo
  fullName: TinyLife.Objects.MapObject.OnGetHoverInfo
- uid: TinyLife.Objects.MapObject.GetHoverInfo*
  commentId: Overload:TinyLife.Objects.MapObject.GetHoverInfo
  name: GetHoverInfo
  nameWithType: MapObject.GetHoverInfo
  fullName: TinyLife.Objects.MapObject.GetHoverInfo
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Objects.ObjectCategory.SingleBed
  commentId: F:TinyLife.Objects.ObjectCategory.SingleBed
  name: SingleBed
  nameWithType: ObjectCategory.SingleBed
  fullName: TinyLife.Objects.ObjectCategory.SingleBed
- uid: TinyLife.Objects.ObjectCategory.DoubleBed
  commentId: F:TinyLife.Objects.ObjectCategory.DoubleBed
  name: DoubleBed
  nameWithType: ObjectCategory.DoubleBed
  fullName: TinyLife.Objects.ObjectCategory.DoubleBed
- uid: TinyLife.Objects.Person.LastBedSleptIn
  commentId: F:TinyLife.Objects.Person.LastBedSleptIn
  name: LastBedSleptIn
  nameWithType: Person.LastBedSleptIn
  fullName: TinyLife.Objects.Person.LastBedSleptIn
- uid: TinyLife.Objects.MapObject.GetAiPriority*
  commentId: Overload:TinyLife.Objects.MapObject.GetAiPriority
  name: GetAiPriority
  nameWithType: MapObject.GetAiPriority
  fullName: TinyLife.Objects.MapObject.GetAiPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Actions.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.CanExecuteResult.Valid
  name: Valid
  nameWithType: CanExecuteResult.Valid
  fullName: TinyLife.Actions.CanExecuteResult.Valid
- uid: TinyLife.Objects.BreakableFurniture.Broken
  commentId: F:TinyLife.Objects.BreakableFurniture.Broken
  parent: TinyLife.Objects.BreakableFurniture
  name: Broken
  nameWithType: BreakableFurniture.Broken
  fullName: TinyLife.Objects.BreakableFurniture.Broken
- uid: TinyLife.Objects.Furniture.AreUtilitiesDisabled
  commentId: P:TinyLife.Objects.Furniture.AreUtilitiesDisabled
  parent: TinyLife.Objects.Furniture
  name: AreUtilitiesDisabled
  nameWithType: Furniture.AreUtilitiesDisabled
  fullName: TinyLife.Objects.Furniture.AreUtilitiesDisabled
- uid: TinyLife.Objects.MapObject.CanExecuteAction*
  commentId: Overload:TinyLife.Objects.MapObject.CanExecuteAction
  name: CanExecuteAction
  nameWithType: MapObject.CanExecuteAction
  fullName: TinyLife.Objects.MapObject.CanExecuteAction
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  parent: TinyLife.Actions.Action
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  nameWithType: ActionInfo.GetInvolvedObjects<T>(ObjectCategory, bool, bool)
  fullName: TinyLife.Actions.ActionInfo.GetInvolvedObjects<T>(TinyLife.Objects.ObjectCategory, bool, bool)
  nameWithType.vb: ActionInfo.GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetInvolvedObjects(Of T)(TinyLife.Objects.ObjectCategory, Boolean, Boolean)
  name.vb: GetInvolvedObjects(Of T)(ObjectCategory, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
    name: GetInvolvedObjects
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
    name: GetInvolvedObjects
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.Furniture.DevaluedThroughUse
  commentId: F:TinyLife.Objects.Furniture.DevaluedThroughUse
  parent: TinyLife.Objects.Furniture
  name: DevaluedThroughUse
  nameWithType: Furniture.DevaluedThroughUse
  fullName: TinyLife.Objects.Furniture.DevaluedThroughUse
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetActionObject<T>(bool)
  nameWithType: ActionInfo.GetActionObject<T>(bool)
  fullName: TinyLife.Actions.ActionInfo.GetActionObject<T>(bool)
  nameWithType.vb: ActionInfo.GetActionObject(Of T)(Boolean)
  fullName.vb: TinyLife.Actions.ActionInfo.GetActionObject(Of T)(Boolean)
  name.vb: GetActionObject(Of T)(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.GetActionObject``1(System.Boolean)
    name: GetActionObject
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.MapObject.OnActionCompleted*
  commentId: Overload:TinyLife.Objects.MapObject.OnActionCompleted
  name: OnActionCompleted
  nameWithType: MapObject.OnActionCompleted
  fullName: TinyLife.Objects.MapObject.OnActionCompleted
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  isExternal: true
  name: Update(GameTime)
  nameWithType: Game.Update(GameTime)
  fullName: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    isExternal: true
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  parent: TinyLife.Actions.Action
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  parent: TinyLife.Objects.Furniture
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Objects.MapObject.ActionUpdate*
  commentId: Overload:TinyLife.Objects.MapObject.ActionUpdate
  name: ActionUpdate
  nameWithType: MapObject.ActionUpdate
  fullName: TinyLife.Objects.MapObject.ActionUpdate
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: MapObject.GetFreeActionSpotInfo
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged*
  commentId: Overload:TinyLife.Objects.MapObject.OnCameraRotationChanged
  name: OnCameraRotationChanged
  nameWithType: MapObject.OnCameraRotationChanged
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
- uid: TinyLife.Objects.MapObject.SetMapAndValidate*
  commentId: Overload:TinyLife.Objects.MapObject.SetMapAndValidate
  name: SetMapAndValidate
  nameWithType: MapObject.SetMapAndValidate
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Objects.MapObject.HasCategory*
  commentId: Overload:TinyLife.Objects.MapObject.HasCategory
  name: HasCategory
  nameWithType: MapObject.HasCategory
  fullName: TinyLife.Objects.MapObject.HasCategory
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  nameWithType: Person.GetEfficiencyModifier(float, ActionInfo, SkillType, float)
  fullName: TinyLife.Objects.Person.GetEfficiencyModifier(float, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, float)
  nameWithType.vb: Person.GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  fullName.vb: TinyLife.Objects.Person.GetEfficiencyModifier(Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, Single)
  name.vb: GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  spec.csharp:
  - uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier*
  commentId: Overload:TinyLife.Objects.MapObject.GetEfficiencyModifier
  name: GetEfficiencyModifier
  nameWithType: MapObject.GetEfficiencyModifier
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Skills
    name: Skills
- uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: RestoreNeed(NeedType, float, ActionInfo, float)
  nameWithType: Person.RestoreNeed(NeedType, float, ActionInfo, float)
  fullName: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType, float, TinyLife.Actions.ActionInfo, float)
  nameWithType.vb: Person.RestoreNeed(NeedType, Single, ActionInfo, Single)
  fullName.vb: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType, Single, TinyLife.Actions.ActionInfo, Single)
  name.vb: RestoreNeed(NeedType, Single, ActionInfo, Single)
  spec.csharp:
  - uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
    name: RestoreNeed
  - name: (
  - uid: TinyLife.NeedType
    name: NeedType
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
    name: RestoreNeed
  - name: (
  - uid: TinyLife.NeedType
    name: NeedType
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier*
  commentId: Overload:TinyLife.Objects.MapObject.GetRestoreNeedModifier
  name: GetRestoreNeedModifier
  nameWithType: MapObject.GetRestoreNeedModifier
  fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
  - name: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    isExternal: true
  - name: )
- uid: TinyLife.Objects.ObjectCategory.NonColliding
  commentId: F:TinyLife.Objects.ObjectCategory.NonColliding
  name: NonColliding
  nameWithType: ObjectCategory.NonColliding
  fullName: TinyLife.Objects.ObjectCategory.NonColliding
- uid: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  isExternal: true
  name: MarkDirtyForPathfinding(Point)
  nameWithType: Map.MarkDirtyForPathfinding(Point)
  fullName: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
    name: MarkDirtyForPathfinding
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.MarkDirtyForPathfinding(Microsoft.Xna.Framework.Point)
    name: MarkDirtyForPathfinding
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.MapObject.IsFreeSpot*
  commentId: Overload:TinyLife.Objects.MapObject.IsFreeSpot
  name: IsFreeSpot
  nameWithType: MapObject.IsFreeSpot
  fullName: TinyLife.Objects.MapObject.IsFreeSpot
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.MapObject.GetPathCostModifier*
  commentId: Overload:TinyLife.Objects.MapObject.GetPathCostModifier
  name: GetPathCostModifier
  nameWithType: MapObject.GetPathCostModifier
  fullName: TinyLife.Objects.MapObject.GetPathCostModifier
- uid: TinyLife.Objects.MapObject.ResetToStatic*
  commentId: Overload:TinyLife.Objects.MapObject.ResetToStatic
  name: ResetToStatic
  nameWithType: MapObject.ResetToStatic
  fullName: TinyLife.Objects.MapObject.ResetToStatic
- uid: TinyLife.Objects.Furniture.MarkDirtyForPathfinding
  commentId: M:TinyLife.Objects.Furniture.MarkDirtyForPathfinding
  name: MarkDirtyForPathfinding()
  nameWithType: Furniture.MarkDirtyForPathfinding()
  fullName: TinyLife.Objects.Furniture.MarkDirtyForPathfinding()
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.MarkDirtyForPathfinding
    name: MarkDirtyForPathfinding
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.MarkDirtyForPathfinding
    name: MarkDirtyForPathfinding
  - name: (
  - name: )
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  parent: TinyLife.Objects.MapObject
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: TinyLife.Objects.MapObject.OnPositionChanged*
  commentId: Overload:TinyLife.Objects.MapObject.OnPositionChanged
  name: OnPositionChanged
  nameWithType: MapObject.OnPositionChanged
  fullName: TinyLife.Objects.MapObject.OnPositionChanged
- uid: TinyLife.Objects.MapObject.Visibility
  commentId: P:TinyLife.Objects.MapObject.Visibility
  parent: TinyLife.Objects.MapObject
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
- uid: TinyLife.Objects.MapObject.DoDraw*
  commentId: Overload:TinyLife.Objects.MapObject.DoDraw
  name: DoDraw
  nameWithType: MapObject.DoDraw
  fullName: TinyLife.Objects.MapObject.DoDraw
- uid: TinyLife.Objects.IUpdatingObject
  commentId: T:TinyLife.Objects.IUpdatingObject
  parent: TinyLife.Objects
  name: IUpdatingObject
  nameWithType: IUpdatingObject
  fullName: TinyLife.Objects.IUpdatingObject
- uid: TinyLife.Objects.MapObject.DoUpdate*
  commentId: Overload:TinyLife.Objects.MapObject.DoUpdate
  name: DoUpdate
  nameWithType: MapObject.DoUpdate
  fullName: TinyLife.Objects.MapObject.DoUpdate
- uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteEffects)
  commentId: M:TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteEffects)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: DrawColumns(Map, Vector2, object, Vector2, Direction2, TextureRegion, Color, float, List<Item>, bool, ParentInfo, float, bool, SpriteEffects)
  nameWithType: FurnitureType.DrawColumns(Map, Vector2, object, Vector2, Direction2, TextureRegion, Color, float, List<StaticSpriteBatch.Item>, bool, ParentInfo, float, bool, SpriteEffects)
  fullName: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, object, Microsoft.Xna.Framework.Vector2, MLEM.Misc.Direction2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, float, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, bool, TinyLife.Objects.ParentInfo, float, bool, Microsoft.Xna.Framework.Graphics.SpriteEffects)
  nameWithType.vb: FurnitureType.DrawColumns(Map, Vector2, Object, Vector2, Direction2, TextureRegion, Color, Single, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, Boolean, SpriteEffects)
  fullName.vb: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Object, Microsoft.Xna.Framework.Vector2, MLEM.Misc.Direction2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, Single, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), Boolean, TinyLife.Objects.ParentInfo, Single, Boolean, Microsoft.Xna.Framework.Graphics.SpriteEffects)
  name.vb: DrawColumns(Map, Vector2, Object, Vector2, Direction2, TextureRegion, Color, Single, List(Of Item), Boolean, ParentInfo, Single, Boolean, SpriteEffects)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteEffects)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,System.Boolean,Microsoft.Xna.Framework.Graphics.SpriteEffects)
    name: DrawColumns
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: Item
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    isExternal: true
  - name: )
- uid: TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)
  name: HasCategory(ObjectCategory)
  nameWithType: FurnitureType.HasCategory(ObjectCategory)
  fullName: TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)
    name: HasCategory
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.FurnitureType.HasCategory(TinyLife.Objects.ObjectCategory)
    name: HasCategory
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.MapObject.DrawColumns*
  commentId: Overload:TinyLife.Objects.MapObject.DrawColumns
  name: DrawColumns
  nameWithType: MapObject.DrawColumns
  fullName: TinyLife.Objects.MapObject.DrawColumns
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteEffects
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteEffects
  nameWithType: SpriteEffects
  fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.Objects.MapObject.GetModCategory*
  commentId: Overload:TinyLife.Objects.MapObject.GetModCategory
  name: GetModCategory
  nameWithType: MapObject.GetModCategory
  fullName: TinyLife.Objects.MapObject.GetModCategory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String

### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  id: MapObject
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  - TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.CurrentLot
  - TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  - TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetHoverInfo
  - TinyLife.Objects.MapObject.GetModCategory(System.String)
  - TinyLife.Objects.MapObject.GetVisibility
  - TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.Id
  - TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  - TinyLife.Objects.MapObject.IsInWorld
  - TinyLife.Objects.MapObject.Map
  - TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Objects.MapObject.OnAdded
  - TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.Objects.MapObject.OnCreated
  - TinyLife.Objects.MapObject.OnDraw
  - TinyLife.Objects.MapObject.OnEventsAttachable
  - TinyLife.Objects.MapObject.OnRemoved
  - TinyLife.Objects.MapObject.OnUpdate
  - TinyLife.Objects.MapObject.OnValidated
  - TinyLife.Objects.MapObject.PersonRotationOrder
  - TinyLife.Objects.MapObject.Position
  - TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  - TinyLife.Objects.MapObject.Validate
  langs:
  - csharp
  - vb
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
  type: Class
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MapObject
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn instance of this class represents an object that can be, or is, part of a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this object&apos;s <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> is set to -1, -1, that is usually an indicator that the object is currently not in the world.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class MapObject : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class MapObject
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  derivedClasses:
  - TinyLife.Objects.Furniture
  - TinyLife.Objects.Person
  - TinyLife.Objects.Vehicle
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.MapObject.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.MapObject.PersonRotationOrder
  commentId: F:TinyLife.Objects.MapObject.PersonRotationOrder
  id: PersonRotationOrder
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: PersonRotationOrder
  nameWithType: MapObject.PersonRotationOrder
  fullName: TinyLife.Objects.MapObject.PersonRotationOrder
  type: Field
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonRotationOrder
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe order of <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that the texture atlas for <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> has for its textures, from left to right\n"
  example: []
  syntax:
    content: public static readonly Direction2[] PersonRotationOrder
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly PersonRotationOrder As Direction2()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.MapObject.OnCreated
  commentId: E:TinyLife.Objects.MapObject.OnCreated
  id: OnCreated
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnCreated
  nameWithType: MapObject.OnCreated
  fullName: TinyLife.Objects.MapObject.OnCreated
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCreated
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when a map object is created.\nThis event is invoked in the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnCreated
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnCreated As Action(Of MapObject)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  id: OnValidated
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnValidated
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when a map object is validated.\nThis event si invoked in <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref>, which is usually called after subclass validation.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnValidated
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnValidated As Action(Of MapObject)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  id: OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEventsAttachable
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when non-static events for an object are ready to be attached to.\nThis event is invoked in the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> constructor, and in the <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static event Action<MapObject> OnEventsAttachable
    return:
      type: System.Action{TinyLife.Objects.MapObject}
    content.vb: Public Shared Event OnEventsAttachable As Action(Of MapObject)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.MapObject.OnDraw
  commentId: E:TinyLife.Objects.MapObject.OnDraw
  id: OnDraw
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnDraw
  nameWithType: MapObject.OnDraw
  fullName: TinyLife.Objects.MapObject.OnDraw
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnDraw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this object is drawn, right after <xref href=\"TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event DrawDelegate OnDraw
    return:
      type: TinyLife.World.DrawDelegate
    content.vb: Public Event OnDraw As DrawDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.MapObject.OnUpdate
  commentId: E:TinyLife.Objects.MapObject.OnUpdate
  id: OnUpdate
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnUpdate
  nameWithType: MapObject.OnUpdate
  fullName: TinyLife.Objects.MapObject.OnUpdate
  type: Event
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnUpdate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this object is updated, right after <xref href=\"Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> is called.\nNote that, if this object does not extend <xref href=\"Microsoft.Xna.Framework.IUpdateable\" data-throw-if-not-resolved=\"false\"></xref>, this event is not invoked.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event UpdateDelegate OnUpdate
    return:
      type: TinyLife.World.UpdateDelegate
    content.vb: Public Event OnUpdate As UpdateDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  id: Id
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> of this object instance\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Guid Id { get; protected set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public Property Id As Guid
  overload: TinyLife.Objects.MapObject.Id*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  id: Map
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe map that this object is currently on.\nIf this is null, the object is not currently on a map.\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.Objects.MapObject.Map*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  id: Position
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Position
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe position on the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref> of this object.\nIf this is set to -1, -1, that is usually an indicator that the object is currently not in the world.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public virtual Vector2 Position { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: >-
      <DataMember>

      Public Overridable Property Position As Vector2
  overload: TinyLife.Objects.MapObject.Position*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  id: CurrentLot
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentLot
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns the <xref href=\"TinyLife.Objects.MapObject.CurrentLot\" data-throw-if-not-resolved=\"false\"></xref> that this object is currently on\n"
  example: []
  syntax:
    content: public Lot CurrentLot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property CurrentLot As Lot
  overload: TinyLife.Objects.MapObject.CurrentLot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  id: IsInWorld
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
  type: Property
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsInWorld
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns true if this object is currently present on a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsInWorld { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsInWorld As Boolean
  overload: TinyLife.Objects.MapObject.IsInWorld*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.MapObject.#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(System.Guid,TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)'
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: MapObject(Guid, Map, Vector2)
  nameWithType: MapObject.MapObject(Guid, Map, Vector2)
  fullName: TinyLife.Objects.MapObject.MapObject(System.Guid, TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 118
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new map object with the given settings\n"
  example: []
  syntax:
    content: public MapObject(Guid id, Map map, Vector2 position)
    parameters:
    - id: id
      type: System.Guid
      description: The object&apos;s id
    - id: map
      type: TinyLife.World.Map
      description: The map the object should be on
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the object should have
    content.vb: Public Sub New(id As Guid, map As Map, position As Vector2)
  overload: TinyLife.Objects.MapObject.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this object on the current <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>, at the current <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Draw(GameTime time, SpriteBatch batch, Vector2 drawPos, Color? overrideColor)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in draw space, to draw this furniture at
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    content.vb: Public Overridable Sub Draw(time As GameTime, batch As SpriteBatch, drawPos As Vector2, overrideColor As Color?)
  overload: TinyLife.Objects.MapObject.Draw*
  nameWithType.vb: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  id: Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intersects
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 144
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this map object intersects with the given rectangle.\nThis is used for <xref href=\"TinyLife.World.Map.GetObjects%60%601(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual bool Intersects(RectangleF rectangle)
    parameters:
    - id: rectangle
      type: MLEM.Misc.RectangleF
      description: The area that should be checked for
    return:
      type: System.Boolean
      description: true if this object intersects with the given rectangle
    content.vb: Public Overridable Function Intersects(rectangle As RectangleF) As Boolean
  overload: TinyLife.Objects.MapObject.Intersects*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  id: Validate
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\nBy default, this method invokes <xref href=\"TinyLife.Objects.MapObject.OnValidated\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overridable Function Validate As Boolean
  overload: TinyLife.Objects.MapObject.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  id: GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCategories
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 165
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this object has, based on the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual ObjectCategory GetCategories(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories that this object has
    content.vb: Public Overridable Function GetCategories(person As Person) As ObjectCategory
  overload: TinyLife.Objects.MapObject.GetCategories*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.OnAdded
  commentId: M:TinyLife.Objects.MapObject.OnAdded
  id: OnAdded
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnAdded()
  nameWithType: MapObject.OnAdded()
  fullName: TinyLife.Objects.MapObject.OnAdded()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnAdded
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 173
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is added to a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public virtual void OnAdded()
    content.vb: Public Overridable Sub OnAdded
  overload: TinyLife.Objects.MapObject.OnAdded*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  id: OnRemoved
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRemoved
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is removed from a <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: public virtual void OnRemoved()
    content.vb: Public Overridable Sub OnRemoved
  overload: TinyLife.Objects.MapObject.OnRemoved*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.GetHoverInfo
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo
  id: GetHoverInfo
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetHoverInfo()
  nameWithType: MapObject.GetHoverInfo()
  fullName: TinyLife.Objects.MapObject.GetHoverInfo()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHoverInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"MLEM.Ui.Elements.Tooltip\" data-throw-if-not-resolved=\"false\"></xref> object that is displayed whenever the mouse is hovered over this object in the world.\nBy default, this method returns null, which will cause no tooltip to be displayed.\n"
  example: []
  syntax:
    content: public virtual Tooltip GetHoverInfo()
    return:
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip to display
    content.vb: Public Overridable Function GetHoverInfo As Tooltip
  overload: TinyLife.Objects.MapObject.GetHoverInfo*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: MapObject.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAiPriority
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns an integer that represents a priority for the <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref>&apos;s interaction with this object.\nA higher priority means that this object will be picked over other objects (with lower priority).\nThe default return value is 0, meaning that no special priority is assigned to this object.\nFor any <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.Objects.ObjectCategory.SingleBed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.ObjectCategory.DoubleBed\" data-throw-if-not-resolved=\"false\"></xref> category that is the person&apos;s <xref href=\"TinyLife.Objects.Person.LastBedSleptIn\" data-throw-if-not-resolved=\"false\"></xref>, 10 is returned.\n"
  example: []
  syntax:
    content: public virtual int GetAiPriority(Person person, ObjectCategory categories)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose AI is attempting to interact with this object
    - id: categories
      type: TinyLife.Objects.ObjectCategory
      description: The categories that are relevant for the ai interaction
    return:
      type: System.Int32
      description: This object&apos;s priority
    content.vb: Public Overridable Function GetAiPriority(person As Person, categories As ObjectCategory) As Integer
  overload: TinyLife.Objects.MapObject.GetAiPriority*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  id: CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  nameWithType: MapObject.CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteAction
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 212
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">action</code> can be executed at this map object.\nBy default, this method returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> for all actions, but <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> additionally returns <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken\" data-throw-if-not-resolved=\"false\"></xref> in the right conditions.\n"
  example: []
  syntax:
    content: public virtual ActionType.CanExecuteResult CanExecuteAction(ActionType action, ActionInfo info, bool automatic, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.ActionType
      description: The action that is querying whether it can be executed.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info.
    - id: automatic
      type: System.Boolean
      description: Whether the action was started automatically.
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object).
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
      description: Whether this object allows the action to be executed at it.
    content.vb: Public Overridable Function CanExecuteAction(action As ActionType, info As ActionInfo, automatic As Boolean, isAuxiliary As Boolean) As ActionType.CanExecuteResult
  overload: TinyLife.Objects.MapObject.CanExecuteAction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  id: OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnActionCompleted(Action, CompletionType, Boolean)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionCompleted
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 224
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in is completed. Note that this includes actions that are underlying (<xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsUnderlying\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets <xref href=\"TinyLife.Objects.Furniture.DevaluedThroughUse\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void OnActionCompleted(Action action, CompletionType type, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type of the action&apos;s completion
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub OnActionCompleted(action As Action, type As CompletionType, isAuxiliary As Boolean)
  overload: TinyLife.Objects.MapObject.OnActionCompleted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  id: ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 236
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> that this object is involved in updates, which is every <xref href=\"Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> frame. Note that this includes actions that are underlying (<xref href=\"TinyLife.Actions.Typeless.TypelessAction.IsUnderlying\" data-throw-if-not-resolved=\"false\"></xref>) and actions that aren&apos;t fully in progress yet (<xref href=\"TinyLife.Actions.Typeless.TypelessAction.FullyInProgress\" data-throw-if-not-resolved=\"false\"></xref>).\nThis object counts as involved in the action if its <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> includes this object.\nIn general, the base method should be called for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> objects, since it sets deals with <xref href=\"TinyLife.Objects.Furniture.Dirty\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  example: []
  syntax:
    content: public virtual void ActionUpdate(Action action, GameTime time, TimeSpan passedInGame, float speedMultiplier, bool isAuxiliary)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object counts as an auxiliary object. If this value is false, the object is th e<xref href="TinyLife.Actions.ActionInfo.GetActionObject%60%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Sub ActionUpdate(action As Action, time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single, isAuxiliary As Boolean)
  overload: TinyLife.Objects.MapObject.ActionUpdate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.GetVisibility
  commentId: M:TinyLife.Objects.MapObject.GetVisibility
  id: GetVisibility
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetVisibility()
  nameWithType: MapObject.GetVisibility()
  fullName: TinyLife.Objects.MapObject.GetVisibility()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisibility
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 244
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the visibility settings of this object.\nBy default, <xref href=\"TinyLife.Objects.Visibility.WhenVisible\" data-throw-if-not-resolved=\"false\"></xref> is returned.\nFor <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, its <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.Visibility\" data-throw-if-not-resolved=\"false\"></xref> is returned instead.\n"
  example: []
  syntax:
    content: public virtual Visibility GetVisibility()
    return:
      type: TinyLife.Objects.Visibility
      description: This object&apos;s visibility settings
    content.vb: Public Overridable Function GetVisibility As Visibility
  overload: TinyLife.Objects.MapObject.GetVisibility*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 254
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot, packed into an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual ActionInfo GetFreeActionSpotInfo(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The first free action spot as an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overridable Function GetFreeActionSpotInfo(person As Person, context As ObjectCategory = Nothing) As ActionInfo
  overload: TinyLife.Objects.MapObject.GetFreeActionSpotInfo*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  id: OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: MapObject.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCameraRotationChanged
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 264
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is invoked when the game&apos;s camera rotation changes.\nAdditionally, the old and new rotations are passed.\n"
  example: []
  syntax:
    content: public virtual void OnCameraRotationChanged(Direction2 oldRotation, Direction2 newRotation)
    parameters:
    - id: oldRotation
      type: MLEM.Misc.Direction2
      description: The old camera rotation
    - id: newRotation
      type: MLEM.Misc.Direction2
      description: The new camera rotation
    content.vb: Public Overridable Sub OnCameraRotationChanged(oldRotation As Direction2, newRotation As Direction2)
  overload: TinyLife.Objects.MapObject.OnCameraRotationChanged*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  id: SetMapAndValidate(TinyLife.World.Map)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: SetMapAndValidate(Map)
  nameWithType: MapObject.SetMapAndValidate(Map)
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetMapAndValidate
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is the same as <xref href=\"TinyLife.Objects.MapObject.Validate\" data-throw-if-not-resolved=\"false\"></xref>, but it also sets the <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool SetMapAndValidate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to set
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function SetMapAndValidate(map As Map) As Boolean
  overload: TinyLife.Objects.MapObject.SetMapAndValidate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: HasCategory(Person, ObjectCategory)
  nameWithType: MapObject.HasCategory(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasCategory
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 282
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA shorthand that checks whether <xref href=\"TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> overlaps with the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">category</code> flags\n"
  example: []
  syntax:
    content: public bool HasCategory(Person person, ObjectCategory category)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    - id: category
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories, one of which this object needs to match
    return:
      type: System.Boolean
      description: Whether this object contains at least one of the given categories
    content.vb: Public Function HasCategory(person As Person, category As ObjectCategory) As Boolean
  overload: TinyLife.Objects.MapObject.HasCategory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  id: GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  nameWithType: MapObject.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Skills.SkillType, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEfficiencyModifier
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 298
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the efficiency modifier that this object multiplies the person&apos;s productivity with.\nThis method is automatically called in <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>\nThis action is invoked for all <xref href=\"TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> of the passed <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this method returns 1, meaning the person&apos;s efficiency will not be influenced.\n"
  example: []
  syntax:
    content: public virtual float GetEfficiencyModifier(Person person, ActionInfo info, bool isAuxiliary, SkillType skill, float levelModifier)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose efficiency should be influenced
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: isAuxiliary
      type: System.Boolean
      description: Whether this object is auxiliary (or the main action object)
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The skill that should influence the efficiency
    - id: levelModifier
      type: System.Single
      description: The level modifier for the <code data-dev-comment-type="paramref" class="paramref">skill</code>
    return:
      type: System.Single
      description: The efficiency modifier for this object
    content.vb: Public Overridable Function GetEfficiencyModifier(person As Person, info As ActionInfo, isAuxiliary As Boolean, skill As SkillType, levelModifier As Single) As Single
  overload: TinyLife.Objects.MapObject.GetEfficiencyModifier*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,MLEM.Misc.Direction2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, Furniture, AbstractSpot, Direction2, Single, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
  nameWithType: MapObject.DrawColumns(Map, Vector2, SpriteBatch, Vector2, TextureRegion, Color, Single, Point, Boolean, Furniture, AbstractSpot, Direction2, Single, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, System.Single, Microsoft.Xna.Framework.Point, System.Boolean, TinyLife.Objects.Furniture, TinyLife.Objects.AbstractSpot, MLEM.Misc.Direction2, System.Single, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawColumns
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 342
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws the given texture region in columns, which allows for depth calculation in isometric view to be possible.\nBigger objects, including all furniture, are drawn in this matter.\nWhen drawing a furniture item, <xref href=\"TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map%2cMicrosoft.Xna.Framework.Vector2%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Misc.Direction2%2cMLEM.Textures.TextureRegion%2cMicrosoft.Xna.Framework.Color%2cSystem.Single%2cSystem.Boolean%2cTinyLife.Objects.Furniture%2cTinyLife.Objects.AbstractSpot%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should be used instead, which automatically supplies values for <code data-dev-comment-type=\"paramref\" class=\"paramref\">wallHanging</code>, <code data-dev-comment-type=\"paramref\" class=\"paramref\">ceilingHanging</code> etc.\n"
  example: []
  syntax:
    content: public static void DrawColumns(Map map, Vector2 position, SpriteBatch batch, Vector2 drawPos, TextureRegion texture, Color color, float scale, Point size, bool pivot = true, Furniture parent = null, AbstractSpot parentSpot = null, Direction2 rotation = Direction2.None, float depthOffset = 0F, bool mirror = false, bool wallHanging = false, bool groundItem = false, bool ceilingHanging = false, bool roofAttached = false, bool editDrawPos = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the object is on
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the object is on, in world space
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw at, in draw space
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The texture region to draw
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to draw with
    - id: scale
      type: System.Single
      description: The scale to draw at
    - id: size
      type: Microsoft.Xna.Framework.Point
      description: The size, in tiles, that this object has
    - id: pivot
      type: System.Boolean
      description: The texture&apos;s pivot point, in texture-space pixels
    - id: parent
      type: TinyLife.Objects.Furniture
      description: The object&apos;s parent object
    - id: parentSpot
      type: TinyLife.Objects.AbstractSpot
      description: The object&apos;s parent spot
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation that this object has, used for some calculations
    - id: depthOffset
      type: System.Single
      description: A value that is added to the calculated object&apos;s depth
    - id: mirror
      type: System.Boolean
      description: Whether or not to mirror the texture
    - id: wallHanging
      type: System.Boolean
      description: Whether or not this object is hanging on a wall
    - id: groundItem
      type: System.Boolean
      description: Whether or not this item is considered a ground item (that doesn&apos;t have any collisions)
    - id: ceilingHanging
      type: System.Boolean
      description: Whether this object is hanging on the ceiling. If it is, its <code data-dev-comment-type="paramref" class="paramref">drawPos</code> is offset by the height of walls
    - id: roofAttached
      type: System.Boolean
      description: Whether this object is attached to a roof
    - id: editDrawPos
      type: System.Boolean
      description: Whether this object&apos;s <code data-dev-comment-type="paramref" class="paramref">drawPos</code> should be changed based on this object&apos;s circumstances, especially based on its <code data-dev-comment-type="paramref" class="paramref">parentSpot</code>
    content.vb: Public Shared Sub DrawColumns(map As Map, position As Vector2, batch As SpriteBatch, drawPos As Vector2, texture As TextureRegion, color As Color, scale As Single, size As Point, pivot As Boolean = True, parent As Furniture = Nothing, parentSpot As AbstractSpot = Nothing, rotation As Direction2 = Direction2.None, depthOffset As Single = 0F, mirror As Boolean = False, wallHanging As Boolean = False, groundItem As Boolean = False, ceilingHanging As Boolean = False, roofAttached As Boolean = False, editDrawPos As Boolean = True)
  overload: TinyLife.Objects.MapObject.DrawColumns*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  id: GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  langs:
  - csharp
  - vb
  name: GetModCategory(String)
  nameWithType: MapObject.GetModCategory(String)
  fullName: TinyLife.Objects.MapObject.GetModCategory(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/MapObject.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetModCategory
    path: ../TinyLife/Objects/MapObject.cs
    startLine: 406
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds and returns a custom <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> with the given name.\nThe returned category is guaranteed to be unique and mapped to the given name. Additionally, it can be used in combined flags, as it is not a combined flag itself.\n"
  example: []
  syntax:
    content: public static ObjectCategory GetModCategory(string name)
    parameters:
    - id: name
      type: System.String
      description: The name that the category should have
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A new object category
    content.vb: Public Shared Function GetModCategory(name As String) As ObjectCategory
  overload: TinyLife.Objects.MapObject.GetModCategory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MapObject>()
  nameWithType: Extensions.JsonCopy<MapObject>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.MapObject>()
  nameWithType.vb: Extensions.JsonCopy(Of MapObject)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.MapObject)()
  name.vb: JsonCopy(Of MapObject)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<MapObject>
    nameWithType: Extensions.JsonCopy<MapObject>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.MapObject>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of MapObject)
    nameWithType: Extensions.JsonCopy(Of MapObject)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.MapObject)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{TinyLife.Objects.MapObject}
  commentId: T:System.Action{TinyLife.Objects.MapObject}
  parent: System
  definition: System.Action`1
  name: Action<MapObject>
  nameWithType: Action<MapObject>
  fullName: System.Action<TinyLife.Objects.MapObject>
  nameWithType.vb: Action(Of MapObject)
  fullName.vb: System.Action(Of TinyLife.Objects.MapObject)
  name.vb: Action(Of MapObject)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  parent: TinyLife.Objects.MapObject
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  nameWithType.vb: MapObject.Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
- uid: TinyLife.World.DrawDelegate
  commentId: T:TinyLife.World.DrawDelegate
  parent: TinyLife.World
  name: DrawDelegate
  nameWithType: DrawDelegate
  fullName: TinyLife.World.DrawDelegate
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.IUpdateable.Update(Microsoft.Xna.Framework.GameTime)
  isExternal: true
- uid: Microsoft.Xna.Framework.IUpdateable
  commentId: T:Microsoft.Xna.Framework.IUpdateable
  isExternal: true
- uid: TinyLife.World.UpdateDelegate
  commentId: T:TinyLife.World.UpdateDelegate
  parent: TinyLife.World
  name: UpdateDelegate
  nameWithType: UpdateDelegate
  fullName: TinyLife.World.UpdateDelegate
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.MapObject.Id*
  commentId: Overload:TinyLife.Objects.MapObject.Id
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Objects.MapObject.Map*
  commentId: Overload:TinyLife.Objects.MapObject.Map
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Objects.MapObject.Position*
  commentId: Overload:TinyLife.Objects.MapObject.Position
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  parent: TinyLife.Objects.MapObject
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.Objects.MapObject.CurrentLot*
  commentId: Overload:TinyLife.Objects.MapObject.CurrentLot
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.MapObject.IsInWorld*
  commentId: Overload:TinyLife.Objects.MapObject.IsInWorld
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.MapObject.#ctor*
  commentId: Overload:TinyLife.Objects.MapObject.#ctor
  name: MapObject
  nameWithType: MapObject.MapObject
  fullName: TinyLife.Objects.MapObject.MapObject
- uid: TinyLife.Objects.MapObject.Draw*
  commentId: Overload:TinyLife.Objects.MapObject.Draw
  name: Draw
  nameWithType: MapObject.Draw
  fullName: TinyLife.Objects.MapObject.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.World.Map.GetObjects``1(MLEM.Misc.RectangleF)
  isExternal: true
- uid: TinyLife.Objects.MapObject.Intersects*
  commentId: Overload:TinyLife.Objects.MapObject.Intersects
  name: Intersects
  nameWithType: MapObject.Intersects
  fullName: TinyLife.Objects.MapObject.Intersects
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  parent: TinyLife.Objects.MapObject
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
- uid: TinyLife.Objects.MapObject.Validate*
  commentId: Overload:TinyLife.Objects.MapObject.Validate
  name: Validate
  nameWithType: MapObject.Validate
  fullName: TinyLife.Objects.MapObject.Validate
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.MapObject.GetCategories*
  commentId: Overload:TinyLife.Objects.MapObject.GetCategories
  name: GetCategories
  nameWithType: MapObject.GetCategories
  fullName: TinyLife.Objects.MapObject.GetCategories
- uid: TinyLife.Objects.MapObject.OnAdded*
  commentId: Overload:TinyLife.Objects.MapObject.OnAdded
  name: OnAdded
  nameWithType: MapObject.OnAdded
  fullName: TinyLife.Objects.MapObject.OnAdded
- uid: TinyLife.Objects.MapObject.OnRemoved*
  commentId: Overload:TinyLife.Objects.MapObject.OnRemoved
  name: OnRemoved
  nameWithType: MapObject.OnRemoved
  fullName: TinyLife.Objects.MapObject.OnRemoved
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip
- uid: TinyLife.Objects.MapObject.GetHoverInfo*
  commentId: Overload:TinyLife.Objects.MapObject.GetHoverInfo
  name: GetHoverInfo
  nameWithType: MapObject.GetHoverInfo
  fullName: TinyLife.Objects.MapObject.GetHoverInfo
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ObjectCategory.SingleBed
  commentId: F:TinyLife.Objects.ObjectCategory.SingleBed
  isExternal: true
- uid: TinyLife.Objects.ObjectCategory.DoubleBed
  commentId: F:TinyLife.Objects.ObjectCategory.DoubleBed
  isExternal: true
- uid: TinyLife.Objects.Person.LastBedSleptIn
  commentId: F:TinyLife.Objects.Person.LastBedSleptIn
  isExternal: true
- uid: TinyLife.Objects.MapObject.GetAiPriority*
  commentId: Overload:TinyLife.Objects.MapObject.GetAiPriority
  name: GetAiPriority
  nameWithType: MapObject.GetAiPriority
  fullName: TinyLife.Objects.MapObject.GetAiPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Valid
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  isExternal: true
- uid: TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  isExternal: true
- uid: TinyLife.Objects.MapObject.CanExecuteAction*
  commentId: Overload:TinyLife.Objects.MapObject.CanExecuteAction
  name: CanExecuteAction
  nameWithType: MapObject.CanExecuteAction
  fullName: TinyLife.Objects.MapObject.CanExecuteAction
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: IsUnderlying
  nameWithType: TypelessAction.IsUnderlying
  fullName: TinyLife.Actions.Typeless.TypelessAction.IsUnderlying
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Furniture.DevaluedThroughUse
  commentId: F:TinyLife.Objects.Furniture.DevaluedThroughUse
  parent: TinyLife.Objects.Furniture
  name: DevaluedThroughUse
  nameWithType: Furniture.DevaluedThroughUse
  fullName: TinyLife.Objects.Furniture.DevaluedThroughUse
- uid: TinyLife.Actions.ActionInfo.GetActionObject``1
  commentId: M:TinyLife.Actions.ActionInfo.GetActionObject``1
  isExternal: true
- uid: TinyLife.Objects.MapObject.OnActionCompleted*
  commentId: Overload:TinyLife.Objects.MapObject.OnActionCompleted
  name: OnActionCompleted
  nameWithType: MapObject.OnActionCompleted
  fullName: TinyLife.Objects.MapObject.OnActionCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  isExternal: true
- uid: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  commentId: P:TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
  parent: TinyLife.Actions.Typeless.TypelessAction
  name: FullyInProgress
  nameWithType: TypelessAction.FullyInProgress
  fullName: TinyLife.Actions.Typeless.TypelessAction.FullyInProgress
- uid: TinyLife.Objects.Furniture.Dirty
  commentId: F:TinyLife.Objects.Furniture.Dirty
  parent: TinyLife.Objects.Furniture
  name: Dirty
  nameWithType: Furniture.Dirty
  fullName: TinyLife.Objects.Furniture.Dirty
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Objects.MapObject.ActionUpdate*
  commentId: Overload:TinyLife.Objects.MapObject.ActionUpdate
  name: ActionUpdate
  nameWithType: MapObject.ActionUpdate
  fullName: TinyLife.Objects.MapObject.ActionUpdate
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.Visibility.WhenVisible
  commentId: F:TinyLife.Objects.Visibility.WhenVisible
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.Visibility
  isExternal: true
- uid: TinyLife.Objects.MapObject.GetVisibility*
  commentId: Overload:TinyLife.Objects.MapObject.GetVisibility
  name: GetVisibility
  nameWithType: MapObject.GetVisibility
  fullName: TinyLife.Objects.MapObject.GetVisibility
- uid: TinyLife.Objects.Visibility
  commentId: T:TinyLife.Objects.Visibility
  parent: TinyLife.Objects
  name: Visibility
  nameWithType: Visibility
  fullName: TinyLife.Objects.Visibility
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: MapObject.GetFreeActionSpotInfo
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged*
  commentId: Overload:TinyLife.Objects.MapObject.OnCameraRotationChanged
  name: OnCameraRotationChanged
  nameWithType: MapObject.OnCameraRotationChanged
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
- uid: TinyLife.Objects.MapObject.SetMapAndValidate*
  commentId: Overload:TinyLife.Objects.MapObject.SetMapAndValidate
  name: SetMapAndValidate
  nameWithType: MapObject.SetMapAndValidate
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.HasCategory*
  commentId: Overload:TinyLife.Objects.MapObject.HasCategory
  name: HasCategory
  nameWithType: MapObject.HasCategory
  fullName: TinyLife.Objects.MapObject.HasCategory
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier*
  commentId: Overload:TinyLife.Objects.MapObject.GetEfficiencyModifier
  name: GetEfficiencyModifier
  nameWithType: MapObject.GetEfficiencyModifier
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.FurnitureType.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Misc.Direction2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,System.Boolean,TinyLife.Objects.Furniture,TinyLife.Objects.AbstractSpot,System.Single,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.MapObject.DrawColumns*
  commentId: Overload:TinyLife.Objects.MapObject.DrawColumns
  name: DrawColumns
  nameWithType: MapObject.DrawColumns
  fullName: TinyLife.Objects.MapObject.DrawColumns
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Objects.AbstractSpot
  commentId: T:TinyLife.Objects.AbstractSpot
  parent: TinyLife.Objects
  name: AbstractSpot
  nameWithType: AbstractSpot
  fullName: TinyLife.Objects.AbstractSpot
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Objects.MapObject.GetModCategory*
  commentId: Overload:TinyLife.Objects.MapObject.GetModCategory
  name: GetModCategory
  nameWithType: MapObject.GetModCategory
  fullName: TinyLife.Objects.MapObject.GetModCategory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String

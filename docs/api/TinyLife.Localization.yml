### YamlMime:ManagedReference
items:
- uid: TinyLife.Localization
  commentId: T:TinyLife.Localization
  id: Localization
  parent: TinyLife
  children:
  - TinyLife.Localization.Get(TinyLife.LnCategory,System.String)
  - TinyLife.Localization.Get(TinyLife.LnCategory,System.String,System.Object[])
  - TinyLife.Localization.GetKeys(TinyLife.LnCategory)
  - TinyLife.Localization.LanguageNames
  - TinyLife.Localization.Names
  - TinyLife.Localization.SetLanguage(System.String)
  langs:
  - csharp
  - vb
  name: Localization
  nameWithType: Localization
  fullName: TinyLife.Localization
  type: Class
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Localization
    path: ../TinyLife/Localization.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA class that houses the currently loaded language as well as allows for switching the currently selected language\n"
  example: []
  syntax:
    content: public static class Localization
    content.vb: Public Module Localization
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TinyLife.Localization.LanguageNames
  commentId: F:TinyLife.Localization.LanguageNames
  id: LanguageNames
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: LanguageNames
  nameWithType: Localization.LanguageNames
  fullName: TinyLife.Localization.LanguageNames
  type: Field
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LanguageNames
    path: ../TinyLife/Localization.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA list of the full names of all of the languages that the game supports\n"
  example: []
  syntax:
    content: public static readonly Dictionary<string, string> LanguageNames
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared ReadOnly LanguageNames As Dictionary(Of String, String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Localization.Names
  commentId: F:TinyLife.Localization.Names
  id: Names
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: Names
  nameWithType: Localization.Names
  fullName: TinyLife.Localization.Names
  type: Field
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Names
    path: ../TinyLife/Localization.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA dictionary that maps a key to all of the names matching the specified key.\nBy default, this dictionary contains &quot;FirstNames&quot; and &quot;LastNames&quot;, which are the randomly generated names for people, and &quot;ModNames&quot;, which are the default names for the <xref href=\"TinyLife.Actions.ActionType.ModGame\" data-throw-if-not-resolved=\"false\"></xref> action.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<string, string[]> Names
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String[]}
    content.vb: Public Shared ReadOnly Names As Dictionary(Of String, String())
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Localization.SetLanguage(System.String)
  commentId: M:TinyLife.Localization.SetLanguage(System.String)
  id: SetLanguage(System.String)
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: SetLanguage(String)
  nameWithType: Localization.SetLanguage(String)
  fullName: TinyLife.Localization.SetLanguage(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetLanguage
    path: ../TinyLife/Localization.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nSwitches the current language to the language given.\nNote that, for most ui elements to update, they have to be re-created.\n"
  example: []
  syntax:
    content: public static void SetLanguage(string language)
    parameters:
    - id: language
      type: System.String
      description: The code of the language to set
    content.vb: Public Shared Sub SetLanguage(language As String)
  overload: TinyLife.Localization.SetLanguage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Localization.Get(TinyLife.LnCategory,System.String)
  commentId: M:TinyLife.Localization.Get(TinyLife.LnCategory,System.String)
  id: Get(TinyLife.LnCategory,System.String)
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: Get(LnCategory, String)
  nameWithType: Localization.Get(LnCategory, String)
  fullName: TinyLife.Localization.Get(TinyLife.LnCategory, System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Get
    path: ../TinyLife/Localization.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nGets a localized string in the given category with the given key.\nIf the localization is not found, the key, surrounded by question marks, is returned instead.\n"
  example: []
  syntax:
    content: public static string Get(LnCategory category, string key)
    parameters:
    - id: category
      type: TinyLife.LnCategory
      description: The category that contains the localization
    - id: key
      type: System.String
      description: The key to localize
    return:
      type: System.String
      description: The localization of the key
    content.vb: Public Shared Function Get(category As LnCategory, key As String) As String
  overload: TinyLife.Localization.Get*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Localization.Get(TinyLife.LnCategory,System.String,System.Object[])
  commentId: M:TinyLife.Localization.Get(TinyLife.LnCategory,System.String,System.Object[])
  id: Get(TinyLife.LnCategory,System.String,System.Object[])
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: Get(LnCategory, String, Object[])
  nameWithType: Localization.Get(LnCategory, String, Object[])
  fullName: TinyLife.Localization.Get(TinyLife.LnCategory, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Get
    path: ../TinyLife/Localization.cs
    startLine: 82
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nGets a localized string in the given category with the given key.\nIf the localization is not found, the key, surrounded by question marks, is returned instead.\n"
  example: []
  syntax:
    content: public static string Get(LnCategory category, string key, params object[] args)
    parameters:
    - id: category
      type: TinyLife.LnCategory
      description: The category that contains the localization
    - id: key
      type: System.String
      description: The key to localize
    - id: args
      type: System.Object[]
      description: An optional set of arguments that are passed to <xref href="System.String.Format(System.IFormatProvider%2cSystem.String%2cSystem.Object)" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.String
      description: The localization of the key
    content.vb: Public Shared Function Get(category As LnCategory, key As String, ParamArray args As Object()) As String
  overload: TinyLife.Localization.Get*
  nameWithType.vb: Localization.Get(LnCategory, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Localization.Get(TinyLife.LnCategory, System.String, System.Object())
  name.vb: Get(LnCategory, String, Object())
- uid: TinyLife.Localization.GetKeys(TinyLife.LnCategory)
  commentId: M:TinyLife.Localization.GetKeys(TinyLife.LnCategory)
  id: GetKeys(TinyLife.LnCategory)
  parent: TinyLife.Localization
  langs:
  - csharp
  - vb
  name: GetKeys(LnCategory)
  nameWithType: Localization.GetKeys(LnCategory)
  fullName: TinyLife.Localization.GetKeys(TinyLife.LnCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Localization.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetKeys
    path: ../TinyLife/Localization.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns all of the keys that are registered for localization for a given <xref href=\"TinyLife.LnCategory\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetKeys(LnCategory category)
    parameters:
    - id: category
      type: TinyLife.LnCategory
      description: The localization category
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A set of keys
    content.vb: Public Shared Function GetKeys(category As LnCategory) As IEnumerable(Of String)
  overload: TinyLife.Localization.GetKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Actions.ActionType.ModGame
  commentId: F:TinyLife.Actions.ActionType.ModGame
  isExternal: true
- uid: System.Collections.Generic.Dictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String[]>
  nameWithType: Dictionary<String, String[]>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String[]>
  nameWithType.vb: Dictionary(Of String, String())
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String())
  name.vb: Dictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Localization.SetLanguage*
  commentId: Overload:TinyLife.Localization.SetLanguage
  name: SetLanguage
  nameWithType: Localization.SetLanguage
  fullName: TinyLife.Localization.SetLanguage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Localization.Get*
  commentId: Overload:TinyLife.Localization.Get
  name: Get
  nameWithType: Localization.Get
  fullName: TinyLife.Localization.Get
- uid: TinyLife.LnCategory
  commentId: T:TinyLife.LnCategory
  parent: TinyLife
  name: LnCategory
  nameWithType: LnCategory
  fullName: TinyLife.LnCategory
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object)
  isExternal: true
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Localization.GetKeys*
  commentId: Overload:TinyLife.Localization.GetKeys
  name: GetKeys
  nameWithType: Localization.GetKeys
  fullName: TinyLife.Localization.GetKeys
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )

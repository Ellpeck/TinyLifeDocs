### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  id: MultiAction
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.MultiAction.AndThenInitialize
  - TinyLife.Actions.MultiAction.AndThenIsCompleted
  - TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  - TinyLife.Actions.MultiAction.CanStartNow
  - TinyLife.Actions.MultiAction.CreateFirstActions
  - TinyLife.Actions.MultiAction.CreateLastActions
  - TinyLife.Actions.MultiAction.CurrentStage
  - TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  - TinyLife.Actions.MultiAction.Handler
  - TinyLife.Actions.MultiAction.Initialize
  - TinyLife.Actions.MultiAction.InProgressTime
  - TinyLife.Actions.MultiAction.IsCompleted
  - TinyLife.Actions.MultiAction.MainElapsedTime
  - TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.MultiAction.PreCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.MultiAction.PreInitialize
  - TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
  type: Class
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MultiAction
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA multi action is an action that can have different actions executed before and/or after itself.\nThis is quite useful if an action requires a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> to go somewhere to pick up an item etc.\n"
  example: []
  syntax:
    content: 'public abstract class MultiAction : Action, IGenericDataHolder'
    content.vb: Public MustInherit Class MultiAction Inherits Action Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Actions.Action
  derivedClasses:
  - TinyLife.Actions.BehaviorAction
  - TinyLife.Actions.GoHereAction
  - TinyLife.Actions.OutOfTownAction
  - TinyLife.Actions.PutAwayAction
  - TinyLife.Actions.SellAction
  - TinyLife.Actions.SitAction
  - TinyLife.Actions.SocialAction
  - TinyLife.Actions.StoreAction
  - TinyLife.Actions.WatchTvAction
  - TinyLife.MakeTeaAction
  - TinyLife.PutDownPersonAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Actions.Action.Random
  - TinyLife.Actions.Action.FullyInProgress
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.Info
  - TinyLife.Actions.Action.Id
  - TinyLife.Actions.Action.StartedAutomatically
  - TinyLife.Actions.Action.Parent
  - TinyLife.Actions.Action.Map
  - TinyLife.Actions.Action.Person
  - TinyLife.Actions.Action.ElapsedTime
  - TinyLife.Actions.Action.PlayerPromptOpen
  - TinyLife.Actions.Action.ForceResult
  - TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.GetDisplayName
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  - TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  - TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  - TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  - TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.GetChildren(System.Boolean)
  - TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  - TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  - TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety@)
  - TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.MultiAction.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Actions.MultiAction.Handler
  commentId: F:TinyLife.Actions.MultiAction.Handler
  id: Handler
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: Handler
  nameWithType: MultiAction.Handler
  fullName: TinyLife.Actions.MultiAction.Handler
  type: Field
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Handler
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.Handlers.MultiActionHandler\" data-throw-if-not-resolved=\"false\"></xref> that handles the actions created in <xref href=\"TinyLife.Actions.MultiAction.CreateFirstActions\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly MultiActionHandler Handler
    return:
      type: TinyLife.Actions.Handlers.MultiActionHandler
    content.vb: >-
      <DataMember>

      Public ReadOnly Handler As MultiActionHandler
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.MultiAction.MainElapsedTime
  commentId: P:TinyLife.Actions.MultiAction.MainElapsedTime
  id: MainElapsedTime
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: MainElapsedTime
  nameWithType: MultiAction.MainElapsedTime
  fullName: TinyLife.Actions.MultiAction.MainElapsedTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MainElapsedTime
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe amount of time that has elapsed of this action, excluding the time that <xref href=\"TinyLife.Actions.MultiAction.Handler\" data-throw-if-not-resolved=\"false\"></xref> took.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public TimeSpan MainElapsedTime { get; protected set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public Property MainElapsedTime As TimeSpan
  overload: TinyLife.Actions.MultiAction.MainElapsedTime*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.MultiAction.InProgressTime
  commentId: P:TinyLife.Actions.MultiAction.InProgressTime
  id: InProgressTime
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: InProgressTime
  nameWithType: MultiAction.InProgressTime
  fullName: TinyLife.Actions.MultiAction.InProgressTime
  type: Property
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: InProgressTime
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nRepresents the amount of time that this action has &quot;properly&quot; been in progress for.\nThis is used by <xref href=\"TinyLife.Actions.MultiAction\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Actions.SocialAction\" data-throw-if-not-resolved=\"false\"></xref> and returns true only once the first actions are completed or the conversation has started, respectively.\nBy default, <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public override TimeSpan InProgressTime { get; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The amount of time that this action has properly been in progress for
    content.vb: Public Overrides ReadOnly Property InProgressTime As TimeSpan
  overridden: TinyLife.Actions.Action.InProgressTime
  overload: TinyLife.Actions.MultiAction.InProgressTime*
- uid: TinyLife.Actions.MultiAction.CurrentStage
  commentId: P:TinyLife.Actions.MultiAction.CurrentStage
  id: CurrentStage
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: CurrentStage
  nameWithType: MultiAction.CurrentStage
  fullName: TinyLife.Actions.MultiAction.CurrentStage
  type: Property
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentStage
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: >-
      [DataMember]

      protected MultiAction.Stage CurrentStage { get; }
    parameters: []
    return:
      type: TinyLife.Actions.MultiAction.Stage
    content.vb: >-
      <DataMember>

      Protected Property CurrentStage As MultiAction.Stage
  overload: TinyLife.Actions.MultiAction.CurrentStage*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: MultiAction(ActionInfo)
  nameWithType: MultiAction.MultiAction(ActionInfo)
  fullName: TinyLife.Actions.MultiAction.MultiAction(TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new typeless action with the given action information.\n"
  example: []
  syntax:
    content: protected MultiAction(ActionInfo info)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(info As ActionInfo)
  overload: TinyLife.Actions.MultiAction.#ctor*
  nameWithType.vb: MultiAction.New(ActionInfo)
  fullName.vb: TinyLife.Actions.MultiAction.New(TinyLife.Actions.ActionInfo)
  name.vb: New(ActionInfo)
- uid: TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.MultiAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: MultiAction(ActionType, ActionInfo)
  nameWithType: MultiAction.MultiAction(ActionType, ActionInfo)
  fullName: TinyLife.Actions.MultiAction.MultiAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action with the given action information.\n"
  example: []
  syntax:
    content: protected MultiAction(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type for this action.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Protected Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.MultiAction.#ctor*
  nameWithType.vb: MultiAction.New(ActionType, ActionInfo)
  fullName.vb: TinyLife.Actions.MultiAction.New(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  name.vb: New(ActionType, ActionInfo)
- uid: TinyLife.Actions.MultiAction.CreateFirstActions
  commentId: M:TinyLife.Actions.MultiAction.CreateFirstActions
  id: CreateFirstActions
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: CreateFirstActions()
  nameWithType: MultiAction.CreateFirstActions()
  fullName: TinyLife.Actions.MultiAction.CreateFirstActions()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateFirstActions
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn a set of actions that should be executed before this action.\nEven if the yield statement is used, all actions will be collected into a list at the start of this action&apos;s invocation.\nIf no action gets returned in this function, this action fails.\nIf the returned set only contains <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> items, no first actions will be executed.\n"
  example: []
  syntax:
    content: protected abstract IEnumerable<Action> CreateFirstActions()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: A set of actions that should run before this action
    content.vb: Protected MustOverride Function CreateFirstActions() As IEnumerable(Of Action)
  overload: TinyLife.Actions.MultiAction.CreateFirstActions*
- uid: TinyLife.Actions.MultiAction.CreateLastActions
  commentId: M:TinyLife.Actions.MultiAction.CreateLastActions
  id: CreateLastActions
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: CreateLastActions()
  nameWithType: MultiAction.CreateLastActions()
  fullName: TinyLife.Actions.MultiAction.CreateLastActions()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateLastActions
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturn a set of actions that should be executed after this action.\nEven if the yield statement is used, all actions will be collected into a list after the main action is finished.\nIf no action gets returned in this function, this action fails.\nIf the returned set only contains <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null\">null</a> items, no last actions will be executed, which is also this method&apos;s default behavior.\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<Action> CreateLastActions()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: A set of actions that should run after this action
    content.vb: Protected Overridable Function CreateLastActions() As IEnumerable(Of Action)
  overload: TinyLife.Actions.MultiAction.CreateLastActions*
- uid: TinyLife.Actions.MultiAction.AndThenInitialize
  commentId: M:TinyLife.Actions.MultiAction.AndThenInitialize
  id: AndThenInitialize
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: AndThenInitialize()
  nameWithType: MultiAction.AndThenInitialize()
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenInitialize
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 67
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nInitializes the main action.\nThis method is called after <xref href=\"TinyLife.Actions.MultiAction.Handler\" data-throw-if-not-resolved=\"false\"></xref> has all completed.\n"
  example: []
  syntax:
    content: protected virtual void AndThenInitialize()
    content.vb: Protected Overridable Sub AndThenInitialize()
  overload: TinyLife.Actions.MultiAction.AndThenInitialize*
- uid: TinyLife.Actions.MultiAction.AndThenIsCompleted
  commentId: M:TinyLife.Actions.MultiAction.AndThenIsCompleted
  id: AndThenIsCompleted
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: AndThenIsCompleted()
  nameWithType: MultiAction.AndThenIsCompleted()
  fullName: TinyLife.Actions.MultiAction.AndThenIsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenIsCompleted
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method returns whether or not the main action is completed.\n"
  example: []
  syntax:
    content: protected abstract CompletionType AndThenIsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: Whether the main action is completed
    content.vb: Protected MustOverride Function AndThenIsCompleted() As CompletionType
  overload: TinyLife.Actions.MultiAction.AndThenIsCompleted*
- uid: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: AndThenUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: AndThenUpdate(GameTime, TimeSpan, float)
  nameWithType: MultiAction.AndThenUpdate(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenUpdate
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is called every update frame while the main action is active.\nBy default, only <xref href=\"TinyLife.Actions.MultiAction.MainElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is increased.\n"
  example: []
  syntax:
    content: protected virtual void AndThenUpdate(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Overridable Sub AndThenUpdate(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Actions.MultiAction.AndThenUpdate*
  nameWithType.vb: MultiAction.AndThenUpdate(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.MultiAction.AndThenUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: AndThenUpdate(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  id: AndThenOnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: AndThenOnCompleted(CompletionType)
  nameWithType: MultiAction.AndThenOnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AndThenOnCompleted
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nMultiAction version of <xref href=\"TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method gets called when the main action completes.\n"
  example: []
  syntax:
    content: protected virtual void AndThenOnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion of the main action
    content.vb: Protected Overridable Sub AndThenOnCompleted(type As CompletionType)
  overload: TinyLife.Actions.MultiAction.AndThenOnCompleted*
- uid: TinyLife.Actions.MultiAction.PreInitialize
  commentId: M:TinyLife.Actions.MultiAction.PreInitialize
  id: PreInitialize
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: PreInitialize()
  nameWithType: MultiAction.PreInitialize()
  fullName: TinyLife.Actions.MultiAction.PreInitialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PreInitialize
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called in <xref href=\"TinyLife.Actions.MultiAction.Initialize\" data-throw-if-not-resolved=\"false\"></xref> before <xref href=\"TinyLife.Actions.MultiAction.CreateFirstActions\" data-throw-if-not-resolved=\"false\"></xref> is called.\nBy default, it does nothing.\n"
  example: []
  syntax:
    content: protected virtual void PreInitialize()
    content.vb: Protected Overridable Sub PreInitialize()
  overload: TinyLife.Actions.MultiAction.PreInitialize*
- uid: TinyLife.Actions.MultiAction.PreCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.PreCompleted(TinyLife.Actions.CompletionType)
  id: PreCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: PreCompleted(CompletionType)
  nameWithType: MultiAction.PreCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.PreCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PreCompleted
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called in <xref href=\"TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> before <xref href=\"TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> is called. It will also be called even if <xref href=\"TinyLife.Actions.MultiAction.AndThenInitialize\" data-throw-if-not-resolved=\"false\"></xref> has not yet been called.\n"
  example: []
  syntax:
    content: protected virtual void PreCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The completion type.
    content.vb: Protected Overridable Sub PreCompleted(type As CompletionType)
  overload: TinyLife.Actions.MultiAction.PreCompleted*
- uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, float)
  nameWithType: MultiAction.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame if this action is currently active.\nBy default, only the <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is modified in this method and <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public override sealed void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public NotOverridable Overrides Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overridden: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  overload: TinyLife.Actions.MultiAction.Update*
  nameWithType.vb: MultiAction.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
- uid: TinyLife.Actions.MultiAction.Initialize
  commentId: M:TinyLife.Actions.MultiAction.Initialize
  id: Initialize
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: MultiAction.Initialize()
  fullName: TinyLife.Actions.MultiAction.Initialize()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Initialize
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when the action is first started by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that it is not called when the action gets added to the <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref>, but when it is moved to <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override sealed void Initialize()
    content.vb: Public NotOverridable Overrides Sub Initialize()
  overridden: TinyLife.Actions.Action.Initialize
  overload: TinyLife.Actions.MultiAction.Initialize*
- uid: TinyLife.Actions.MultiAction.IsCompleted
  commentId: M:TinyLife.Actions.MultiAction.IsCompleted
  id: IsCompleted
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: MultiAction.IsCompleted()
  fullName: TinyLife.Actions.MultiAction.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 146
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame by a <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref> if this action is currently active to check if it should be stopped.\nIf this returns a result other than <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)\" data-throw-if-not-resolved=\"false\"></xref> will be called and the action is stopped.\nBy default, only <xref href=\"TinyLife.Actions.Action.ForceResult\" data-throw-if-not-resolved=\"false\"></xref> modifies the completion type, otherwise <xref href=\"TinyLife.Actions.CompletionType.Active\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public override sealed CompletionType IsCompleted()
    return:
      type: TinyLife.Actions.CompletionType
      description: The current completion type of this action
    content.vb: Public NotOverridable Overrides Function IsCompleted() As CompletionType
  overridden: TinyLife.Actions.Action.IsCompleted
  overload: TinyLife.Actions.MultiAction.IsCompleted*
- uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  id: OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: OnCompleted(CompletionType)
  nameWithType: MultiAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCompleted
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 166
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called when this action <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, or if it is canceled from an outside source.\nNote that, if this method is called as a result of <xref href=\"TinyLife.Actions.Action.IsCompleted\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> passed will be the same.\nBy default, only <xref href=\"TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action%2cTinyLife.Actions.CompletionType%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public override sealed void OnCompleted(CompletionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.CompletionType
      description: The type that this action completed with
    content.vb: Public NotOverridable Overrides Sub OnCompleted(type As CompletionType)
  overridden: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  overload: TinyLife.Actions.MultiAction.OnCompleted*
- uid: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: MultiAction.Validate(Person)
  fullName: TinyLife.Actions.MultiAction.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 181
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nValidates this action&apos;s data.\nThis is called when a map is loaded from disk.\nWhen returning false on this method, the action is removed from the <xref href=\"TinyLife.Actions.Action.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this action belongs to
    return:
      type: System.Boolean
      description: Whether or not the action is still valid (or if it has invalid data)
    content.vb: Public Overrides Function Validate(person As Person) As Boolean
  overridden: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  overload: TinyLife.Actions.MultiAction.Validate*
- uid: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  id: CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: CanCancel(Action)
  nameWithType: MultiAction.CanCancel(Action)
  fullName: TinyLife.Actions.MultiAction.CanCancel(TinyLife.Actions.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCancel
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 186
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns whether or not this action can be canceled by the given outside source.\nNote that the outside source can be null, and if it is, it means that the player canceled the action manually.\nBy default, actions can only be canceled if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">cancelSource</code> is null.\n"
  example: []
  syntax:
    content: public override bool CanCancel(Action cancelSource)
    parameters:
    - id: cancelSource
      type: TinyLife.Actions.Action
      description: The source of the cancelation, or null if the player canceled it
    return:
      type: System.Boolean
      description: true if the action can be canceled
    content.vb: Public Overrides Function CanCancel(cancelSource As Action) As Boolean
  overridden: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  overload: TinyLife.Actions.MultiAction.CanCancel*
- uid: TinyLife.Actions.MultiAction.CanStartNow
  commentId: M:TinyLife.Actions.MultiAction.CanStartNow
  id: CanStartNow
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: CanStartNow()
  nameWithType: MultiAction.CanStartNow()
  fullName: TinyLife.Actions.MultiAction.CanStartNow()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanStartNow
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 191
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public override bool CanStartNow()
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanStartNow() As Boolean
  overridden: TinyLife.Actions.Action.CanStartNow
  overload: TinyLife.Actions.MultiAction.CanStartNow*
- uid: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  id: GoToActionLocation(TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Actions.MultiAction
  langs:
  - csharp
  - vb
  name: GoToActionLocation(ObjectCategory)
  nameWithType: MultiAction.GoToActionLocation(ObjectCategory)
  fullName: TinyLife.Actions.MultiAction.GoToActionLocation(TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/MultiAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoToActionLocation
    path: ../TinyLife/Actions/MultiAction.cs
    startLine: 200
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.Actions.MultiAction.CreateFirstActions\" data-throw-if-not-resolved=\"false\"></xref> that only returns an instance of <xref href=\"TinyLife.Actions.ActionType.GoHere\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected IEnumerable<Action> GoToActionLocation(ObjectCategory context = null)
    parameters:
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context that the action spot to go to needs to have. Defaults to <xref href="TinyLife.Objects.ObjectCategory.Nothing" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
      description: A set containinng a &quot;go here&quot; action if there is a free action spot, or an empty set if there is not
    content.vb: Protected Function GoToActionLocation(context As ObjectCategory = Nothing) As IEnumerable(Of Action)
  overload: TinyLife.Actions.MultiAction.GoToActionLocation*
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  parent: TinyLife.Actions.Action
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  parent: TinyLife.Actions.Action
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  parent: TinyLife.Actions.Action
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
- uid: TinyLife.Actions.Action.Info
  commentId: F:TinyLife.Actions.Action.Info
  parent: TinyLife.Actions.Action
  name: Info
  nameWithType: Action.Info
  fullName: TinyLife.Actions.Action.Info
- uid: TinyLife.Actions.Action.Id
  commentId: F:TinyLife.Actions.Action.Id
  parent: TinyLife.Actions.Action
  name: Id
  nameWithType: Action.Id
  fullName: TinyLife.Actions.Action.Id
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  parent: TinyLife.Actions.Action
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  parent: TinyLife.Actions.Action
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  parent: TinyLife.Actions.Action
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  parent: TinyLife.Actions.Action
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  parent: TinyLife.Actions.Action
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.Actions.Action.ForceResult
  commentId: F:TinyLife.Actions.Action.ForceResult
  parent: TinyLife.Actions.Action
  name: ForceResult
  nameWithType: Action.ForceResult
  fullName: TinyLife.Actions.Action.ForceResult
- uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.Action
  name: TryForceResult(CompletionType, CanExecuteResult?, MapObject)
  nameWithType: Action.TryForceResult(CompletionType, CanExecuteResult?, MapObject)
  fullName: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType, TinyLife.Actions.CanExecuteResult?, TinyLife.Objects.MapObject)
  spec.csharp:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
    name: TryForceResult
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
    name: TryForceResult
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.MapObject
    name: MapObject
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  spec.csharp:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  parent: TinyLife.Actions.Action
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
  - name: (
  - name: )
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: )
- uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: OnChildCompleted(Action, CompletionType, bool)
  nameWithType: Action.OnChildCompleted(Action, CompletionType, bool)
  fullName: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, bool)
  nameWithType.vb: Action.OnChildCompleted(Action, CompletionType, Boolean)
  fullName.vb: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, Boolean)
  name.vb: OnChildCompleted(Action, CompletionType, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnChildCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnChildCompleted
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  nameWithType: Action.OpenPlayerPrompt(string, Predicate<Panel>, Action<Panel>, bool, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(string, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, bool, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)), MLEM.Textures.TextureRegion)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Ui.Elements.Element
    name: Element
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: OpenYesNoPrompt(string, Action, Action, TextureRegion)
  nameWithType: Action.OpenYesNoPrompt(string, Action, Action, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt(string, System.Action, System.Action, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenYesNoPrompt(String, Action, Action, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenYesNoPrompt(String, System.Action, System.Action, MLEM.Textures.TextureRegion)
  name.vb: OpenYesNoPrompt(String, Action, Action, TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
    name: OpenYesNoPrompt
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
    name: OpenYesNoPrompt
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: OpenTextPrompt(string, Action<string>, Predicate<string>, Rule, string, TextureRegion)
  nameWithType: Action.OpenTextPrompt(string, Action<string>, Predicate<string>, TextField.Rule, string, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(string, System.Action<string>, System.Predicate<string>, MLEM.Ui.Elements.TextField.Rule, string, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(String, System.Action(Of String), System.Predicate(Of String), MLEM.Ui.Elements.TextField.Rule, String, MLEM.Textures.TextureRegion)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), Rule, String, TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: Rule
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    isExternal: true
  - name: )
- uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  commentId: M:TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  parent: TinyLife.Actions.Action
  name: OpenChoicePrompt(ChoicePromptInfo)
  nameWithType: Action.OpenChoicePrompt(ChoicePromptInfo)
  fullName: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
    name: OpenChoicePrompt
  - name: (
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
    name: OpenChoicePrompt
  - name: (
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
  - name: )
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: SpeakAlone(GameTime, float, EmoteCategory, SpeakStyle, int)
  nameWithType: Action.SpeakAlone(GameTime, float, EmoteCategory, SpeakStyle, int)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, int)
  nameWithType.vb: Action.SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Integer)
  fullName.vb: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, Integer)
  name.vb: SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Integer)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: SpeakInConversation(Person, GameTime, float, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, int)
  nameWithType: Action.SpeakInConversation(Person, GameTime, float, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, int)
  fullName: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, float, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteCategory?, TinyLife.Objects.SpeakStyle?, int)
  nameWithType.vb: Action.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, Integer)
  fullName.vb: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, TinyLife.Actions.EmoteCategory?, TinyLife.Objects.SpeakStyle?, Integer)
  name.vb: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, EmoteCategory?, SpeakStyle?, Integer)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
  - name: '?'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: FacePartner(Person)
  nameWithType: Action.FacePartner(Person)
  fullName: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
    name: FacePartner
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
    name: FacePartner
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  commentId: M:TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  parent: TinyLife.Actions.Action
  name: CompleteIfNeedFull(NeedType)
  nameWithType: Action.CompleteIfNeedFull(NeedType)
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
    name: CompleteIfNeedFull
  - name: (
  - uid: TinyLife.NeedType
    name: NeedType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
    name: CompleteIfNeedFull
  - name: (
  - uid: TinyLife.NeedType
    name: NeedType
  - name: )
- uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  nameWithType: Action.CompleteIfTimeUp(TimeSpan, bool, SkillType, float, bool)
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, bool, TinyLife.Skills.SkillType, float, bool)
  nameWithType.vb: Action.CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName.vb: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, Boolean, TinyLife.Skills.SkillType, Single, Boolean)
  name.vb: CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteIfTimeUp
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteIfTimeUp
  - name: (
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  commentId: M:TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  parent: TinyLife.Actions.Action
  name: CancelIfEmotional(params EmotionType[])
  nameWithType: Action.CancelIfEmotional(params EmotionType[])
  fullName: TinyLife.Actions.Action.CancelIfEmotional(params TinyLife.Emotions.EmotionType[])
  nameWithType.vb: Action.CancelIfEmotional(ParamArray EmotionType())
  fullName.vb: TinyLife.Actions.Action.CancelIfEmotional(ParamArray TinyLife.Emotions.EmotionType())
  name.vb: CancelIfEmotional(ParamArray EmotionType())
  spec.csharp:
  - uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
    name: CancelIfEmotional
  - name: (
  - name: params
  - name: " "
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
    name: CancelIfEmotional
  - name: (
  - name: ParamArray
  - name: " "
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
  - name: (
  - name: )
  - name: )
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: Sit(Furniture, float, ActionSpot)
  nameWithType: Action.Sit(Furniture, float, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, float, TinyLife.Objects.ActionSpot)
  nameWithType.vb: Action.Sit(Furniture, Single, ActionSpot)
  fullName.vb: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, Single, TinyLife.Objects.ActionSpot)
  name.vb: Sit(Furniture, Single, ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
- uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChildren(System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: GetChildren(bool)
  nameWithType: Action.GetChildren(bool)
  fullName: TinyLife.Actions.Action.GetChildren(bool)
  nameWithType.vb: Action.GetChildren(Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChildren(Boolean)
  name.vb: GetChildren(Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChildren(System.Boolean)
    name: GetChildren
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  commentId: M:TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetChild<T>(Guid, bool)
  nameWithType: Action.GetChild<T>(Guid, bool)
  fullName: TinyLife.Actions.Action.GetChild<T>(System.Guid, bool)
  nameWithType.vb: Action.GetChild(Of T)(Guid, Boolean)
  fullName.vb: TinyLife.Actions.Action.GetChild(Of T)(System.Guid, Boolean)
  name.vb: GetChild(Of T)(Guid, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetChild``1(System.Guid,System.Boolean)
    name: GetChild
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, bool)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, bool)
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, Boolean)
  name.vb: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
    name: PickUpAndGoTo
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
    name: PickUpAndGoTo
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, Func<Furniture, bool>, Func<Furniture, bool>, bool)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func<TinyLife.Objects.Furniture, bool>, System.Func<TinyLife.Objects.Furniture, bool>, bool)
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func(Of TinyLife.Objects.Furniture, Boolean), System.Func(Of TinyLife.Objects.Furniture, Boolean), Boolean)
  name.vb: PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
    name: PickUpAndGoTo
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
    name: PickUpAndGoTo
  - name: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  name: GetFreeChair(Person, Furniture)
  nameWithType: Action.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
- uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: GetFreeChairs(Person, Furniture, Func<Direction2, bool>)
  nameWithType: Action.GetFreeChairs(Person, Furniture, Func<Direction2, bool>)
  fullName: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func<MLEM.Misc.Direction2, bool>)
  nameWithType.vb: Action.GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  fullName.vb: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func(Of MLEM.Misc.Direction2, Boolean))
  name.vb: GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: MLEM.Misc.Direction2
    name: Direction2
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: GetSeatCategory(Person)
  nameWithType: Action.GetSeatCategory(Person)
  fullName: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
    name: GetSeatCategory
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetSeatCategory(TinyLife.Objects.Person)
    name: GetSeatCategory
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: FindAllFreePeople(Person, ActionType, Vector2?, float?, bool, bool, bool, bool)
  nameWithType: Action.FindAllFreePeople(Person, ActionType, Vector2?, float?, bool, bool, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?, float?, bool, bool, bool, bool)
  nameWithType.vb: Action.FindAllFreePeople(Person, ActionType, Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
  name.vb: FindAllFreePeople(Person, ActionType, Vector2?, Single?, Boolean, Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: FindAllFreePeople
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Boolean,System.Boolean)
    name: FindAllFreePeople
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, bool, Vector2?, float?, bool, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, bool, Microsoft.Xna.Framework.Vector2?, float?, bool, bool)
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Boolean, Microsoft.Xna.Framework.Vector2?, Single?, Boolean, Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Vector2?, Single?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: FindAllFreeWalls(Person, Vector2?, float?, bool)
  nameWithType: Action.FindAllFreeWalls(Person, Vector2?, float?, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, float?, bool)
  nameWithType.vb: Action.FindAllFreeWalls(Person, Vector2?, Single?, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, Single?, Boolean)
  name.vb: FindAllFreeWalls(Person, Vector2?, Single?, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: FindAllFreeGround(Person, Vector2?, float?, bool)
  nameWithType: Action.FindAllFreeGround(Person, Vector2?, float?, bool)
  fullName: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, float?, bool)
  nameWithType.vb: Action.FindAllFreeGround(Person, Vector2?, Single?, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, Microsoft.Xna.Framework.Vector2?, Single?, Boolean)
  name.vb: FindAllFreeGround(Person, Vector2?, Single?, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, bool, bool)
  nameWithType: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, bool, bool)
  fullName: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Microsoft.Xna.Framework.Vector2?, bool, bool)
  nameWithType.vb: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, Microsoft.Xna.Framework.Vector2?, Boolean, Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Vector2?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllActionObjects(Person, ActionType, Vector2?)
  nameWithType: Action.FindAllActionObjects(Person, ActionType, Vector2?)
  fullName: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Microsoft.Xna.Framework.Vector2?)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: )
- uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: FindValidActionObjects(Person, ActionType, bool, Vector2?, bool, bool)
  nameWithType: Action.FindValidActionObjects(Person, ActionType, bool, Vector2?, bool, bool)
  fullName: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, bool, Microsoft.Xna.Framework.Vector2?, bool, bool)
  nameWithType.vb: Action.FindValidActionObjects(Person, ActionType, Boolean, Vector2?, Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, Boolean, Microsoft.Xna.Framework.Vector2?, Boolean, Boolean)
  name.vb: FindValidActionObjects(Person, ActionType, Boolean, Vector2?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindValidActionObjects
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindValidActionObjects
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety@)
  commentId: M:TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety@)
  parent: TinyLife.Actions.Action
  name: TryGetRandomValidVariety(ActionType, ActionInfo, out ActionVariety)
  nameWithType: Action.TryGetRandomValidVariety(ActionType, ActionInfo, out ActionVariety)
  fullName: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, out TinyLife.Actions.ActionVariety)
  nameWithType.vb: Action.TryGetRandomValidVariety(ActionType, ActionInfo, ActionVariety)
  fullName.vb: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, TinyLife.Actions.ActionVariety)
  name.vb: TryGetRandomValidVariety(ActionType, ActionInfo, ActionVariety)
  spec.csharp:
  - uid: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety@)
    name: TryGetRandomValidVariety
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.TryGetRandomValidVariety(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,TinyLife.Actions.ActionVariety@)
    name: TryGetRandomValidVariety
  - name: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: )
- uid: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: GetRandomValidVariety(IEnumerable<ActionVariety>, ActionInfo)
  nameWithType: Action.GetRandomValidVariety(IEnumerable<ActionVariety>, ActionInfo)
  fullName: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>, TinyLife.Actions.ActionInfo)
  nameWithType.vb: Action.GetRandomValidVariety(IEnumerable(Of ActionVariety), ActionInfo)
  fullName.vb: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety), TinyLife.Actions.ActionInfo)
  name.vb: GetRandomValidVariety(IEnumerable(Of ActionVariety), ActionInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomValidVariety
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: '>'
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetRandomValidVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomValidVariety
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: )
- uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: Action.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
  - name: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
  - name: )
- uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: InvokeForBoth(Person, Person, Action<Person, Person>)
  nameWithType: Action.InvokeForBoth(Person, Person, Action<Person, Person>)
  fullName: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  nameWithType.vb: Action.InvokeForBoth(Person, Person, Action(Of Person, Person))
  fullName.vb: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Person, Person, Action(Of Person, Person))
  spec.csharp:
  - uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  - name: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MultiAction>(MultiAction)
  nameWithType: Extensions.JsonCopy<MultiAction>(MultiAction)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.MultiAction>(TinyLife.Actions.MultiAction)
  nameWithType.vb: Extensions.JsonCopy(Of MultiAction)(MultiAction)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.MultiAction)(TinyLife.Actions.MultiAction)
  name.vb: JsonCopy(Of MultiAction)(MultiAction)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.MultiAction)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: '>'
  - name: (
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Actions.MultiAction)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: )
  - name: (
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Actions.Handlers.MultiActionHandler
  commentId: T:TinyLife.Actions.Handlers.MultiActionHandler
  parent: TinyLife.Actions.Handlers
  name: MultiActionHandler
  nameWithType: MultiActionHandler
  fullName: TinyLife.Actions.Handlers.MultiActionHandler
- uid: TinyLife.Actions.MultiAction.CreateFirstActions
  commentId: M:TinyLife.Actions.MultiAction.CreateFirstActions
  parent: TinyLife.Actions.MultiAction
  name: CreateFirstActions()
  nameWithType: MultiAction.CreateFirstActions()
  fullName: TinyLife.Actions.MultiAction.CreateFirstActions()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.CreateFirstActions
    name: CreateFirstActions
  - name: (
  - name: )
- uid: TinyLife.Actions.Handlers
  commentId: N:TinyLife.Actions.Handlers
  name: TinyLife.Actions.Handlers
  nameWithType: TinyLife.Actions.Handlers
  fullName: TinyLife.Actions.Handlers
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  - name: .
  - uid: TinyLife.Actions.Handlers
    name: Handlers
- uid: TinyLife.Actions.MultiAction
  commentId: T:TinyLife.Actions.MultiAction
  parent: TinyLife.Actions
  name: MultiAction
  nameWithType: MultiAction
  fullName: TinyLife.Actions.MultiAction
- uid: TinyLife.Actions.MultiAction.Handler
  commentId: F:TinyLife.Actions.MultiAction.Handler
  parent: TinyLife.Actions.MultiAction
  name: Handler
  nameWithType: MultiAction.Handler
  fullName: TinyLife.Actions.MultiAction.Handler
- uid: TinyLife.Actions.MultiAction.MainElapsedTime*
  commentId: Overload:TinyLife.Actions.MultiAction.MainElapsedTime
  name: MainElapsedTime
  nameWithType: MultiAction.MainElapsedTime
  fullName: TinyLife.Actions.MultiAction.MainElapsedTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Actions.Action.InProgressTime
  commentId: P:TinyLife.Actions.Action.InProgressTime
  parent: TinyLife.Actions.Action
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
- uid: TinyLife.Actions.MultiAction.InProgressTime*
  commentId: Overload:TinyLife.Actions.MultiAction.InProgressTime
  name: InProgressTime
  nameWithType: MultiAction.InProgressTime
  fullName: TinyLife.Actions.MultiAction.InProgressTime
- uid: TinyLife.Actions.MultiAction.CurrentStage*
  commentId: Overload:TinyLife.Actions.MultiAction.CurrentStage
  name: CurrentStage
  nameWithType: MultiAction.CurrentStage
  fullName: TinyLife.Actions.MultiAction.CurrentStage
- uid: TinyLife.Actions.MultiAction.Stage
  commentId: T:TinyLife.Actions.MultiAction.Stage
  parent: TinyLife.Actions
  name: MultiAction.Stage
  nameWithType: MultiAction.Stage
  fullName: TinyLife.Actions.MultiAction.Stage
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: .
  - uid: TinyLife.Actions.MultiAction.Stage
    name: Stage
  spec.vb:
  - uid: TinyLife.Actions.MultiAction
    name: MultiAction
  - name: .
  - uid: TinyLife.Actions.MultiAction.Stage
    name: Stage
- uid: TinyLife.Actions.MultiAction.#ctor*
  commentId: Overload:TinyLife.Actions.MultiAction.#ctor
  name: MultiAction
  nameWithType: MultiAction.MultiAction
  fullName: TinyLife.Actions.MultiAction.MultiAction
  nameWithType.vb: MultiAction.New
  fullName.vb: TinyLife.Actions.MultiAction.New
  name.vb: New
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.MultiAction.CreateFirstActions*
  commentId: Overload:TinyLife.Actions.MultiAction.CreateFirstActions
  name: CreateFirstActions
  nameWithType: MultiAction.CreateFirstActions
  fullName: TinyLife.Actions.MultiAction.CreateFirstActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.Actions.Action
    name: Action
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Actions.MultiAction.CreateLastActions*
  commentId: Overload:TinyLife.Actions.MultiAction.CreateLastActions
  name: CreateLastActions
  nameWithType: MultiAction.CreateLastActions
  fullName: TinyLife.Actions.MultiAction.CreateLastActions
- uid: TinyLife.Actions.MultiAction.AndThenInitialize*
  commentId: Overload:TinyLife.Actions.MultiAction.AndThenInitialize
  name: AndThenInitialize
  nameWithType: MultiAction.AndThenInitialize
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize
- uid: TinyLife.Actions.MultiAction.IsCompleted
  commentId: M:TinyLife.Actions.MultiAction.IsCompleted
  parent: TinyLife.Actions.MultiAction
  name: IsCompleted()
  nameWithType: MultiAction.IsCompleted()
  fullName: TinyLife.Actions.MultiAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.AndThenIsCompleted*
  commentId: Overload:TinyLife.Actions.MultiAction.AndThenIsCompleted
  name: AndThenIsCompleted
  nameWithType: MultiAction.AndThenIsCompleted
  fullName: TinyLife.Actions.MultiAction.AndThenIsCompleted
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.MultiAction
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: MultiAction.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: MultiAction.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.MultiAction.MainElapsedTime
  commentId: P:TinyLife.Actions.MultiAction.MainElapsedTime
  parent: TinyLife.Actions.MultiAction
  name: MainElapsedTime
  nameWithType: MultiAction.MainElapsedTime
  fullName: TinyLife.Actions.MultiAction.MainElapsedTime
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  name: Speed
  nameWithType: GameImpl.Speed
  fullName: TinyLife.GameImpl.Speed
- uid: TinyLife.Actions.MultiAction.AndThenUpdate*
  commentId: Overload:TinyLife.Actions.MultiAction.AndThenUpdate
  name: AndThenUpdate
  nameWithType: MultiAction.AndThenUpdate
  fullName: TinyLife.Actions.MultiAction.AndThenUpdate
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  name: OnCompleted(CompletionType)
  nameWithType: MultiAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.MultiAction.AndThenOnCompleted*
  commentId: Overload:TinyLife.Actions.MultiAction.AndThenOnCompleted
  name: AndThenOnCompleted
  nameWithType: MultiAction.AndThenOnCompleted
  fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted
- uid: TinyLife.Actions.MultiAction.Initialize
  commentId: M:TinyLife.Actions.MultiAction.Initialize
  parent: TinyLife.Actions.MultiAction
  name: Initialize()
  nameWithType: MultiAction.Initialize()
  fullName: TinyLife.Actions.MultiAction.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.Initialize
    name: Initialize
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.Initialize
    name: Initialize
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.PreInitialize*
  commentId: Overload:TinyLife.Actions.MultiAction.PreInitialize
  name: PreInitialize
  nameWithType: MultiAction.PreInitialize
  fullName: TinyLife.Actions.MultiAction.PreInitialize
- uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.MultiAction
  name: AndThenOnCompleted(CompletionType)
  nameWithType: MultiAction.AndThenOnCompleted(CompletionType)
  fullName: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
    name: AndThenOnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenOnCompleted(TinyLife.Actions.CompletionType)
    name: AndThenOnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.MultiAction.AndThenInitialize
  commentId: M:TinyLife.Actions.MultiAction.AndThenInitialize
  parent: TinyLife.Actions.MultiAction
  name: AndThenInitialize()
  nameWithType: MultiAction.AndThenInitialize()
  fullName: TinyLife.Actions.MultiAction.AndThenInitialize()
  spec.csharp:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.MultiAction.AndThenInitialize
    name: AndThenInitialize
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.PreCompleted*
  commentId: Overload:TinyLife.Actions.MultiAction.PreCompleted
  name: PreCompleted
  nameWithType: MultiAction.PreCompleted
  fullName: TinyLife.Actions.MultiAction.PreCompleted
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Update(GameTime, TimeSpan, float)
  nameWithType: Action.Update(GameTime, TimeSpan, float)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, float)
  nameWithType.vb: Action.Update(GameTime, TimeSpan, Single)
  fullName.vb: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, Single)
  name.vb: Update(GameTime, TimeSpan, Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
  - name: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Actions.MultiAction.Update*
  commentId: Overload:TinyLife.Actions.MultiAction.Update
  name: Update
  nameWithType: MultiAction.Update
  fullName: TinyLife.Actions.MultiAction.Update
- uid: TinyLife.Actions.Action.Initialize
  commentId: M:TinyLife.Actions.Action.Initialize
  parent: TinyLife.Actions.Action
  name: Initialize()
  nameWithType: Action.Initialize()
  fullName: TinyLife.Actions.Action.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.Action.Initialize
    name: Initialize
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Initialize
    name: Initialize
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.Initialize*
  commentId: Overload:TinyLife.Actions.MultiAction.Initialize
  name: Initialize
  nameWithType: MultiAction.Initialize
  fullName: TinyLife.Actions.MultiAction.Initialize
- uid: TinyLife.Actions.Action.IsCompleted
  commentId: M:TinyLife.Actions.Action.IsCompleted
  parent: TinyLife.Actions.Action
  name: IsCompleted()
  nameWithType: Action.IsCompleted()
  fullName: TinyLife.Actions.Action.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.IsCompleted
    name: IsCompleted
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.IsCompleted*
  commentId: Overload:TinyLife.Actions.MultiAction.IsCompleted
  name: IsCompleted
  nameWithType: MultiAction.IsCompleted
  fullName: TinyLife.Actions.MultiAction.IsCompleted
- uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: OnCompleted(CompletionType)
  nameWithType: Action.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
  - name: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
  - name: )
- uid: TinyLife.Actions.MultiAction.OnCompleted*
  commentId: Overload:TinyLife.Actions.MultiAction.OnCompleted
  name: OnCompleted
  nameWithType: MultiAction.OnCompleted
  fullName: TinyLife.Actions.MultiAction.OnCompleted
- uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: Validate(Person)
  nameWithType: Action.Validate(Person)
  fullName: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Validate(TinyLife.Objects.Person)
    name: Validate
  - name: (
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Actions.MultiAction.Validate*
  commentId: Overload:TinyLife.Actions.MultiAction.Validate
  name: Validate
  nameWithType: MultiAction.Validate
  fullName: TinyLife.Actions.MultiAction.Validate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanCancel(Action)
  nameWithType: Action.CanCancel(Action)
  fullName: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
  - name: (
  - uid: TinyLife.Actions.Action
    name: Action
  - name: )
- uid: TinyLife.Actions.MultiAction.CanCancel*
  commentId: Overload:TinyLife.Actions.MultiAction.CanCancel
  name: CanCancel
  nameWithType: MultiAction.CanCancel
  fullName: TinyLife.Actions.MultiAction.CanCancel
- uid: TinyLife.Actions.Action.CanStartNow
  commentId: M:TinyLife.Actions.Action.CanStartNow
  parent: TinyLife.Actions.Action
  name: CanStartNow()
  nameWithType: Action.CanStartNow()
  fullName: TinyLife.Actions.Action.CanStartNow()
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanStartNow
    name: CanStartNow
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanStartNow
    name: CanStartNow
  - name: (
  - name: )
- uid: TinyLife.Actions.MultiAction.CanStartNow*
  commentId: Overload:TinyLife.Actions.MultiAction.CanStartNow
  name: CanStartNow
  nameWithType: MultiAction.CanStartNow
  fullName: TinyLife.Actions.MultiAction.CanStartNow
- uid: TinyLife.Actions.ActionType.GoHere
  commentId: F:TinyLife.Actions.ActionType.GoHere
  name: GoHere
  nameWithType: ActionType.GoHere
  fullName: TinyLife.Actions.ActionType.GoHere
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  name: ToFreeActionSpot(ObjectCategory)
  nameWithType: ActionInfo.ToFreeActionSpot(ObjectCategory)
  fullName: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
    name: ToFreeActionSpot
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
  spec.vb:
  - uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
    name: ToFreeActionSpot
  - name: (
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
  - name: )
- uid: TinyLife.Objects.ObjectCategory.Nothing
  commentId: F:TinyLife.Objects.ObjectCategory.Nothing
  name: Nothing
  nameWithType: ObjectCategory.Nothing
  fullName: TinyLife.Objects.ObjectCategory.Nothing
- uid: TinyLife.Actions.MultiAction.GoToActionLocation*
  commentId: Overload:TinyLife.Actions.MultiAction.GoToActionLocation
  name: GoToActionLocation
  nameWithType: MultiAction.GoToActionLocation
  fullName: TinyLife.Actions.MultiAction.GoToActionLocation
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory

### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Project.ActionSettings
  commentId: T:TinyLife.Goals.Project.ActionSettings
  id: Project.ActionSettings
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  - TinyLife.Goals.Project.ActionSettings.CanContinue
  - TinyLife.Goals.Project.ActionSettings.CanExecute
  - TinyLife.Goals.Project.ActionSettings.ConstructedType
  - TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  - TinyLife.Goals.Project.ActionSettings.Context
  - TinyLife.Goals.Project.ActionSettings.IncludeProject
  - TinyLife.Goals.Project.ActionSettings.Name
  - TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  - TinyLife.Goals.Project.ActionSettings.RequiredAges
  - TinyLife.Goals.Project.ActionSettings.RequiredSkill
  - TinyLife.Goals.Project.ActionSettings.Type
  langs:
  - csharp
  - vb
  name: Project.ActionSettings
  nameWithType: Project.ActionSettings
  fullName: TinyLife.Goals.Project.ActionSettings
  type: Struct
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionSettings
    path: ../TinyLife/Goals/Project.cs
    startLine: 229
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA struct that represents a set of settings for <xref href=\"TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public struct ActionSettings
    content.vb: Public Structure ActionSettings
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Goals.Project.ActionSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Goals.Project.ActionSettings.Name
  commentId: F:TinyLife.Goals.Project.ActionSettings.Name
  id: Name
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Project.ActionSettings.Name
  fullName: TinyLife.Goals.Project.ActionSettings.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/Project.cs
    startLine: 234
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe basic name of the actions created\n"
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.Context
  commentId: F:TinyLife.Goals.Project.ActionSettings.Context
  id: Context
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Project.ActionSettings.Context
  fullName: TinyLife.Goals.Project.ActionSettings.Context
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Context
    path: ../TinyLife/Goals/Project.cs
    startLine: 238
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe context for the actions\n"
  example: []
  syntax:
    content: public ObjectCategory Context
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Context As ObjectCategory
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.Type
  commentId: F:TinyLife.Goals.Project.ActionSettings.Type
  id: Type
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Project.ActionSettings.Type
  fullName: TinyLife.Goals.Project.ActionSettings.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Goals/Project.cs
    startLine: 242
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe project <xref href=\"TinyLife.Goals.Project.Type\" data-throw-if-not-resolved=\"false\"></xref> to use for the actions\n"
  example: []
  syntax:
    content: public string Type
    return:
      type: System.String
    content.vb: Public Type As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.ConstructedType
  commentId: F:TinyLife.Goals.Project.ActionSettings.ConstructedType
  id: ConstructedType
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: Project.ActionSettings.ConstructedType
  fullName: TinyLife.Goals.Project.ActionSettings.ConstructedType
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedType
    path: ../TinyLife/Goals/Project.cs
    startLine: 247
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe function that is executed to construct the start and continue actions.\nThe project that should be used for a given action instance can be retrieved via <xref href=\"TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)\" data-throw-if-not-resolved=\"false\"></xref> via the variety&apos;s <xref href=\"TinyLife.Actions.ActionVariety.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ConstructedType As Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  commentId: F:TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  id: ConstructedTypeScrap
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ConstructedTypeScrap
  nameWithType: Project.ActionSettings.ConstructedTypeScrap
  fullName: TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedTypeScrap
    path: ../TinyLife/Goals/Project.cs
    startLine: 253
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe function that is used to construct the scrap action.\nIf this is null, projects will not be scrappable using these actions.\nThe project that should be used for a given action instance can be retrieved via <xref href=\"TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)\" data-throw-if-not-resolved=\"false\"></xref> via the variety&apos;s <xref href=\"TinyLife.Actions.ActionVariety.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Type ConstructedTypeScrap
    return:
      type: System.Type
    content.vb: Public ConstructedTypeScrap As Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.CanExecute
  commentId: F:TinyLife.Goals.Project.ActionSettings.CanExecute
  id: CanExecute
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: Project.ActionSettings.CanExecute
  fullName: TinyLife.Goals.Project.ActionSettings.CanExecute
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecute
    path: ../TinyLife/Goals/Project.cs
    startLine: 257
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> that determines whether the actions can be executed\n"
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.RequiredSkill
  commentId: F:TinyLife.Goals.Project.ActionSettings.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: Project.ActionSettings.RequiredSkill
  fullName: TinyLife.Goals.Project.ActionSettings.RequiredSkill
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredSkill
    path: ../TinyLife/Goals/Project.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> and level of the skill that is required for this action to become available.\nWhen the required skill is leveled up, this action will also be displayed in the list of now-available actions.\nInternally, this is passed into <xref href=\"TinyLife.Actions.ActionType.TypeSettings.RequiredSkill\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (SkillType Type, int Level) RequiredSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public RequiredSkill As(Type As SkillType, Level As Integer)(Of SkillType , Integer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.RequiredAges
  commentId: F:TinyLife.Goals.Project.ActionSettings.RequiredAges
  id: RequiredAges
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: RequiredAges
  nameWithType: Project.ActionSettings.RequiredAges
  fullName: TinyLife.Goals.Project.ActionSettings.RequiredAges
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredAges
    path: ../TinyLife/Goals/Project.cs
    startLine: 268
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA flag of age group values that are required to work on this project.\nThis value defaults to 0, meaning all ages are allowed.\n"
  example: []
  syntax:
    content: public AgeGroup RequiredAges
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public RequiredAges As AgeGroup
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  commentId: F:TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  id: ProjectDisplayName
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ProjectDisplayName
  nameWithType: Project.ActionSettings.ProjectDisplayName
  fullName: TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ProjectDisplayName
    path: ../TinyLife/Goals/Project.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA function that determines the display name for a given project.\nIf this is null, the project&apos;s <xref href=\"TinyLife.Goals.Project.Name\" data-throw-if-not-resolved=\"false\"></xref> is displayed along with its doneness percentage.\n"
  example: []
  syntax:
    content: public Func<Project, string> ProjectDisplayName
    return:
      type: System.Func{TinyLife.Goals.Project,System.String}
    content.vb: Public ProjectDisplayName As Func(Of Project, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.CanContinue
  commentId: F:TinyLife.Goals.Project.ActionSettings.CanContinue
  id: CanContinue
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: CanContinue
  nameWithType: Project.ActionSettings.CanContinue
  fullName: TinyLife.Goals.Project.ActionSettings.CanContinue
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanContinue
    path: ../TinyLife/Goals/Project.cs
    startLine: 278
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA function that determines whether the given project can be continued.\nBy default, this function returns true for a project whose <xref href=\"TinyLife.Goals.Project.Progress\" data-throw-if-not-resolved=\"false\"></xref> is less than 100.\n"
  example: []
  syntax:
    content: public Predicate<Project> CanContinue
    return:
      type: System.Predicate{TinyLife.Goals.Project}
    content.vb: Public CanContinue As Predicate(Of Project)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.IncludeProject
  commentId: F:TinyLife.Goals.Project.ActionSettings.IncludeProject
  id: IncludeProject
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: IncludeProject
  nameWithType: Project.ActionSettings.IncludeProject
  fullName: TinyLife.Goals.Project.ActionSettings.IncludeProject
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IncludeProject
    path: ../TinyLife/Goals/Project.cs
    startLine: 283
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA function that determines whether the given project should be included as an action variety or whether it should be ignored.\nBy default, this function returns true for a project whose <xref href=\"TinyLife.Goals.Project.DailyPay\" data-throw-if-not-resolved=\"false\"></xref> is less than or equal to 0.\n"
  example: []
  syntax:
    content: public Predicate<Project> IncludeProject
    return:
      type: System.Predicate{TinyLife.Goals.Project}
    content.vb: Public IncludeProject As Predicate(Of Project)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  commentId: M:TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  id: '#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)'
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ActionSettings(String, ObjectCategory, String, Type)
  nameWithType: Project.ActionSettings.ActionSettings(String, ObjectCategory, String, Type)
  fullName: TinyLife.Goals.Project.ActionSettings.ActionSettings(System.String, TinyLife.Objects.ObjectCategory, System.String, System.Type)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: 0.20.2-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Project.cs
    startLine: 292
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nConstructs new action settings with the given default values\n"
  example: []
  syntax:
    content: public ActionSettings(string name, ObjectCategory context, string type, Type constructedType)
    parameters:
    - id: name
      type: System.String
      description: The basic name for the actions
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context for the actions
    - id: type
      type: System.String
      description: The type of project that these actions should relate to
    - id: constructedType
      type: System.Type
      description: The type that should be constructed for the start and continue actions
    content.vb: Public Sub New(name As String, context As ObjectCategory, type As String, constructedType As Type)
  overload: TinyLife.Goals.Project.ActionSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  commentId: M:TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  isExternal: true
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.ActionSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Project.ActionSettings>()
  nameWithType: Extensions.JsonCopy<Project.ActionSettings>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Project.ActionSettings>()
  nameWithType.vb: Extensions.JsonCopy(Of Project.ActionSettings)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Project.ActionSettings)()
  name.vb: JsonCopy(Of Project.ActionSettings)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Project.ActionSettings>
    nameWithType: Extensions.JsonCopy<Project.ActionSettings>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Project.ActionSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Project.ActionSettings)
    nameWithType: Extensions.JsonCopy(Of Project.ActionSettings)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Project.ActionSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Goals.Project.Type
  commentId: F:TinyLife.Goals.Project.Type
  isExternal: true
- uid: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  commentId: M:TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  parent: TinyLife.Actions.Action
  name: ApplyVariety(ActionVariety)
  nameWithType: Action.ApplyVariety(ActionVariety)
  fullName: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
  spec.csharp:
  - uid: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
    name: ApplyVariety
    nameWithType: Action.ApplyVariety
    fullName: TinyLife.Actions.Action.ApplyVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.ApplyVariety(TinyLife.Actions.ActionVariety)
    name: ApplyVariety
    nameWithType: Action.ApplyVariety
    fullName: TinyLife.Actions.Action.ApplyVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionVariety.Name
  commentId: F:TinyLife.Actions.ActionVariety.Name
  isExternal: true
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  isExternal: true
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<SkillType, Int32>
  nameWithType: (T1, T2)<SkillType, Int32>
  fullName: System.ValueTuple<TinyLife.Skills.SkillType, System.Int32>
  nameWithType.vb: (T1, T2)(Of SkillType, Int32)
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillType, System.Int32)
  name.vb: (T1, T2)(Of SkillType, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Goals.Project.Name
  commentId: F:TinyLife.Goals.Project.Name
  isExternal: true
- uid: System.Func{TinyLife.Goals.Project,System.String}
  commentId: T:System.Func{TinyLife.Goals.Project,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Project, String>
  nameWithType: Func<Project, String>
  fullName: System.Func<TinyLife.Goals.Project, System.String>
  nameWithType.vb: Func(Of Project, String)
  fullName.vb: System.Func(Of TinyLife.Goals.Project, System.String)
  name.vb: Func(Of Project, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.Progress
  commentId: P:TinyLife.Goals.Project.Progress
  isExternal: true
- uid: System.Predicate{TinyLife.Goals.Project}
  commentId: T:System.Predicate{TinyLife.Goals.Project}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Project>
  nameWithType: Predicate<Project>
  fullName: System.Predicate<TinyLife.Goals.Project>
  nameWithType.vb: Predicate(Of Project)
  fullName.vb: System.Predicate(Of TinyLife.Goals.Project)
  name.vb: Predicate(Of Project)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.DailyPay
  commentId: P:TinyLife.Goals.Project.DailyPay
  isExternal: true
- uid: TinyLife.Goals.Project.ActionSettings.#ctor*
  commentId: Overload:TinyLife.Goals.Project.ActionSettings.#ctor
  name: ActionSettings
  nameWithType: Project.ActionSettings.ActionSettings
  fullName: TinyLife.Goals.Project.ActionSettings.ActionSettings

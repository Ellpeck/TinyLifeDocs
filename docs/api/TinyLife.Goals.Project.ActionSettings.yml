### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Project.ActionSettings
  commentId: T:TinyLife.Goals.Project.ActionSettings
  id: Project.ActionSettings
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  - TinyLife.Goals.Project.ActionSettings.CanContinue
  - TinyLife.Goals.Project.ActionSettings.CanExecute
  - TinyLife.Goals.Project.ActionSettings.ConstructedType
  - TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  - TinyLife.Goals.Project.ActionSettings.Context
  - TinyLife.Goals.Project.ActionSettings.IncludeProject
  - TinyLife.Goals.Project.ActionSettings.Name
  - TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  - TinyLife.Goals.Project.ActionSettings.RequiredAges
  - TinyLife.Goals.Project.ActionSettings.RequiredSkill
  - TinyLife.Goals.Project.ActionSettings.Type
  langs:
  - csharp
  - vb
  name: Project.ActionSettings
  nameWithType: Project.ActionSettings
  fullName: TinyLife.Goals.Project.ActionSettings
  type: Struct
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionSettings
    path: ../TinyLife/Goals/Project.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: A struct that represents a set of settings for <xref href="TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public struct Project.ActionSettings
    content.vb: Public Structure Project.ActionSettings
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Goals.Project.ActionSettings.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Goals.Project.ActionSettings.Name
  commentId: F:TinyLife.Goals.Project.ActionSettings.Name
  id: Name
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Project.ActionSettings.Name
  fullName: TinyLife.Goals.Project.ActionSettings.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/Project.cs
    startLine: 268
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: The basic name of the actions created
  example: []
  syntax:
    content: public string Name
    return:
      type: System.String
    content.vb: Public Name As String
- uid: TinyLife.Goals.Project.ActionSettings.Context
  commentId: F:TinyLife.Goals.Project.ActionSettings.Context
  id: Context
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Project.ActionSettings.Context
  fullName: TinyLife.Goals.Project.ActionSettings.Context
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Context
    path: ../TinyLife/Goals/Project.cs
    startLine: 272
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: The context for the actions
  example: []
  syntax:
    content: public ObjectCategory Context
    return:
      type: TinyLife.Objects.ObjectCategory
    content.vb: Public Context As ObjectCategory
- uid: TinyLife.Goals.Project.ActionSettings.Type
  commentId: F:TinyLife.Goals.Project.ActionSettings.Type
  id: Type
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Project.ActionSettings.Type
  fullName: TinyLife.Goals.Project.ActionSettings.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Goals/Project.cs
    startLine: 276
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: The project <xref href="TinyLife.Goals.Project.Type" data-throw-if-not-resolved="false"></xref> to use for the actions
  example: []
  syntax:
    content: public string Type
    return:
      type: System.String
    content.vb: Public Type As String
- uid: TinyLife.Goals.Project.ActionSettings.ConstructedType
  commentId: F:TinyLife.Goals.Project.ActionSettings.ConstructedType
  id: ConstructedType
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: Project.ActionSettings.ConstructedType
  fullName: TinyLife.Goals.Project.ActionSettings.ConstructedType
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedType
    path: ../TinyLife/Goals/Project.cs
    startLine: 281
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    The function that is executed to construct the start and continue actions.

    The type needs to have a constructor that additionally accepts a string, which is the project name to work on, and is passed using <xref href="TinyLife.Actions.ActionArgument.AddedConstructorArguments" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ConstructedType As Type
- uid: TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  commentId: F:TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  id: ConstructedTypeScrap
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ConstructedTypeScrap
  nameWithType: Project.ActionSettings.ConstructedTypeScrap
  fullName: TinyLife.Goals.Project.ActionSettings.ConstructedTypeScrap
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedTypeScrap
    path: ../TinyLife/Goals/Project.cs
    startLine: 287
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    The function that is used to construct the scrap action.

    If this is null, projects will not be scrappable using these actions.

    The type needs to have a constructor that additionally accepts a string, which is the project name to work on, and is passed using <xref href="TinyLife.Actions.ActionArgument.AddedConstructorArguments" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Type ConstructedTypeScrap
    return:
      type: System.Type
    content.vb: Public ConstructedTypeScrap As Type
- uid: TinyLife.Goals.Project.ActionSettings.CanExecute
  commentId: F:TinyLife.Goals.Project.ActionSettings.CanExecute
  id: CanExecute
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: CanExecute
  nameWithType: Project.ActionSettings.CanExecute
  fullName: TinyLife.Goals.Project.ActionSettings.CanExecute
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecute
    path: ../TinyLife/Goals/Project.cs
    startLine: 291
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: A <xref href="TinyLife.Actions.ActionType.CanExecuteDelegate" data-throw-if-not-resolved="false"></xref> that determines whether the actions can be executed
  example: []
  syntax:
    content: public ActionType.CanExecuteDelegate CanExecute
    return:
      type: TinyLife.Actions.ActionType.CanExecuteDelegate
    content.vb: Public CanExecute As ActionType.CanExecuteDelegate
- uid: TinyLife.Goals.Project.ActionSettings.RequiredSkill
  commentId: F:TinyLife.Goals.Project.ActionSettings.RequiredSkill
  id: RequiredSkill
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: RequiredSkill
  nameWithType: Project.ActionSettings.RequiredSkill
  fullName: TinyLife.Goals.Project.ActionSettings.RequiredSkill
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredSkill
    path: ../TinyLife/Goals/Project.cs
    startLine: 297
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    The <xref href="TinyLife.Skills.SkillType" data-throw-if-not-resolved="false"></xref> and level of the skill that is required for this action to become available.

    When the required skill is leveled up, this action will also be displayed in the list of now-available actions.

    Internally, this is passed into <xref href="TinyLife.Actions.ActionType.TypeSettings.RequiredSkill" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (SkillType Type, int Level) RequiredSkill
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
    content.vb: Public RequiredSkill As (Type As SkillType, Level As Integer)
- uid: TinyLife.Goals.Project.ActionSettings.RequiredAges
  commentId: F:TinyLife.Goals.Project.ActionSettings.RequiredAges
  id: RequiredAges
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: RequiredAges
  nameWithType: Project.ActionSettings.RequiredAges
  fullName: TinyLife.Goals.Project.ActionSettings.RequiredAges
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredAges
    path: ../TinyLife/Goals/Project.cs
    startLine: 302
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    A flag of age group values that are required to work on this project.

    This value defaults to 0, meaning all ages are allowed.
  example: []
  syntax:
    content: public AgeGroup RequiredAges
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public RequiredAges As AgeGroup
- uid: TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  commentId: F:TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  id: ProjectDisplayName
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ProjectDisplayName
  nameWithType: Project.ActionSettings.ProjectDisplayName
  fullName: TinyLife.Goals.Project.ActionSettings.ProjectDisplayName
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ProjectDisplayName
    path: ../TinyLife/Goals/Project.cs
    startLine: 307
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    A function that determines the display name for a given project.

    If this is null, the project's <xref href="TinyLife.Goals.Project.Name" data-throw-if-not-resolved="false"></xref> is displayed along with its doneness percentage.
  example: []
  syntax:
    content: public Func<Project, string> ProjectDisplayName
    return:
      type: System.Func{TinyLife.Goals.Project,System.String}
    content.vb: Public ProjectDisplayName As Func(Of Project, String)
- uid: TinyLife.Goals.Project.ActionSettings.CanContinue
  commentId: F:TinyLife.Goals.Project.ActionSettings.CanContinue
  id: CanContinue
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: CanContinue
  nameWithType: Project.ActionSettings.CanContinue
  fullName: TinyLife.Goals.Project.ActionSettings.CanContinue
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanContinue
    path: ../TinyLife/Goals/Project.cs
    startLine: 312
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    A function that determines whether the given project can be continued.

    By default, this function returns true for a project whose <xref href="TinyLife.Goals.Project.Completed" data-throw-if-not-resolved="false"></xref> property is false.
  example: []
  syntax:
    content: public Predicate<Project> CanContinue
    return:
      type: System.Predicate{TinyLife.Goals.Project}
    content.vb: Public CanContinue As Predicate(Of Project)
- uid: TinyLife.Goals.Project.ActionSettings.IncludeProject
  commentId: F:TinyLife.Goals.Project.ActionSettings.IncludeProject
  id: IncludeProject
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: IncludeProject
  nameWithType: Project.ActionSettings.IncludeProject
  fullName: TinyLife.Goals.Project.ActionSettings.IncludeProject
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IncludeProject
    path: ../TinyLife/Goals/Project.cs
    startLine: 317
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: >-
    A function that determines whether the given project should be included as an action variety or whether it should be ignored.

    By default, this function returns true for a project that is not <xref href="TinyLife.Goals.Project.Archived" data-throw-if-not-resolved="false"></xref>, and whose <xref href="TinyLife.Goals.Project.DailyPay" data-throw-if-not-resolved="false"></xref> is less than or equal to 0.
  example: []
  syntax:
    content: public Predicate<Project> IncludeProject
    return:
      type: System.Predicate{TinyLife.Goals.Project}
    content.vb: Public IncludeProject As Predicate(Of Project)
- uid: TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  commentId: M:TinyLife.Goals.Project.ActionSettings.#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)
  id: '#ctor(System.String,TinyLife.Objects.ObjectCategory,System.String,System.Type)'
  parent: TinyLife.Goals.Project.ActionSettings
  langs:
  - csharp
  - vb
  name: ActionSettings(string, ObjectCategory, string, Type)
  nameWithType: Project.ActionSettings.ActionSettings(string, ObjectCategory, string, Type)
  fullName: TinyLife.Goals.Project.ActionSettings.ActionSettings(string, TinyLife.Objects.ObjectCategory, string, System.Type)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Project.cs
    startLine: 326
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: Constructs new action settings with the given default values
  example: []
  syntax:
    content: public ActionSettings(string name, ObjectCategory context, string type, Type constructedType)
    parameters:
    - id: name
      type: System.String
      description: The basic name for the actions
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The context for the actions
    - id: type
      type: System.String
      description: The type of project that these actions should relate to. The type needs to have a constructor that additionally accepts a string, which is the project name to work on.
    - id: constructedType
      type: System.Type
      description: The type that should be constructed for the start and continue actions
    content.vb: Public Sub New(name As String, context As ObjectCategory, type As String, constructedType As Type)
  overload: TinyLife.Goals.Project.ActionSettings.#ctor*
  nameWithType.vb: Project.ActionSettings.New(String, ObjectCategory, String, Type)
  fullName.vb: TinyLife.Goals.Project.ActionSettings.New(String, TinyLife.Objects.ObjectCategory, String, System.Type)
  name.vb: New(String, ObjectCategory, String, Type)
references:
- uid: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  commentId: M:TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_CreateActions_TinyLife_Goals_Project_ActionSettings_
  name: CreateActions(ActionSettings)
  nameWithType: Project.CreateActions(Project.ActionSettings)
  fullName: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  spec.csharp:
  - uid: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
    name: CreateActions
    href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_CreateActions_TinyLife_Goals_Project_ActionSettings_
  - name: (
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: )
  spec.vb:
  - uid: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
    name: CreateActions
    href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_CreateActions_TinyLife_Goals_Project_ActionSettings_
  - name: (
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: )
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  href: TinyLife.html
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Goals
    name: Goals
    href: TinyLife.Goals.html
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TinyLife.Goals.Project.ActionSettings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<ActionSettings>(ActionSettings)
  nameWithType: Extensions.JsonCopy<Project.ActionSettings>(Project.ActionSettings)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Project.ActionSettings>(TinyLife.Goals.Project.ActionSettings)
  nameWithType.vb: Extensions.JsonCopy(Of Project.ActionSettings)(Project.ActionSettings)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Project.ActionSettings)(TinyLife.Goals.Project.ActionSettings)
  name.vb: JsonCopy(Of ActionSettings)(ActionSettings)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Goals.Project.ActionSettings)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: '>'
  - name: (
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Goals.Project.ActionSettings)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: )
  - name: (
  - uid: TinyLife.Goals.Project.ActionSettings
    name: ActionSettings
    href: TinyLife.Goals.Project.ActionSettings.html
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
    href: TinyLife.Utilities.Extensions.html#TinyLife_Utilities_Extensions_JsonCopy__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  href: TinyLife.Utilities.Extensions.html
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  href: TinyLife.html
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
    href: TinyLife.Utilities.html
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  href: TinyLife.Objects.ObjectCategory.html
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  href: TinyLife.html
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Objects
    name: Objects
    href: TinyLife.Objects.html
- uid: TinyLife.Goals.Project.Type
  commentId: F:TinyLife.Goals.Project.Type
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_Type
  name: Type
  nameWithType: Project.Type
  fullName: TinyLife.Goals.Project.Type
- uid: TinyLife.Actions.ActionArgument.AddedConstructorArguments
  commentId: F:TinyLife.Actions.ActionArgument.AddedConstructorArguments
  href: TinyLife.Actions.ActionArgument.html#TinyLife_Actions_ActionArgument_AddedConstructorArguments
  name: AddedConstructorArguments
  nameWithType: ActionArgument.AddedConstructorArguments
  fullName: TinyLife.Actions.ActionArgument.AddedConstructorArguments
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  href: TinyLife.Actions.ActionType.html
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
  spec.csharp:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
  spec.vb:
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    href: TinyLife.Actions.ActionType.html
  - name: .
  - uid: TinyLife.Actions.ActionType.CanExecuteDelegate
    name: CanExecuteDelegate
    href: TinyLife.Actions.ActionType.CanExecuteDelegate.html
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  href: TinyLife.html
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Actions
    name: Actions
    href: TinyLife.Actions.html
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  href: TinyLife.Skills.SkillType.html
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
  href: TinyLife.Actions.ActionType.TypeSettings.html#TinyLife_Actions_ActionType_TypeSettings_RequiredSkill
  name: RequiredSkill
  nameWithType: ActionType.TypeSettings.RequiredSkill
  fullName: TinyLife.Actions.ActionType.TypeSettings.RequiredSkill
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: TinyLife.Skills.SkillType.html
  name: (SkillType Type, int Level)
  nameWithType: (SkillType Type, int Level)
  fullName: (TinyLife.Skills.SkillType Type, int Level)
  nameWithType.vb: (Type As SkillType, Level As Integer)
  fullName.vb: (Type As TinyLife.Skills.SkillType, Level As Integer)
  name.vb: (Type As SkillType, Level As Integer)
  spec.csharp:
  - name: (
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Type
    name: Type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.type
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Level
    name: Level
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.level
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Type
    name: Type
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.type
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    href: TinyLife.Skills.SkillType.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}.Level
    name: Level
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.skills.skilltype,system.int32-.level
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  href: TinyLife.html
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
  spec.vb:
  - uid: TinyLife
    name: TinyLife
    href: TinyLife.html
  - name: .
  - uid: TinyLife.Skills
    name: Skills
    href: TinyLife.Skills.html
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  href: TinyLife.Objects.AgeGroup.html
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Goals.Project.Name
  commentId: F:TinyLife.Goals.Project.Name
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_Name
  name: Name
  nameWithType: Project.Name
  fullName: TinyLife.Goals.Project.Name
- uid: System.Func{TinyLife.Goals.Project,System.String}
  commentId: T:System.Func{TinyLife.Goals.Project,System.String}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Project, string>
  nameWithType: Func<Project, string>
  fullName: System.Func<TinyLife.Goals.Project, string>
  nameWithType.vb: Func(Of Project, String)
  fullName.vb: System.Func(Of TinyLife.Goals.Project, String)
  name.vb: Func(Of Project, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: TinyLife.Goals.Project
    name: Project
    href: TinyLife.Goals.Project.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Goals.Project
    name: Project
    href: TinyLife.Goals.Project.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.Goals.Project.Completed
  commentId: P:TinyLife.Goals.Project.Completed
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_Completed
  name: Completed
  nameWithType: Project.Completed
  fullName: TinyLife.Goals.Project.Completed
- uid: System.Predicate{TinyLife.Goals.Project}
  commentId: T:System.Predicate{TinyLife.Goals.Project}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<Project>
  nameWithType: Predicate<Project>
  fullName: System.Predicate<TinyLife.Goals.Project>
  nameWithType.vb: Predicate(Of Project)
  fullName.vb: System.Predicate(Of TinyLife.Goals.Project)
  name.vb: Predicate(Of Project)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: TinyLife.Goals.Project
    name: Project
    href: TinyLife.Goals.Project.html
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Goals.Project
    name: Project
    href: TinyLife.Goals.Project.html
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Goals.Project.Archived
  commentId: P:TinyLife.Goals.Project.Archived
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_Archived
  name: Archived
  nameWithType: Project.Archived
  fullName: TinyLife.Goals.Project.Archived
- uid: TinyLife.Goals.Project.DailyPay
  commentId: P:TinyLife.Goals.Project.DailyPay
  href: TinyLife.Goals.Project.html#TinyLife_Goals_Project_DailyPay
  name: DailyPay
  nameWithType: Project.DailyPay
  fullName: TinyLife.Goals.Project.DailyPay
- uid: TinyLife.Goals.Project.ActionSettings.#ctor*
  commentId: Overload:TinyLife.Goals.Project.ActionSettings.#ctor
  href: TinyLife.Goals.Project.ActionSettings.html#TinyLife_Goals_Project_ActionSettings__ctor_System_String_TinyLife_Objects_ObjectCategory_System_String_System_Type_
  name: ActionSettings
  nameWithType: Project.ActionSettings.ActionSettings
  fullName: TinyLife.Goals.Project.ActionSettings.ActionSettings
  nameWithType.vb: Project.ActionSettings.New
  fullName.vb: TinyLife.Goals.Project.ActionSettings.New
  name.vb: New

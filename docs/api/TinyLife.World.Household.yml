### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  id: Household
  parent: TinyLife.World
  children:
  - TinyLife.World.Household.#ctor(TinyLife.World.Map,TinyLife.World.Lot)
  - TinyLife.World.Household.Add(TinyLife.Objects.Person)
  - TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  - TinyLife.World.Household.ClothesStorage
  - TinyLife.World.Household.DefaultMoney
  - TinyLife.World.Household.Description
  - TinyLife.World.Household.Export(System.Boolean)
  - TinyLife.World.Household.FurnitureStorage
  - TinyLife.World.Household.GetAverageFriendshipTo(TinyLife.Objects.Person)
  - TinyLife.World.Household.HasMember(System.Guid)
  - TinyLife.World.Household.Import(TinyLife.World.ExportedHousehold,System.Boolean)
  - TinyLife.World.Household.IsComplete(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  - TinyLife.World.Household.IsCurrent
  - TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  - TinyLife.World.Household.Lot
  - TinyLife.World.Household.MarkLotNonVisible(TinyLife.World.Lot)
  - TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  - TinyLife.World.Household.Members
  - TinyLife.World.Household.Money
  - TinyLife.World.Household.Name
  - TinyLife.World.Household.Remove(TinyLife.Objects.Person,System.Boolean)
  - TinyLife.World.Household.UnopenedMail
  - TinyLife.World.Household.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.World.Household.Validate(TinyLife.World.Map)
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
  type: Class
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Household
    path: ../TinyLife/World/Household.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA household is a set of <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that live together on the same <xref href=\"TinyLife.World.Household.Lot\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Household : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Household
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Household.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Household.DefaultMoney
  commentId: F:TinyLife.World.Household.DefaultMoney
  id: DefaultMoney
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: DefaultMoney
  nameWithType: Household.DefaultMoney
  fullName: TinyLife.World.Household.DefaultMoney
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DefaultMoney
    path: ../TinyLife/World/Household.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe amount of money that a household has by default.\nIf the househould is exported throughly (<xref href=\"TinyLife.World.Household.Export(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>), this value will be exported as well.\n"
  example: []
  syntax:
    content: public const float DefaultMoney = 30000F
    return:
      type: System.Single
    content.vb: Public Const DefaultMoney As Single = 30000F
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.World.Household.Money
  commentId: P:TinyLife.World.Household.Money
  id: Money
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: Household.Money
  fullName: TinyLife.World.Household.Money
  type: Property
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Money
    path: ../TinyLife/World/Household.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe money that this household has, rounded by two digits after the decimal point\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Money { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Property Money As Single
  overload: TinyLife.World.Household.Money*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Members
  commentId: P:TinyLife.World.Household.Members
  id: Members
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Members
  nameWithType: Household.Members
  fullName: TinyLife.World.Household.Members
  type: Property
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Members
    path: ../TinyLife/World/Household.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are members of this household\n"
  example: []
  syntax:
    content: public IEnumerable<Person> Members { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
    content.vb: Public ReadOnly Property Members As IEnumerable(Of Person)
  overload: TinyLife.World.Household.Members*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.Lot
  commentId: P:TinyLife.World.Household.Lot
  id: Lot
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: Household.Lot
  fullName: TinyLife.World.Household.Lot
  type: Property
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lot
    path: ../TinyLife/World/Household.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.Household.Lot\" data-throw-if-not-resolved=\"false\"></xref> that this household lives on.\nFor exported households, this might be null.\n"
  example: []
  syntax:
    content: public Lot Lot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property Lot As Lot
  overload: TinyLife.World.Household.Lot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.Name
  commentId: P:TinyLife.World.Household.Name
  id: Name
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Household.Name
  fullName: TinyLife.World.Household.Name
  type: Property
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Household.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this household.\nThe name of a household is the <xref href=\"TinyLife.Objects.Person.LastName\" data-throw-if-not-resolved=\"false\"></xref> that most people in this household have.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: TinyLife.World.Household.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.IsCurrent
  commentId: P:TinyLife.World.Household.IsCurrent
  id: IsCurrent
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: IsCurrent
  nameWithType: Household.IsCurrent
  fullName: TinyLife.World.Household.IsCurrent
  type: Property
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCurrent
    path: ../TinyLife/World/Household.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA property that indicates whether or not this household is the same as <xref href=\"TinyLife.GameImpl.CurrentHousehold\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsCurrent { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCurrent As Boolean
  overload: TinyLife.World.Household.IsCurrent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.Description
  commentId: F:TinyLife.World.Household.Description
  id: Description
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Household.Description
  fullName: TinyLife.World.Household.Description
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Description
    path: ../TinyLife/World/Household.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe household&apos;s description\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Description
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Description As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.FurnitureStorage
  commentId: F:TinyLife.World.Household.FurnitureStorage
  id: FurnitureStorage
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: FurnitureStorage
  nameWithType: Household.FurnitureStorage
  fullName: TinyLife.World.Household.FurnitureStorage
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FurnitureStorage
    path: ../TinyLife/World/Household.cs
    startLine: 64
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis household&apos;s furniture storage, which is a set of <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> items that are not placed, but owned by this household.\nTo add new objects to the furniture storage, simply add them to this set.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly HashSet<Furniture> FurnitureStorage
    return:
      type: System.Collections.Generic.HashSet{TinyLife.Objects.Furniture}
    content.vb: >-
      <DataMember>

      Public ReadOnly FurnitureStorage As HashSet(Of Furniture)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.ClothesStorage
  commentId: F:TinyLife.World.Household.ClothesStorage
  id: ClothesStorage
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: ClothesStorage
  nameWithType: Household.ClothesStorage
  fullName: TinyLife.World.Household.ClothesStorage
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ClothesStorage
    path: ../TinyLife/World/Household.cs
    startLine: 70
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis household&apos;s clothing storage, which is a set of <xref href=\"TinyLife.Objects.WornClothes\" data-throw-if-not-resolved=\"false\"></xref> that are not currently being worn by any members, but that are owned by this household.\nTo add new objects to the clothes storage, simply add them to this set.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly HashSet<WornClothes> ClothesStorage
    return:
      type: System.Collections.Generic.HashSet{TinyLife.Objects.WornClothes}
    content.vb: >-
      <DataMember>

      Public ReadOnly ClothesStorage As HashSet(Of WornClothes)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.UnopenedMail
  commentId: F:TinyLife.World.Household.UnopenedMail
  id: UnopenedMail
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: UnopenedMail
  nameWithType: Household.UnopenedMail
  fullName: TinyLife.World.Household.UnopenedMail
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UnopenedMail
    path: ../TinyLife/World/Household.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA list of <xref href=\"TinyLife.World.Mail\" data-throw-if-not-resolved=\"false\"></xref> instances that is yet to be opened.\nWhen a mail carrier delivers mail, it is automatically added to this list.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Mail> UnopenedMail
    return:
      type: System.Collections.Generic.List{TinyLife.World.Mail}
    content.vb: >-
      <DataMember>

      Public ReadOnly UnopenedMail As List(Of Mail)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Household.#ctor(TinyLife.World.Map,TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.#ctor(TinyLife.World.Map,TinyLife.World.Lot)
  id: '#ctor(TinyLife.World.Map,TinyLife.World.Lot)'
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Household(Map, Lot)
  nameWithType: Household.Household(Map, Lot)
  fullName: TinyLife.World.Household.Household(TinyLife.World.Map, TinyLife.World.Lot)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Household.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new household on the given map and lot\n"
  example: []
  syntax:
    content: public Household(Map map, Lot lot)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this household is on
    - id: lot
      type: TinyLife.World.Lot
      description: The lot that this household should own (can be null)
    content.vb: Public Sub New(map As Map, lot As Lot)
  overload: TinyLife.World.Household.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Household.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Household.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.World.Household.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/World/Household.cs
    startLine: 103
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nUpdates this household, ticking down the lot visibility times\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time passed in game
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.World.Household.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Add(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Household.Add(TinyLife.Objects.Person)
  id: Add(TinyLife.Objects.Person)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Add(Person)
  nameWithType: Household.Add(Person)
  fullName: TinyLife.World.Household.Add(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Add
    path: ../TinyLife/World/Household.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAdds the given person to this household\n"
  example: []
  syntax:
    content: public void Add(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to add
    content.vb: Public Sub Add(person As Person)
  overload: TinyLife.World.Household.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Remove(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.World.Household.Remove(TinyLife.Objects.Person,System.Boolean)
  id: Remove(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Remove(Person, Boolean)
  nameWithType: Household.Remove(Person, Boolean)
  fullName: TinyLife.World.Household.Remove(TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Remove
    path: ../TinyLife/World/Household.cs
    startLine: 131
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRemoves the given person from this household, if they&apos;re part of it\n"
  example: []
  syntax:
    content: public int Remove(Person person, bool removeHouseholdIfEmpty = true)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to remove
    - id: removeHouseholdIfEmpty
      type: System.Boolean
      description: Whether the household should be removed from the underlying map if the removed member was the last
    return:
      type: System.Int32
      description: The amount of remaining members of this household
    content.vb: Public Function Remove(person As Person, removeHouseholdIfEmpty As Boolean = True) As Integer
  overload: TinyLife.World.Household.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.HasMember(System.Guid)
  commentId: M:TinyLife.World.Household.HasMember(System.Guid)
  id: HasMember(System.Guid)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: HasMember(Guid)
  nameWithType: Household.HasMember(Guid)
  fullName: TinyLife.World.Household.HasMember(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasMember
    path: ../TinyLife/World/Household.cs
    startLine: 143
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given person <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> is a part of this household\n"
  example: []
  syntax:
    content: public bool HasMember(Guid person)
    parameters:
    - id: person
      type: System.Guid
      description: The unique id of the person to query
    return:
      type: System.Boolean
      description: true if the person is part of this household, false otherwise
    content.vb: Public Function HasMember(person As Guid) As Boolean
  overload: TinyLife.World.Household.HasMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  id: MarkLotVisible(TinyLife.World.Lot)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: MarkLotVisible(Lot)
  nameWithType: Household.MarkLotVisible(Lot)
  fullName: TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkLotVisible
    path: ../TinyLife/World/Household.cs
    startLine: 153
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks the given lot as visible for members of this household.\n<xref href=\"TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref> should be used in favor of this method in most cases.\nBy default, visibility lasts for 30 seconds of real time.\n"
  example: []
  syntax:
    content: public void MarkLotVisible(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to mark as visible
    content.vb: Public Sub MarkLotVisible(lot As Lot)
  overload: TinyLife.World.Household.MarkLotVisible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.MarkLotNonVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.MarkLotNonVisible(TinyLife.World.Lot)
  id: MarkLotNonVisible(TinyLife.World.Lot)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: MarkLotNonVisible(Lot)
  nameWithType: Household.MarkLotNonVisible(Lot)
  fullName: TinyLife.World.Household.MarkLotNonVisible(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MarkLotNonVisible
    path: ../TinyLife/World/Household.cs
    startLine: 169
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nMarks a lot non-visible if it&apos;s currently visible.\n"
  example: []
  syntax:
    content: public void MarkLotNonVisible(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to remove visibility for
    content.vb: Public Sub MarkLotNonVisible(lot As Lot)
  overload: TinyLife.World.Household.MarkLotNonVisible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  id: IsLotVisible(TinyLife.World.Lot)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: IsLotVisible(Lot)
  nameWithType: Household.IsLotVisible(Lot)
  fullName: TinyLife.World.Household.IsLotVisible(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsLotVisible
    path: ../TinyLife/World/Household.cs
    startLine: 180
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the given lot is considered visible to this household\nNote that passing this household&apos;s <xref href=\"TinyLife.World.Household.Lot\" data-throw-if-not-resolved=\"false\"></xref> will always cause this method to return true.\n"
  example: []
  syntax:
    content: public bool IsLotVisible(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to query
    return:
      type: System.Boolean
      description: Whether the lot is visible
    content.vb: Public Function IsLotVisible(lot As Lot) As Boolean
  overload: TinyLife.World.Household.IsLotVisible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.GetAverageFriendshipTo(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Household.GetAverageFriendshipTo(TinyLife.Objects.Person)
  id: GetAverageFriendshipTo(TinyLife.Objects.Person)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: GetAverageFriendshipTo(Person)
  nameWithType: Household.GetAverageFriendshipTo(Person)
  fullName: TinyLife.World.Household.GetAverageFriendshipTo(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetAverageFriendshipTo
    path: ../TinyLife/World/Household.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the average friendship level that the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> has with members of this lot.\nThis method returns an averaged value of the <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> that this person has towards each member of this lot.\n"
  example: []
  syntax:
    content: public float GetAverageFriendshipTo(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query
    return:
      type: System.Single
      description: The average friendship level, out of <xref href="TinyLife.Relationship.Max" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function GetAverageFriendshipTo(person As Person) As Single
  overload: TinyLife.World.Household.GetAverageFriendshipTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Household.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Household.Validate(Map)
  fullName: TinyLife.World.Household.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Household.cs
    startLine: 202
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public bool Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(map As Map) As Boolean
  overload: TinyLife.World.Household.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Export(System.Boolean)
  commentId: M:TinyLife.World.Household.Export(System.Boolean)
  id: Export(System.Boolean)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Export(Boolean)
  nameWithType: Household.Export(Boolean)
  fullName: TinyLife.World.Household.Export(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Export
    path: ../TinyLife/World/Household.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nExports this household&apos;s data into an <xref href=\"TinyLife.World.ExportedHousehold\" data-throw-if-not-resolved=\"false\"></xref>, which can be saved to disk independently of the <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that this household is on.\n"
  example: []
  syntax:
    content: public ExportedHousehold Export(bool thorough = false)
    parameters:
    - id: thorough
      type: System.Boolean
      description: Whether people should be reset thoroughly in <xref href="TinyLife.Objects.Person.ResetToStatic(System.Boolean)" data-throw-if-not-resolved="false"></xref>, and whether the money should be reset to <xref href="TinyLife.World.Household.DefaultMoney" data-throw-if-not-resolved="false"></xref>
    return:
      type: TinyLife.World.ExportedHousehold
      description: An exported household
    content.vb: Public Function Export(thorough As Boolean = False) As ExportedHousehold
  overload: TinyLife.World.Household.Export*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.Import(TinyLife.World.ExportedHousehold,System.Boolean)
  commentId: M:TinyLife.World.Household.Import(TinyLife.World.ExportedHousehold,System.Boolean)
  id: Import(TinyLife.World.ExportedHousehold,System.Boolean)
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: Import(ExportedHousehold, Boolean)
  nameWithType: Household.Import(ExportedHousehold, Boolean)
  fullName: TinyLife.World.Household.Import(TinyLife.World.ExportedHousehold, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Import
    path: ../TinyLife/World/Household.cs
    startLine: 225
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nImports the given <xref href=\"TinyLife.World.ExportedHousehold\" data-throw-if-not-resolved=\"false\"></xref> into this household.\nNote that existing <xref href=\"TinyLife.World.Household.Members\" data-throw-if-not-resolved=\"false\"></xref> are not removed or replaced beforehand.\n"
  example: []
  syntax:
    content: public void Import(ExportedHousehold household, bool useExistingVisitors = false)
    parameters:
    - id: household
      type: TinyLife.World.ExportedHousehold
      description: The household to import
    - id: useExistingVisitors
      type: System.Boolean
      description: Whether existing visitors should be used, if they exist, instead of the exported household&apos;s members
    content.vb: Public Sub Import(household As ExportedHousehold, useExistingVisitors As Boolean = False)
  overload: TinyLife.World.Household.Import*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  id: AreUtilitiesDisabled(System.Nullable{System.TimeSpan})
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: AreUtilitiesDisabled(Nullable<TimeSpan>)
  nameWithType: Household.AreUtilitiesDisabled(Nullable<TimeSpan>)
  fullName: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AreUtilitiesDisabled
    path: ../TinyLife/World/Household.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether power and water should currently be considered disabled for the <xref href=\"TinyLife.World.Household.Lot\" data-throw-if-not-resolved=\"false\"></xref> that this household is on.\nThis method returns true when <xref href=\"TinyLife.World.Household.UnopenedMail\" data-throw-if-not-resolved=\"false\"></xref> has contained a <xref href=\"TinyLife.World.BillsMail\" data-throw-if-not-resolved=\"false\"></xref> for three or more in-game days.\n"
  example: []
  syntax:
    content: public bool AreUtilitiesDisabled(TimeSpan? time = default(TimeSpan? ))
    parameters:
    - id: time
      type: System.Nullable{System.TimeSpan}
      description: The current time, or null to default to <xref href="TinyLife.GameImpl.CurrentTime" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
      description: Whether utilites are disabled
    content.vb: Public Function AreUtilitiesDisabled(time As TimeSpan? = Nothing) As Boolean
  overload: TinyLife.World.Household.AreUtilitiesDisabled*
  nameWithType.vb: Household.AreUtilitiesDisabled(Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Household.AreUtilitiesDisabled(System.Nullable(Of System.TimeSpan))
  name.vb: AreUtilitiesDisabled(Nullable(Of TimeSpan))
- uid: TinyLife.World.Household.IsComplete(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  commentId: M:TinyLife.World.Household.IsComplete(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  id: IsComplete(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  parent: TinyLife.World.Household
  langs:
  - csharp
  - vb
  name: IsComplete(IEnumerable<Person>)
  nameWithType: Household.IsComplete(IEnumerable<Person>)
  fullName: TinyLife.World.Household.IsComplete(System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsComplete
    path: ../TinyLife/World/Household.cs
    startLine: 285
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the current household is sufficiently completed.\nA household is completed if it contains at least one member who is an <xref href=\"TinyLife.Objects.AgeGroup.Adult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool IsComplete(IEnumerable<Person> members)
    parameters:
    - id: members
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: The members that constitute the household.
    return:
      type: System.Boolean
      description: Whether the household is complete.
    content.vb: Public Shared Function IsComplete(members As IEnumerable(Of Person)) As Boolean
  overload: TinyLife.World.Household.IsComplete*
  nameWithType.vb: Household.IsComplete(IEnumerable(Of Person))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Household.IsComplete(System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person))
  name.vb: IsComplete(IEnumerable(Of Person))
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Household.Lot
  commentId: P:TinyLife.World.Household.Lot
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Household>()
  nameWithType: Extensions.JsonCopy<Household>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Household>()
  nameWithType.vb: Extensions.JsonCopy(Of Household)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Household)()
  name.vb: JsonCopy(Of Household)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Household>
    nameWithType: Extensions.JsonCopy<Household>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Household>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Household)
    nameWithType: Extensions.JsonCopy(Of Household)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Household)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.Household.Export(System.Boolean)
  commentId: M:TinyLife.World.Household.Export(System.Boolean)
  isExternal: true
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.World.Household.Money*
  commentId: Overload:TinyLife.World.Household.Money
  name: Money
  nameWithType: Household.Money
  fullName: TinyLife.World.Household.Money
- uid: TinyLife.World.Household.Members*
  commentId: Overload:TinyLife.World.Household.Members
  name: Members
  nameWithType: Household.Members
  fullName: TinyLife.World.Household.Members
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.World.Household.Lot*
  commentId: Overload:TinyLife.World.Household.Lot
  name: Lot
  nameWithType: Household.Lot
  fullName: TinyLife.World.Household.Lot
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.Person.LastName
  commentId: F:TinyLife.Objects.Person.LastName
  isExternal: true
- uid: TinyLife.World.Household.Name*
  commentId: Overload:TinyLife.World.Household.Name
  name: Name
  nameWithType: Household.Name
  fullName: TinyLife.World.Household.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.GameImpl.CurrentHousehold
  commentId: P:TinyLife.GameImpl.CurrentHousehold
  isExternal: true
- uid: TinyLife.World.Household.IsCurrent*
  commentId: Overload:TinyLife.World.Household.IsCurrent
  name: IsCurrent
  nameWithType: Household.IsCurrent
  fullName: TinyLife.World.Household.IsCurrent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.Collections.Generic.HashSet{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Furniture>
  nameWithType: HashSet<Furniture>
  fullName: System.Collections.Generic.HashSet<TinyLife.Objects.Furniture>
  nameWithType.vb: HashSet(Of Furniture)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.Objects.Furniture)
  name.vb: HashSet(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.WornClothes
  commentId: T:TinyLife.Objects.WornClothes
  name: WornClothes
  nameWithType: WornClothes
  fullName: TinyLife.Objects.WornClothes
- uid: System.Collections.Generic.HashSet{TinyLife.Objects.WornClothes}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.Objects.WornClothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<WornClothes>
  nameWithType: HashSet<WornClothes>
  fullName: System.Collections.Generic.HashSet<TinyLife.Objects.WornClothes>
  nameWithType.vb: HashSet(Of WornClothes)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.Objects.WornClothes)
  name.vb: HashSet(Of WornClothes)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Mail
  commentId: T:TinyLife.World.Mail
  parent: TinyLife.World
  name: Mail
  nameWithType: Mail
  fullName: TinyLife.World.Mail
- uid: System.Collections.Generic.List{TinyLife.World.Mail}
  commentId: T:System.Collections.Generic.List{TinyLife.World.Mail}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Mail>
  nameWithType: List<Mail>
  fullName: System.Collections.Generic.List<TinyLife.World.Mail>
  nameWithType.vb: List(Of Mail)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.World.Mail)
  name.vb: List(Of Mail)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Mail
    name: Mail
    nameWithType: Mail
    fullName: TinyLife.World.Mail
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Mail
    name: Mail
    nameWithType: Mail
    fullName: TinyLife.World.Mail
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Household.#ctor*
  commentId: Overload:TinyLife.World.Household.#ctor
  name: Household
  nameWithType: Household.Household
  fullName: TinyLife.World.Household.Household
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.World.Household.Update*
  commentId: Overload:TinyLife.World.Household.Update
  name: Update
  nameWithType: Household.Update
  fullName: TinyLife.World.Household.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Household.Add*
  commentId: Overload:TinyLife.World.Household.Add
  name: Add
  nameWithType: Household.Add
  fullName: TinyLife.World.Household.Add
- uid: TinyLife.World.Household.Remove*
  commentId: Overload:TinyLife.World.Household.Remove
  name: Remove
  nameWithType: Household.Remove
  fullName: TinyLife.World.Household.Remove
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.World.Household.HasMember*
  commentId: Overload:TinyLife.World.Household.HasMember
  name: HasMember
  nameWithType: Household.HasMember
  fullName: TinyLife.World.Household.HasMember
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  commentId: M:TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.World.Household.MarkLotVisible*
  commentId: Overload:TinyLife.World.Household.MarkLotVisible
  name: MarkLotVisible
  nameWithType: Household.MarkLotVisible
  fullName: TinyLife.World.Household.MarkLotVisible
- uid: TinyLife.World.Household.MarkLotNonVisible*
  commentId: Overload:TinyLife.World.Household.MarkLotNonVisible
  name: MarkLotNonVisible
  nameWithType: Household.MarkLotNonVisible
  fullName: TinyLife.World.Household.MarkLotNonVisible
- uid: TinyLife.World.Household.IsLotVisible*
  commentId: Overload:TinyLife.World.Household.IsLotVisible
  name: IsLotVisible
  nameWithType: Household.IsLotVisible
  fullName: TinyLife.World.Household.IsLotVisible
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  isExternal: true
- uid: TinyLife.Relationship.Max
  commentId: F:TinyLife.Relationship.Max
  isExternal: true
- uid: TinyLife.World.Household.GetAverageFriendshipTo*
  commentId: Overload:TinyLife.World.Household.GetAverageFriendshipTo
  name: GetAverageFriendshipTo
  nameWithType: Household.GetAverageFriendshipTo
  fullName: TinyLife.World.Household.GetAverageFriendshipTo
- uid: TinyLife.World.Household.Validate*
  commentId: Overload:TinyLife.World.Household.Validate
  name: Validate
  nameWithType: Household.Validate
  fullName: TinyLife.World.Household.Validate
- uid: TinyLife.World.ExportedHousehold
  commentId: T:TinyLife.World.ExportedHousehold
  parent: TinyLife.World
  name: ExportedHousehold
  nameWithType: ExportedHousehold
  fullName: TinyLife.World.ExportedHousehold
- uid: TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  isExternal: true
- uid: TinyLife.World.Household.DefaultMoney
  commentId: F:TinyLife.World.Household.DefaultMoney
  isExternal: true
- uid: TinyLife.World.Household.Export*
  commentId: Overload:TinyLife.World.Household.Export
  name: Export
  nameWithType: Household.Export
  fullName: TinyLife.World.Household.Export
- uid: TinyLife.World.Household.Members
  commentId: P:TinyLife.World.Household.Members
  isExternal: true
- uid: TinyLife.World.Household.Import*
  commentId: Overload:TinyLife.World.Household.Import
  name: Import
  nameWithType: Household.Import
  fullName: TinyLife.World.Household.Import
- uid: TinyLife.World.Household.UnopenedMail
  commentId: F:TinyLife.World.Household.UnopenedMail
  isExternal: true
- uid: TinyLife.World.BillsMail
  commentId: T:TinyLife.World.BillsMail
  name: BillsMail
  nameWithType: BillsMail
  fullName: TinyLife.World.BillsMail
- uid: TinyLife.GameImpl.CurrentTime
  commentId: P:TinyLife.GameImpl.CurrentTime
  isExternal: true
- uid: TinyLife.World.Household.AreUtilitiesDisabled*
  commentId: Overload:TinyLife.World.Household.AreUtilitiesDisabled
  name: AreUtilitiesDisabled
  nameWithType: Household.AreUtilitiesDisabled
  fullName: TinyLife.World.Household.AreUtilitiesDisabled
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.AgeGroup.Adult
  commentId: F:TinyLife.Objects.AgeGroup.Adult
  isExternal: true
- uid: TinyLife.World.Household.IsComplete*
  commentId: Overload:TinyLife.World.Household.IsComplete
  name: IsComplete
  nameWithType: Household.IsComplete
  fullName: TinyLife.World.Household.IsComplete

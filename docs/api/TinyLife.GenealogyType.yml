### YamlMime:ManagedReference
items:
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  id: GenealogyType
  parent: TinyLife
  children:
  - TinyLife.GenealogyType.Child
  - TinyLife.GenealogyType.DistantlyRelated
  - TinyLife.GenealogyType.Grandchild
  - TinyLife.GenealogyType.Grandparent
  - TinyLife.GenealogyType.Nibling
  - TinyLife.GenealogyType.Parent
  - TinyLife.GenealogyType.Pibling
  - TinyLife.GenealogyType.Sibling
  - TinyLife.GenealogyType.Unrelated
  langs:
  - csharp
  - vb
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
  type: Enum
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GenealogyType
    path: ../TinyLife/Relationship.cs
    startLine: 238
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn enumeration that represents the type that a <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref>&apos;s genealogy can have.\nNote that these typs are deliberately gender-neutral.\n"
  example: []
  syntax:
    content: public enum GenealogyType
    content.vb: Public Enum GenealogyType
  extensionMethods:
  - TinyLife.GenealogyType.TinyLife.Utilities.Extensions.JsonCopy``1
  - TinyLife.GenealogyType.TinyLife.Utilities.Extensions.GetOpposite
  - TinyLife.GenealogyType.TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.Objects.AgeGroup)
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: TinyLife.GenealogyType.Unrelated
  commentId: F:TinyLife.GenealogyType.Unrelated
  id: Unrelated
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Unrelated
  nameWithType: GenealogyType.Unrelated
  fullName: TinyLife.GenealogyType.Unrelated
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Unrelated
    path: ../TinyLife/Relationship.cs
    startLine: 243
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents two unrelated people\n"
  example: []
  syntax:
    content: Unrelated = 0
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Parent
  commentId: F:TinyLife.GenealogyType.Parent
  id: Parent
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: GenealogyType.Parent
  fullName: TinyLife.GenealogyType.Parent
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Parent
    path: ../TinyLife/Relationship.cs
    startLine: 247
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a parent of a <xref href=\"TinyLife.GenealogyType.Child\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Parent = 1
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Child
  commentId: F:TinyLife.GenealogyType.Child
  id: Child
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Child
  nameWithType: GenealogyType.Child
  fullName: TinyLife.GenealogyType.Child
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Child
    path: ../TinyLife/Relationship.cs
    startLine: 251
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a child of a <xref href=\"TinyLife.GenealogyType.Parent\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Child = 2
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Sibling
  commentId: F:TinyLife.GenealogyType.Sibling
  id: Sibling
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Sibling
  nameWithType: GenealogyType.Sibling
  fullName: TinyLife.GenealogyType.Sibling
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Sibling
    path: ../TinyLife/Relationship.cs
    startLine: 255
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a sibling\n"
  example: []
  syntax:
    content: Sibling = 3
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Nibling
  commentId: F:TinyLife.GenealogyType.Nibling
  id: Nibling
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Nibling
  nameWithType: GenealogyType.Nibling
  fullName: TinyLife.GenealogyType.Nibling
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Nibling
    path: ../TinyLife/Relationship.cs
    startLine: 259
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a nibling (niece or nephew) of a <xref href=\"TinyLife.GenealogyType.Pibling\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Nibling = 4
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Pibling
  commentId: F:TinyLife.GenealogyType.Pibling
  id: Pibling
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Pibling
  nameWithType: GenealogyType.Pibling
  fullName: TinyLife.GenealogyType.Pibling
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Pibling
    path: ../TinyLife/Relationship.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a pibling (aunt or uncle) or a <xref href=\"TinyLife.GenealogyType.Nibling\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Pibling = 5
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Grandparent
  commentId: F:TinyLife.GenealogyType.Grandparent
  id: Grandparent
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Grandparent
  nameWithType: GenealogyType.Grandparent
  fullName: TinyLife.GenealogyType.Grandparent
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Grandparent
    path: ../TinyLife/Relationship.cs
    startLine: 267
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a grandparent of a <xref href=\"TinyLife.GenealogyType.Grandchild\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Grandparent = 6
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.Grandchild
  commentId: F:TinyLife.GenealogyType.Grandchild
  id: Grandchild
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: Grandchild
  nameWithType: GenealogyType.Grandchild
  fullName: TinyLife.GenealogyType.Grandchild
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Grandchild
    path: ../TinyLife/Relationship.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents a grandchild of a <xref href=\"TinyLife.GenealogyType.Grandparent\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Grandchild = 7
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.GenealogyType.DistantlyRelated
  commentId: F:TinyLife.GenealogyType.DistantlyRelated
  id: DistantlyRelated
  parent: TinyLife.GenealogyType
  langs:
  - csharp
  - vb
  name: DistantlyRelated
  nameWithType: GenealogyType.DistantlyRelated
  fullName: TinyLife.GenealogyType.DistantlyRelated
  type: Field
  source:
    remote:
      path: TinyLife/Relationship.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DistantlyRelated
    path: ../TinyLife/Relationship.cs
    startLine: 275
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA genealogy type that represents two people that are related by blood in some way, but not in any of the specified ways above\n"
  example: []
  syntax:
    content: DistantlyRelated = 8
    return:
      type: TinyLife.GenealogyType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  parent: TinyLife
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.GenealogyType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<GenealogyType>()
  nameWithType: Extensions.JsonCopy<GenealogyType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.GenealogyType>()
  nameWithType.vb: Extensions.JsonCopy(Of GenealogyType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.GenealogyType)()
  name.vb: JsonCopy(Of GenealogyType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<GenealogyType>
    nameWithType: Extensions.JsonCopy<GenealogyType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.GenealogyType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of GenealogyType)
    nameWithType: Extensions.JsonCopy(Of GenealogyType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.GenealogyType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GenealogyType.TinyLife.Utilities.Extensions.GetOpposite
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  name: GetOpposite()
  nameWithType: Extensions.GetOpposite()
  fullName: TinyLife.Utilities.Extensions.GetOpposite()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetOpposite
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetOpposite
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.GenealogyType.TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  name: IsAgeAppropriate(AgeGroup)
  nameWithType: Extensions.IsAgeAppropriate(AgeGroup)
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.Objects.AgeGroup)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.Objects.AgeGroup)
    name: IsAgeAppropriate
    nameWithType: Extensions.IsAgeAppropriate
    fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.Objects.AgeGroup)
    name: IsAgeAppropriate
    nameWithType: Extensions.IsAgeAppropriate
    fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  commentId: M:TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  name: GetOpposite(GenealogyType)
  nameWithType: Extensions.GetOpposite(GenealogyType)
  fullName: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetOpposite(TinyLife.GenealogyType)
    name: GetOpposite
    nameWithType: Extensions.GetOpposite
    fullName: TinyLife.Utilities.Extensions.GetOpposite
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
  name: IsAgeAppropriate(GenealogyType, AgeGroup)
  nameWithType: Extensions.IsAgeAppropriate(GenealogyType, AgeGroup)
  fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType, TinyLife.Objects.AgeGroup)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
    name: IsAgeAppropriate
    nameWithType: Extensions.IsAgeAppropriate
    fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.IsAgeAppropriate(TinyLife.GenealogyType,TinyLife.Objects.AgeGroup)
    name: IsAgeAppropriate
    nameWithType: Extensions.IsAgeAppropriate
    fullName: TinyLife.Utilities.Extensions.IsAgeAppropriate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.GenealogyType
    name: GenealogyType
    nameWithType: GenealogyType
    fullName: TinyLife.GenealogyType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.GenealogyType
  commentId: T:TinyLife.GenealogyType
  parent: TinyLife
  name: GenealogyType
  nameWithType: GenealogyType
  fullName: TinyLife.GenealogyType
- uid: TinyLife.GenealogyType.Child
  commentId: F:TinyLife.GenealogyType.Child
  isExternal: true
- uid: TinyLife.GenealogyType.Parent
  commentId: F:TinyLife.GenealogyType.Parent
  isExternal: true
- uid: TinyLife.GenealogyType.Pibling
  commentId: F:TinyLife.GenealogyType.Pibling
  isExternal: true
- uid: TinyLife.GenealogyType.Nibling
  commentId: F:TinyLife.GenealogyType.Nibling
  isExternal: true
- uid: TinyLife.GenealogyType.Grandchild
  commentId: F:TinyLife.GenealogyType.Grandchild
  isExternal: true
- uid: TinyLife.GenealogyType.Grandparent
  commentId: F:TinyLife.GenealogyType.Grandparent
  isExternal: true

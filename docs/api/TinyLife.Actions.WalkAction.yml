### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.WalkAction
  commentId: T:TinyLife.Actions.WalkAction
  id: WalkAction
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.WalkAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.WalkAction.DrainEnergy
  - TinyLife.Actions.WalkAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  - TinyLife.Actions.WalkAction.GetSpeed
  - TinyLife.Actions.WalkAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  langs:
  - csharp
  - vb
  name: WalkAction
  nameWithType: WalkAction
  fullName: TinyLife.Actions.WalkAction
  type: Class
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WalkAction
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA walk action is the action that gets executed by <xref href=\"TinyLife.Actions.ActionType.GoHere\" data-throw-if-not-resolved=\"false\"></xref> if the distance is short enough, or before and after driving part of the way to the action location.\n"
  example: []
  syntax:
    content: 'public class WalkAction : PathfindAction, IGenericDataHolder'
    content.vb: >-
      Public Class WalkAction
          Inherits PathfindAction
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Actions.Action
  - TinyLife.Actions.PathfindAction
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Actions.PathfindAction.SpeedMultiplier
  - TinyLife.Actions.PathfindAction.Path
  - TinyLife.Actions.PathfindAction.PathReady
  - TinyLife.Actions.PathfindAction.OnPathReady
  - TinyLife.Actions.PathfindAction.Initialize
  - TinyLife.Actions.PathfindAction.IsCompleted
  - TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.Random
  - TinyLife.Actions.Action.InProgressTime
  - TinyLife.Actions.Action.FullyInProgress
  - TinyLife.Actions.Action.Type
  - TinyLife.Actions.Action.Info
  - TinyLife.Actions.Action.StartedAutomatically
  - TinyLife.Actions.Action.Parent
  - TinyLife.Actions.Action.Map
  - TinyLife.Actions.Action.Person
  - TinyLife.Actions.Action.ElapsedTime
  - TinyLife.Actions.Action.PlayerPromptOpen
  - TinyLife.Actions.Action.ForceResult
  - TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  - TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  - TinyLife.Actions.Action.GetIconObject
  - TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - TinyLife.Actions.Action.GetDisplayName
  - TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  - TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  - TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  - TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  - TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  - TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  - TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  - TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  - TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  - TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  - TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  - TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  - TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  - TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  - TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  - TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  - TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  - TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  - TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Actions.WalkAction.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Actions.WalkAction.DrainEnergy
  commentId: F:TinyLife.Actions.WalkAction.DrainEnergy
  id: DrainEnergy
  parent: TinyLife.Actions.WalkAction
  langs:
  - csharp
  - vb
  name: DrainEnergy
  nameWithType: WalkAction.DrainEnergy
  fullName: TinyLife.Actions.WalkAction.DrainEnergy
  type: Field
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrainEnergy
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 19
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA field that determines whether this walk action should drain the underlying <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.NeedType.Energy\" data-throw-if-not-resolved=\"false\"></xref> need.\nBy default, this value is set to true.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool DrainEnergy
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public DrainEnergy As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.WalkAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.WalkAction.#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)
  id: '#ctor(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo)'
  parent: TinyLife.Actions.WalkAction
  langs:
  - csharp
  - vb
  name: WalkAction(ActionType, ActionInfo)
  nameWithType: WalkAction.WalkAction(ActionType, ActionInfo)
  fullName: TinyLife.Actions.WalkAction.WalkAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new action with the given action information.\n"
  example: []
  syntax:
    content: public WalkAction(ActionType type, ActionInfo info)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type for this action.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The information for this action.
    content.vb: Public Sub New(type As ActionType, info As ActionInfo)
  overload: TinyLife.Actions.WalkAction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.WalkAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.Actions.WalkAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  id: FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  parent: TinyLife.Actions.WalkAction
  langs:
  - csharp
  - vb
  name: FindPath(ICollection<Point>)
  nameWithType: WalkAction.FindPath(ICollection<Point>)
  fullName: TinyLife.Actions.WalkAction.FindPath(System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindPath
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA method called by <xref href=\"TinyLife.Actions.PathfindAction.Initialize\" data-throw-if-not-resolved=\"false\"></xref> to start finding a path to the given goal location.\n"
  example: []
  syntax:
    content: protected override Task<Stack<Point>> FindPath(ICollection<Point> goals)
    parameters:
    - id: goals
      type: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
      description: The goal locations
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
      description: A task that, when finished, returns a path
    content.vb: Protected Overrides Function FindPath(goals As ICollection(Of Point)) As Task(Of Stack(Of Point))
  overridden: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  overload: TinyLife.Actions.WalkAction.FindPath*
  nameWithType.vb: WalkAction.FindPath(ICollection(Of Point))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TinyLife.Actions.WalkAction.FindPath(System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point))
  name.vb: FindPath(ICollection(Of Point))
- uid: TinyLife.Actions.WalkAction.GetSpeed
  commentId: M:TinyLife.Actions.WalkAction.GetSpeed
  id: GetSpeed
  parent: TinyLife.Actions.WalkAction
  langs:
  - csharp
  - vb
  name: GetSpeed()
  nameWithType: WalkAction.GetSpeed()
  fullName: TinyLife.Actions.WalkAction.GetSpeed()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSpeed
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nReturns the speed that the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> should traverse with.\n"
  example: []
  syntax:
    content: protected override float GetSpeed()
    return:
      type: System.Single
      description: The speed
    content.vb: Protected Overrides Function GetSpeed As Single
  overridden: TinyLife.Actions.PathfindAction.GetSpeed
  overload: TinyLife.Actions.WalkAction.GetSpeed*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: TinyLife.Actions.WalkAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.WalkAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.WalkAction
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: WalkAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.WalkAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/WalkAction.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Actions/WalkAction.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThis method is called every update frame if this action is currently active.\nBy default, only the <xref href=\"TinyLife.Actions.Action.ElapsedTime\" data-throw-if-not-resolved=\"false\"></xref> is modified in this method and <xref href=\"TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action%2cMicrosoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public override void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current game time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed, in game time
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overridden: TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  overload: TinyLife.Actions.WalkAction.Update*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TinyLife.Actions.ActionType.GoHere
  commentId: F:TinyLife.Actions.ActionType.GoHere
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.PathfindAction
  commentId: T:TinyLife.Actions.PathfindAction
  parent: TinyLife.Actions
  name: PathfindAction
  nameWithType: PathfindAction
  fullName: TinyLife.Actions.PathfindAction
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Actions.PathfindAction.SpeedMultiplier
  commentId: F:TinyLife.Actions.PathfindAction.SpeedMultiplier
  parent: TinyLife.Actions.PathfindAction
  name: SpeedMultiplier
  nameWithType: PathfindAction.SpeedMultiplier
  fullName: TinyLife.Actions.PathfindAction.SpeedMultiplier
- uid: TinyLife.Actions.PathfindAction.Path
  commentId: P:TinyLife.Actions.PathfindAction.Path
  parent: TinyLife.Actions.PathfindAction
  name: Path
  nameWithType: PathfindAction.Path
  fullName: TinyLife.Actions.PathfindAction.Path
- uid: TinyLife.Actions.PathfindAction.PathReady
  commentId: P:TinyLife.Actions.PathfindAction.PathReady
  parent: TinyLife.Actions.PathfindAction
  name: PathReady
  nameWithType: PathfindAction.PathReady
  fullName: TinyLife.Actions.PathfindAction.PathReady
- uid: TinyLife.Actions.PathfindAction.OnPathReady
  commentId: M:TinyLife.Actions.PathfindAction.OnPathReady
  parent: TinyLife.Actions.PathfindAction
  name: OnPathReady()
  nameWithType: PathfindAction.OnPathReady()
  fullName: TinyLife.Actions.PathfindAction.OnPathReady()
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.OnPathReady
    name: OnPathReady
    nameWithType: PathfindAction.OnPathReady
    fullName: TinyLife.Actions.PathfindAction.OnPathReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.OnPathReady
    name: OnPathReady
    nameWithType: PathfindAction.OnPathReady
    fullName: TinyLife.Actions.PathfindAction.OnPathReady
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.PathfindAction.Initialize
  commentId: M:TinyLife.Actions.PathfindAction.Initialize
  parent: TinyLife.Actions.PathfindAction
  name: Initialize()
  nameWithType: PathfindAction.Initialize()
  fullName: TinyLife.Actions.PathfindAction.Initialize()
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.Initialize
    name: Initialize
    nameWithType: PathfindAction.Initialize
    fullName: TinyLife.Actions.PathfindAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.Initialize
    name: Initialize
    nameWithType: PathfindAction.Initialize
    fullName: TinyLife.Actions.PathfindAction.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.PathfindAction.IsCompleted
  commentId: M:TinyLife.Actions.PathfindAction.IsCompleted
  parent: TinyLife.Actions.PathfindAction
  name: IsCompleted()
  nameWithType: PathfindAction.IsCompleted()
  fullName: TinyLife.Actions.PathfindAction.IsCompleted()
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.IsCompleted
    name: IsCompleted
    nameWithType: PathfindAction.IsCompleted
    fullName: TinyLife.Actions.PathfindAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.IsCompleted
    name: IsCompleted
    nameWithType: PathfindAction.IsCompleted
    fullName: TinyLife.Actions.PathfindAction.IsCompleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.PathfindAction
  name: OnCompleted(CompletionType)
  nameWithType: PathfindAction.OnCompleted(CompletionType)
  fullName: TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: PathfindAction.OnCompleted
    fullName: TinyLife.Actions.PathfindAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.OnCompleted(TinyLife.Actions.CompletionType)
    name: OnCompleted
    nameWithType: PathfindAction.OnCompleted
    fullName: TinyLife.Actions.PathfindAction.OnCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
  parent: TinyLife.Actions.PathfindAction
  name: Validate(Person)
  nameWithType: PathfindAction.Validate(Person)
  fullName: TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: PathfindAction.Validate
    fullName: TinyLife.Actions.PathfindAction.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.Validate(TinyLife.Objects.Person)
    name: Validate
    nameWithType: PathfindAction.Validate
    fullName: TinyLife.Actions.PathfindAction.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.Random
  commentId: F:TinyLife.Actions.Action.Random
  parent: TinyLife.Actions.Action
  name: Random
  nameWithType: Action.Random
  fullName: TinyLife.Actions.Action.Random
- uid: TinyLife.Actions.Action.InProgressTime
  commentId: P:TinyLife.Actions.Action.InProgressTime
  parent: TinyLife.Actions.Action
  name: InProgressTime
  nameWithType: Action.InProgressTime
  fullName: TinyLife.Actions.Action.InProgressTime
- uid: TinyLife.Actions.Action.FullyInProgress
  commentId: P:TinyLife.Actions.Action.FullyInProgress
  parent: TinyLife.Actions.Action
  name: FullyInProgress
  nameWithType: Action.FullyInProgress
  fullName: TinyLife.Actions.Action.FullyInProgress
- uid: TinyLife.Actions.Action.Type
  commentId: F:TinyLife.Actions.Action.Type
  parent: TinyLife.Actions.Action
  name: Type
  nameWithType: Action.Type
  fullName: TinyLife.Actions.Action.Type
- uid: TinyLife.Actions.Action.Info
  commentId: F:TinyLife.Actions.Action.Info
  parent: TinyLife.Actions.Action
  name: Info
  nameWithType: Action.Info
  fullName: TinyLife.Actions.Action.Info
- uid: TinyLife.Actions.Action.StartedAutomatically
  commentId: P:TinyLife.Actions.Action.StartedAutomatically
  parent: TinyLife.Actions.Action
  name: StartedAutomatically
  nameWithType: Action.StartedAutomatically
  fullName: TinyLife.Actions.Action.StartedAutomatically
- uid: TinyLife.Actions.Action.Parent
  commentId: P:TinyLife.Actions.Action.Parent
  parent: TinyLife.Actions.Action
  name: Parent
  nameWithType: Action.Parent
  fullName: TinyLife.Actions.Action.Parent
- uid: TinyLife.Actions.Action.Map
  commentId: P:TinyLife.Actions.Action.Map
  parent: TinyLife.Actions.Action
  name: Map
  nameWithType: Action.Map
  fullName: TinyLife.Actions.Action.Map
- uid: TinyLife.Actions.Action.Person
  commentId: P:TinyLife.Actions.Action.Person
  parent: TinyLife.Actions.Action
  name: Person
  nameWithType: Action.Person
  fullName: TinyLife.Actions.Action.Person
- uid: TinyLife.Actions.Action.ElapsedTime
  commentId: P:TinyLife.Actions.Action.ElapsedTime
  parent: TinyLife.Actions.Action
  name: ElapsedTime
  nameWithType: Action.ElapsedTime
  fullName: TinyLife.Actions.Action.ElapsedTime
- uid: TinyLife.Actions.Action.PlayerPromptOpen
  commentId: P:TinyLife.Actions.Action.PlayerPromptOpen
  parent: TinyLife.Actions.Action
  name: PlayerPromptOpen
  nameWithType: Action.PlayerPromptOpen
  fullName: TinyLife.Actions.Action.PlayerPromptOpen
- uid: TinyLife.Actions.Action.ForceResult
  commentId: F:TinyLife.Actions.Action.ForceResult
  parent: TinyLife.Actions.Action
  name: ForceResult
  nameWithType: Action.ForceResult
  fullName: TinyLife.Actions.Action.ForceResult
- uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  commentId: M:TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: TryForceResult(CompletionType, Nullable<CanExecuteResult>, MapObject)
  nameWithType: Action.TryForceResult(CompletionType, Nullable<CanExecuteResult>, MapObject)
  fullName: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType, System.Nullable<TinyLife.Actions.CanExecuteResult>, TinyLife.Objects.MapObject)
  nameWithType.vb: Action.TryForceResult(CompletionType, Nullable(Of CanExecuteResult), MapObject)
  fullName.vb: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType, System.Nullable(Of TinyLife.Actions.CanExecuteResult), TinyLife.Objects.MapObject)
  name.vb: TryForceResult(CompletionType, Nullable(Of CanExecuteResult), MapObject)
  spec.csharp:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
    name: TryForceResult
    nameWithType: Action.TryForceResult
    fullName: TinyLife.Actions.Action.TryForceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.TryForceResult(TinyLife.Actions.CompletionType,System.Nullable{TinyLife.Actions.CanExecuteResult},TinyLife.Objects.MapObject)
    name: TryForceResult
    nameWithType: Action.TryForceResult
    fullName: TinyLife.Actions.Action.TryForceResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.MapObject
    name: MapObject
    nameWithType: MapObject
    fullName: TinyLife.Objects.MapObject
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action)
  nameWithType: Action.CanMultitask(Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanCancel(Action)
  nameWithType: Action.CanCancel(Action)
  fullName: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: Action.CanCancel
    fullName: TinyLife.Actions.Action.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: Action.CanCancel
    fullName: TinyLife.Actions.Action.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  commentId: M:TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  parent: TinyLife.Actions.Action
  name: GetNextAction(CompletionType)
  nameWithType: Action.GetNextAction(CompletionType)
  fullName: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetNextAction(TinyLife.Actions.CompletionType)
    name: GetNextAction
    nameWithType: Action.GetNextAction
    fullName: TinyLife.Actions.Action.GetNextAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetIconObject
  commentId: M:TinyLife.Actions.Action.GetIconObject
  parent: TinyLife.Actions.Action
  name: GetIconObject()
  nameWithType: Action.GetIconObject()
  fullName: TinyLife.Actions.Action.GetIconObject()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetIconObject
    name: GetIconObject
    nameWithType: Action.GetIconObject
    fullName: TinyLife.Actions.Action.GetIconObject
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  commentId: M:TinyLife.Actions.Action.CausesExtremelyFastSpeed
  parent: TinyLife.Actions.Action
  name: CausesExtremelyFastSpeed()
  nameWithType: Action.CausesExtremelyFastSpeed()
  fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed()
  spec.csharp:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
    nameWithType: Action.CausesExtremelyFastSpeed
    fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CausesExtremelyFastSpeed
    name: CausesExtremelyFastSpeed
    nameWithType: Action.CausesExtremelyFastSpeed
    fullName: TinyLife.Actions.Action.CausesExtremelyFastSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetDisplayName
  commentId: M:TinyLife.Actions.Action.GetDisplayName
  parent: TinyLife.Actions.Action
  name: GetDisplayName()
  nameWithType: Action.GetDisplayName()
  fullName: TinyLife.Actions.Action.GetDisplayName()
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetDisplayName
    name: GetDisplayName
    nameWithType: Action.GetDisplayName
    fullName: TinyLife.Actions.Action.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
  parent: TinyLife.Actions.Action
  name: CanEnqueueConversation(Person, ActionType)
  nameWithType: Action.CanEnqueueConversation(Person, ActionType)
  fullName: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person, TinyLife.Actions.ActionType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
    nameWithType: Action.CanEnqueueConversation
    fullName: TinyLife.Actions.Action.CanEnqueueConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanEnqueueConversation(TinyLife.Objects.Person,TinyLife.Actions.ActionType)
    name: CanEnqueueConversation
    nameWithType: Action.CanEnqueueConversation
    fullName: TinyLife.Actions.Action.CanEnqueueConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  nameWithType: Action.OpenPlayerPrompt(String, Predicate<Panel>, Action<Panel>, Boolean, Func<CoveringGroup, IEnumerable<Element>>, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate<MLEM.Ui.Elements.Panel>, System.Action<MLEM.Ui.Elements.Panel>, System.Boolean, System.Func<TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable<MLEM.Ui.Elements.Element>>, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenPlayerPrompt(System.String, System.Predicate(Of MLEM.Ui.Elements.Panel), System.Action(Of MLEM.Ui.Elements.Panel), System.Boolean, System.Func(Of TinyLife.Uis.CoveringGroup, System.Collections.Generic.IEnumerable(Of MLEM.Ui.Elements.Element)), MLEM.Textures.TextureRegion)
  name.vb: OpenPlayerPrompt(String, Predicate(Of Panel), Action(Of Panel), Boolean, Func(Of CoveringGroup, IEnumerable(Of Element)), TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
    nameWithType: Action.OpenPlayerPrompt
    fullName: TinyLife.Actions.Action.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenPlayerPrompt(System.String,System.Predicate{MLEM.Ui.Elements.Panel},System.Action{MLEM.Ui.Elements.Panel},System.Boolean,System.Func{TinyLife.Uis.CoveringGroup,System.Collections.Generic.IEnumerable{MLEM.Ui.Elements.Element}},MLEM.Textures.TextureRegion)
    name: OpenPlayerPrompt
    nameWithType: Action.OpenPlayerPrompt
    fullName: TinyLife.Actions.Action.OpenPlayerPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Panel
    name: Panel
    nameWithType: Panel
    fullName: MLEM.Ui.Elements.Panel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Uis.CoveringGroup
    name: CoveringGroup
    nameWithType: CoveringGroup
    fullName: TinyLife.Uis.CoveringGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Ui.Elements.Element
    name: Element
    nameWithType: Element
    fullName: MLEM.Ui.Elements.Element
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: OpenYesNoPrompt(String, Action, Action, TextureRegion)
  nameWithType: Action.OpenYesNoPrompt(String, Action, Action, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenYesNoPrompt(System.String, System.Action, System.Action, MLEM.Textures.TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
    name: OpenYesNoPrompt
    nameWithType: Action.OpenYesNoPrompt
    fullName: TinyLife.Actions.Action.OpenYesNoPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenYesNoPrompt(System.String,System.Action,System.Action,MLEM.Textures.TextureRegion)
    name: OpenYesNoPrompt
    nameWithType: Action.OpenYesNoPrompt
    fullName: TinyLife.Actions.Action.OpenYesNoPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String, TextureRegion)
  nameWithType: Action.OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String, TextureRegion)
  fullName: TinyLife.Actions.Action.OpenTextPrompt(System.String, System.Action<System.String>, System.Predicate<System.String>, MLEM.Ui.Elements.TextField.Rule, System.String, MLEM.Textures.TextureRegion)
  nameWithType.vb: Action.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, TextureRegion)
  fullName.vb: TinyLife.Actions.Action.OpenTextPrompt(System.String, System.Action(Of System.String), System.Predicate(Of System.String), MLEM.Ui.Elements.TextField.Rule, System.String, MLEM.Textures.TextureRegion)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String, TextureRegion)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
    nameWithType: Action.OpenTextPrompt
    fullName: TinyLife.Actions.Action.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String,MLEM.Textures.TextureRegion)
    name: OpenTextPrompt
    nameWithType: Action.OpenTextPrompt
    fullName: TinyLife.Actions.Action.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  commentId: M:TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  parent: TinyLife.Actions.Action
  name: OpenChoicePrompt(ChoicePromptInfo)
  nameWithType: Action.OpenChoicePrompt(ChoicePromptInfo)
  fullName: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
    name: OpenChoicePrompt
    nameWithType: Action.OpenChoicePrompt
    fullName: TinyLife.Actions.Action.OpenChoicePrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.OpenChoicePrompt(TinyLife.ChoicePromptInfo)
    name: OpenChoicePrompt
    nameWithType: Action.OpenChoicePrompt
    fullName: TinyLife.Actions.Action.OpenChoicePrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  nameWithType: Action.SpeakAlone(GameTime, Single, EmoteCategory, SpeakStyle, Int32)
  fullName: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Int32)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
    nameWithType: Action.SpeakAlone
    fullName: TinyLife.Actions.Action.SpeakAlone
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakAlone(Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Int32)
    name: SpeakAlone
    nameWithType: Action.SpeakAlone
    fullName: TinyLife.Actions.Action.SpeakAlone
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  commentId: M:TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  nameWithType: Action.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable<EmoteCategory>, Nullable<SpeakStyle>, Int32)
  fullName: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable<TinyLife.Actions.EmoteCategory>, System.Nullable<TinyLife.Objects.SpeakStyle>, System.Int32)
  nameWithType.vb: Action.SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
  fullName.vb: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person, Microsoft.Xna.Framework.GameTime, System.Single, TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Nullable(Of TinyLife.Actions.EmoteCategory), System.Nullable(Of TinyLife.Objects.SpeakStyle), System.Int32)
  name.vb: SpeakInConversation(Person, GameTime, Single, EmoteCategory, SpeakStyle, Nullable(Of EmoteCategory), Nullable(Of SpeakStyle), Int32)
  spec.csharp:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
    nameWithType: Action.SpeakInConversation
    fullName: TinyLife.Actions.Action.SpeakInConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.SpeakInConversation(TinyLife.Objects.Person,Microsoft.Xna.Framework.GameTime,System.Single,TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Nullable{TinyLife.Actions.EmoteCategory},System.Nullable{TinyLife.Objects.SpeakStyle},System.Int32)
    name: SpeakInConversation
    nameWithType: Action.SpeakInConversation
    fullName: TinyLife.Actions.Action.SpeakInConversation
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.EmoteCategory
    name: EmoteCategory
    nameWithType: EmoteCategory
    fullName: TinyLife.Actions.EmoteCategory
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  parent: TinyLife.Actions.Action
  name: FacePartner(Person)
  nameWithType: Action.FacePartner(Person)
  fullName: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
    name: FacePartner
    nameWithType: Action.FacePartner
    fullName: TinyLife.Actions.Action.FacePartner
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FacePartner(TinyLife.Objects.Person)
    name: FacePartner
    nameWithType: Action.FacePartner
    fullName: TinyLife.Actions.Action.FacePartner
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  commentId: M:TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  parent: TinyLife.Actions.Action
  name: CompleteIfNeedFull(NeedType)
  nameWithType: Action.CompleteIfNeedFull(NeedType)
  fullName: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
    name: CompleteIfNeedFull
    nameWithType: Action.CompleteIfNeedFull
    fullName: TinyLife.Actions.Action.CompleteIfNeedFull
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CompleteIfNeedFull(TinyLife.NeedType)
    name: CompleteIfNeedFull
    nameWithType: Action.CompleteIfNeedFull
    fullName: TinyLife.Actions.Action.CompleteIfNeedFull
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  commentId: M:TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  nameWithType: Action.CompleteIfTimeUp(TimeSpan, Boolean, SkillType, Single, Boolean)
  fullName: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan, System.Boolean, TinyLife.Skills.SkillType, System.Single, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteIfTimeUp
    nameWithType: Action.CompleteIfTimeUp
    fullName: TinyLife.Actions.Action.CompleteIfTimeUp
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CompleteIfTimeUp(System.TimeSpan,System.Boolean,TinyLife.Skills.SkillType,System.Single,System.Boolean)
    name: CompleteIfTimeUp
    nameWithType: Action.CompleteIfTimeUp
    fullName: TinyLife.Actions.Action.CompleteIfTimeUp
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  commentId: M:TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  parent: TinyLife.Actions.Action
  name: CancelIfEmotional(EmotionType[])
  nameWithType: Action.CancelIfEmotional(EmotionType[])
  fullName: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
  nameWithType.vb: Action.CancelIfEmotional(EmotionType())
  fullName.vb: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType())
  name.vb: CancelIfEmotional(EmotionType())
  spec.csharp:
  - uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
    name: CancelIfEmotional
    nameWithType: Action.CancelIfEmotional
    fullName: TinyLife.Actions.Action.CancelIfEmotional
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    nameWithType: EmotionType
    fullName: TinyLife.Emotions.EmotionType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CancelIfEmotional(TinyLife.Emotions.EmotionType[])
    name: CancelIfEmotional
    nameWithType: Action.CancelIfEmotional
    fullName: TinyLife.Actions.Action.CancelIfEmotional
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Emotions.EmotionType
    name: EmotionType
    nameWithType: EmotionType
    fullName: TinyLife.Emotions.EmotionType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, ObjectCategory, ObjectCategory, Boolean)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, TinyLife.Objects.ObjectCategory, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
    name: PickUpAndGoTo
    nameWithType: Action.PickUpAndGoTo
    fullName: TinyLife.Actions.Action.PickUpAndGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,TinyLife.Objects.ObjectCategory,System.Boolean)
    name: PickUpAndGoTo
    nameWithType: Action.PickUpAndGoTo
    fullName: TinyLife.Actions.Action.PickUpAndGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  commentId: M:TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: PickUpAndGoTo(ActionInfo, Func<Furniture, Boolean>, Func<Furniture, Boolean>, Boolean)
  nameWithType: Action.PickUpAndGoTo(ActionInfo, Func<Furniture, Boolean>, Func<Furniture, Boolean>, Boolean)
  fullName: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func<TinyLife.Objects.Furniture, System.Boolean>, System.Func<TinyLife.Objects.Furniture, System.Boolean>, System.Boolean)
  nameWithType.vb: Action.PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
  fullName.vb: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo, System.Func(Of TinyLife.Objects.Furniture, System.Boolean), System.Func(Of TinyLife.Objects.Furniture, System.Boolean), System.Boolean)
  name.vb: PickUpAndGoTo(ActionInfo, Func(Of Furniture, Boolean), Func(Of Furniture, Boolean), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
    name: PickUpAndGoTo
    nameWithType: Action.PickUpAndGoTo
    fullName: TinyLife.Actions.Action.PickUpAndGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.PickUpAndGoTo(TinyLife.Actions.ActionInfo,System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Func{TinyLife.Objects.Furniture,System.Boolean},System.Boolean)
    name: PickUpAndGoTo
    nameWithType: Action.PickUpAndGoTo
    fullName: TinyLife.Actions.Action.PickUpAndGoTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Sit(Furniture, Single, ActionSpot)
  nameWithType: Action.Sit(Furniture, Single, ActionSpot)
  fullName: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture, System.Single, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: Action.Sit
    fullName: TinyLife.Actions.Action.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Sit(TinyLife.Objects.Furniture,System.Single,TinyLife.Objects.ActionSpot)
    name: Sit
    nameWithType: Action.Sit
    fullName: TinyLife.Actions.Action.Sit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  commentId: M:TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
  parent: TinyLife.Actions.Action
  name: GetFreeChair(Person, Furniture)
  nameWithType: Action.GetFreeChair(Person, Furniture)
  fullName: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person, TinyLife.Objects.Furniture)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: Action.GetFreeChair
    fullName: TinyLife.Actions.Action.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChair(TinyLife.Objects.Person,TinyLife.Objects.Furniture)
    name: GetFreeChair
    nameWithType: Action.GetFreeChair
    fullName: TinyLife.Actions.Action.GetFreeChair
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  commentId: M:TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
  parent: TinyLife.Actions.Action
  isExternal: true
  name: GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  nameWithType: Action.GetFreeChairs(Person, Furniture, Func<Direction2, Boolean>)
  fullName: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func<MLEM.Misc.Direction2, System.Boolean>)
  nameWithType.vb: Action.GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  fullName.vb: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person, TinyLife.Objects.Furniture, System.Func(Of MLEM.Misc.Direction2, System.Boolean))
  name.vb: GetFreeChairs(Person, Furniture, Func(Of Direction2, Boolean))
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
    nameWithType: Action.GetFreeChairs
    fullName: TinyLife.Actions.Action.GetFreeChairs
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetFreeChairs(TinyLife.Objects.Person,TinyLife.Objects.Furniture,System.Func{MLEM.Misc.Direction2,System.Boolean})
    name: GetFreeChairs
    nameWithType: Action.GetFreeChairs
    fullName: TinyLife.Actions.Action.GetFreeChairs
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreePeople(Person, ActionType, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: Action.FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreePeople(Person, ActionType, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreePeople
    nameWithType: Action.FindAllFreePeople
    fullName: TinyLife.Actions.Action.FindAllFreePeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreePeople(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreePeople
    nameWithType: Action.FindAllFreePeople
    fullName: TinyLife.Actions.Action.FindAllFreePeople
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  nameWithType: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable<Vector2>, Nullable<Single>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean, System.Boolean)
  nameWithType.vb: Action.FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean, System.Boolean)
  name.vb: FindAllFreeFurniture(Person, ObjectCategory, FurnitureType, Boolean, Nullable(Of Vector2), Nullable(Of Single), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: Action.FindAllFreeFurniture
    fullName: TinyLife.Actions.Action.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean,System.Boolean)
    name: FindAllFreeFurniture
    nameWithType: Action.FindAllFreeFurniture
    fullName: TinyLife.Actions.Action.FindAllFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreeWalls(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: Action.FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeWalls(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: Action.FindAllFreeWalls
    fullName: TinyLife.Actions.Action.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeWalls(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeWalls
    nameWithType: Action.FindAllFreeWalls
    fullName: TinyLife.Actions.Action.FindAllFreeWalls
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  nameWithType: Action.FindAllFreeGround(Person, Nullable<Vector2>, Nullable<Single>, Boolean)
  fullName: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Nullable<System.Single>, System.Boolean)
  nameWithType.vb: Action.FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  fullName.vb: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Nullable(Of System.Single), System.Boolean)
  name.vb: FindAllFreeGround(Person, Nullable(Of Vector2), Nullable(Of Single), Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
    nameWithType: Action.FindAllFreeGround
    fullName: TinyLife.Actions.Action.FindAllFreeGround
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllFreeGround(TinyLife.Objects.Person,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Single},System.Boolean)
    name: FindAllFreeGround
    nameWithType: Action.FindAllFreeGround
    fullName: TinyLife.Actions.Action.FindAllFreeGround
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  nameWithType.vb: Action.FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory, TinyLife.Objects.FurnitureType, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindFreeFurniture(Person, ObjectCategory, FurnitureType, Nullable(Of Vector2), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: Action.FindFreeFurniture
    fullName: TinyLife.Actions.Action.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindFreeFurniture(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory,TinyLife.Objects.FurnitureType,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindFreeFurniture
    nameWithType: Action.FindFreeFurniture
    fullName: TinyLife.Actions.Action.FindFreeFurniture
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  commentId: M:TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindAllActionObjects(Person, ActionType, Nullable<Vector2>)
  nameWithType: Action.FindAllActionObjects(Person, ActionType, Nullable<Vector2>)
  fullName: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable<Microsoft.Xna.Framework.Vector2>)
  nameWithType.vb: Action.FindAllActionObjects(Person, ActionType, Nullable(Of Vector2))
  fullName.vb: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Nullable(Of Microsoft.Xna.Framework.Vector2))
  name.vb: FindAllActionObjects(Person, ActionType, Nullable(Of Vector2))
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
    nameWithType: Action.FindAllActionObjects
    fullName: TinyLife.Actions.Action.FindAllActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindAllActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Nullable{Microsoft.Xna.Framework.Vector2})
    name: FindAllActionObjects
    nameWithType: Action.FindAllActionObjects
    fullName: TinyLife.Actions.Action.FindAllActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: FindValidActionObjects(Person, ActionType, Boolean, Nullable<Vector2>, Boolean, Boolean)
  nameWithType: Action.FindValidActionObjects(Person, ActionType, Boolean, Nullable<Vector2>, Boolean, Boolean)
  fullName: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Boolean, System.Nullable<Microsoft.Xna.Framework.Vector2>, System.Boolean, System.Boolean)
  nameWithType.vb: Action.FindValidActionObjects(Person, ActionType, Boolean, Nullable(Of Vector2), Boolean, Boolean)
  fullName.vb: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person, TinyLife.Actions.ActionType, System.Boolean, System.Nullable(Of Microsoft.Xna.Framework.Vector2), System.Boolean, System.Boolean)
  name.vb: FindValidActionObjects(Person, ActionType, Boolean, Nullable(Of Vector2), Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindValidActionObjects
    nameWithType: Action.FindValidActionObjects
    fullName: TinyLife.Actions.Action.FindValidActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.FindValidActionObjects(TinyLife.Objects.Person,TinyLife.Actions.ActionType,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Boolean,System.Boolean)
    name: FindValidActionObjects
    nameWithType: Action.FindValidActionObjects
    fullName: TinyLife.Actions.Action.FindValidActionObjects
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  nameWithType: Action.GetRandomVariety(IEnumerable<ActionVariety>, ActionInfo)
  fullName: TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>, TinyLife.Actions.ActionInfo)
  nameWithType.vb: Action.GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
  fullName.vb: TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety), TinyLife.Actions.ActionInfo)
  name.vb: GetRandomVariety(IEnumerable(Of ActionVariety), ActionInfo)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomVariety
    nameWithType: Action.GetRandomVariety
    fullName: TinyLife.Actions.Action.GetRandomVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetRandomVariety(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety},TinyLife.Actions.ActionInfo)
    name: GetRandomVariety
    nameWithType: Action.GetRandomVariety
    fullName: TinyLife.Actions.Action.GetRandomVariety
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  commentId: M:TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
  parent: TinyLife.Actions.Action
  name: GetTableSpot(Furniture, ActionSpot)
  nameWithType: Action.GetTableSpot(Furniture, ActionSpot)
  fullName: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  spec.csharp:
  - uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
    nameWithType: Action.GetTableSpot
    fullName: TinyLife.Actions.Action.GetTableSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.GetTableSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot)
    name: GetTableSpot
    nameWithType: Action.GetTableSpot
    fullName: TinyLife.Actions.Action.GetTableSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  commentId: M:TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
  parent: TinyLife.Actions.Action
  isExternal: true
  name: InvokeForBoth(Person, Person, Action<Person, Person>)
  nameWithType: Action.InvokeForBoth(Person, Person, Action<Person, Person>)
  fullName: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action<TinyLife.Objects.Person, TinyLife.Objects.Person>)
  nameWithType.vb: Action.InvokeForBoth(Person, Person, Action(Of Person, Person))
  fullName.vb: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person, TinyLife.Objects.Person, System.Action(Of TinyLife.Objects.Person, TinyLife.Objects.Person))
  name.vb: InvokeForBoth(Person, Person, Action(Of Person, Person))
  spec.csharp:
  - uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: Action.InvokeForBoth
    fullName: TinyLife.Actions.Action.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.InvokeForBoth(TinyLife.Objects.Person,TinyLife.Objects.Person,System.Action{TinyLife.Objects.Person,TinyLife.Objects.Person})
    name: InvokeForBoth
    nameWithType: Action.InvokeForBoth
    fullName: TinyLife.Actions.Action.InvokeForBoth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanMultitask(Action, Action)
  nameWithType: Action.CanMultitask(Action, Action)
  fullName: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action, TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanMultitask(TinyLife.Actions.Action,TinyLife.Actions.Action)
    name: CanMultitask
    nameWithType: Action.CanMultitask
    fullName: TinyLife.Actions.Action.CanMultitask
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.WalkAction.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<WalkAction>()
  nameWithType: Extensions.JsonCopy<WalkAction>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.WalkAction>()
  nameWithType.vb: Extensions.JsonCopy(Of WalkAction)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.WalkAction)()
  name.vb: JsonCopy(Of WalkAction)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<WalkAction>
    nameWithType: Extensions.JsonCopy<WalkAction>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.WalkAction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of WalkAction)
    nameWithType: Extensions.JsonCopy(Of WalkAction)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.WalkAction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.NeedType.Energy
  commentId: F:TinyLife.NeedType.Energy
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Actions.WalkAction.#ctor*
  commentId: Overload:TinyLife.Actions.WalkAction.#ctor
  name: WalkAction
  nameWithType: WalkAction.WalkAction
  fullName: TinyLife.Actions.WalkAction.WalkAction
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  commentId: M:TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
  parent: TinyLife.Actions.PathfindAction
  isExternal: true
  name: FindPath(ICollection<Point>)
  nameWithType: PathfindAction.FindPath(ICollection<Point>)
  fullName: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>)
  nameWithType.vb: PathfindAction.FindPath(ICollection(Of Point))
  fullName.vb: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point))
  name.vb: FindPath(ICollection(Of Point))
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
    name: FindPath
    nameWithType: PathfindAction.FindPath
    fullName: TinyLife.Actions.PathfindAction.FindPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.FindPath(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point})
    name: FindPath
    nameWithType: PathfindAction.FindPath
    fullName: TinyLife.Actions.PathfindAction.FindPath
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.WalkAction.FindPath*
  commentId: Overload:TinyLife.Actions.WalkAction.FindPath
  name: FindPath
  nameWithType: WalkAction.FindPath
  fullName: TinyLife.Actions.WalkAction.FindPath
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Point>
  nameWithType: ICollection<Point>
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>
  nameWithType.vb: ICollection(Of Point)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point)
  name.vb: ICollection(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stack<Point>>
  nameWithType: Task<Stack<Point>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Stack<Microsoft.Xna.Framework.Point>>
  nameWithType.vb: Task(Of Stack(Of Point))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Stack(Of Microsoft.Xna.Framework.Point))
  name.vb: Task(Of Stack(Of Point))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TinyLife.Actions.PathfindAction.GetSpeed
  commentId: M:TinyLife.Actions.PathfindAction.GetSpeed
  parent: TinyLife.Actions.PathfindAction
  name: GetSpeed()
  nameWithType: PathfindAction.GetSpeed()
  fullName: TinyLife.Actions.PathfindAction.GetSpeed()
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.GetSpeed
    name: GetSpeed
    nameWithType: PathfindAction.GetSpeed
    fullName: TinyLife.Actions.PathfindAction.GetSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.GetSpeed
    name: GetSpeed
    nameWithType: PathfindAction.GetSpeed
    fullName: TinyLife.Actions.PathfindAction.GetSpeed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.WalkAction.GetSpeed*
  commentId: Overload:TinyLife.Actions.WalkAction.GetSpeed
  name: GetSpeed
  nameWithType: WalkAction.GetSpeed
  fullName: TinyLife.Actions.WalkAction.GetSpeed
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.PathfindAction
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: PathfindAction.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: PathfindAction.Update
    fullName: TinyLife.Actions.PathfindAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.PathfindAction.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: PathfindAction.Update
    fullName: TinyLife.Actions.PathfindAction.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.WalkAction.Update*
  commentId: Overload:TinyLife.Actions.WalkAction.Update
  name: Update
  nameWithType: WalkAction.Update
  fullName: TinyLife.Actions.WalkAction.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework

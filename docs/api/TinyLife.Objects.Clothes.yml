### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Clothes
  commentId: T:TinyLife.Objects.Clothes
  id: Clothes
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  - TinyLife.Objects.Clothes.Ages
  - TinyLife.Objects.Clothes.AllIntentions
  - TinyLife.Objects.Clothes.Colors
  - TinyLife.Objects.Clothes.DepthFunction
  - TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  - TinyLife.Objects.Clothes.GetPrice
  - TinyLife.Objects.Clothes.Icon
  - TinyLife.Objects.Clothes.Intentions
  - TinyLife.Objects.Clothes.Layer
  - TinyLife.Objects.Clothes.Layers
  - TinyLife.Objects.Clothes.Name
  - TinyLife.Objects.Clothes.NonBuyable
  - TinyLife.Objects.Clothes.Price
  - TinyLife.Objects.Clothes.RandomColorWeight
  - TinyLife.Objects.Clothes.RandomWeight
  - TinyLife.Objects.Clothes.ReferencePrice
  - TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  - TinyLife.Objects.Clothes.TextureBehaviorLayer
  - TinyLife.Objects.Clothes.TextureRegions
  - TinyLife.Objects.Clothes.Types
  langs:
  - csharp
  - vb
  name: Clothes
  nameWithType: Clothes
  fullName: TinyLife.Objects.Clothes
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Clothes
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of information and a registry for clothing items (and hair) that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can wear.\nCustom clothes can be registered using <xref href=\"TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<Clothes>), new object[]{typeof(Clothes), "PrivateTypes"})]

      public class Clothes : IPricedObject
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of Clothes)), New Object() {GetType(Clothes), "PrivateTypes"})>

      Public Class Clothes
          Implements IPricedObject
  inheritance:
  - System.Object
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Clothes.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Clothes.Types
  commentId: F:TinyLife.Objects.Clothes.Types
  id: Types
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: Clothes.Types
  fullName: TinyLife.Objects.Clothes.Types
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA registry that contains all <xref href=\"TinyLife.Objects.Clothes\" data-throw-if-not-resolved=\"false\"></xref> in the game and all mods\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, Clothes> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.Clothes}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, Clothes)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Layers
  commentId: F:TinyLife.Objects.Clothes.Layers
  id: Layers
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Layers
  nameWithType: Clothes.Layers
  fullName: TinyLife.Objects.Clothes.Layers
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Layers
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of all valid <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> values\n"
  example: []
  syntax:
    content: public static readonly ClothesLayer[] Layers
    return:
      type: TinyLife.Objects.ClothesLayer[]
    content.vb: Public Shared ReadOnly Layers As ClothesLayer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Clothes.AllIntentions
  commentId: F:TinyLife.Objects.Clothes.AllIntentions
  id: AllIntentions
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: AllIntentions
  nameWithType: Clothes.AllIntentions
  fullName: TinyLife.Objects.Clothes.AllIntentions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllIntentions
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of all valid <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> values\n"
  example: []
  syntax:
    content: public static readonly ClothesIntention[] AllIntentions
    return:
      type: TinyLife.Objects.ClothesIntention[]
    content.vb: Public Shared ReadOnly AllIntentions As ClothesIntention()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Clothes.ReferencePrice
  commentId: F:TinyLife.Objects.Clothes.ReferencePrice
  id: ReferencePrice
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: ReferencePrice
  nameWithType: Clothes.ReferencePrice
  fullName: TinyLife.Objects.Clothes.ReferencePrice
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ReferencePrice
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe reference price for a piece of clothing.\nWhen clothes items are randomly chosen for a new <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, the items chosen will be guaranteed to have a price equal to or below this value.\n"
  example: []
  syntax:
    content: public const int ReferencePrice = 50
    return:
      type: System.Int32
    content.vb: Public Const ReferencePrice As Integer = 50
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Objects.Clothes.Name
  commentId: F:TinyLife.Objects.Clothes.Name
  id: Name
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Clothes.Name
  fullName: TinyLife.Objects.Clothes.Name
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 216
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe name of this clothes item.\nSince this is used for the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry, the name must be unique across mods.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Layer
  commentId: F:TinyLife.Objects.Clothes.Layer
  id: Layer
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Layer
  nameWithType: Clothes.Layer
  fullName: TinyLife.Objects.Clothes.Layer
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Layer
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 220
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> that this clothes item should render on\n"
  example: []
  syntax:
    content: public readonly ClothesLayer Layer
    return:
      type: TinyLife.Objects.ClothesLayer
    content.vb: Public ReadOnly Layer As ClothesLayer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.TextureRegions
  commentId: F:TinyLife.Objects.Clothes.TextureRegions
  id: TextureRegions
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: TextureRegions
  nameWithType: Clothes.TextureRegions
  fullName: TinyLife.Objects.Clothes.TextureRegions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TextureRegions
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 226
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"MLEM.Textures.TextureRegion\" data-throw-if-not-resolved=\"false\"></xref> that this clothes item uses in the world.\nThe texture region specified in the constructor only needs to cover the top left animation frame of the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, any remaining frames will automatically be gathered.\nMultiple layers will be gathered if <xref href=\"TinyLife.Objects.Clothes.Colors\" data-throw-if-not-resolved=\"false\"></xref> has multiple entries. Each new layer will be gathered to the right of the passed region&apos;s area.\n"
  example: []
  syntax:
    content: public readonly TextureRegion[] TextureRegions
    return:
      type: MLEM.Textures.TextureRegion[]
    content.vb: Public ReadOnly TextureRegions As TextureRegion()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Colors
  commentId: F:TinyLife.Objects.Clothes.Colors
  id: Colors
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Clothes.Colors
  fullName: TinyLife.Objects.Clothes.Colors
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 231
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe set of <xref href=\"TinyLife.Utilities.ColorScheme\" data-throw-if-not-resolved=\"false\"></xref>s that this clothes item can have its colors selected from.\nThe color scheme at index i will be mapped to the <xref href=\"TinyLife.Objects.Clothes.TextureRegions\" data-throw-if-not-resolved=\"false\"></xref> entry at index i.\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] Colors
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly Colors As ColorScheme()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Price
  commentId: F:TinyLife.Objects.Clothes.Price
  id: Price
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Clothes.Price
  fullName: TinyLife.Objects.Clothes.Price
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 236
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe price of this piece of clothing.\nUse <xref href=\"TinyLife.Objects.Clothes.GetPrice\" data-throw-if-not-resolved=\"false\"></xref> to retrieve this value for consistency.\n"
  example: []
  syntax:
    content: public readonly float Price
    return:
      type: System.Single
    content.vb: Public ReadOnly Price As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Intentions
  commentId: F:TinyLife.Objects.Clothes.Intentions
  id: Intentions
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Intentions
  nameWithType: Clothes.Intentions
  fullName: TinyLife.Objects.Clothes.Intentions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intentions
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 240
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> flags that determine what this clothes item can be used for.\n"
  example: []
  syntax:
    content: public readonly ClothesIntention Intentions
    return:
      type: TinyLife.Objects.ClothesIntention
    content.vb: Public ReadOnly Intentions As ClothesIntention
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Clothes.Icon
  commentId: P:TinyLife.Objects.Clothes.Icon
  id: Icon
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Clothes.Icon
  fullName: TinyLife.Objects.Clothes.Icon
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 245
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe character creator icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the character creator button for this object.\n"
  example: []
  syntax:
    content: public TextureRegion Icon { get; set; }
    parameters: []
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public Property Icon As TextureRegion
  overload: TinyLife.Objects.Clothes.Icon*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.NonBuyable
  commentId: P:TinyLife.Objects.Clothes.NonBuyable
  id: NonBuyable
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: NonBuyable
  nameWithType: Clothes.NonBuyable
  fullName: TinyLife.Objects.Clothes.NonBuyable
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NonBuyable
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis value determines whether this clothes item can be bought in the character creator.\nIf this value is false, the only way for this clothes item to be visible in the character creator is by adding it to the <xref href=\"TinyLife.World.Household.ClothesStorage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool NonBuyable { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property NonBuyable As Boolean
  overload: TinyLife.Objects.Clothes.NonBuyable*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.Ages
  commentId: P:TinyLife.Objects.Clothes.Ages
  id: Ages
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Ages
  nameWithType: Clothes.Ages
  fullName: TinyLife.Objects.Clothes.Ages
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Ages
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 255
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe age groups that are allowed to wear these clothes.\nDefaults to <xref href=\"TinyLife.Objects.AgeGroup.Adult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AgeGroup Ages { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public Property Ages As AgeGroup
  overload: TinyLife.Objects.Clothes.Ages*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.DepthFunction
  commentId: P:TinyLife.Objects.Clothes.DepthFunction
  id: DepthFunction
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: DepthFunction
  nameWithType: Clothes.DepthFunction
  fullName: TinyLife.Objects.Clothes.DepthFunction
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DepthFunction
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 260
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that determines the depth with which this clothes item is rendered based on the given <xref href=\"TinyLife.Objects.Person.Pose\" data-throw-if-not-resolved=\"false\"></xref>.\nThis function defaults to returning <xref href=\"TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<Person.Pose, Direction2, float> DepthFunction { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Person.Pose,MLEM.Misc.Direction2,System.Single}
    content.vb: Public Property DepthFunction As Func(Of Person.Pose, Direction2, Single)
  overload: TinyLife.Objects.Clothes.DepthFunction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.TextureBehaviorLayer
  commentId: P:TinyLife.Objects.Clothes.TextureBehaviorLayer
  id: TextureBehaviorLayer
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: TextureBehaviorLayer
  nameWithType: Clothes.TextureBehaviorLayer
  fullName: TinyLife.Objects.Clothes.TextureBehaviorLayer
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TextureBehaviorLayer
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 265
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> whose texture behavior should be used instead of the <xref href=\"TinyLife.Objects.Clothes.Layer\" data-throw-if-not-resolved=\"false\"></xref>&apos;s texture behavior.\nThe texture behavior determines how many texture regions a clothes item uses, and whether they are animated in a certain <xref href=\"TinyLife.Objects.Person.Pose\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see https://docs.tinylifegame.com/articles/creating_textures.html.\n"
  example: []
  syntax:
    content: public ClothesLayer? TextureBehaviorLayer { get; set; }
    parameters: []
    return:
      type: System.Nullable{TinyLife.Objects.ClothesLayer}
    content.vb: Public Property TextureBehaviorLayer As ClothesLayer?
  overload: TinyLife.Objects.Clothes.TextureBehaviorLayer*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.RandomWeight
  commentId: P:TinyLife.Objects.Clothes.RandomWeight
  id: RandomWeight
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: RandomWeight
  nameWithType: Clothes.RandomWeight
  fullName: TinyLife.Objects.Clothes.RandomWeight
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RandomWeight
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 271
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn optional function that determines the weight that this clothing item has when randomly generating an <xref href=\"TinyLife.Objects.Outfit\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThe higher the weight is, the more likely it is for this item to be chosen for an outfit.\nThe default weight for a clothing item is 3 if any of the outfit&apos;s <xref href=\"TinyLife.Objects.Outfit.Intentions\" data-throw-if-not-resolved=\"false\"></xref> match the clothing item&apos;s <xref href=\"TinyLife.Objects.Clothes.Intentions\" data-throw-if-not-resolved=\"false\"></xref>, and 1 otherwise.\n"
  example: []
  syntax:
    content: public Func<Clothes, Outfit, float> RandomWeight { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Clothes,TinyLife.Objects.Outfit,System.Single}
    content.vb: Public Property RandomWeight As Func(Of Clothes, Outfit, Single)
  overload: TinyLife.Objects.Clothes.RandomWeight*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.RandomColorWeight
  commentId: P:TinyLife.Objects.Clothes.RandomColorWeight
  id: RandomColorWeight
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: RandomColorWeight
  nameWithType: Clothes.RandomColorWeight
  fullName: TinyLife.Objects.Clothes.RandomColorWeight
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RandomColorWeight
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 276
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn optional function that determines the weight that this clothing item&apos;s given color index has when randomly generating an <xref href=\"TinyLife.Objects.Outfit\" data-throw-if-not-resolved=\"false\"></xref> for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThe default weight for each clothing item&apos;s color is 1, and the higher the weight is, the more likely it is for the color to be chosen for an outfit.\n"
  example: []
  syntax:
    content: public Func<Clothes, ColorScheme, int, float> RandomColorWeight { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.Objects.Clothes,TinyLife.Utilities.ColorScheme,System.Int32,System.Single}
    content.vb: Public Property RandomColorWeight As Func(Of Clothes, ColorScheme, Integer, Single)
  overload: TinyLife.Objects.Clothes.RandomColorWeight*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  commentId: M:TinyLife.Objects.Clothes.#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])
  id: '#ctor(System.String,TinyLife.Objects.ClothesLayer,MLEM.Textures.TextureRegion,System.Single,TinyLife.Objects.ClothesIntention,TinyLife.Utilities.ColorScheme[])'
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme[])
  nameWithType: Clothes.Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme[])
  fullName: TinyLife.Objects.Clothes.Clothes(System.String, TinyLife.Objects.ClothesLayer, MLEM.Textures.TextureRegion, System.Single, TinyLife.Objects.ClothesIntention, TinyLife.Utilities.ColorScheme[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 287
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new clothes item with the given data\n"
  example: []
  syntax:
    content: public Clothes(string name, ClothesLayer layer, TextureRegion region, float price, ClothesIntention intentions, params ColorScheme[] colors)
    parameters:
    - id: name
      type: System.String
      description: The name of this clothes item
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The <xref href="TinyLife.Objects.ClothesLayer" data-throw-if-not-resolved="false"></xref> that this clothes item should render on
    - id: region
      type: MLEM.Textures.TextureRegion
      description: The top left (standing frame 1) <xref href="MLEM.Textures.TextureRegion" data-throw-if-not-resolved="false"></xref> that this clothes item uses in the world
    - id: price
      type: System.Single
      description: The price of this piece of clothing
    - id: intentions
      type: TinyLife.Objects.ClothesIntention
      description: A set of <xref href="TinyLife.Objects.ClothesIntention" data-throw-if-not-resolved="false"></xref> flags that determine what this clothes item can be used for
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The <xref href="TinyLife.Utilities.ColorScheme" data-throw-if-not-resolved="false"></xref> that this clothes item can have its colors selected from
    content.vb: Public Sub New(name As String, layer As ClothesLayer, region As TextureRegion, price As Single, intentions As ClothesIntention, ParamArray colors As ColorScheme())
  overload: TinyLife.Objects.Clothes.#ctor*
  nameWithType.vb: Clothes.Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Clothes.Clothes(System.String, TinyLife.Objects.ClothesLayer, MLEM.Textures.TextureRegion, System.Single, TinyLife.Objects.ClothesIntention, TinyLife.Utilities.ColorScheme())
  name.vb: Clothes(String, ClothesLayer, TextureRegion, Single, ClothesIntention, ColorScheme())
- uid: TinyLife.Objects.Clothes.GetPrice
  commentId: M:TinyLife.Objects.Clothes.GetPrice
  id: GetPrice
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Clothes.GetPrice()
  fullName: TinyLife.Objects.Clothes.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 311
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.Objects.Clothes.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  commentId: M:TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  id: Register(TinyLife.Objects.Clothes)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: Register(Clothes)
  nameWithType: Clothes.Register(Clothes)
  fullName: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 319
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRegister the given clothes instance to the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static void Register(Clothes clothes)
    parameters:
    - id: clothes
      type: TinyLife.Objects.Clothes
      description: The clothes to register
    content.vb: Public Shared Sub Register(clothes As Clothes)
  overload: TinyLife.Objects.Clothes.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  id: GetClothes(TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup)
  parent: TinyLife.Objects.Clothes
  langs:
  - csharp
  - vb
  name: GetClothes(ClothesLayer, AgeGroup)
  nameWithType: Clothes.GetClothes(ClothesLayer, AgeGroup)
  fullName: TinyLife.Objects.Clothes.GetClothes(TinyLife.Objects.ClothesLayer, TinyLife.Objects.AgeGroup)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetClothes
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 330
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the clothes from the <xref href=\"TinyLife.Objects.Clothes.Types\" data-throw-if-not-resolved=\"false\"></xref> registry that match the given <xref href=\"TinyLife.Objects.Clothes.Layer\" data-throw-if-not-resolved=\"false\"></xref> and optionally match the required <xref href=\"TinyLife.Objects.Clothes.Ages\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IEnumerable<Clothes> GetClothes(ClothesLayer layer, AgeGroup age = (AgeGroup)0)
    parameters:
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The layer
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The required ages, or 0 to allow all ages
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
      description: The clothes that match
    content.vb: Public Shared Function GetClothes(layer As ClothesLayer, age As AgeGroup = CType(0, AgeGroup)) As IEnumerable(Of Clothes)
  overload: TinyLife.Objects.Clothes.GetClothes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  commentId: M:TinyLife.Objects.Clothes.Register(TinyLife.Objects.Clothes)
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Clothes>()
  nameWithType: Extensions.JsonCopy<Clothes>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Clothes>()
  nameWithType.vb: Extensions.JsonCopy(Of Clothes)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Clothes)()
  name.vb: JsonCopy(Of Clothes)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Clothes>
    nameWithType: Extensions.JsonCopy<Clothes>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Clothes>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Clothes)
    nameWithType: Extensions.JsonCopy(Of Clothes)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Clothes)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Clothes
  commentId: T:TinyLife.Objects.Clothes
  parent: TinyLife.Objects
  name: Clothes
  nameWithType: Clothes
  fullName: TinyLife.Objects.Clothes
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.Clothes}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Objects.Clothes}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, Clothes>
  nameWithType: ReadOnlyDictionary<String, Clothes>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Objects.Clothes>
  nameWithType.vb: ReadOnlyDictionary(Of String, Clothes)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Objects.Clothes)
  name.vb: ReadOnlyDictionary(Of String, Clothes)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: TinyLife.Objects.ClothesLayer[]
  isExternal: true
  name: ClothesLayer[]
  nameWithType: ClothesLayer[]
  fullName: TinyLife.Objects.ClothesLayer[]
  nameWithType.vb: ClothesLayer()
  fullName.vb: TinyLife.Objects.ClothesLayer()
  name.vb: ClothesLayer()
  spec.csharp:
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.ClothesIntention[]
  isExternal: true
  name: ClothesIntention[]
  nameWithType: ClothesIntention[]
  fullName: TinyLife.Objects.ClothesIntention[]
  nameWithType.vb: ClothesIntention()
  fullName.vb: TinyLife.Objects.ClothesIntention()
  name.vb: ClothesIntention()
  spec.csharp:
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    nameWithType: ClothesIntention
    fullName: TinyLife.Objects.ClothesIntention
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    nameWithType: ClothesIntention
    fullName: TinyLife.Objects.ClothesIntention
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.Clothes.Types
  commentId: F:TinyLife.Objects.Clothes.Types
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: TinyLife.Objects.Clothes.Colors
  commentId: F:TinyLife.Objects.Clothes.Colors
  isExternal: true
- uid: MLEM.Textures.TextureRegion[]
  isExternal: true
  name: TextureRegion[]
  nameWithType: TextureRegion[]
  fullName: MLEM.Textures.TextureRegion[]
  nameWithType.vb: TextureRegion()
  fullName.vb: MLEM.Textures.TextureRegion()
  name.vb: TextureRegion()
  spec.csharp:
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: TinyLife.Objects.Clothes.TextureRegions
  commentId: F:TinyLife.Objects.Clothes.TextureRegions
  isExternal: true
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Clothes.GetPrice
  commentId: M:TinyLife.Objects.Clothes.GetPrice
  isExternal: true
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.Clothes.Icon*
  commentId: Overload:TinyLife.Objects.Clothes.Icon
  name: Icon
  nameWithType: Clothes.Icon
  fullName: TinyLife.Objects.Clothes.Icon
- uid: TinyLife.World.Household.ClothesStorage
  commentId: F:TinyLife.World.Household.ClothesStorage
  isExternal: true
- uid: TinyLife.Objects.Clothes.NonBuyable*
  commentId: Overload:TinyLife.Objects.Clothes.NonBuyable
  name: NonBuyable
  nameWithType: Clothes.NonBuyable
  fullName: TinyLife.Objects.Clothes.NonBuyable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.AgeGroup.Adult
  commentId: F:TinyLife.Objects.AgeGroup.Adult
  isExternal: true
- uid: TinyLife.Objects.Clothes.Ages*
  commentId: Overload:TinyLife.Objects.Clothes.Ages
  name: Ages
  nameWithType: Clothes.Ages
  fullName: TinyLife.Objects.Clothes.Ages
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Objects.Person.Pose
  commentId: T:TinyLife.Objects.Person.Pose
  parent: TinyLife.Objects
  name: Person.Pose
  nameWithType: Person.Pose
  fullName: TinyLife.Objects.Person.Pose
- uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  commentId: M:TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  name: GetDepth(ClothesLayer)
  nameWithType: Extensions.GetDepth(ClothesLayer)
  fullName: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
    name: GetDepth
    nameWithType: Extensions.GetDepth
    fullName: TinyLife.Utilities.Extensions.GetDepth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetDepth(TinyLife.Objects.ClothesLayer)
    name: GetDepth
    nameWithType: Extensions.GetDepth
    fullName: TinyLife.Utilities.Extensions.GetDepth
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.DepthFunction*
  commentId: Overload:TinyLife.Objects.Clothes.DepthFunction
  name: DepthFunction
  nameWithType: Clothes.DepthFunction
  fullName: TinyLife.Objects.Clothes.DepthFunction
- uid: System.Func{TinyLife.Objects.Person.Pose,MLEM.Misc.Direction2,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person.Pose,MLEM.Misc.Direction2,System.Single}
  parent: System
  definition: System.Func`3
  name: Func<Person.Pose, Direction2, Single>
  nameWithType: Func<Person.Pose, Direction2, Single>
  fullName: System.Func<TinyLife.Objects.Person.Pose, MLEM.Misc.Direction2, System.Single>
  nameWithType.vb: Func(Of Person.Pose, Direction2, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person.Pose, MLEM.Misc.Direction2, System.Single)
  name.vb: Func(Of Person.Pose, Direction2, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person.Pose
    name: Person.Pose
    nameWithType: Person.Pose
    fullName: TinyLife.Objects.Person.Pose
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person.Pose
    name: Person.Pose
    nameWithType: Person.Pose
    fullName: TinyLife.Objects.Person.Pose
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.Layer
  commentId: F:TinyLife.Objects.Clothes.Layer
  isExternal: true
- uid: TinyLife.Objects.Clothes.TextureBehaviorLayer*
  commentId: Overload:TinyLife.Objects.Clothes.TextureBehaviorLayer
  name: TextureBehaviorLayer
  nameWithType: Clothes.TextureBehaviorLayer
  fullName: TinyLife.Objects.Clothes.TextureBehaviorLayer
- uid: System.Nullable{TinyLife.Objects.ClothesLayer}
  commentId: T:System.Nullable{TinyLife.Objects.ClothesLayer}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ClothesLayer>
  nameWithType: Nullable<ClothesLayer>
  fullName: System.Nullable<TinyLife.Objects.ClothesLayer>
  nameWithType.vb: Nullable(Of ClothesLayer)
  fullName.vb: System.Nullable(Of TinyLife.Objects.ClothesLayer)
  name.vb: Nullable(Of ClothesLayer)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Outfit
  commentId: T:TinyLife.Objects.Outfit
  parent: TinyLife.Objects
  name: Outfit
  nameWithType: Outfit
  fullName: TinyLife.Objects.Outfit
- uid: TinyLife.Objects.Outfit.Intentions
  commentId: F:TinyLife.Objects.Outfit.Intentions
  isExternal: true
- uid: TinyLife.Objects.Clothes.Intentions
  commentId: F:TinyLife.Objects.Clothes.Intentions
  isExternal: true
- uid: TinyLife.Objects.Clothes.RandomWeight*
  commentId: Overload:TinyLife.Objects.Clothes.RandomWeight
  name: RandomWeight
  nameWithType: Clothes.RandomWeight
  fullName: TinyLife.Objects.Clothes.RandomWeight
- uid: System.Func{TinyLife.Objects.Clothes,TinyLife.Objects.Outfit,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Clothes,TinyLife.Objects.Outfit,System.Single}
  parent: System
  definition: System.Func`3
  name: Func<Clothes, Outfit, Single>
  nameWithType: Func<Clothes, Outfit, Single>
  fullName: System.Func<TinyLife.Objects.Clothes, TinyLife.Objects.Outfit, System.Single>
  nameWithType.vb: Func(Of Clothes, Outfit, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Clothes, TinyLife.Objects.Outfit, System.Single)
  name.vb: Func(Of Clothes, Outfit, Single)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Outfit
    name: Outfit
    nameWithType: Outfit
    fullName: TinyLife.Objects.Outfit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Outfit
    name: Outfit
    nameWithType: Outfit
    fullName: TinyLife.Objects.Outfit
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.RandomColorWeight*
  commentId: Overload:TinyLife.Objects.Clothes.RandomColorWeight
  name: RandomColorWeight
  nameWithType: Clothes.RandomColorWeight
  fullName: TinyLife.Objects.Clothes.RandomColorWeight
- uid: System.Func{TinyLife.Objects.Clothes,TinyLife.Utilities.ColorScheme,System.Int32,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Clothes,TinyLife.Utilities.ColorScheme,System.Int32,System.Single}
  parent: System
  definition: System.Func`4
  name: Func<Clothes, ColorScheme, Int32, Single>
  nameWithType: Func<Clothes, ColorScheme, Int32, Single>
  fullName: System.Func<TinyLife.Objects.Clothes, TinyLife.Utilities.ColorScheme, System.Int32, System.Single>
  nameWithType.vb: Func(Of Clothes, ColorScheme, Int32, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Clothes, TinyLife.Utilities.ColorScheme, System.Int32, System.Single)
  name.vb: Func(Of Clothes, ColorScheme, Int32, Single)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.#ctor*
  commentId: Overload:TinyLife.Objects.Clothes.#ctor
  name: Clothes
  nameWithType: Clothes.Clothes
  fullName: TinyLife.Objects.Clothes.Clothes
- uid: TinyLife.Objects.Clothes.GetPrice*
  commentId: Overload:TinyLife.Objects.Clothes.GetPrice
  name: GetPrice
  nameWithType: Clothes.GetPrice
  fullName: TinyLife.Objects.Clothes.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Clothes.Register*
  commentId: Overload:TinyLife.Objects.Clothes.Register
  name: Register
  nameWithType: Clothes.Register
  fullName: TinyLife.Objects.Clothes.Register
- uid: TinyLife.Objects.Clothes.Ages
  commentId: P:TinyLife.Objects.Clothes.Ages
  isExternal: true
- uid: TinyLife.Objects.Clothes.GetClothes*
  commentId: Overload:TinyLife.Objects.Clothes.GetClothes
  name: GetClothes
  nameWithType: Clothes.GetClothes
  fullName: TinyLife.Objects.Clothes.GetClothes
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Clothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Clothes>
  nameWithType: IEnumerable<Clothes>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Clothes>
  nameWithType.vb: IEnumerable(Of Clothes)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Clothes)
  name.vb: IEnumerable(Of Clothes)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic

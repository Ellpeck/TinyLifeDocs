### YamlMime:ManagedReference
items:
- uid: TinyLife.ChoicePromptInfo.Option
  commentId: T:TinyLife.ChoicePromptInfo.Option
  id: ChoicePromptInfo.Option
  parent: TinyLife
  children:
  - TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Func{TinyLife.Objects.Person,System.Single})
  - TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single})
  - TinyLife.ChoicePromptInfo.Option.#ctor(System.String,TinyLife.Emotions.EmotionType,TinyLife.Skills.SkillType,System.Single,System.Single,System.Single)
  - TinyLife.ChoicePromptInfo.Option.Execute(TinyLife.ChoicePromptInfo,TinyLife.Objects.Person,System.Boolean)
  - TinyLife.ChoicePromptInfo.Option.FailAction
  - TinyLife.ChoicePromptInfo.Option.Name
  - TinyLife.ChoicePromptInfo.Option.SuccessAction
  - TinyLife.ChoicePromptInfo.Option.SuccessChance
  langs:
  - csharp
  - vb
  name: ChoicePromptInfo.Option
  nameWithType: ChoicePromptInfo.Option
  fullName: TinyLife.ChoicePromptInfo.Option
  type: Class
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Option
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 71
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nAn option is a possible action and outcome for a <xref href=\"TinyLife.ChoicePromptInfo\" data-throw-if-not-resolved=\"false\"></xref>. It is randomly chosen to be correct or incorrect, based on a multitude of factors that can be specified in the constructors.\n"
  example: []
  syntax:
    content: public class Option
    content.vb: Public Class Option
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.ChoicePromptInfo.Option.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.ChoicePromptInfo.Option.Name
  commentId: F:TinyLife.ChoicePromptInfo.Option.Name
  id: Name
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ChoicePromptInfo.Option.Name
  fullName: TinyLife.ChoicePromptInfo.Option.Name
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis option&apos;s name, which will be localized.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.ChoicePromptInfo.Option.SuccessAction
  commentId: F:TinyLife.ChoicePromptInfo.Option.SuccessAction
  id: SuccessAction
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: SuccessAction
  nameWithType: ChoicePromptInfo.Option.SuccessAction
  fullName: TinyLife.ChoicePromptInfo.Option.SuccessAction
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SuccessAction
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe action that should be invoked when this option is chosen as the correct option when the player selects it.\n"
  example: []
  syntax:
    content: public readonly Action<ChoicePromptInfo, Person> SuccessAction
    return:
      type: System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
    content.vb: Public ReadOnly SuccessAction As Action(Of ChoicePromptInfo, Person)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.ChoicePromptInfo.Option.FailAction
  commentId: F:TinyLife.ChoicePromptInfo.Option.FailAction
  id: FailAction
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: FailAction
  nameWithType: ChoicePromptInfo.Option.FailAction
  fullName: TinyLife.ChoicePromptInfo.Option.FailAction
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FailAction
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe action that should be invoked when this option is chosen as the incorrect option when the player selects it.\n"
  example: []
  syntax:
    content: public readonly Action<ChoicePromptInfo, Person> FailAction
    return:
      type: System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
    content.vb: Public ReadOnly FailAction As Action(Of ChoicePromptInfo, Person)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.ChoicePromptInfo.Option.SuccessChance
  commentId: F:TinyLife.ChoicePromptInfo.Option.SuccessChance
  id: SuccessChance
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: SuccessChance
  nameWithType: ChoicePromptInfo.Option.SuccessChance
  fullName: TinyLife.ChoicePromptInfo.Option.SuccessChance
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SuccessChance
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA function that determines the success change of this choice prompt option once it&apos;s chosen, which is expected to be a value between 0 and 1.\n"
  example: []
  syntax:
    content: public readonly Func<Person, float> SuccessChance
    return:
      type: System.Func{TinyLife.Objects.Person,System.Single}
    content.vb: Public ReadOnly SuccessChance As Func(Of Person, Single)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Func{TinyLife.Objects.Person,System.Single})
  commentId: M:TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Func{TinyLife.Objects.Person,System.Single})
  id: '#ctor(System.String,System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person},System.Func{TinyLife.Objects.Person,System.Single})'
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: Option(String, Action<ChoicePromptInfo, Person>, Action<ChoicePromptInfo, Person>, Func<Person, Single>)
  nameWithType: ChoicePromptInfo.Option.Option(String, Action<ChoicePromptInfo, Person>, Action<ChoicePromptInfo, Person>, Func<Person, Single>)
  fullName: TinyLife.ChoicePromptInfo.Option.Option(System.String, System.Action<TinyLife.ChoicePromptInfo, TinyLife.Objects.Person>, System.Action<TinyLife.ChoicePromptInfo, TinyLife.Objects.Person>, System.Func<TinyLife.Objects.Person, System.Single>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 97
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new option with the given generic settings.\n"
  example: []
  syntax:
    content: public Option(string name, Action<ChoicePromptInfo, Person> successAction, Action<ChoicePromptInfo, Person> failAction, Func<Person, float> successChance)
    parameters:
    - id: name
      type: System.String
      description: This option&apos;s name, which will be localized.
    - id: successAction
      type: System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
      description: The action that should be invoked when this option is chosen as the correct option when the player selects it.
    - id: failAction
      type: System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
      description: The action that should be invoked when this option is chosen as the incorrect option when the player selects it.
    - id: successChance
      type: System.Func{TinyLife.Objects.Person,System.Single}
      description: A function that determines the success change of this choice prompt option once it&apos;s chosen, which is expected to be a value between 0 and 1.
    content.vb: Public Sub New(name As String, successAction As Action(Of ChoicePromptInfo, Person), failAction As Action(Of ChoicePromptInfo, Person), successChance As Func(Of Person, Single))
  overload: TinyLife.ChoicePromptInfo.Option.#ctor*
  nameWithType.vb: ChoicePromptInfo.Option.Option(String, Action(Of ChoicePromptInfo, Person), Action(Of ChoicePromptInfo, Person), Func(Of Person, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.ChoicePromptInfo.Option.Option(System.String, System.Action(Of TinyLife.ChoicePromptInfo, TinyLife.Objects.Person), System.Action(Of TinyLife.ChoicePromptInfo, TinyLife.Objects.Person), System.Func(Of TinyLife.Objects.Person, System.Single))
  name.vb: Option(String, Action(Of ChoicePromptInfo, Person), Action(Of ChoicePromptInfo, Person), Func(Of Person, Single))
- uid: TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single})
  commentId: M:TinyLife.ChoicePromptInfo.Option.#ctor(System.String,System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single})
  id: '#ctor(System.String,System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single},System.Func{TinyLife.Objects.Person,System.Single})'
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: Option(String, Func<Person, Single>, Func<Person, Single>, Func<Person, Single>)
  nameWithType: ChoicePromptInfo.Option.Option(String, Func<Person, Single>, Func<Person, Single>, Func<Person, Single>)
  fullName: TinyLife.ChoicePromptInfo.Option.Option(System.String, System.Func<TinyLife.Objects.Person, System.Single>, System.Func<TinyLife.Objects.Person, System.Single>, System.Func<TinyLife.Objects.Person, System.Single>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new option with the given job-related outcomes.\n"
  example: []
  syntax:
    content: public Option(string name, Func<Person, float> jobPerformanceGained, Func<Person, float> jobPerformanceLost, Func<Person, float> successChance)
    parameters:
    - id: name
      type: System.String
      description: This option&apos;s name, which will be localized.
    - id: jobPerformanceGained
      type: System.Func{TinyLife.Objects.Person,System.Single}
      description: A function that returns the amount of job performance that should be gained when the correct option is selected by the player.
    - id: jobPerformanceLost
      type: System.Func{TinyLife.Objects.Person,System.Single}
      description: A function that returns the amount of job performance that should be lost when the incorrect option is selected by the player.
    - id: successChance
      type: System.Func{TinyLife.Objects.Person,System.Single}
      description: A function that determines the success change of this choice prompt option once it&apos;s chosen, which is expected to be a value between 0 and 1.
    content.vb: Public Sub New(name As String, jobPerformanceGained As Func(Of Person, Single), jobPerformanceLost As Func(Of Person, Single), successChance As Func(Of Person, Single))
  overload: TinyLife.ChoicePromptInfo.Option.#ctor*
  nameWithType.vb: ChoicePromptInfo.Option.Option(String, Func(Of Person, Single), Func(Of Person, Single), Func(Of Person, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.ChoicePromptInfo.Option.Option(System.String, System.Func(Of TinyLife.Objects.Person, System.Single), System.Func(Of TinyLife.Objects.Person, System.Single), System.Func(Of TinyLife.Objects.Person, System.Single))
  name.vb: Option(String, Func(Of Person, Single), Func(Of Person, Single), Func(Of Person, Single))
- uid: TinyLife.ChoicePromptInfo.Option.#ctor(System.String,TinyLife.Emotions.EmotionType,TinyLife.Skills.SkillType,System.Single,System.Single,System.Single)
  commentId: M:TinyLife.ChoicePromptInfo.Option.#ctor(System.String,TinyLife.Emotions.EmotionType,TinyLife.Skills.SkillType,System.Single,System.Single,System.Single)
  id: '#ctor(System.String,TinyLife.Emotions.EmotionType,TinyLife.Skills.SkillType,System.Single,System.Single,System.Single)'
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: Option(String, EmotionType, SkillType, Single, Single, Single)
  nameWithType: ChoicePromptInfo.Option.Option(String, EmotionType, SkillType, Single, Single, Single)
  fullName: TinyLife.ChoicePromptInfo.Option.Option(System.String, TinyLife.Emotions.EmotionType, TinyLife.Skills.SkillType, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 139
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new option with the given job-related outcomes.\n"
  example: []
  syntax:
    content: public Option(string name, EmotionType successIncreaseEmotion = null, SkillType successIncreaseSkill = null, float jobPerformanceGained = 0.1F, float jobPerformanceLost = 0.1F, float successChance = 0.4F)
    parameters:
    - id: name
      type: System.String
      description: This option&apos;s name, which will be localized.
    - id: successIncreaseEmotion
      type: TinyLife.Emotions.EmotionType
      description: An emotion that optionally increases the success chance of this option.
    - id: successIncreaseSkill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally increases the success chance of this option.
    - id: jobPerformanceGained
      type: System.Single
      description: The amount of job performance that should be gained when the correct option is selected by the player.
    - id: jobPerformanceLost
      type: System.Single
      description: The amount of job performance that should be lost when the incorrect option is selected by the player.
    - id: successChance
      type: System.Single
      description: The success chance of this option, which is expected to be a value between 0 and 1.
    content.vb: Public Sub New(name As String, successIncreaseEmotion As EmotionType = Nothing, successIncreaseSkill As SkillType = Nothing, jobPerformanceGained As Single = 0.1F, jobPerformanceLost As Single = 0.1F, successChance As Single = 0.4F)
  overload: TinyLife.ChoicePromptInfo.Option.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.ChoicePromptInfo.Option.Execute(TinyLife.ChoicePromptInfo,TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.ChoicePromptInfo.Option.Execute(TinyLife.ChoicePromptInfo,TinyLife.Objects.Person,System.Boolean)
  id: Execute(TinyLife.ChoicePromptInfo,TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.ChoicePromptInfo.Option
  langs:
  - csharp
  - vb
  name: Execute(ChoicePromptInfo, Person, Boolean)
  nameWithType: ChoicePromptInfo.Option.Execute(ChoicePromptInfo, Person, Boolean)
  fullName: TinyLife.ChoicePromptInfo.Option.Execute(TinyLife.ChoicePromptInfo, TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/ChoicePromptInfo.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Execute
    path: ../TinyLife/Actions/ChoicePromptInfo.cs
    startLine: 155
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nExecutes this option&apos;s result actions using the given <xref href=\"TinyLife.ChoicePromptInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Execute(ChoicePromptInfo info, Person person, bool successful)
    parameters:
    - id: info
      type: TinyLife.ChoicePromptInfo
      description: The choice prompt that this option was a part of.
    - id: person
      type: TinyLife.Objects.Person
      description: The person that should be affected by this option&apos;s outcome.
    - id: successful
      type: System.Boolean
      description: Whether this option was chosen as the successful one.
    content.vb: Public Sub Execute(info As ChoicePromptInfo, person As Person, successful As Boolean)
  overload: TinyLife.ChoicePromptInfo.Option.Execute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.ChoicePromptInfo
  commentId: T:TinyLife.ChoicePromptInfo
  parent: TinyLife
  name: ChoicePromptInfo
  nameWithType: ChoicePromptInfo
  fullName: TinyLife.ChoicePromptInfo
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.ChoicePromptInfo.Option.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ChoicePromptInfo.Option>()
  nameWithType: Extensions.JsonCopy<ChoicePromptInfo.Option>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.ChoicePromptInfo.Option>()
  nameWithType.vb: Extensions.JsonCopy(Of ChoicePromptInfo.Option)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.ChoicePromptInfo.Option)()
  name.vb: JsonCopy(Of ChoicePromptInfo.Option)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ChoicePromptInfo.Option>
    nameWithType: Extensions.JsonCopy<ChoicePromptInfo.Option>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.ChoicePromptInfo.Option>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ChoicePromptInfo.Option)
    nameWithType: Extensions.JsonCopy(Of ChoicePromptInfo.Option)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.ChoicePromptInfo.Option)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.ChoicePromptInfo,TinyLife.Objects.Person}
  parent: System
  definition: System.Action`2
  name: Action<ChoicePromptInfo, Person>
  nameWithType: Action<ChoicePromptInfo, Person>
  fullName: System.Action<TinyLife.ChoicePromptInfo, TinyLife.Objects.Person>
  nameWithType.vb: Action(Of ChoicePromptInfo, Person)
  fullName.vb: System.Action(Of TinyLife.ChoicePromptInfo, TinyLife.Objects.Person)
  name.vb: Action(Of ChoicePromptInfo, Person)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Objects.Person,System.Single}
  commentId: T:System.Func{TinyLife.Objects.Person,System.Single}
  parent: System
  definition: System.Func`2
  name: Func<Person, Single>
  nameWithType: Func<Person, Single>
  fullName: System.Func<TinyLife.Objects.Person, System.Single>
  nameWithType.vb: Func(Of Person, Single)
  fullName.vb: System.Func(Of TinyLife.Objects.Person, System.Single)
  name.vb: Func(Of Person, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.ChoicePromptInfo.Option.#ctor*
  commentId: Overload:TinyLife.ChoicePromptInfo.Option.#ctor
  name: Option
  nameWithType: ChoicePromptInfo.Option.Option
  fullName: TinyLife.ChoicePromptInfo.Option.Option
- uid: TinyLife.Emotions.EmotionType
  commentId: T:TinyLife.Emotions.EmotionType
  parent: TinyLife.Emotions
  name: EmotionType
  nameWithType: EmotionType
  fullName: TinyLife.Emotions.EmotionType
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.ChoicePromptInfo.Option.Execute*
  commentId: Overload:TinyLife.ChoicePromptInfo.Option.Execute
  name: Execute
  nameWithType: ChoicePromptInfo.Option.Execute
  fullName: TinyLife.ChoicePromptInfo.Option.Execute
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects

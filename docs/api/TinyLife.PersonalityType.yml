### YamlMime:ManagedReference
items:
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  id: PersonalityType
  parent: TinyLife
  children:
  - TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion)
  - TinyLife.PersonalityType.AllowedAges
  - TinyLife.PersonalityType.Ambitious
  - TinyLife.PersonalityType.Aromantic
  - TinyLife.PersonalityType.Asexual
  - TinyLife.PersonalityType.BoostedSkills
  - TinyLife.PersonalityType.BoostedSkillTypes
  - TinyLife.PersonalityType.CapableCarpenter
  - TinyLife.PersonalityType.Category
  - TinyLife.PersonalityType.ComputerAddict
  - TinyLife.PersonalityType.Creative
  - TinyLife.PersonalityType.Energetic
  - TinyLife.PersonalityType.Extroverted
  - TinyLife.PersonalityType.FamilyFocused
  - TinyLife.PersonalityType.Foodie
  - TinyLife.PersonalityType.FriendOfEveryone
  - TinyLife.PersonalityType.GymRat
  - TinyLife.PersonalityType.HatesChildren
  - TinyLife.PersonalityType.HouseholdHero
  - TinyLife.PersonalityType.Incompatible
  - TinyLife.PersonalityType.Introverted
  - TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  - TinyLife.PersonalityType.Lazy
  - TinyLife.PersonalityType.Likeable
  - TinyLife.PersonalityType.MasterChef
  - TinyLife.PersonalityType.MaxMajorsPerPerson
  - TinyLife.PersonalityType.Mean
  - TinyLife.PersonalityType.Millionaire
  - TinyLife.PersonalityType.Name
  - TinyLife.PersonalityType.Pescetarian
  - TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  - TinyLife.PersonalityType.SmartKid
  - TinyLife.PersonalityType.SourceString
  - TinyLife.PersonalityType.Texture
  - TinyLife.PersonalityType.Thinker
  - TinyLife.PersonalityType.Types
  - TinyLife.PersonalityType.Vegan
  - TinyLife.PersonalityType.Vegetarian
  langs:
  - csharp
  - vb
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
  type: Class
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonalityType
    path: ../TinyLife/PersonalityType.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA personality type is a trait that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have.\nEach personality type is meant to influence the person&apos;s behavior and abilities slightly in a certain way.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<PersonalityType>), new object[]{typeof(PersonalityType), "PrivateTypes"})]

      public class PersonalityType : IEmotionSource
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of PersonalityType)), New Object() {GetType(PersonalityType), "PrivateTypes"})>

      Public Class PersonalityType
          Implements IEmotionSource
  inheritance:
  - System.Object
  implements:
  - TinyLife.Emotions.IEmotionSource
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.PersonalityType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.PersonalityType.Types
  commentId: F:TinyLife.PersonalityType.Types
  id: Types
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: PersonalityType.Types
  fullName: TinyLife.PersonalityType.Types
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/PersonalityType.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA registry of all of the personality types in the game.\nUse <xref href=\"TinyLife.PersonalityType.Register(TinyLife.PersonalityType)\" data-throw-if-not-resolved=\"false\"></xref> to register custom personality types.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, PersonalityType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.PersonalityType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, PersonalityType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.MaxMajorsPerPerson
  commentId: F:TinyLife.PersonalityType.MaxMajorsPerPerson
  id: MaxMajorsPerPerson
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: MaxMajorsPerPerson
  nameWithType: PersonalityType.MaxMajorsPerPerson
  fullName: TinyLife.PersonalityType.MaxMajorsPerPerson
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxMajorsPerPerson
    path: ../TinyLife/PersonalityType.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe amount of major (non-<xref href=\"TinyLife.PersonalityType.TypeCategory.Minor\" data-throw-if-not-resolved=\"false\"></xref>) personality types that each <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have, based on their <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static readonly Dictionary<AgeGroup, int> MaxMajorsPerPerson
    return:
      type: System.Collections.Generic.Dictionary{TinyLife.Objects.AgeGroup,System.Int32}
    content.vb: Public Shared ReadOnly MaxMajorsPerPerson As Dictionary(Of AgeGroup, Integer)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Lazy
  commentId: F:TinyLife.PersonalityType.Lazy
  id: Lazy
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Lazy
  nameWithType: PersonalityType.Lazy
  fullName: TinyLife.PersonalityType.Lazy
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lazy
    path: ../TinyLife/PersonalityType.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Lazy
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Lazy As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Energetic
  commentId: F:TinyLife.PersonalityType.Energetic
  id: Energetic
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Energetic
  nameWithType: PersonalityType.Energetic
  fullName: TinyLife.PersonalityType.Energetic
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Energetic
    path: ../TinyLife/PersonalityType.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Energetic
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Energetic As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Creative
  commentId: F:TinyLife.PersonalityType.Creative
  id: Creative
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Creative
  nameWithType: PersonalityType.Creative
  fullName: TinyLife.PersonalityType.Creative
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Creative
    path: ../TinyLife/PersonalityType.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Creative
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Creative As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Likeable
  commentId: F:TinyLife.PersonalityType.Likeable
  id: Likeable
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Likeable
  nameWithType: PersonalityType.Likeable
  fullName: TinyLife.PersonalityType.Likeable
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Likeable
    path: ../TinyLife/PersonalityType.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Likeable
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Likeable As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Mean
  commentId: F:TinyLife.PersonalityType.Mean
  id: Mean
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Mean
  nameWithType: PersonalityType.Mean
  fullName: TinyLife.PersonalityType.Mean
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Mean
    path: ../TinyLife/PersonalityType.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Mean
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Mean As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Ambitious
  commentId: F:TinyLife.PersonalityType.Ambitious
  id: Ambitious
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Ambitious
  nameWithType: PersonalityType.Ambitious
  fullName: TinyLife.PersonalityType.Ambitious
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Ambitious
    path: ../TinyLife/PersonalityType.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Ambitious
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Ambitious As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Thinker
  commentId: F:TinyLife.PersonalityType.Thinker
  id: Thinker
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Thinker
  nameWithType: PersonalityType.Thinker
  fullName: TinyLife.PersonalityType.Thinker
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Thinker
    path: ../TinyLife/PersonalityType.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Thinker
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Thinker As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Introverted
  commentId: F:TinyLife.PersonalityType.Introverted
  id: Introverted
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Introverted
  nameWithType: PersonalityType.Introverted
  fullName: TinyLife.PersonalityType.Introverted
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Introverted
    path: ../TinyLife/PersonalityType.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Introverted
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Introverted As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Extroverted
  commentId: F:TinyLife.PersonalityType.Extroverted
  id: Extroverted
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Extroverted
  nameWithType: PersonalityType.Extroverted
  fullName: TinyLife.PersonalityType.Extroverted
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Extroverted
    path: ../TinyLife/PersonalityType.cs
    startLine: 66
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Extroverted
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Extroverted As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.FamilyFocused
  commentId: F:TinyLife.PersonalityType.FamilyFocused
  id: FamilyFocused
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: FamilyFocused
  nameWithType: PersonalityType.FamilyFocused
  fullName: TinyLife.PersonalityType.FamilyFocused
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FamilyFocused
    path: ../TinyLife/PersonalityType.cs
    startLine: 70
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType FamilyFocused
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly FamilyFocused As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Foodie
  commentId: F:TinyLife.PersonalityType.Foodie
  id: Foodie
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Foodie
  nameWithType: PersonalityType.Foodie
  fullName: TinyLife.PersonalityType.Foodie
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Foodie
    path: ../TinyLife/PersonalityType.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Foodie
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Foodie As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Asexual
  commentId: F:TinyLife.PersonalityType.Asexual
  id: Asexual
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Asexual
  nameWithType: PersonalityType.Asexual
  fullName: TinyLife.PersonalityType.Asexual
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Asexual
    path: ../TinyLife/PersonalityType.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Asexual
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Asexual As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Aromantic
  commentId: F:TinyLife.PersonalityType.Aromantic
  id: Aromantic
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Aromantic
  nameWithType: PersonalityType.Aromantic
  fullName: TinyLife.PersonalityType.Aromantic
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Aromantic
    path: ../TinyLife/PersonalityType.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Aromantic
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Aromantic As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.HatesChildren
  commentId: F:TinyLife.PersonalityType.HatesChildren
  id: HatesChildren
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: HatesChildren
  nameWithType: PersonalityType.HatesChildren
  fullName: TinyLife.PersonalityType.HatesChildren
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HatesChildren
    path: ../TinyLife/PersonalityType.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType HatesChildren
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly HatesChildren As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Pescetarian
  commentId: F:TinyLife.PersonalityType.Pescetarian
  id: Pescetarian
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Pescetarian
  nameWithType: PersonalityType.Pescetarian
  fullName: TinyLife.PersonalityType.Pescetarian
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Pescetarian
    path: ../TinyLife/PersonalityType.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Pescetarian
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Pescetarian As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Vegetarian
  commentId: F:TinyLife.PersonalityType.Vegetarian
  id: Vegetarian
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Vegetarian
  nameWithType: PersonalityType.Vegetarian
  fullName: TinyLife.PersonalityType.Vegetarian
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Vegetarian
    path: ../TinyLife/PersonalityType.cs
    startLine: 96
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Vegetarian
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Vegetarian As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Vegan
  commentId: F:TinyLife.PersonalityType.Vegan
  id: Vegan
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Vegan
  nameWithType: PersonalityType.Vegan
  fullName: TinyLife.PersonalityType.Vegan
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Vegan
    path: ../TinyLife/PersonalityType.cs
    startLine: 100
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Vegan
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Vegan As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.MasterChef
  commentId: F:TinyLife.PersonalityType.MasterChef
  id: MasterChef
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: MasterChef
  nameWithType: PersonalityType.MasterChef
  fullName: TinyLife.PersonalityType.MasterChef
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MasterChef
    path: ../TinyLife/PersonalityType.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType MasterChef
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly MasterChef As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.SmartKid
  commentId: F:TinyLife.PersonalityType.SmartKid
  id: SmartKid
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: SmartKid
  nameWithType: PersonalityType.SmartKid
  fullName: TinyLife.PersonalityType.SmartKid
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SmartKid
    path: ../TinyLife/PersonalityType.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType SmartKid
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly SmartKid As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.GymRat
  commentId: F:TinyLife.PersonalityType.GymRat
  id: GymRat
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: GymRat
  nameWithType: PersonalityType.GymRat
  fullName: TinyLife.PersonalityType.GymRat
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GymRat
    path: ../TinyLife/PersonalityType.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType GymRat
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly GymRat As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.HouseholdHero
  commentId: F:TinyLife.PersonalityType.HouseholdHero
  id: HouseholdHero
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: HouseholdHero
  nameWithType: PersonalityType.HouseholdHero
  fullName: TinyLife.PersonalityType.HouseholdHero
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HouseholdHero
    path: ../TinyLife/PersonalityType.cs
    startLine: 116
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType HouseholdHero
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly HouseholdHero As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.ComputerAddict
  commentId: F:TinyLife.PersonalityType.ComputerAddict
  id: ComputerAddict
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: ComputerAddict
  nameWithType: PersonalityType.ComputerAddict
  fullName: TinyLife.PersonalityType.ComputerAddict
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ComputerAddict
    path: ../TinyLife/PersonalityType.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType ComputerAddict
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly ComputerAddict As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.FriendOfEveryone
  commentId: F:TinyLife.PersonalityType.FriendOfEveryone
  id: FriendOfEveryone
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: FriendOfEveryone
  nameWithType: PersonalityType.FriendOfEveryone
  fullName: TinyLife.PersonalityType.FriendOfEveryone
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FriendOfEveryone
    path: ../TinyLife/PersonalityType.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType FriendOfEveryone
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly FriendOfEveryone As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Millionaire
  commentId: F:TinyLife.PersonalityType.Millionaire
  id: Millionaire
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Millionaire
  nameWithType: PersonalityType.Millionaire
  fullName: TinyLife.PersonalityType.Millionaire
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Millionaire
    path: ../TinyLife/PersonalityType.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType Millionaire
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly Millionaire As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.CapableCarpenter
  commentId: F:TinyLife.PersonalityType.CapableCarpenter
  id: CapableCarpenter
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: CapableCarpenter
  nameWithType: PersonalityType.CapableCarpenter
  fullName: TinyLife.PersonalityType.CapableCarpenter
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CapableCarpenter
    path: ../TinyLife/PersonalityType.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife
  syntax:
    content: public static readonly PersonalityType CapableCarpenter
    return:
      type: TinyLife.PersonalityType
    content.vb: Public Shared ReadOnly CapableCarpenter As PersonalityType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.PersonalityType.Name
  commentId: F:TinyLife.PersonalityType.Name
  id: Name
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: PersonalityType.Name
  fullName: TinyLife.PersonalityType.Name
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/PersonalityType.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe name of this personality type.\nAs this is used for <xref href=\"TinyLife.PersonalityType.Types\" data-throw-if-not-resolved=\"false\"></xref>, this name needs to be unique across all installed mods.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.Texture
  commentId: F:TinyLife.PersonalityType.Texture
  id: Texture
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: PersonalityType.Texture
  fullName: TinyLife.PersonalityType.Texture
  type: Field
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/PersonalityType.cs
    startLine: 142
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThe icon texture for this personality type\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.Incompatible
  commentId: P:TinyLife.PersonalityType.Incompatible
  id: Incompatible
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Incompatible
  nameWithType: PersonalityType.Incompatible
  fullName: TinyLife.PersonalityType.Incompatible
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Incompatible
    path: ../TinyLife/PersonalityType.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of personality types that cannot be applied together with this one. This property is queried in <xref href=\"TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)\" data-throw-if-not-resolved=\"false\"></xref>.\nDefaults to null, meaning all other personality types are compatible with this one.\n"
  example: []
  syntax:
    content: public Func<PersonalityType[]> Incompatible { get; set; }
    parameters: []
    return:
      type: System.Func{TinyLife.PersonalityType[]}
    content.vb: Public Property Incompatible As Func(Of PersonalityType())
  overload: TinyLife.PersonalityType.Incompatible*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.BoostedSkills
  commentId: P:TinyLife.PersonalityType.BoostedSkills
  id: BoostedSkills
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: BoostedSkills
  nameWithType: PersonalityType.BoostedSkills
  fullName: TinyLife.PersonalityType.BoostedSkills
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BoostedSkills
    path: ../TinyLife/PersonalityType.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of <xref href=\"TinyLife.Skills.SkillCategory\" data-throw-if-not-resolved=\"false\"></xref> values that represent the skill categories that are boosted by this personality type, along with the amount that they are boosted by.\nIf the amount is set to 0.1, for example, any skill gain will be multiplied by 1 + 0.1 (= 1.1).\nThe boost for a specific skill can then be retrieved using <xref href=\"TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (SkillCategory Skill, float Amount) BoostedSkills { get; set; }
    parameters: []
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillCategory,System.Single}
    content.vb: Public Property BoostedSkills As(Skill As SkillCategory, Amount As Single)(Of SkillCategory , Single)
  overload: TinyLife.PersonalityType.BoostedSkills*
  seealso:
  - linkId: TinyLife.PersonalityType.BoostedSkillTypes
    commentId: P:TinyLife.PersonalityType.BoostedSkillTypes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.BoostedSkillTypes
  commentId: P:TinyLife.PersonalityType.BoostedSkillTypes
  id: BoostedSkillTypes
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: BoostedSkillTypes
  nameWithType: PersonalityType.BoostedSkillTypes
  fullName: TinyLife.PersonalityType.BoostedSkillTypes
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BoostedSkillTypes
    path: ../TinyLife/PersonalityType.cs
    startLine: 161
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> values that represent the exact skills that are boosted by this personality type, along with the amount that they are boosted by.\nIf the amount is set to 0.1, for example, any skill gain will be multiplied by 1 + 0.1 (= 1.1).\nThe boost for a specific skill can then be retrieved using <xref href=\"TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (SkillType Type, float Amount)[] BoostedSkillTypes { get; set; }
    parameters: []
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Single}[]
    content.vb: Public Property BoostedSkillTypes As(Type As SkillType, Amount As Single)(Of SkillType , Single)()
  overload: TinyLife.PersonalityType.BoostedSkillTypes*
  seealso:
  - linkId: TinyLife.PersonalityType.BoostedSkills
    commentId: P:TinyLife.PersonalityType.BoostedSkills
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.AllowedAges
  commentId: P:TinyLife.PersonalityType.AllowedAges
  id: AllowedAges
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: AllowedAges
  nameWithType: PersonalityType.AllowedAges
  fullName: TinyLife.PersonalityType.AllowedAges
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllowedAges
    path: ../TinyLife/PersonalityType.cs
    startLine: 166
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA set of age group flags that represent people of which ages can have this personality type.\nThis value defaults to ~0, or all ages.\n"
  example: []
  syntax:
    content: public AgeGroup AllowedAges { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public Property AllowedAges As AgeGroup
  overload: TinyLife.PersonalityType.AllowedAges*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.Category
  commentId: P:TinyLife.PersonalityType.Category
  id: Category
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: PersonalityType.Category
  fullName: TinyLife.PersonalityType.Category
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Category
    path: ../TinyLife/PersonalityType.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nThis personality type&apos;s <xref href=\"TinyLife.PersonalityType.TypeCategory\" data-throw-if-not-resolved=\"false\"></xref>, which defaults to <xref href=\"TinyLife.PersonalityType.TypeCategory.Major\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public PersonalityType.TypeCategory Category { get; set; }
    parameters: []
    return:
      type: TinyLife.PersonalityType.TypeCategory
    content.vb: Public Property Category As PersonalityType.TypeCategory
  overload: TinyLife.PersonalityType.Category*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.SourceString
  commentId: P:TinyLife.PersonalityType.SourceString
  id: SourceString
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: SourceString
  nameWithType: PersonalityType.SourceString
  fullName: TinyLife.PersonalityType.SourceString
  type: Property
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SourceString
    path: ../TinyLife/PersonalityType.cs
    startLine: 172
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nA (localized) string that is displayed when hovering over an <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> that has this source\n"
  example: []
  syntax:
    content: public string SourceString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SourceString As String
  overload: TinyLife.PersonalityType.SourceString*
  implements:
  - TinyLife.Emotions.IEmotionSource.SourceString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.PersonalityType.#ctor(System.String,MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion)'
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: PersonalityType(String, TextureRegion)
  nameWithType: PersonalityType.PersonalityType(String, TextureRegion)
  fullName: TinyLife.PersonalityType.PersonalityType(System.String, MLEM.Textures.TextureRegion)
  type: Constructor
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/PersonalityType.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nCreates a new personality type with the given name\n"
  example: []
  syntax:
    content: public PersonalityType(string name, TextureRegion texture)
    parameters:
    - id: name
      type: System.String
      description: The name of this personality type
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The icon texture for this personality type
    content.vb: Public Sub New(name As String, texture As TextureRegion)
  overload: TinyLife.PersonalityType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  id: IsCompatible(TinyLife.PersonalityType)
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: IsCompatible(PersonalityType)
  nameWithType: PersonalityType.IsCompatible(PersonalityType)
  fullName: TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  type: Method
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompatible
    path: ../TinyLife/PersonalityType.cs
    startLine: 189
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nReturns whether this personality type is compatible with the other personality type, based on <xref href=\"TinyLife.PersonalityType.Incompatible\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsCompatible(PersonalityType other)
    parameters:
    - id: other
      type: TinyLife.PersonalityType
      description: The personality type to compare with.
    return:
      type: System.Boolean
      description: Whether the two personalities are compatible.
    content.vb: Public Function IsCompatible(other As PersonalityType) As Boolean
  overload: TinyLife.PersonalityType.IsCompatible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  id: Register(TinyLife.PersonalityType)
  parent: TinyLife.PersonalityType
  langs:
  - csharp
  - vb
  name: Register(PersonalityType)
  nameWithType: PersonalityType.Register(PersonalityType)
  fullName: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  type: Method
  source:
    remote:
      path: TinyLife/PersonalityType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/PersonalityType.cs
    startLine: 198
  assemblies:
  - Tiny Life
  namespace: TinyLife
  summary: "\nRegisters this personality type to the <xref href=\"TinyLife.PersonalityType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static PersonalityType Register(PersonalityType type)
    parameters:
    - id: type
      type: TinyLife.PersonalityType
      description: The personality type to register
    return:
      type: TinyLife.PersonalityType
      description: The personality type, for chaining
    content.vb: Public Shared Function Register(type As PersonalityType) As PersonalityType
  overload: TinyLife.PersonalityType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.PersonalityType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<PersonalityType>()
  nameWithType: Extensions.JsonCopy<PersonalityType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.PersonalityType>()
  nameWithType.vb: Extensions.JsonCopy(Of PersonalityType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.PersonalityType)()
  name.vb: JsonCopy(Of PersonalityType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<PersonalityType>
    nameWithType: Extensions.JsonCopy<PersonalityType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.PersonalityType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of PersonalityType)
    nameWithType: Extensions.JsonCopy(Of PersonalityType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.PersonalityType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.Register(TinyLife.PersonalityType)
  isExternal: true
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.PersonalityType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.PersonalityType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, PersonalityType>
  nameWithType: ReadOnlyDictionary<String, PersonalityType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.PersonalityType>
  nameWithType.vb: ReadOnlyDictionary(Of String, PersonalityType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.PersonalityType)
  name.vb: ReadOnlyDictionary(Of String, PersonalityType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.PersonalityType.TypeCategory.Minor
  commentId: F:TinyLife.PersonalityType.TypeCategory.Minor
  isExternal: true
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: System.Collections.Generic.Dictionary{TinyLife.Objects.AgeGroup,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{TinyLife.Objects.AgeGroup,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<AgeGroup, Int32>
  nameWithType: Dictionary<AgeGroup, Int32>
  fullName: System.Collections.Generic.Dictionary<TinyLife.Objects.AgeGroup, System.Int32>
  nameWithType.vb: Dictionary(Of AgeGroup, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of TinyLife.Objects.AgeGroup, System.Int32)
  name.vb: Dictionary(Of AgeGroup, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.PersonalityType.Types
  commentId: F:TinyLife.PersonalityType.Types
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  commentId: M:TinyLife.PersonalityType.IsCompatible(TinyLife.PersonalityType)
  isExternal: true
- uid: TinyLife.PersonalityType.Incompatible*
  commentId: Overload:TinyLife.PersonalityType.Incompatible
  name: Incompatible
  nameWithType: PersonalityType.Incompatible
  fullName: TinyLife.PersonalityType.Incompatible
- uid: System.Func{TinyLife.PersonalityType[]}
  commentId: T:System.Func{TinyLife.PersonalityType[]}
  parent: System
  definition: System.Func`1
  name: Func<PersonalityType[]>
  nameWithType: Func<PersonalityType[]>
  fullName: System.Func<TinyLife.PersonalityType[]>
  nameWithType.vb: Func(Of PersonalityType())
  fullName.vb: System.Func(Of TinyLife.PersonalityType())
  name.vb: Func(Of PersonalityType())
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.SkillCategory
  commentId: T:TinyLife.Skills.SkillCategory
  parent: TinyLife.Skills
  name: SkillCategory
  nameWithType: SkillCategory
  fullName: TinyLife.Skills.SkillCategory
- uid: TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  isExternal: true
- uid: TinyLife.PersonalityType.BoostedSkillTypes
  commentId: P:TinyLife.PersonalityType.BoostedSkillTypes
  isExternal: true
- uid: TinyLife.PersonalityType.BoostedSkills*
  commentId: Overload:TinyLife.PersonalityType.BoostedSkills
  name: BoostedSkills
  nameWithType: PersonalityType.BoostedSkills
  fullName: TinyLife.PersonalityType.BoostedSkills
- uid: System.ValueTuple{TinyLife.Skills.SkillCategory,System.Single}
  commentId: T:System.ValueTuple{TinyLife.Skills.SkillCategory,System.Single}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<SkillCategory, Single>
  nameWithType: (T1, T2)<SkillCategory, Single>
  fullName: System.ValueTuple<TinyLife.Skills.SkillCategory, System.Single>
  nameWithType.vb: (T1, T2)(Of SkillCategory, Single)
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillCategory, System.Single)
  name.vb: (T1, T2)(Of SkillCategory, Single)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillCategory
    name: SkillCategory
    nameWithType: SkillCategory
    fullName: TinyLife.Skills.SkillCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillCategory
    name: SkillCategory
    nameWithType: SkillCategory
    fullName: TinyLife.Skills.SkillCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.PersonalityType.BoostedSkills
  commentId: P:TinyLife.PersonalityType.BoostedSkills
  isExternal: true
- uid: TinyLife.PersonalityType.BoostedSkillTypes*
  commentId: Overload:TinyLife.PersonalityType.BoostedSkillTypes
  name: BoostedSkillTypes
  nameWithType: PersonalityType.BoostedSkillTypes
  fullName: TinyLife.PersonalityType.BoostedSkillTypes
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Single}[]
  isExternal: true
  name: (T1, T2)<SkillType, Single>[]
  nameWithType: (T1, T2)<SkillType, Single>[]
  fullName: System.ValueTuple<TinyLife.Skills.SkillType, System.Single>[]
  nameWithType.vb: (T1, T2)(Of SkillType, Single)()
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillType, System.Single)()
  name.vb: (T1, T2)(Of SkillType, Single)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.PersonalityType.AllowedAges*
  commentId: Overload:TinyLife.PersonalityType.AllowedAges
  name: AllowedAges
  nameWithType: PersonalityType.AllowedAges
  fullName: TinyLife.PersonalityType.AllowedAges
- uid: TinyLife.PersonalityType.TypeCategory
  commentId: T:TinyLife.PersonalityType.TypeCategory
  parent: TinyLife
  name: PersonalityType.TypeCategory
  nameWithType: PersonalityType.TypeCategory
  fullName: TinyLife.PersonalityType.TypeCategory
- uid: TinyLife.PersonalityType.TypeCategory.Major
  commentId: F:TinyLife.PersonalityType.TypeCategory.Major
  isExternal: true
- uid: TinyLife.PersonalityType.Category*
  commentId: Overload:TinyLife.PersonalityType.Category
  name: Category
  nameWithType: PersonalityType.Category
  fullName: TinyLife.PersonalityType.Category
- uid: TinyLife.PersonalityType.SourceString*
  commentId: Overload:TinyLife.PersonalityType.SourceString
  name: SourceString
  nameWithType: PersonalityType.SourceString
  fullName: TinyLife.PersonalityType.SourceString
- uid: TinyLife.Emotions.IEmotionSource.SourceString
  commentId: P:TinyLife.Emotions.IEmotionSource.SourceString
  parent: TinyLife.Emotions.IEmotionSource
  name: SourceString
  nameWithType: IEmotionSource.SourceString
  fullName: TinyLife.Emotions.IEmotionSource.SourceString
- uid: TinyLife.PersonalityType.#ctor*
  commentId: Overload:TinyLife.PersonalityType.#ctor
  name: PersonalityType
  nameWithType: PersonalityType.PersonalityType
  fullName: TinyLife.PersonalityType.PersonalityType
- uid: TinyLife.PersonalityType.Incompatible
  commentId: P:TinyLife.PersonalityType.Incompatible
  isExternal: true
- uid: TinyLife.PersonalityType.IsCompatible*
  commentId: Overload:TinyLife.PersonalityType.IsCompatible
  name: IsCompatible
  nameWithType: PersonalityType.IsCompatible
  fullName: TinyLife.PersonalityType.IsCompatible
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.PersonalityType.Register*
  commentId: Overload:TinyLife.PersonalityType.Register
  name: Register
  nameWithType: PersonalityType.Register
  fullName: TinyLife.PersonalityType.Register

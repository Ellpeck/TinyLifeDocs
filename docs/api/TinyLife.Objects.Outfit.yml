### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Outfit
  commentId: T:TinyLife.Objects.Outfit
  id: Outfit
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Outfit.#ctor(System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes})
  - TinyLife.Objects.Outfit.Clothes
  - TinyLife.Objects.Outfit.EnsureIntentionsMatch(System.Int32)
  - TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  - TinyLife.Objects.Outfit.Intentions
  - TinyLife.Objects.Outfit.SetRandomClothesItem(System.Random,TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup,TinyLife.Objects.ClothesIntention,System.Boolean,System.Int32,System.Func{TinyLife.Objects.Clothes,System.Boolean})
  langs:
  - csharp
  - vb
  name: Outfit
  nameWithType: Outfit
  fullName: TinyLife.Objects.Outfit
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Outfit
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 277
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn outfit is a set of <xref href=\"TinyLife.Objects.WornClothes\" data-throw-if-not-resolved=\"false\"></xref> items for each clothes layer of a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThis class is used by <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref> and, as a result, <xref href=\"TinyLife.Objects.Person.CurrentOutfit\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Outfit
    content.vb: >-
      <DataContract>

      Public Class Outfit
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Outfit.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Outfit.Clothes
  commentId: F:TinyLife.Objects.Outfit.Clothes
  id: Clothes
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: Clothes
  nameWithType: Outfit.Clothes
  fullName: TinyLife.Objects.Outfit.Clothes
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Clothes
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 285
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA dictionary that matches a given <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.Objects.WornClothes\" data-throw-if-not-resolved=\"false\"></xref> that a person is wearing on that layer.\nIf a layer is not contained in this dictionary, it means that no clothes are being worn on that layer.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Dictionary<ClothesLayer, WornClothes> Clothes
    return:
      type: System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes}
    content.vb: >-
      <DataMember>

      Public ReadOnly Clothes As Dictionary(Of ClothesLayer, WornClothes)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Outfit.Intentions
  commentId: F:TinyLife.Objects.Outfit.Intentions
  id: Intentions
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: Intentions
  nameWithType: Outfit.Intentions
  fullName: TinyLife.Objects.Outfit.Intentions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intentions
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 291
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref> flags that the player has set for this outfit.\nThis intention always contains <xref href=\"TinyLife.Objects.ClothesIntention.Everyday\" data-throw-if-not-resolved=\"false\"></xref> if this outfit is the first entry in <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public ClothesIntention Intentions
    return:
      type: TinyLife.Objects.ClothesIntention
    content.vb: >-
      <DataMember>

      Public Intentions As ClothesIntention
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Outfit.#ctor(System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes})
  commentId: M:TinyLife.Objects.Outfit.#ctor(System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes})
  id: '#ctor(System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes})'
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: Outfit(Dictionary<ClothesLayer, WornClothes>)
  nameWithType: Outfit.Outfit(Dictionary<ClothesLayer, WornClothes>)
  fullName: TinyLife.Objects.Outfit.Outfit(System.Collections.Generic.Dictionary<TinyLife.Objects.ClothesLayer, TinyLife.Objects.WornClothes>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 297
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new outfit with the given settings.\n"
  example: []
  syntax:
    content: public Outfit(Dictionary<ClothesLayer, WornClothes> clothes = null)
    parameters:
    - id: clothes
      type: System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes}
      description: The clothes that this outfit contains, or null to create a new empty <xref href="System.Collections.Generic.Dictionary%602" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(clothes As Dictionary(Of ClothesLayer, WornClothes) = Nothing)
  overload: TinyLife.Objects.Outfit.#ctor*
  nameWithType.vb: Outfit.Outfit(Dictionary(Of ClothesLayer, WornClothes))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Outfit.Outfit(System.Collections.Generic.Dictionary(Of TinyLife.Objects.ClothesLayer, TinyLife.Objects.WornClothes))
  name.vb: Outfit(Dictionary(Of ClothesLayer, WornClothes))
- uid: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  id: GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: GetIntentionPercentage(ClothesIntention)
  nameWithType: Outfit.GetIntentionPercentage(ClothesIntention)
  fullName: TinyLife.Objects.Outfit.GetIntentionPercentage(TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetIntentionPercentage
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 307
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a value between 0 and 1 that represents how well this outfit matches the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetIntentionPercentage(ClothesIntention intention)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to match the outfit to.
    return:
      type: System.Single
      description: The intention match percentage, between 0 and 1.
    content.vb: Public Function GetIntentionPercentage(intention As ClothesIntention) As Single
  overload: TinyLife.Objects.Outfit.GetIntentionPercentage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Outfit.EnsureIntentionsMatch(System.Int32)
  commentId: M:TinyLife.Objects.Outfit.EnsureIntentionsMatch(System.Int32)
  id: EnsureIntentionsMatch(System.Int32)
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: EnsureIntentionsMatch(Int32)
  nameWithType: Outfit.EnsureIntentionsMatch(Int32)
  fullName: TinyLife.Objects.Outfit.EnsureIntentionsMatch(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EnsureIntentionsMatch
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nEnsures that the <xref href=\"TinyLife.Objects.Outfit.Intentions\" data-throw-if-not-resolved=\"false\"></xref> of this outfit match the required percentages for each layer using <xref href=\"TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)\" data-throw-if-not-resolved=\"false\"></xref>.\nAdditionally, if <code data-dev-comment-type=\"paramref\" class=\"paramref\">outfitIndex</code> is 0, <xref href=\"TinyLife.Objects.ClothesIntention.Everyday\" data-throw-if-not-resolved=\"false\"></xref> is added to <xref href=\"TinyLife.Objects.Outfit.Intentions\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void EnsureIntentionsMatch(int outfitIndex)
    parameters:
    - id: outfitIndex
      type: System.Int32
      description: The index that this outfit has in <xref href="TinyLife.Objects.Person.Outfits" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub EnsureIntentionsMatch(outfitIndex As Integer)
  overload: TinyLife.Objects.Outfit.EnsureIntentionsMatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Outfit.SetRandomClothesItem(System.Random,TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup,TinyLife.Objects.ClothesIntention,System.Boolean,System.Int32,System.Func{TinyLife.Objects.Clothes,System.Boolean})
  commentId: M:TinyLife.Objects.Outfit.SetRandomClothesItem(System.Random,TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup,TinyLife.Objects.ClothesIntention,System.Boolean,System.Int32,System.Func{TinyLife.Objects.Clothes,System.Boolean})
  id: SetRandomClothesItem(System.Random,TinyLife.Objects.ClothesLayer,TinyLife.Objects.AgeGroup,TinyLife.Objects.ClothesIntention,System.Boolean,System.Int32,System.Func{TinyLife.Objects.Clothes,System.Boolean})
  parent: TinyLife.Objects.Outfit
  langs:
  - csharp
  - vb
  name: SetRandomClothesItem(Random, ClothesLayer, AgeGroup, ClothesIntention, Boolean, Int32, Func<Clothes, Boolean>)
  nameWithType: Outfit.SetRandomClothesItem(Random, ClothesLayer, AgeGroup, ClothesIntention, Boolean, Int32, Func<Clothes, Boolean>)
  fullName: TinyLife.Objects.Outfit.SetRandomClothesItem(System.Random, TinyLife.Objects.ClothesLayer, TinyLife.Objects.AgeGroup, TinyLife.Objects.ClothesIntention, System.Boolean, System.Int32, System.Func<TinyLife.Objects.Clothes, System.Boolean>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Clothes.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetRandomClothesItem
    path: ../TinyLife/Objects/Clothes.cs
    startLine: 346
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets a random clothes item for this outfit&apos;s given <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void SetRandomClothesItem(Random random, ClothesLayer layer, AgeGroup age, ClothesIntention allowedIntentions = ClothesIntention.None, bool keepOldColors = false, int maxPrice = 50, Func<Clothes, bool> additionalConditions = null)
    parameters:
    - id: random
      type: System.Random
      description: The random to use.
    - id: layer
      type: TinyLife.Objects.ClothesLayer
      description: The layer to set the clothes item for.
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The ages that clothes items should be generated for.
    - id: allowedIntentions
      type: TinyLife.Objects.ClothesIntention
      description: The intentions allowed, or <xref href="TinyLife.Objects.ClothesIntention.None" data-throw-if-not-resolved="false"></xref> to allow all intentions.
    - id: keepOldColors
      type: System.Boolean
      description: Whether old colors should be kept if the new object&apos;s <xref href="TinyLife.Utilities.ColorScheme" data-throw-if-not-resolved="false"></xref> matches the old one.
    - id: maxPrice
      type: System.Int32
      description: The maximum price that should be used when setting a random clothes item. Defaults to <xref href="TinyLife.Objects.Clothes.ReferencePrice" data-throw-if-not-resolved="false"></xref>.
    - id: additionalConditions
      type: System.Func{TinyLife.Objects.Clothes,System.Boolean}
      description: An optional set of additional conditions to check for when selecting clothing items.
    content.vb: Public Sub SetRandomClothesItem(random As Random, layer As ClothesLayer, age As AgeGroup, allowedIntentions As ClothesIntention = ClothesIntention.None, keepOldColors As Boolean = False, maxPrice As Integer = 50, additionalConditions As Func(Of Clothes, Boolean) = Nothing)
  overload: TinyLife.Objects.Outfit.SetRandomClothesItem*
  nameWithType.vb: Outfit.SetRandomClothesItem(Random, ClothesLayer, AgeGroup, ClothesIntention, Boolean, Int32, Func(Of Clothes, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Outfit.SetRandomClothesItem(System.Random, TinyLife.Objects.ClothesLayer, TinyLife.Objects.AgeGroup, TinyLife.Objects.ClothesIntention, System.Boolean, System.Int32, System.Func(Of TinyLife.Objects.Clothes, System.Boolean))
  name.vb: SetRandomClothesItem(Random, ClothesLayer, AgeGroup, ClothesIntention, Boolean, Int32, Func(Of Clothes, Boolean))
references:
- uid: TinyLife.Objects.WornClothes
  commentId: T:TinyLife.Objects.WornClothes
  parent: TinyLife.Objects
  name: WornClothes
  nameWithType: WornClothes
  fullName: TinyLife.Objects.WornClothes
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.Outfits
  commentId: F:TinyLife.Objects.Person.Outfits
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentOutfit
  commentId: P:TinyLife.Objects.Person.CurrentOutfit
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Outfit.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Outfit>()
  nameWithType: Extensions.JsonCopy<Outfit>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Outfit>()
  nameWithType.vb: Extensions.JsonCopy(Of Outfit)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Outfit)()
  name.vb: JsonCopy(Of Outfit)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Outfit>
    nameWithType: Extensions.JsonCopy<Outfit>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Outfit>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Outfit)
    nameWithType: Extensions.JsonCopy(Of Outfit)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Outfit)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes}
  commentId: T:System.Collections.Generic.Dictionary{TinyLife.Objects.ClothesLayer,TinyLife.Objects.WornClothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ClothesLayer, WornClothes>
  nameWithType: Dictionary<ClothesLayer, WornClothes>
  fullName: System.Collections.Generic.Dictionary<TinyLife.Objects.ClothesLayer, TinyLife.Objects.WornClothes>
  nameWithType.vb: Dictionary(Of ClothesLayer, WornClothes)
  fullName.vb: System.Collections.Generic.Dictionary(Of TinyLife.Objects.ClothesLayer, TinyLife.Objects.WornClothes)
  name.vb: Dictionary(Of ClothesLayer, WornClothes)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.ClothesLayer
    name: ClothesLayer
    nameWithType: ClothesLayer
    fullName: TinyLife.Objects.ClothesLayer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.ClothesIntention.Everyday
  commentId: F:TinyLife.Objects.ClothesIntention.Everyday
  isExternal: true
- uid: TinyLife.Objects.Outfit.#ctor*
  commentId: Overload:TinyLife.Objects.Outfit.#ctor
  name: Outfit
  nameWithType: Outfit.Outfit
  fullName: TinyLife.Objects.Outfit.Outfit
- uid: TinyLife.Objects.Outfit.GetIntentionPercentage*
  commentId: Overload:TinyLife.Objects.Outfit.GetIntentionPercentage
  name: GetIntentionPercentage
  nameWithType: Outfit.GetIntentionPercentage
  fullName: TinyLife.Objects.Outfit.GetIntentionPercentage
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.Outfit.Intentions
  commentId: F:TinyLife.Objects.Outfit.Intentions
  isExternal: true
- uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  name: GetRequiredMatchPercentage(ClothesIntention)
  nameWithType: Extensions.GetRequiredMatchPercentage(ClothesIntention)
  fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
    name: GetRequiredMatchPercentage
    nameWithType: Extensions.GetRequiredMatchPercentage
    fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    nameWithType: ClothesIntention
    fullName: TinyLife.Objects.ClothesIntention
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage(TinyLife.Objects.ClothesIntention)
    name: GetRequiredMatchPercentage
    nameWithType: Extensions.GetRequiredMatchPercentage
    fullName: TinyLife.Utilities.Extensions.GetRequiredMatchPercentage
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.ClothesIntention
    name: ClothesIntention
    nameWithType: ClothesIntention
    fullName: TinyLife.Objects.ClothesIntention
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Outfit.EnsureIntentionsMatch*
  commentId: Overload:TinyLife.Objects.Outfit.EnsureIntentionsMatch
  name: EnsureIntentionsMatch
  nameWithType: Outfit.EnsureIntentionsMatch
  fullName: TinyLife.Objects.Outfit.EnsureIntentionsMatch
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.ClothesIntention.None
  commentId: F:TinyLife.Objects.ClothesIntention.None
  isExternal: true
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: TinyLife.Objects.Clothes.ReferencePrice
  commentId: F:TinyLife.Objects.Clothes.ReferencePrice
  isExternal: true
- uid: TinyLife.Objects.Outfit.SetRandomClothesItem*
  commentId: Overload:TinyLife.Objects.Outfit.SetRandomClothesItem
  name: SetRandomClothesItem
  nameWithType: Outfit.SetRandomClothesItem
  fullName: TinyLife.Objects.Outfit.SetRandomClothesItem
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{TinyLife.Objects.Clothes,System.Boolean}
  commentId: T:System.Func{TinyLife.Objects.Clothes,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<Clothes, Boolean>
  nameWithType: Func<Clothes, Boolean>
  fullName: System.Func<TinyLife.Objects.Clothes, System.Boolean>
  nameWithType.vb: Func(Of Clothes, Boolean)
  fullName.vb: System.Func(Of TinyLife.Objects.Clothes, System.Boolean)
  name.vb: Func(Of Clothes, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Clothes
    name: Clothes
    nameWithType: Clothes
    fullName: TinyLife.Objects.Clothes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )

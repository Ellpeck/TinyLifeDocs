### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  id: MemoryType
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.MemoryType.#ctor(System.String,System.Boolean,System.Type)
  - TinyLife.Goals.MemoryType.CanReplace
  - TinyLife.Goals.MemoryType.Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  - TinyLife.Goals.MemoryType.ConstructedType
  - TinyLife.Goals.MemoryType.FamilySocial
  - TinyLife.Goals.MemoryType.Name
  - TinyLife.Goals.MemoryType.PromotionOrRaise
  - TinyLife.Goals.MemoryType.PublishFailure
  - TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  - TinyLife.Goals.MemoryType.SocialAction
  - TinyLife.Goals.MemoryType.SourceString
  - TinyLife.Goals.MemoryType.Types
  - TinyLife.Goals.MemoryType.UsedFurniture
  - TinyLife.Goals.MemoryType.UsedSkillCategory
  - TinyLife.Goals.MemoryType.WasOutside
  - TinyLife.Goals.MemoryType.WasRomanticWithSomeoneElse
  langs:
  - csharp
  - vb
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
  type: Class
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MemoryType
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA memory type is a set of information for a <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> to have.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<MemoryType>), new object[]{typeof(MemoryType), "PrivateTypes"})]

      public class MemoryType : IEmotionSource
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of MemoryType)), New Object() {GetType(MemoryType), "PrivateTypes"})>

      Public Class MemoryType
          Implements IEmotionSource
  inheritance:
  - System.Object
  implements:
  - TinyLife.Emotions.IEmotionSource
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.MemoryType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.MemoryType.Types
  commentId: F:TinyLife.Goals.MemoryType.Types
  id: Types
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: MemoryType.Types
  fullName: TinyLife.Goals.MemoryType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe memory types that are registered, both by the game itself, and by mods.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, MemoryType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, MemoryType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.PublishFailure
  commentId: F:TinyLife.Goals.MemoryType.PublishFailure
  id: PublishFailure
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: PublishFailure
  nameWithType: MemoryType.PublishFailure
  fullName: TinyLife.Goals.MemoryType.PublishFailure
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PublishFailure
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType PublishFailure
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly PublishFailure As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.SocialAction
  commentId: F:TinyLife.Goals.MemoryType.SocialAction
  id: SocialAction
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: SocialAction
  nameWithType: MemoryType.SocialAction
  fullName: TinyLife.Goals.MemoryType.SocialAction
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SocialAction
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType SocialAction
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly SocialAction As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.PromotionOrRaise
  commentId: F:TinyLife.Goals.MemoryType.PromotionOrRaise
  id: PromotionOrRaise
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: PromotionOrRaise
  nameWithType: MemoryType.PromotionOrRaise
  fullName: TinyLife.Goals.MemoryType.PromotionOrRaise
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PromotionOrRaise
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType PromotionOrRaise
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly PromotionOrRaise As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.FamilySocial
  commentId: F:TinyLife.Goals.MemoryType.FamilySocial
  id: FamilySocial
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: FamilySocial
  nameWithType: MemoryType.FamilySocial
  fullName: TinyLife.Goals.MemoryType.FamilySocial
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FamilySocial
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType FamilySocial
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly FamilySocial As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.UsedSkillCategory
  commentId: F:TinyLife.Goals.MemoryType.UsedSkillCategory
  id: UsedSkillCategory
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: UsedSkillCategory
  nameWithType: MemoryType.UsedSkillCategory
  fullName: TinyLife.Goals.MemoryType.UsedSkillCategory
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UsedSkillCategory
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly Dictionary<SkillCategory, MemoryType> UsedSkillCategory
    return:
      type: System.Collections.Generic.Dictionary{TinyLife.Skills.SkillCategory,TinyLife.Goals.MemoryType}
    content.vb: Public Shared ReadOnly UsedSkillCategory As Dictionary(Of SkillCategory, MemoryType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.WasOutside
  commentId: F:TinyLife.Goals.MemoryType.WasOutside
  id: WasOutside
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: WasOutside
  nameWithType: MemoryType.WasOutside
  fullName: TinyLife.Goals.MemoryType.WasOutside
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WasOutside
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType WasOutside
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly WasOutside As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.UsedFurniture
  commentId: F:TinyLife.Goals.MemoryType.UsedFurniture
  id: UsedFurniture
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: UsedFurniture
  nameWithType: MemoryType.UsedFurniture
  fullName: TinyLife.Goals.MemoryType.UsedFurniture
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UsedFurniture
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly Dictionary<ObjectCategory, MemoryType> UsedFurniture
    return:
      type: System.Collections.Generic.Dictionary{TinyLife.Objects.ObjectCategory,TinyLife.Goals.MemoryType}
    content.vb: Public Shared ReadOnly UsedFurniture As Dictionary(Of ObjectCategory, MemoryType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.WasRomanticWithSomeoneElse
  commentId: F:TinyLife.Goals.MemoryType.WasRomanticWithSomeoneElse
  id: WasRomanticWithSomeoneElse
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: WasRomanticWithSomeoneElse
  nameWithType: MemoryType.WasRomanticWithSomeoneElse
  fullName: TinyLife.Goals.MemoryType.WasRomanticWithSomeoneElse
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WasRomanticWithSomeoneElse
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType WasRomanticWithSomeoneElse
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly WasRomanticWithSomeoneElse As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.Name
  commentId: F:TinyLife.Goals.MemoryType.Name
  id: Name
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MemoryType.Name
  fullName: TinyLife.Goals.MemoryType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this memory type.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.ConstructedType
  commentId: F:TinyLife.Goals.MemoryType.ConstructedType
  id: ConstructedType
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: MemoryType.ConstructedType
  fullName: TinyLife.Goals.MemoryType.ConstructedType
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedType
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe type of <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> constructed in <xref href=\"TinyLife.Goals.MemoryType.Construct%60%601(TinyLife.Actions.ActionInfo%2cSystem.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref>, or null to construct the default type.\n"
  example: []
  syntax:
    content: public readonly Type ConstructedType
    return:
      type: System.Type
    content.vb: Public ReadOnly ConstructedType As Type
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.CanReplace
  commentId: F:TinyLife.Goals.MemoryType.CanReplace
  id: CanReplace
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: CanReplace
  nameWithType: MemoryType.CanReplace
  fullName: TinyLife.Goals.MemoryType.CanReplace
  type: Field
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanReplace
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 53
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nWhether this memory type&apos;s <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instance data can be replaced using <xref href=\"TinyLife.Goals.Memory.TryReplace(System.TimeSpan%2cTinyLife.Actions.ActionInfo)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly bool CanReplace
    return:
      type: System.Boolean
    content.vb: Public ReadOnly CanReplace As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.SourceString
  commentId: P:TinyLife.Goals.MemoryType.SourceString
  id: SourceString
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: SourceString
  nameWithType: MemoryType.SourceString
  fullName: TinyLife.Goals.MemoryType.SourceString
  type: Property
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SourceString
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA (localized) string that is displayed when hovering over an <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> that has this source\n"
  example: []
  syntax:
    content: public string SourceString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SourceString As String
  overload: TinyLife.Goals.MemoryType.SourceString*
  implements:
  - TinyLife.Emotions.IEmotionSource.SourceString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.#ctor(System.String,System.Boolean,System.Type)
  commentId: M:TinyLife.Goals.MemoryType.#ctor(System.String,System.Boolean,System.Type)
  id: '#ctor(System.String,System.Boolean,System.Type)'
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: MemoryType(String, Boolean, Type)
  nameWithType: MemoryType.MemoryType(String, Boolean, Type)
  fullName: TinyLife.Goals.MemoryType.MemoryType(System.String, System.Boolean, System.Type)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 64
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new memory type with the given name.\n"
  example: []
  syntax:
    content: public MemoryType(string name, bool canReplace = true, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name of this memory type.
    - id: canReplace
      type: System.Boolean
      description: Whether this memory type&apos;s <xref href="TinyLife.Goals.Memory" data-throw-if-not-resolved="false"></xref> instance data can be replaced using <xref href="TinyLife.Goals.Memory.TryReplace(System.TimeSpan%2cTinyLife.Actions.ActionInfo)" data-throw-if-not-resolved="false"></xref>.
    - id: constructedType
      type: System.Type
      description: The type of <xref href="TinyLife.Goals.Memory" data-throw-if-not-resolved="false"></xref> to construct, or <xref uid="langword_csharp_null" name="null" href=""></xref> to construct the default type <xref href="TinyLife.Goals.Memory" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(name As String, canReplace As Boolean = True, constructedType As Type = Nothing)
  overload: TinyLife.Goals.MemoryType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.MemoryType.Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  commentId: M:TinyLife.Goals.MemoryType.Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  id: Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Construct<T>(ActionInfo, TimeSpan)
  nameWithType: MemoryType.Construct<T>(ActionInfo, TimeSpan)
  fullName: TinyLife.Goals.MemoryType.Construct<T>(TinyLife.Actions.ActionInfo, System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 77
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nConstructs a new <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> from this memory type.\n"
  example: []
  syntax:
    content: >-
      public T Construct<T>(ActionInfo info, TimeSpan timeOccured)
          where T : Memory
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref> that contains information about this memory.
    - id: timeOccured
      type: System.TimeSpan
      description: The time that this memory occured.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The constructed memory.
    content.vb: Public Function Construct(Of T As Memory)(info As ActionInfo, timeOccured As TimeSpan) As T
  overload: TinyLife.Goals.MemoryType.Construct*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if constructing the <xref href="TinyLife.Goals.MemoryType.ConstructedType" data-throw-if-not-resolved="false"></xref> fails.
  nameWithType.vb: MemoryType.Construct(Of T)(ActionInfo, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.MemoryType.Construct(Of T)(TinyLife.Actions.ActionInfo, System.TimeSpan)
  name.vb: Construct(Of T)(ActionInfo, TimeSpan)
- uid: TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  id: Register(TinyLife.Goals.MemoryType)
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Register(MemoryType)
  nameWithType: MemoryType.Register(MemoryType)
  fullName: TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/MemoryType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Goals/MemoryType.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nRegisters the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.Goals.MemoryType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry.\n"
  example: []
  syntax:
    content: public static MemoryType Register(MemoryType type)
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The type of memory to register.
    return:
      type: TinyLife.Goals.MemoryType
      description: The passed memory type <code data-dev-comment-type="paramref" class="paramref">type</code>, for chaining.
    content.vb: Public Shared Function Register(type As MemoryType) As MemoryType
  overload: TinyLife.Goals.MemoryType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.Memory
  commentId: T:TinyLife.Goals.Memory
  name: Memory
  nameWithType: Memory
  fullName: TinyLife.Goals.Memory
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.MemoryType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MemoryType>()
  nameWithType: Extensions.JsonCopy<MemoryType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.MemoryType>()
  nameWithType.vb: Extensions.JsonCopy(Of MemoryType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.MemoryType)()
  name.vb: JsonCopy(Of MemoryType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<MemoryType>
    nameWithType: Extensions.JsonCopy<MemoryType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.MemoryType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of MemoryType)
    nameWithType: Extensions.JsonCopy(Of MemoryType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.MemoryType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, MemoryType>
  nameWithType: ReadOnlyDictionary<String, MemoryType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Goals.MemoryType>
  nameWithType.vb: ReadOnlyDictionary(Of String, MemoryType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Goals.MemoryType)
  name.vb: ReadOnlyDictionary(Of String, MemoryType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  parent: TinyLife.Goals
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
- uid: System.Collections.Generic.Dictionary{TinyLife.Skills.SkillCategory,TinyLife.Goals.MemoryType}
  commentId: T:System.Collections.Generic.Dictionary{TinyLife.Skills.SkillCategory,TinyLife.Goals.MemoryType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<SkillCategory, MemoryType>
  nameWithType: Dictionary<SkillCategory, MemoryType>
  fullName: System.Collections.Generic.Dictionary<TinyLife.Skills.SkillCategory, TinyLife.Goals.MemoryType>
  nameWithType.vb: Dictionary(Of SkillCategory, MemoryType)
  fullName.vb: System.Collections.Generic.Dictionary(Of TinyLife.Skills.SkillCategory, TinyLife.Goals.MemoryType)
  name.vb: Dictionary(Of SkillCategory, MemoryType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillCategory
    name: SkillCategory
    nameWithType: SkillCategory
    fullName: TinyLife.Skills.SkillCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillCategory
    name: SkillCategory
    nameWithType: SkillCategory
    fullName: TinyLife.Skills.SkillCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{TinyLife.Objects.ObjectCategory,TinyLife.Goals.MemoryType}
  commentId: T:System.Collections.Generic.Dictionary{TinyLife.Objects.ObjectCategory,TinyLife.Goals.MemoryType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<ObjectCategory, MemoryType>
  nameWithType: Dictionary<ObjectCategory, MemoryType>
  fullName: System.Collections.Generic.Dictionary<TinyLife.Objects.ObjectCategory, TinyLife.Goals.MemoryType>
  nameWithType.vb: Dictionary(Of ObjectCategory, MemoryType)
  fullName.vb: System.Collections.Generic.Dictionary(Of TinyLife.Objects.ObjectCategory, TinyLife.Goals.MemoryType)
  name.vb: Dictionary(Of ObjectCategory, MemoryType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Goals.MemoryType.Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  commentId: M:TinyLife.Goals.MemoryType.Construct``1(TinyLife.Actions.ActionInfo,System.TimeSpan)
  isExternal: true
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Goals.Memory.TryReplace(System.TimeSpan,TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Goals.Memory.TryReplace(System.TimeSpan,TinyLife.Actions.ActionInfo)
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.MemoryType.SourceString*
  commentId: Overload:TinyLife.Goals.MemoryType.SourceString
  name: SourceString
  nameWithType: MemoryType.SourceString
  fullName: TinyLife.Goals.MemoryType.SourceString
- uid: TinyLife.Emotions.IEmotionSource.SourceString
  commentId: P:TinyLife.Emotions.IEmotionSource.SourceString
  parent: TinyLife.Emotions.IEmotionSource
  name: SourceString
  nameWithType: IEmotionSource.SourceString
  fullName: TinyLife.Emotions.IEmotionSource.SourceString
- uid: TinyLife.Goals.MemoryType.#ctor*
  commentId: Overload:TinyLife.Goals.MemoryType.#ctor
  name: MemoryType
  nameWithType: MemoryType.MemoryType
  fullName: TinyLife.Goals.MemoryType.MemoryType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Goals.MemoryType.ConstructedType
  commentId: F:TinyLife.Goals.MemoryType.ConstructedType
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: TinyLife.Goals.MemoryType.Construct*
  commentId: Overload:TinyLife.Goals.MemoryType.Construct
  name: Construct
  nameWithType: MemoryType.Construct
  fullName: TinyLife.Goals.MemoryType.Construct
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Goals.MemoryType.Types
  commentId: F:TinyLife.Goals.MemoryType.Types
  isExternal: true
- uid: TinyLife.Goals.MemoryType.Register*
  commentId: Overload:TinyLife.Goals.MemoryType.Register
  name: Register
  nameWithType: MemoryType.Register
  fullName: TinyLife.Goals.MemoryType.Register

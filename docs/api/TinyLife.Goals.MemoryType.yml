### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  id: MemoryType
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.MemoryType.#ctor(System.String)
  - TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  - TinyLife.Goals.MemoryType.ConstructedType
  - TinyLife.Goals.MemoryType.CreativeAction
  - TinyLife.Goals.MemoryType.FamilySocial
  - TinyLife.Goals.MemoryType.LogicalAction
  - TinyLife.Goals.MemoryType.Name
  - TinyLife.Goals.MemoryType.Promotion
  - TinyLife.Goals.MemoryType.PublishFailure
  - TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  - TinyLife.Goals.MemoryType.SocialAction
  - TinyLife.Goals.MemoryType.Types
  langs:
  - csharp
  - vb
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MemoryType
    path: ../TinyLife/Goals/Memory.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA memory type is a set of information for a <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> to have.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<MemoryType>), new object[]{typeof(MemoryType), "PrivateTypes"})]

      public class MemoryType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of MemoryType)), New Object() {GetType(MemoryType), "PrivateTypes"})>

      Public Class MemoryType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.MemoryType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.MemoryType.Types
  commentId: F:TinyLife.Goals.MemoryType.Types
  id: Types
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: MemoryType.Types
  fullName: TinyLife.Goals.MemoryType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Goals/Memory.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe memory types that are registered, both by the game itself, and by mods.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, MemoryType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, MemoryType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.PublishFailure
  commentId: F:TinyLife.Goals.MemoryType.PublishFailure
  id: PublishFailure
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: PublishFailure
  nameWithType: MemoryType.PublishFailure
  fullName: TinyLife.Goals.MemoryType.PublishFailure
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PublishFailure
    path: ../TinyLife/Goals/Memory.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType PublishFailure
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly PublishFailure As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.LogicalAction
  commentId: F:TinyLife.Goals.MemoryType.LogicalAction
  id: LogicalAction
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: LogicalAction
  nameWithType: MemoryType.LogicalAction
  fullName: TinyLife.Goals.MemoryType.LogicalAction
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LogicalAction
    path: ../TinyLife/Goals/Memory.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType LogicalAction
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly LogicalAction As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.SocialAction
  commentId: F:TinyLife.Goals.MemoryType.SocialAction
  id: SocialAction
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: SocialAction
  nameWithType: MemoryType.SocialAction
  fullName: TinyLife.Goals.MemoryType.SocialAction
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SocialAction
    path: ../TinyLife/Goals/Memory.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType SocialAction
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly SocialAction As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.Promotion
  commentId: F:TinyLife.Goals.MemoryType.Promotion
  id: Promotion
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Promotion
  nameWithType: MemoryType.Promotion
  fullName: TinyLife.Goals.MemoryType.Promotion
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Promotion
    path: ../TinyLife/Goals/Memory.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType Promotion
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly Promotion As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.CreativeAction
  commentId: F:TinyLife.Goals.MemoryType.CreativeAction
  id: CreativeAction
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: CreativeAction
  nameWithType: MemoryType.CreativeAction
  fullName: TinyLife.Goals.MemoryType.CreativeAction
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreativeAction
    path: ../TinyLife/Goals/Memory.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType CreativeAction
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly CreativeAction As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.FamilySocial
  commentId: F:TinyLife.Goals.MemoryType.FamilySocial
  id: FamilySocial
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: FamilySocial
  nameWithType: MemoryType.FamilySocial
  fullName: TinyLife.Goals.MemoryType.FamilySocial
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FamilySocial
    path: ../TinyLife/Goals/Memory.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly MemoryType FamilySocial
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: Public Shared ReadOnly FamilySocial As MemoryType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.Name
  commentId: F:TinyLife.Goals.MemoryType.Name
  id: Name
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MemoryType.Name
  fullName: TinyLife.Goals.MemoryType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/Memory.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this memory type.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.MemoryType.ConstructedType
  commentId: P:TinyLife.Goals.MemoryType.ConstructedType
  id: ConstructedType
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: ConstructedType
  nameWithType: MemoryType.ConstructedType
  fullName: TinyLife.Goals.MemoryType.ConstructedType
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ConstructedType
    path: ../TinyLife/Goals/Memory.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe type of <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> constructed in <xref href=\"TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person%2cSystem.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>, or null to construct the default type.\n"
  example: []
  syntax:
    content: public Type ConstructedType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property ConstructedType As Type
  overload: TinyLife.Goals.MemoryType.ConstructedType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.MemoryType.#ctor(System.String)
  commentId: M:TinyLife.Goals.MemoryType.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: MemoryType(String)
  nameWithType: MemoryType.MemoryType(String)
  fullName: TinyLife.Goals.MemoryType.MemoryType(System.String)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Memory.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new memory type with the given name.\n"
  example: []
  syntax:
    content: public MemoryType(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of this memory type.
    content.vb: Public Sub New(name As String)
  overload: TinyLife.Goals.MemoryType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  id: Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Construct(Person, Nullable<TimeSpan>)
  nameWithType: MemoryType.Construct(Person, Nullable<TimeSpan>)
  fullName: TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Goals/Memory.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nConstructs a new <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> from this memory type.\n"
  example: []
  syntax:
    content: public Memory Construct(Person person, TimeSpan? timeOccured = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person who should have the memory.
    - id: timeOccured
      type: System.Nullable{System.TimeSpan}
      description: The time that this memory occured, or <xref uid="langword_csharp_null" name="null" href=""></xref> to use <xref href="TinyLife.GameImpl.CurrentTime" data-throw-if-not-resolved="false"></xref>.
    return:
      type: TinyLife.Goals.Memory
      description: The constructed memory.
    content.vb: Public Function Construct(person As Person, timeOccured As TimeSpan? = Nothing) As Memory
  overload: TinyLife.Goals.MemoryType.Construct*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if constructing the <xref href="TinyLife.Goals.MemoryType.ConstructedType" data-throw-if-not-resolved="false"></xref> fails.
  nameWithType.vb: MemoryType.Construct(Person, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person, System.Nullable(Of System.TimeSpan))
  name.vb: Construct(Person, Nullable(Of TimeSpan))
- uid: TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  id: Register(TinyLife.Goals.MemoryType)
  parent: TinyLife.Goals.MemoryType
  langs:
  - csharp
  - vb
  name: Register(MemoryType)
  nameWithType: MemoryType.Register(MemoryType)
  fullName: TinyLife.Goals.MemoryType.Register(TinyLife.Goals.MemoryType)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Goals/Memory.cs
    startLine: 72
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nRegisters the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.Goals.MemoryType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry.\n"
  example: []
  syntax:
    content: public static MemoryType Register(MemoryType type)
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The type of memory to register.
    return:
      type: TinyLife.Goals.MemoryType
      description: The passed memory type <code data-dev-comment-type="paramref" class="paramref">type</code>, for chaining.
    content.vb: Public Shared Function Register(type As MemoryType) As MemoryType
  overload: TinyLife.Goals.MemoryType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.Memory
  commentId: T:TinyLife.Goals.Memory
  parent: TinyLife.Goals
  name: Memory
  nameWithType: Memory
  fullName: TinyLife.Goals.Memory
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.MemoryType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MemoryType>()
  nameWithType: Extensions.JsonCopy<MemoryType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.MemoryType>()
  nameWithType.vb: Extensions.JsonCopy(Of MemoryType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.MemoryType)()
  name.vb: JsonCopy(Of MemoryType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<MemoryType>
    nameWithType: Extensions.JsonCopy<MemoryType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.MemoryType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of MemoryType)
    nameWithType: Extensions.JsonCopy(Of MemoryType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.MemoryType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.MemoryType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, MemoryType>
  nameWithType: ReadOnlyDictionary<String, MemoryType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Goals.MemoryType>
  nameWithType.vb: ReadOnlyDictionary(Of String, MemoryType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Goals.MemoryType)
  name.vb: ReadOnlyDictionary(Of String, MemoryType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  parent: TinyLife.Goals
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  isExternal: true
- uid: TinyLife.Goals.MemoryType.ConstructedType*
  commentId: Overload:TinyLife.Goals.MemoryType.ConstructedType
  name: ConstructedType
  nameWithType: MemoryType.ConstructedType
  fullName: TinyLife.Goals.MemoryType.ConstructedType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TinyLife.Goals.MemoryType.#ctor*
  commentId: Overload:TinyLife.Goals.MemoryType.#ctor
  name: MemoryType
  nameWithType: MemoryType.MemoryType
  fullName: TinyLife.Goals.MemoryType.MemoryType
- uid: TinyLife.GameImpl.CurrentTime
  commentId: P:TinyLife.GameImpl.CurrentTime
  isExternal: true
- uid: TinyLife.Goals.MemoryType.ConstructedType
  commentId: P:TinyLife.Goals.MemoryType.ConstructedType
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: TinyLife.Goals.MemoryType.Construct*
  commentId: Overload:TinyLife.Goals.MemoryType.Construct
  name: Construct
  nameWithType: MemoryType.Construct
  fullName: TinyLife.Goals.MemoryType.Construct
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.MemoryType.Types
  commentId: F:TinyLife.Goals.MemoryType.Types
  isExternal: true
- uid: TinyLife.Goals.MemoryType.Register*
  commentId: Overload:TinyLife.Goals.MemoryType.Register
  name: Register
  nameWithType: MemoryType.Register
  fullName: TinyLife.Goals.MemoryType.Register

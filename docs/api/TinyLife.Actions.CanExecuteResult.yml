### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  id: CanExecuteResult
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.CanExecuteResult.#ctor(System.String,TinyLife.Actions.CanExecuteResult.ResultType)
  - TinyLife.Actions.CanExecuteResult.Equals(System.Object)
  - TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  - TinyLife.Actions.CanExecuteResult.GetHashCode
  - TinyLife.Actions.CanExecuteResult.Hidden
  - TinyLife.Actions.CanExecuteResult.LotStaffOnly
  - TinyLife.Actions.CanExecuteResult.Name
  - TinyLife.Actions.CanExecuteResult.NotEnoughMoney
  - TinyLife.Actions.CanExecuteResult.NotEnoughSkill
  - TinyLife.Actions.CanExecuteResult.NotYours
  - TinyLife.Actions.CanExecuteResult.ObjectBroken
  - TinyLife.Actions.CanExecuteResult.op_Equality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  - TinyLife.Actions.CanExecuteResult.op_Inequality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  - TinyLife.Actions.CanExecuteResult.Type
  - TinyLife.Actions.CanExecuteResult.Valid
  langs:
  - csharp
  - vb
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
  type: Struct
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteResult
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 8
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA utility structure used by <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref> and other situations where an action can fail, or fail to start, due to a specific circumstance.\nThe <xref href=\"TinyLife.Actions.CanExecuteResult.Name\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> will be localized and displayed to the player if the <xref href=\"TinyLife.Actions.CanExecuteResult.ResultType\" data-throw-if-not-resolved=\"false\"></xref> is not <xref href=\"TinyLife.Actions.CanExecuteResult.Hidden\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public readonly struct CanExecuteResult : IEquatable<CanExecuteResult>'
    content.vb: >-
      Public Structure CanExecuteResult
          Implements IEquatable(Of CanExecuteResult)
  implements:
  - System.IEquatable{TinyLife.Actions.CanExecuteResult}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Actions.CanExecuteResult.TinyLife.Utilities.Extensions.JsonCopy``1
  - TinyLife.Actions.CanExecuteResult.TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.CanExecuteResult})
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Actions.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.CanExecuteResult.Valid
  id: Valid
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Valid
  nameWithType: CanExecuteResult.Valid
  fullName: TinyLife.Actions.CanExecuteResult.Valid
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Valid
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 11
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult Valid
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly Valid As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.CanExecuteResult.Hidden
  id: Hidden
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: CanExecuteResult.Hidden
  fullName: TinyLife.Actions.CanExecuteResult.Hidden
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Hidden
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult Hidden
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly Hidden As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.ObjectBroken
  commentId: F:TinyLife.Actions.CanExecuteResult.ObjectBroken
  id: ObjectBroken
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: ObjectBroken
  nameWithType: CanExecuteResult.ObjectBroken
  fullName: TinyLife.Actions.CanExecuteResult.ObjectBroken
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ObjectBroken
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 13
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult ObjectBroken
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly ObjectBroken As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.NotYours
  commentId: F:TinyLife.Actions.CanExecuteResult.NotYours
  id: NotYours
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotYours
  nameWithType: CanExecuteResult.NotYours
  fullName: TinyLife.Actions.CanExecuteResult.NotYours
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotYours
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult NotYours
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly NotYours As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.NotEnoughMoney
  commentId: F:TinyLife.Actions.CanExecuteResult.NotEnoughMoney
  id: NotEnoughMoney
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotEnoughMoney
  nameWithType: CanExecuteResult.NotEnoughMoney
  fullName: TinyLife.Actions.CanExecuteResult.NotEnoughMoney
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotEnoughMoney
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult NotEnoughMoney
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly NotEnoughMoney As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.NotEnoughSkill
  commentId: F:TinyLife.Actions.CanExecuteResult.NotEnoughSkill
  id: NotEnoughSkill
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotEnoughSkill
  nameWithType: CanExecuteResult.NotEnoughSkill
  fullName: TinyLife.Actions.CanExecuteResult.NotEnoughSkill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotEnoughSkill
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult NotEnoughSkill
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly NotEnoughSkill As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.LotStaffOnly
  commentId: F:TinyLife.Actions.CanExecuteResult.LotStaffOnly
  id: LotStaffOnly
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: LotStaffOnly
  nameWithType: CanExecuteResult.LotStaffOnly
  fullName: TinyLife.Actions.CanExecuteResult.LotStaffOnly
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotStaffOnly
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  syntax:
    content: public static readonly CanExecuteResult LotStaffOnly
    return:
      type: TinyLife.Actions.CanExecuteResult
    content.vb: Public Shared ReadOnly LotStaffOnly As CanExecuteResult
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.Name
  commentId: F:TinyLife.Actions.CanExecuteResult.Name
  id: Name
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CanExecuteResult.Name
  fullName: TinyLife.Actions.CanExecuteResult.Name
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe name of this <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref>, which is localized and displayed to the player.\nIf the <xref href=\"TinyLife.Actions.CanExecuteResult.Type\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"TinyLife.Actions.CanExecuteResult.Valid\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Actions.CanExecuteResult.Hidden\" data-throw-if-not-resolved=\"false\"></xref>, this name usually doesn&apos;t ever have to be displayed.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.Type
  commentId: F:TinyLife.Actions.CanExecuteResult.Type
  id: Type
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: CanExecuteResult.Type
  fullName: TinyLife.Actions.CanExecuteResult.Type
  type: Field
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nThe <xref href=\"TinyLife.Actions.CanExecuteResult.ResultType\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref>. In general, custom results will only have to use <xref href=\"TinyLife.Actions.CanExecuteResult.ResultType.Invalid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly CanExecuteResult.ResultType Type
    return:
      type: TinyLife.Actions.CanExecuteResult.ResultType
    content.vb: Public ReadOnly Type As CanExecuteResult.ResultType
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Actions.CanExecuteResult.#ctor(System.String,TinyLife.Actions.CanExecuteResult.ResultType)
  commentId: M:TinyLife.Actions.CanExecuteResult.#ctor(System.String,TinyLife.Actions.CanExecuteResult.ResultType)
  id: '#ctor(System.String,TinyLife.Actions.CanExecuteResult.ResultType)'
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: CanExecuteResult(String, CanExecuteResult.ResultType)
  nameWithType: CanExecuteResult.CanExecuteResult(String, CanExecuteResult.ResultType)
  fullName: TinyLife.Actions.CanExecuteResult.CanExecuteResult(System.String, TinyLife.Actions.CanExecuteResult.ResultType)
  type: Constructor
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nCreates a new <xref href=\"TinyLife.Actions.CanExecuteResult\" data-throw-if-not-resolved=\"false\"></xref> with the given settings.\n"
  example: []
  syntax:
    content: public CanExecuteResult(string name, CanExecuteResult.ResultType type = CanExecuteResult.ResultType.Invalid)
    parameters:
    - id: name
      type: System.String
      description: The name of this <xref href="TinyLife.Actions.CanExecuteResult" data-throw-if-not-resolved="false"></xref>, which will be localized and displayed to the player.
    - id: type
      type: TinyLife.Actions.CanExecuteResult.ResultType
      description: The <xref href="TinyLife.Actions.CanExecuteResult.ResultType" data-throw-if-not-resolved="false"></xref>, which is usually <xref href="TinyLife.Actions.CanExecuteResult.ResultType.Invalid" data-throw-if-not-resolved="false"></xref> for custom types, which it also defaults to.
    content.vb: Public Sub New(name As String, type As CanExecuteResult.ResultType = CanExecuteResult.ResultType.Invalid)
  overload: TinyLife.Actions.CanExecuteResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  id: Equals(TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Equals(CanExecuteResult)
  nameWithType: CanExecuteResult.Equals(CanExecuteResult)
  fullName: TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public readonly bool Equals(CanExecuteResult other)
    parameters:
    - id: other
      type: TinyLife.Actions.CanExecuteResult
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
    content.vb: Public Function Equals(other As CanExecuteResult) As Boolean
  overload: TinyLife.Actions.CanExecuteResult.Equals*
  implements:
  - System.IEquatable{TinyLife.Actions.CanExecuteResult}.Equals(TinyLife.Actions.CanExecuteResult)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: TinyLife.Actions.CanExecuteResult.Equals(System.Object)
  commentId: M:TinyLife.Actions.CanExecuteResult.Equals(System.Object)
  id: Equals(System.Object)
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CanExecuteResult.Equals(Object)
  fullName: TinyLife.Actions.CanExecuteResult.Equals(System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 52
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and this instance are the same type and represent the same value; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: TinyLife.Actions.CanExecuteResult.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.CanExecuteResult.GetHashCode
  commentId: M:TinyLife.Actions.CanExecuteResult.GetHashCode
  id: GetHashCode
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CanExecuteResult.GetHashCode()
  fullName: TinyLife.Actions.CanExecuteResult.GetHashCode()
  type: Method
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHashCode
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: TinyLife.Actions.CanExecuteResult.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Actions.CanExecuteResult.op_Equality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.CanExecuteResult.op_Equality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  id: op_Equality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Equality(CanExecuteResult, CanExecuteResult)
  nameWithType: CanExecuteResult.Equality(CanExecuteResult, CanExecuteResult)
  fullName: TinyLife.Actions.CanExecuteResult.Equality(TinyLife.Actions.CanExecuteResult, TinyLife.Actions.CanExecuteResult)
  type: Operator
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: op_Equality
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  example: []
  syntax:
    content: public static bool operator ==(CanExecuteResult left, CanExecuteResult right)
    parameters:
    - id: left
      type: TinyLife.Actions.CanExecuteResult
    - id: right
      type: TinyLife.Actions.CanExecuteResult
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As CanExecuteResult, right As CanExecuteResult) As Boolean
  overload: TinyLife.Actions.CanExecuteResult.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Actions.CanExecuteResult.op_Inequality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.CanExecuteResult.op_Inequality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  id: op_Inequality(TinyLife.Actions.CanExecuteResult,TinyLife.Actions.CanExecuteResult)
  parent: TinyLife.Actions.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Inequality(CanExecuteResult, CanExecuteResult)
  nameWithType: CanExecuteResult.Inequality(CanExecuteResult, CanExecuteResult)
  fullName: TinyLife.Actions.CanExecuteResult.Inequality(TinyLife.Actions.CanExecuteResult, TinyLife.Actions.CanExecuteResult)
  type: Operator
  source:
    remote:
      path: TinyLife/Actions/CanExecuteResult.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: op_Inequality
    path: ../TinyLife/Actions/CanExecuteResult.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  example: []
  syntax:
    content: public static bool operator !=(CanExecuteResult left, CanExecuteResult right)
    parameters:
    - id: left
      type: TinyLife.Actions.CanExecuteResult
    - id: right
      type: TinyLife.Actions.CanExecuteResult
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As CanExecuteResult, right As CanExecuteResult) As Boolean
  overload: TinyLife.Actions.CanExecuteResult.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Actions.CanExecuteResult.Name
  commentId: F:TinyLife.Actions.CanExecuteResult.Name
  isExternal: true
- uid: TinyLife.Actions.CanExecuteResult
  commentId: T:TinyLife.Actions.CanExecuteResult
  parent: TinyLife.Actions
  name: CanExecuteResult
  nameWithType: CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult
- uid: TinyLife.Actions.CanExecuteResult.ResultType
  commentId: T:TinyLife.Actions.CanExecuteResult.ResultType
  parent: TinyLife.Actions
  name: CanExecuteResult.ResultType
  nameWithType: CanExecuteResult.ResultType
  fullName: TinyLife.Actions.CanExecuteResult.ResultType
- uid: TinyLife.Actions.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.CanExecuteResult.Hidden
  isExternal: true
- uid: TinyLife.Actions.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.CanExecuteResult.Valid
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.IEquatable{TinyLife.Actions.CanExecuteResult}
  commentId: T:System.IEquatable{TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<CanExecuteResult>
  nameWithType: IEquatable<CanExecuteResult>
  fullName: System.IEquatable<TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: IEquatable(Of CanExecuteResult)
  fullName.vb: System.IEquatable(Of TinyLife.Actions.CanExecuteResult)
  name.vb: IEquatable(Of CanExecuteResult)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CanExecuteResult.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<CanExecuteResult>()
  nameWithType: Extensions.JsonCopy<CanExecuteResult>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.CanExecuteResult>()
  nameWithType.vb: Extensions.JsonCopy(Of CanExecuteResult)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.CanExecuteResult)()
  name.vb: JsonCopy(Of CanExecuteResult)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<CanExecuteResult>
    nameWithType: Extensions.JsonCopy<CanExecuteResult>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.CanExecuteResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of CanExecuteResult)
    nameWithType: Extensions.JsonCopy(Of CanExecuteResult)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.CanExecuteResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CanExecuteResult.TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  name: BothValid(Func<CanExecuteResult>)
  nameWithType: Extensions.BothValid(Func<CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(System.Func<TinyLife.Actions.CanExecuteResult>)
  nameWithType.vb: Extensions.BothValid(Func(Of CanExecuteResult))
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(System.Func(Of TinyLife.Actions.CanExecuteResult))
  name.vb: BothValid(Func(Of CanExecuteResult))
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
  isExternal: true
  name: BothValid(CanExecuteResult, Func<CanExecuteResult>)
  nameWithType: Extensions.BothValid(CanExecuteResult, Func<CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func<TinyLife.Actions.CanExecuteResult>)
  nameWithType.vb: Extensions.BothValid(CanExecuteResult, Func(Of CanExecuteResult))
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult, System.Func(Of TinyLife.Actions.CanExecuteResult))
  name.vb: BothValid(CanExecuteResult, Func(Of CanExecuteResult))
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.CanExecuteResult,System.Func{TinyLife.Actions.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.CanExecuteResult.Type
  commentId: F:TinyLife.Actions.CanExecuteResult.Type
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.CanExecuteResult.ResultType.Invalid
  commentId: F:TinyLife.Actions.CanExecuteResult.ResultType.Invalid
  isExternal: true
- uid: TinyLife.Actions.CanExecuteResult.#ctor*
  commentId: Overload:TinyLife.Actions.CanExecuteResult.#ctor
  name: CanExecuteResult
  nameWithType: CanExecuteResult.CanExecuteResult
  fullName: TinyLife.Actions.CanExecuteResult.CanExecuteResult
- uid: TinyLife.Actions.CanExecuteResult.Equals*
  commentId: Overload:TinyLife.Actions.CanExecuteResult.Equals
  name: Equals
  nameWithType: CanExecuteResult.Equals
  fullName: TinyLife.Actions.CanExecuteResult.Equals
- uid: System.IEquatable{TinyLife.Actions.CanExecuteResult}.Equals(TinyLife.Actions.CanExecuteResult)
  commentId: M:System.IEquatable{TinyLife.Actions.CanExecuteResult}.Equals(TinyLife.Actions.CanExecuteResult)
  parent: System.IEquatable{TinyLife.Actions.CanExecuteResult}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(CanExecuteResult)
  nameWithType: IEquatable<CanExecuteResult>.Equals(CanExecuteResult)
  fullName: System.IEquatable<TinyLife.Actions.CanExecuteResult>.Equals(TinyLife.Actions.CanExecuteResult)
  nameWithType.vb: IEquatable(Of CanExecuteResult).Equals(CanExecuteResult)
  fullName.vb: System.IEquatable(Of TinyLife.Actions.CanExecuteResult).Equals(TinyLife.Actions.CanExecuteResult)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<CanExecuteResult>.Equals
    fullName: System.IEquatable<TinyLife.Actions.CanExecuteResult>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of CanExecuteResult).Equals
    fullName: System.IEquatable(Of TinyLife.Actions.CanExecuteResult).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
    nameWithType: CanExecuteResult
    fullName: TinyLife.Actions.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CanExecuteResult.GetHashCode*
  commentId: Overload:TinyLife.Actions.CanExecuteResult.GetHashCode
  name: GetHashCode
  nameWithType: CanExecuteResult.GetHashCode
  fullName: TinyLife.Actions.CanExecuteResult.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  commentId: M:TinyLife.Actions.CanExecuteResult.Equals(TinyLife.Actions.CanExecuteResult)
  isExternal: true
- uid: TinyLife.Actions.CanExecuteResult.op_Equality*
  commentId: Overload:TinyLife.Actions.CanExecuteResult.op_Equality
  name: Equality
  nameWithType: CanExecuteResult.Equality
  fullName: TinyLife.Actions.CanExecuteResult.Equality
- uid: TinyLife.Actions.CanExecuteResult.op_Inequality*
  commentId: Overload:TinyLife.Actions.CanExecuteResult.op_Inequality
  name: Inequality
  nameWithType: CanExecuteResult.Inequality
  fullName: TinyLife.Actions.CanExecuteResult.Inequality

### YamlMime:ManagedReference
items:
- uid: TinyLife.Uis.CharacterCreator
  commentId: T:TinyLife.Uis.CharacterCreator
  id: CharacterCreator
  parent: TinyLife.Uis
  children:
  - TinyLife.Uis.CharacterCreator.Active
  - TinyLife.Uis.CharacterCreator.CanCloseOrExport
  - TinyLife.Uis.CharacterCreator.CanSwitchPeople
  - TinyLife.Uis.CharacterCreator.MaxHouseholdSize
  - TinyLife.Uis.CharacterCreator.MaxOutfitAmount
  - TinyLife.Uis.CharacterCreator.Open(TinyLife.Objects.Person,System.Boolean)
  langs:
  - csharp
  - vb
  name: CharacterCreator
  nameWithType: CharacterCreator
  fullName: TinyLife.Uis.CharacterCreator
  type: Class
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CharacterCreator
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nThe character creator is displayed when a person (or household) is being edited in terms of their <xref href=\"TinyLife.Objects.Clothes\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public class CharacterCreator
    content.vb: Public Class CharacterCreator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Uis.CharacterCreator.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Uis.CharacterCreator.MaxHouseholdSize
  commentId: F:TinyLife.Uis.CharacterCreator.MaxHouseholdSize
  id: MaxHouseholdSize
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: MaxHouseholdSize
  nameWithType: CharacterCreator.MaxHouseholdSize
  fullName: TinyLife.Uis.CharacterCreator.MaxHouseholdSize
  type: Field
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxHouseholdSize
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nThe maximum amount of people allowed in one household at a time.\nThis is a constant that is set to 8.\n"
  example: []
  syntax:
    content: public const int MaxHouseholdSize = 8
    return:
      type: System.Int32
    content.vb: Public Const MaxHouseholdSize As Integer = 8
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Uis.CharacterCreator.MaxOutfitAmount
  commentId: F:TinyLife.Uis.CharacterCreator.MaxOutfitAmount
  id: MaxOutfitAmount
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: MaxOutfitAmount
  nameWithType: CharacterCreator.MaxOutfitAmount
  fullName: TinyLife.Uis.CharacterCreator.MaxOutfitAmount
  type: Field
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxOutfitAmount
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nThe maximum amount of outfits that any given person can have.\nThis is a constant that is set to 10.\n"
  example: []
  syntax:
    content: public const int MaxOutfitAmount = 10
    return:
      type: System.Int32
    content.vb: Public Const MaxOutfitAmount As Integer = 10
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Uis.CharacterCreator.Active
  commentId: P:TinyLife.Uis.CharacterCreator.Active
  id: Active
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: Active
  nameWithType: CharacterCreator.Active
  fullName: TinyLife.Uis.CharacterCreator.Active
  type: Property
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Active
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nThe currently displayed <xref href=\"TinyLife.Uis.CharacterCreator\" data-throw-if-not-resolved=\"false\"></xref> instance, or null if the character editor is closed\n"
  example: []
  syntax:
    content: public static CharacterCreator Active { get; }
    parameters: []
    return:
      type: TinyLife.Uis.CharacterCreator
    content.vb: Public Shared ReadOnly Property Active As CharacterCreator
  overload: TinyLife.Uis.CharacterCreator.Active*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Uis.CharacterCreator.CanSwitchPeople
  commentId: M:TinyLife.Uis.CharacterCreator.CanSwitchPeople
  id: CanSwitchPeople
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: CanSwitchPeople()
  nameWithType: CharacterCreator.CanSwitchPeople()
  fullName: TinyLife.Uis.CharacterCreator.CanSwitchPeople()
  type: Method
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanSwitchPeople
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 360
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nReturns whether or not this character creator instance currently allows switching the selected character.\nThe return value is based on the selected person&apos;s <xref href=\"TinyLife.Objects.Person.FullName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.PersonalityTypes\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool CanSwitchPeople()
    return:
      type: System.Boolean
      description: Whether we can currently switch the active person
    content.vb: Public Function CanSwitchPeople As Boolean
  overload: TinyLife.Uis.CharacterCreator.CanSwitchPeople*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Uis.CharacterCreator.CanCloseOrExport
  commentId: M:TinyLife.Uis.CharacterCreator.CanCloseOrExport
  id: CanCloseOrExport
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: CanCloseOrExport()
  nameWithType: CharacterCreator.CanCloseOrExport()
  fullName: TinyLife.Uis.CharacterCreator.CanCloseOrExport()
  type: Method
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanCloseOrExport
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 371
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nReturns whether the character creator currently allows being closed or for the current household to be exported.\nThe return value is based on <xref href=\"TinyLife.Uis.CharacterCreator.CanSwitchPeople\" data-throw-if-not-resolved=\"false\"></xref>, as well as <xref href=\"TinyLife.World.Household.HasAdult(System.Collections.Generic.IEnumerable%7bTinyLife.Objects.Person%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool CanCloseOrExport()
    return:
      type: System.Boolean
      description: Whether the character creator can currently be closed or exported.
    content.vb: Public Function CanCloseOrExport As Boolean
  overload: TinyLife.Uis.CharacterCreator.CanCloseOrExport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Uis.CharacterCreator.Open(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Uis.CharacterCreator.Open(TinyLife.Objects.Person,System.Boolean)
  id: Open(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Uis.CharacterCreator
  langs:
  - csharp
  - vb
  name: Open(Person, Boolean)
  nameWithType: CharacterCreator.Open(Person, Boolean)
  fullName: TinyLife.Uis.CharacterCreator.Open(TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Uis/CharacterCreator.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Open
    path: ../TinyLife/Uis/CharacterCreator.cs
    startLine: 737
  assemblies:
  - Tiny Life
  namespace: TinyLife.Uis
  summary: "\nOpens a new <xref href=\"TinyLife.Uis.CharacterCreator\" data-throw-if-not-resolved=\"false\"></xref> for the given person (and their household).\n"
  example: []
  syntax:
    content: public static void Open(Person person, bool full)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to open in the character creator
    - id: full
      type: System.Boolean
      description: If this value is true, editing the person&apos;s name, skin and eye color and personality is possible
    content.vb: Public Shared Sub Open(person As Person, full As Boolean)
  overload: TinyLife.Uis.CharacterCreator.Open*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Clothes
  commentId: T:TinyLife.Objects.Clothes
  parent: TinyLife.Objects
  name: Clothes
  nameWithType: Clothes
  fullName: TinyLife.Objects.Clothes
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis.CharacterCreator.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<CharacterCreator>()
  nameWithType: Extensions.JsonCopy<CharacterCreator>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Uis.CharacterCreator>()
  nameWithType.vb: Extensions.JsonCopy(Of CharacterCreator)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Uis.CharacterCreator)()
  name.vb: JsonCopy(Of CharacterCreator)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<CharacterCreator>
    nameWithType: Extensions.JsonCopy<CharacterCreator>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Uis.CharacterCreator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of CharacterCreator)
    nameWithType: Extensions.JsonCopy(Of CharacterCreator)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Uis.CharacterCreator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Uis.CharacterCreator
  commentId: T:TinyLife.Uis.CharacterCreator
  parent: TinyLife.Uis
  name: CharacterCreator
  nameWithType: CharacterCreator
  fullName: TinyLife.Uis.CharacterCreator
- uid: TinyLife.Uis.CharacterCreator.Active*
  commentId: Overload:TinyLife.Uis.CharacterCreator.Active
  name: Active
  nameWithType: CharacterCreator.Active
  fullName: TinyLife.Uis.CharacterCreator.Active
- uid: TinyLife.Objects.Person.FullName
  commentId: P:TinyLife.Objects.Person.FullName
  isExternal: true
- uid: TinyLife.Objects.Person.PersonalityTypes
  commentId: F:TinyLife.Objects.Person.PersonalityTypes
  isExternal: true
- uid: TinyLife.Uis.CharacterCreator.CanSwitchPeople*
  commentId: Overload:TinyLife.Uis.CharacterCreator.CanSwitchPeople
  name: CanSwitchPeople
  nameWithType: CharacterCreator.CanSwitchPeople
  fullName: TinyLife.Uis.CharacterCreator.CanSwitchPeople
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Uis.CharacterCreator.CanSwitchPeople
  commentId: M:TinyLife.Uis.CharacterCreator.CanSwitchPeople
  isExternal: true
- uid: TinyLife.World.Household.HasAdult(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  commentId: M:TinyLife.World.Household.HasAdult(System.Collections.Generic.IEnumerable{TinyLife.Objects.Person})
  isExternal: true
- uid: TinyLife.Uis.CharacterCreator.CanCloseOrExport*
  commentId: Overload:TinyLife.Uis.CharacterCreator.CanCloseOrExport
  name: CanCloseOrExport
  nameWithType: CharacterCreator.CanCloseOrExport
  fullName: TinyLife.Uis.CharacterCreator.CanCloseOrExport
- uid: TinyLife.Uis.CharacterCreator.Open*
  commentId: Overload:TinyLife.Uis.CharacterCreator.Open
  name: Open
  nameWithType: CharacterCreator.Open
  fullName: TinyLife.Uis.CharacterCreator.Open
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person

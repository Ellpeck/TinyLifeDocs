### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Memory
  commentId: T:TinyLife.Goals.Memory
  id: Memory
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Memory.#ctor(TinyLife.Goals.MemoryType,TinyLife.Objects.Person,System.TimeSpan)
  - TinyLife.Goals.Memory.Person
  - TinyLife.Goals.Memory.TimeOccured
  - TinyLife.Goals.Memory.TimeSinceOccured
  - TinyLife.Goals.Memory.Type
  - TinyLife.Goals.Memory.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Memory
  nameWithType: Memory
  fullName: TinyLife.Goals.Memory
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Memory
    path: ../TinyLife/Goals/Memory.cs
    startLine: 84
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA memory is a set of information that a <xref href=\"TinyLife.Goals.Memory.Person\" data-throw-if-not-resolved=\"false\"></xref> can store, related to an activity or event that has happened at a given type.\nA memory is constructed from an underlying <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Memory : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Memory
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.Memory.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.Memory.Type
  commentId: F:TinyLife.Goals.Memory.Type
  id: Type
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Memory.Type
  fullName: TinyLife.Goals.Memory.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Goals/Memory.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe type of this memory.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly MemoryType Type
    return:
      type: TinyLife.Goals.MemoryType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As MemoryType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Memory.TimeOccured
  commentId: F:TinyLife.Goals.Memory.TimeOccured
  id: TimeOccured
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: TimeOccured
  nameWithType: Memory.TimeOccured
  fullName: TinyLife.Goals.Memory.TimeOccured
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TimeOccured
    path: ../TinyLife/Goals/Memory.cs
    startLine: 96
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe in-game time that this event occured at.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly TimeSpan TimeOccured
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember>

      Public ReadOnly TimeOccured As TimeSpan
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Memory.Person
  commentId: P:TinyLife.Goals.Memory.Person
  id: Person
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Memory.Person
  fullName: TinyLife.Goals.Memory.Person
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Goals/Memory.cs
    startLine: 101
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe person that has this memory.\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Goals.Memory.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Memory.TimeSinceOccured
  commentId: P:TinyLife.Goals.Memory.TimeSinceOccured
  id: TimeSinceOccured
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: TimeSinceOccured
  nameWithType: Memory.TimeSinceOccured
  fullName: TinyLife.Goals.Memory.TimeSinceOccured
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TimeSinceOccured
    path: ../TinyLife/Goals/Memory.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the time since this memory occured. This uses <xref href=\"TinyLife.GameImpl.CurrentTime\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.Memory.TimeOccured\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TimeSpan TimeSinceOccured { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property TimeSinceOccured As TimeSpan
  overload: TinyLife.Goals.Memory.TimeSinceOccured*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Memory.#ctor(TinyLife.Goals.MemoryType,TinyLife.Objects.Person,System.TimeSpan)
  commentId: M:TinyLife.Goals.Memory.#ctor(TinyLife.Goals.MemoryType,TinyLife.Objects.Person,System.TimeSpan)
  id: '#ctor(TinyLife.Goals.MemoryType,TinyLife.Objects.Person,System.TimeSpan)'
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: Memory(MemoryType, Person, TimeSpan)
  nameWithType: Memory.Memory(MemoryType, Person, TimeSpan)
  fullName: TinyLife.Goals.Memory.Memory(TinyLife.Goals.MemoryType, TinyLife.Objects.Person, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Memory.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new memory with the given settings.\nIn most cases, <xref href=\"TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person%2cSystem.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref> should be used instead.\n"
  example: []
  syntax:
    content: public Memory(MemoryType type, Person person, TimeSpan timeOccured)
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The type of this memory.
    - id: person
      type: TinyLife.Objects.Person
      description: The person that has this memory.
    - id: timeOccured
      type: System.TimeSpan
      description: The in-game time that this event occured at.
    content.vb: Public Sub New(type As MemoryType, person As Person, timeOccured As TimeSpan)
  overload: TinyLife.Goals.Memory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Memory.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.Memory.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Goals.Memory
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Memory.Validate(Person)
  fullName: TinyLife.Goals.Memory.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Memory.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Goals/Memory.cs
    startLine: 126
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nValidates this memory when the game is loaded. This method is claled in <xref href=\"TinyLife.Objects.Person.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method reutrns <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> if this memory is invalid in some way, causing it to be removed.\n"
  example: []
  syntax:
    content: public virtual bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that has this memory.
    return:
      type: System.Boolean
      description: Whether this memory is valid.
    content.vb: Public Overridable Function Validate(person As Person) As Boolean
  overload: TinyLife.Goals.Memory.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Goals.Memory.Person
  commentId: P:TinyLife.Goals.Memory.Person
  isExternal: true
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  parent: TinyLife.Goals
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Memory.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Memory>()
  nameWithType: Extensions.JsonCopy<Memory>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Memory>()
  nameWithType.vb: Extensions.JsonCopy(Of Memory)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Memory)()
  name.vb: JsonCopy(Of Memory)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Memory>
    nameWithType: Extensions.JsonCopy<Memory>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Memory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Memory)
    nameWithType: Extensions.JsonCopy(Of Memory)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Memory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Goals.Memory.Person*
  commentId: Overload:TinyLife.Goals.Memory.Person
  name: Person
  nameWithType: Memory.Person
  fullName: TinyLife.Goals.Memory.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.GameImpl.CurrentTime
  commentId: P:TinyLife.GameImpl.CurrentTime
  isExternal: true
- uid: TinyLife.Goals.Memory.TimeOccured
  commentId: F:TinyLife.Goals.Memory.TimeOccured
  isExternal: true
- uid: TinyLife.Goals.Memory.TimeSinceOccured*
  commentId: Overload:TinyLife.Goals.Memory.TimeSinceOccured
  name: TimeSinceOccured
  nameWithType: Memory.TimeSinceOccured
  fullName: TinyLife.Goals.Memory.TimeSinceOccured
- uid: TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Goals.MemoryType.Construct(TinyLife.Objects.Person,System.Nullable{System.TimeSpan})
  isExternal: true
- uid: TinyLife.Goals.Memory.#ctor*
  commentId: Overload:TinyLife.Goals.Memory.#ctor
  name: Memory
  nameWithType: Memory.Memory
  fullName: TinyLife.Goals.Memory.Memory
- uid: TinyLife.Objects.Person.Validate
  commentId: M:TinyLife.Objects.Person.Validate
  isExternal: true
- uid: TinyLife.Goals.Memory.Validate*
  commentId: Overload:TinyLife.Goals.Memory.Validate
  name: Validate
  nameWithType: Memory.Validate
  fullName: TinyLife.Goals.Memory.Validate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean

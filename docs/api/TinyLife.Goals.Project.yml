### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Project
  commentId: T:TinyLife.Goals.Project
  id: Project
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Project.#ctor(TinyLife.Objects.Person,System.String,System.String)
  - TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  - TinyLife.Goals.Project.DailyPay
  - TinyLife.Goals.Project.DailyPayReductionFactor
  - TinyLife.Goals.Project.GetVarieties(TinyLife.Actions.ActionInfo,System.String,System.Predicate{TinyLife.Goals.Project},System.Func{TinyLife.Goals.Project,System.String})
  - TinyLife.Goals.Project.MakeProgress(System.Single,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Goals.Project.Name
  - TinyLife.Goals.Project.OnNewDay
  - TinyLife.Goals.Project.OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.Action{TinyLife.Goals.Project},System.String)
  - TinyLife.Goals.Project.OpenScrapPrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.String,System.Action)
  - TinyLife.Goals.Project.Person
  - TinyLife.Goals.Project.Progress
  - TinyLife.Goals.Project.Quality
  - TinyLife.Goals.Project.Remove
  - TinyLife.Goals.Project.SetDailyPay(System.Single,System.Single,System.Boolean)
  - TinyLife.Goals.Project.Type
  - TinyLife.Goals.Project.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Project
  nameWithType: Project
  fullName: TinyLife.Goals.Project
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Project
    path: ../TinyLife/Goals/Project.cs
    startLine: 20
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA project is a thing that can be done, saved, completed and monetized by a <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nA project should be used for actions like writing and programming, where there isn&apos;t a physical, <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref>-based representation of the projecgt in the world (like with paintings).\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Project : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Project
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.Project.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.Project.Type
  commentId: F:TinyLife.Goals.Project.Type
  id: Type
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Project.Type
  fullName: TinyLife.Goals.Project.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Goals/Project.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe type of this project, which is an arbitrary string.\nBook writing projects, for example, have the type set to &quot;Book&quot;.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly string Type
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Project.Name
  commentId: F:TinyLife.Goals.Project.Name
  id: Name
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Project.Name
  fullName: TinyLife.Goals.Project.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/Project.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this project, which is usually user-entered using <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String%2cSystem.Action%7bSystem.String%7d%2cSystem.Predicate%7bSystem.String%7d%2cMLEM.Ui.Elements.TextField.Rule%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly string Name
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public ReadOnly Name As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Project.Quality
  commentId: F:TinyLife.Goals.Project.Quality
  id: Quality
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Quality
  nameWithType: Project.Quality
  fullName: TinyLife.Goals.Project.Quality
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Quality
    path: ../TinyLife/Goals/Project.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe quality of this project, which defaults to <xref href=\"TinyLife.Skills.Quality.Terrible\" data-throw-if-not-resolved=\"false\"></xref>, and does not have to be used\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Quality Quality
    return:
      type: TinyLife.Skills.Quality
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Quality As Quality
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.Progress
  commentId: P:TinyLife.Goals.Project.Progress
  id: Progress
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: Project.Progress
  fullName: TinyLife.Goals.Project.Progress
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Progress
    path: ../TinyLife/Goals/Project.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe progress of this project, which can be an arbitrary number.\nMost projects in the default game use a progress between 0 and 1 or between 0 and 100.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float Progress { get; protected set; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public Property Progress As Single
  overload: TinyLife.Goals.Project.Progress*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Project.DailyPay
  commentId: P:TinyLife.Goals.Project.DailyPay
  id: DailyPay
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: DailyPay
  nameWithType: Project.DailyPay
  fullName: TinyLife.Goals.Project.DailyPay
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DailyPay
    path: ../TinyLife/Goals/Project.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe daily pay value of this project.\nIf this is set, and <xref href=\"TinyLife.Goals.Project.DailyPayReductionFactor\" data-throw-if-not-resolved=\"false\"></xref> is also set, daily royalties will be paid to the <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref> that owns it.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public float DailyPay { get; protected set; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property DailyPay As Single
  overload: TinyLife.Goals.Project.DailyPay*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Project.DailyPayReductionFactor
  commentId: P:TinyLife.Goals.Project.DailyPayReductionFactor
  id: DailyPayReductionFactor
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: DailyPayReductionFactor
  nameWithType: Project.DailyPayReductionFactor
  fullName: TinyLife.Goals.Project.DailyPayReductionFactor
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DailyPayReductionFactor
    path: ../TinyLife/Goals/Project.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe amount by which the <xref href=\"TinyLife.Goals.Project.DailyPay\" data-throw-if-not-resolved=\"false\"></xref> of this project is reduced every day.\nIf this value is set to 0.1, for example, the <xref href=\"TinyLife.Goals.Project.DailyPay\" data-throw-if-not-resolved=\"false\"></xref> will be multiplied by 1 - 0.1 (= 0.9) every day.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public float DailyPayReductionFactor { get; protected set; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property DailyPayReductionFactor As Single
  overload: TinyLife.Goals.Project.DailyPayReductionFactor*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Project.Person
  commentId: P:TinyLife.Goals.Project.Person
  id: Person
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Project.Person
  fullName: TinyLife.Goals.Project.Person
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Goals/Project.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe person that owns this project\n"
  example: []
  syntax:
    content: public Person Person { get; protected set; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public Property Person As Person
  overload: TinyLife.Goals.Project.Person*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Project.#ctor(TinyLife.Objects.Person,System.String,System.String)
  commentId: M:TinyLife.Goals.Project.#ctor(TinyLife.Objects.Person,System.String,System.String)
  id: '#ctor(TinyLife.Objects.Person,System.String,System.String)'
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Project(Person, String, String)
  nameWithType: Project.Project(Person, String, String)
  fullName: TinyLife.Goals.Project.Project(TinyLife.Objects.Person, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Project.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new project with the given settings\n"
  example: []
  syntax:
    content: public Project(Person person, string type, string name)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that owns this project
    - id: type
      type: System.String
      description: The type of the project
    - id: name
      type: System.String
      description: The name of the project
    content.vb: Public Sub New(person As Person, type As String, name As String)
  overload: TinyLife.Goals.Project.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.Project.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: Project.Validate(Person)
  fullName: TinyLife.Goals.Project.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Goals/Project.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nValidates this project, setting the <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref> that owns it after the game is loaded.\n"
  example: []
  syntax:
    content: public virtual bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that owns this project
    return:
      type: System.Boolean
      description: Whether this project is considered valid
    content.vb: Public Overridable Function Validate(person As Person) As Boolean
  overload: TinyLife.Goals.Project.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Project.MakeProgress(System.Single,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Goals.Project.MakeProgress(System.Single,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  id: MakeProgress(System.Single,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: MakeProgress(Single, Single, ActionInfo, SkillType, Single)
  nameWithType: Project.MakeProgress(Single, Single, ActionInfo, SkillType, Single)
  fullName: TinyLife.Goals.Project.MakeProgress(System.Single, System.Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MakeProgress
    path: ../TinyLife/Goals/Project.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nMakes progress on the project, updating the <xref href=\"TinyLife.Goals.Project.Progress\" data-throw-if-not-resolved=\"false\"></xref> value based on the <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> and general efficiency modifier\n"
  example: []
  syntax:
    content: public virtual void MakeProgress(float amount, float speedMultiplier, ActionInfo info = null, SkillType skill = null, float levelModifier = 0.1F)
    parameters:
    - id: amount
      type: System.Single
      description: The amount to add to the <xref href="TinyLife.Goals.Project.Progress" data-throw-if-not-resolved="false"></xref>
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action informatio nthat optionally influences progress gain using <xref href="TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The (optional) skill that influences progress gain using <xref href="TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)" data-throw-if-not-resolved="false"></xref>
    - id: levelModifier
      type: System.Single
      description: The (optiona) amount that each level of the <code data-dev-comment-type="paramref" class="paramref">skill</code> influences progress gain. Defaults to 0.1.
    content.vb: Public Overridable Sub MakeProgress(amount As Single, speedMultiplier As Single, info As ActionInfo = Nothing, skill As SkillType = Nothing, levelModifier As Single = 0.1F)
  overload: TinyLife.Goals.Project.MakeProgress*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Project.Remove
  commentId: M:TinyLife.Goals.Project.Remove
  id: Remove
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: Remove()
  nameWithType: Project.Remove()
  fullName: TinyLife.Goals.Project.Remove()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Remove
    path: ../TinyLife/Goals/Project.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nRemoves this project from the <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s project list, effectively deleting it\n"
  example: []
  syntax:
    content: public virtual void Remove()
    content.vb: Public Overridable Sub Remove
  overload: TinyLife.Goals.Project.Remove*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Project.OnNewDay
  commentId: M:TinyLife.Goals.Project.OnNewDay
  id: OnNewDay
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: OnNewDay()
  nameWithType: Project.OnNewDay()
  fullName: TinyLife.Goals.Project.OnNewDay()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnNewDay
    path: ../TinyLife/Goals/Project.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis method gets called when a new day is reached. By default, this method reduces the <xref href=\"TinyLife.Goals.Project.DailyPay\" data-throw-if-not-resolved=\"false\"></xref> by the <xref href=\"TinyLife.Goals.Project.DailyPayReductionFactor\" data-throw-if-not-resolved=\"false\"></xref> and calls <xref href=\"TinyLife.Goals.Project.Remove\" data-throw-if-not-resolved=\"false\"></xref> if the <xref href=\"TinyLife.Goals.Project.DailyPay\" data-throw-if-not-resolved=\"false\"></xref> goes below 1.\n"
  example: []
  syntax:
    content: public virtual void OnNewDay()
    content.vb: Public Overridable Sub OnNewDay
  overload: TinyLife.Goals.Project.OnNewDay*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Project.SetDailyPay(System.Single,System.Single,System.Boolean)
  commentId: M:TinyLife.Goals.Project.SetDailyPay(System.Single,System.Single,System.Boolean)
  id: SetDailyPay(System.Single,System.Single,System.Boolean)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: SetDailyPay(Single, Single, Boolean)
  nameWithType: Project.SetDailyPay(Single, Single, Boolean)
  fullName: TinyLife.Goals.Project.SetDailyPay(System.Single, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetDailyPay
    path: ../TinyLife/Goals/Project.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nSets the daily pay amount of this project, optionally based on its <xref href=\"TinyLife.Goals.Project.Quality\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">influencedByQuality</code> is true, the daily pay and daily reduction factor will be modified to suit the quality better.\n"
  example: []
  syntax:
    content: public void SetDailyPay(float amount, float dailyReductionFactor, bool influencedByQuality = true)
    parameters:
    - id: amount
      type: System.Single
      description: The amount to pay daily
    - id: dailyReductionFactor
      type: System.Single
      description: The amount that the daily pay should be reduced by. <code data-dev-comment-type="paramref" class="paramref">amount</code> is multiplied with 1 - dailyReductionFactor every day.
    - id: influencedByQuality
      type: System.Boolean
      description: Whether the current <xref href="TinyLife.Goals.Project.Quality" data-throw-if-not-resolved="false"></xref> should have an effect on the pay
    content.vb: Public Sub SetDailyPay(amount As Single, dailyReductionFactor As Single, influencedByQuality As Boolean = True)
  overload: TinyLife.Goals.Project.SetDailyPay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  commentId: M:TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  id: CreateActions(TinyLife.Goals.Project.ActionSettings)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: CreateActions(Project.ActionSettings)
  nameWithType: Project.CreateActions(Project.ActionSettings)
  fullName: TinyLife.Goals.Project.CreateActions(TinyLife.Goals.Project.ActionSettings)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateActions
    path: ../TinyLife/Goals/Project.cs
    startLine: 137
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a set of action settings (which can be registered using <xref href=\"TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable%7bTinyLife.Actions.ActionType.TypeSettings%7d)\" data-throw-if-not-resolved=\"false\"></xref>) that involve creating, continuing and scrapping projects of a specified type.\nIt is recommended to use the provided non-default constructor of <xref href=\"TinyLife.Goals.Project.ActionSettings\" data-throw-if-not-resolved=\"false\"></xref> for this method.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionType.TypeSettings> CreateActions(Project.ActionSettings settings)
    parameters:
    - id: settings
      type: TinyLife.Goals.Project.ActionSettings
      description: The action settings
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
      description: A set of type settings for a start, continue and scrap action
    content.vb: Public Shared Function CreateActions(settings As Project.ActionSettings) As IEnumerable(Of ActionType.TypeSettings)
  overload: TinyLife.Goals.Project.CreateActions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Goals.Project.GetVarieties(TinyLife.Actions.ActionInfo,System.String,System.Predicate{TinyLife.Goals.Project},System.Func{TinyLife.Goals.Project,System.String})
  commentId: M:TinyLife.Goals.Project.GetVarieties(TinyLife.Actions.ActionInfo,System.String,System.Predicate{TinyLife.Goals.Project},System.Func{TinyLife.Goals.Project,System.String})
  id: GetVarieties(TinyLife.Actions.ActionInfo,System.String,System.Predicate{TinyLife.Goals.Project},System.Func{TinyLife.Goals.Project,System.String})
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: GetVarieties(ActionInfo, String, Predicate<Project>, Func<Project, String>)
  nameWithType: Project.GetVarieties(ActionInfo, String, Predicate<Project>, Func<Project, String>)
  fullName: TinyLife.Goals.Project.GetVarieties(TinyLife.Actions.ActionInfo, System.String, System.Predicate<TinyLife.Goals.Project>, System.Func<TinyLife.Goals.Project, System.String>)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVarieties
    path: ../TinyLife/Goals/Project.cs
    startLine: 176
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the varieties that a <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref> has at their disposal for a given project <xref href=\"TinyLife.Goals.Project.Type\" data-throw-if-not-resolved=\"false\"></xref>.\nThe varieties returned include all of the projects that the <xref href=\"TinyLife.Goals.Project.Person\" data-throw-if-not-resolved=\"false\"></xref> has in their project list.\n"
  example: []
  syntax:
    content: public static IEnumerable<ActionVariety> GetVarieties(ActionInfo info, string type, Predicate<Project> condition = null, Func<Project, string> projectDisplayName = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info
    - id: type
      type: System.String
      description: The type of projects to return varieties for
    - id: condition
      type: System.Predicate{TinyLife.Goals.Project}
      description: A condition that determines whether a project should be turned into a variety
    - id: projectDisplayName
      type: System.Func{TinyLife.Goals.Project,System.String}
      description: A function that determines the display name of each project, or null to display its <xref href="TinyLife.Goals.Project.Name" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
      description: A set of action varieties
    content.vb: Public Shared Function GetVarieties(info As ActionInfo, type As String, condition As Predicate(Of Project) = Nothing, projectDisplayName As Func(Of Project, String) = Nothing) As IEnumerable(Of ActionVariety)
  overload: TinyLife.Goals.Project.GetVarieties*
  nameWithType.vb: Project.GetVarieties(ActionInfo, String, Predicate(Of Project), Func(Of Project, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.Project.GetVarieties(TinyLife.Actions.ActionInfo, System.String, System.Predicate(Of TinyLife.Goals.Project), System.Func(Of TinyLife.Goals.Project, System.String))
  name.vb: GetVarieties(ActionInfo, String, Predicate(Of Project), Func(Of Project, String))
- uid: TinyLife.Goals.Project.OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.Action{TinyLife.Goals.Project},System.String)
  commentId: M:TinyLife.Goals.Project.OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.Action{TinyLife.Goals.Project},System.String)
  id: OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.Action{TinyLife.Goals.Project},System.String)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: OpenNamePrompt(TypelessAction, String, Action<Project>, String)
  nameWithType: Project.OpenNamePrompt(TypelessAction, String, Action<Project>, String)
  fullName: TinyLife.Goals.Project.OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction, System.String, System.Action<TinyLife.Goals.Project>, System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenNamePrompt
    path: ../TinyLife/Goals/Project.cs
    startLine: 190
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA helper method that uses <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String%2cSystem.Action%7bSystem.String%7d%2cSystem.Predicate%7bSystem.String%7d%2cMLEM.Ui.Elements.TextField.Rule%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to open a prompt that the player can enter a project name in when starting a new project.\nAdditionally, a (random or single) <code data-dev-comment-type=\"paramref\" class=\"paramref\">defaultName</code> can be specified to fill the text field by default.\n"
  example: []
  syntax:
    content: public static void OpenNamePrompt(TypelessAction action, string type, Action<Project> onNameChosen, string defaultName = null)
    parameters:
    - id: action
      type: TinyLife.Actions.Typeless.TypelessAction
      description: The action to open the prompt for.
    - id: type
      type: System.String
      description: The type of project to start and name.
    - id: onNameChosen
      type: System.Action{TinyLife.Goals.Project}
      description: An action that is invoked when the name is chosen and the project is started.
    - id: defaultName
      type: System.String
      description: The default name to fill the text field with.
    content.vb: Public Shared Sub OpenNamePrompt(action As TypelessAction, type As String, onNameChosen As Action(Of Project), defaultName As String = Nothing)
  overload: TinyLife.Goals.Project.OpenNamePrompt*
  nameWithType.vb: Project.OpenNamePrompt(TypelessAction, String, Action(Of Project), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.Project.OpenNamePrompt(TinyLife.Actions.Typeless.TypelessAction, System.String, System.Action(Of TinyLife.Goals.Project), System.String)
  name.vb: OpenNamePrompt(TypelessAction, String, Action(Of Project), String)
- uid: TinyLife.Goals.Project.OpenScrapPrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.String,System.Action)
  commentId: M:TinyLife.Goals.Project.OpenScrapPrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.String,System.Action)
  id: OpenScrapPrompt(TinyLife.Actions.Typeless.TypelessAction,System.String,System.String,System.Action)
  parent: TinyLife.Goals.Project
  langs:
  - csharp
  - vb
  name: OpenScrapPrompt(TypelessAction, String, String, Action)
  nameWithType: Project.OpenScrapPrompt(TypelessAction, String, String, Action)
  fullName: TinyLife.Goals.Project.OpenScrapPrompt(TinyLife.Actions.Typeless.TypelessAction, System.String, System.String, System.Action)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Project.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpenScrapPrompt
    path: ../TinyLife/Goals/Project.cs
    startLine: 204
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA helper method that uses <xref href=\"TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String%2cSystem.Action%7bSystem.String%7d%2cSystem.Predicate%7bSystem.String%7d%2cMLEM.Ui.Elements.TextField.Rule%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to open a prompt for when a project should be scrapped by a player.\n"
  example: []
  syntax:
    content: public static void OpenScrapPrompt(TypelessAction action, string type, string name, Action onScrapped = null)
    parameters:
    - id: action
      type: TinyLife.Actions.Typeless.TypelessAction
      description: The action to open the prompt for.
    - id: type
      type: System.String
      description: The type of project to scrap.
    - id: name
      type: System.String
      description: The name of the project to scrap.
    - id: onScrapped
      type: System.Action
      description: An action that is invoked when the project is scrapped.
    content.vb: Public Shared Sub OpenScrapPrompt(action As TypelessAction, type As String, name As String, onScrapped As Action = Nothing)
  overload: TinyLife.Goals.Project.OpenScrapPrompt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.Project.Person
  commentId: P:TinyLife.Goals.Project.Person
  isExternal: true
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Project>()
  nameWithType: Extensions.JsonCopy<Project>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Project>()
  nameWithType.vb: Extensions.JsonCopy(Of Project)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Project)()
  name.vb: JsonCopy(Of Project)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Project>
    nameWithType: Extensions.JsonCopy<Project>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Project>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Project)
    nameWithType: Extensions.JsonCopy(Of Project)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Project)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  commentId: M:TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
  parent: TinyLife.Actions.Typeless.TypelessAction
  isExternal: true
  name: OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  nameWithType: TypelessAction.OpenTextPrompt(String, Action<String>, Predicate<String>, TextField.Rule, String)
  fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action<System.String>, System.Predicate<System.String>, MLEM.Ui.Elements.TextField.Rule, System.String)
  nameWithType.vb: TypelessAction.OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
  fullName.vb: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String, System.Action(Of System.String), System.Predicate(Of System.String), MLEM.Ui.Elements.TextField.Rule, System.String)
  name.vb: OpenTextPrompt(String, Action(Of String), Predicate(Of String), TextField.Rule, String)
  spec.csharp:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
    name: OpenTextPrompt
    nameWithType: TypelessAction.OpenTextPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt(System.String,System.Action{System.String},System.Predicate{System.String},MLEM.Ui.Elements.TextField.Rule,System.String)
    name: OpenTextPrompt
    nameWithType: TypelessAction.OpenTextPrompt
    fullName: TinyLife.Actions.Typeless.TypelessAction.OpenTextPrompt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Ui.Elements.TextField.Rule
    name: TextField.Rule
    nameWithType: TextField.Rule
    fullName: MLEM.Ui.Elements.TextField.Rule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Typeless.TypelessAction
  commentId: T:TinyLife.Actions.Typeless.TypelessAction
  parent: TinyLife.Actions.Typeless
  name: TypelessAction
  nameWithType: TypelessAction
  fullName: TinyLife.Actions.Typeless.TypelessAction
- uid: TinyLife.Actions.Typeless
  commentId: N:TinyLife.Actions.Typeless
  name: TinyLife.Actions.Typeless
  nameWithType: TinyLife.Actions.Typeless
  fullName: TinyLife.Actions.Typeless
- uid: TinyLife.Skills.Quality.Terrible
  commentId: F:TinyLife.Skills.Quality.Terrible
  isExternal: true
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Goals.Project.Progress*
  commentId: Overload:TinyLife.Goals.Project.Progress
  name: Progress
  nameWithType: Project.Progress
  fullName: TinyLife.Goals.Project.Progress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Goals.Project.DailyPayReductionFactor
  commentId: P:TinyLife.Goals.Project.DailyPayReductionFactor
  isExternal: true
- uid: TinyLife.Goals.Project.DailyPay*
  commentId: Overload:TinyLife.Goals.Project.DailyPay
  name: DailyPay
  nameWithType: Project.DailyPay
  fullName: TinyLife.Goals.Project.DailyPay
- uid: TinyLife.Goals.Project.DailyPay
  commentId: P:TinyLife.Goals.Project.DailyPay
  isExternal: true
- uid: TinyLife.Goals.Project.DailyPayReductionFactor*
  commentId: Overload:TinyLife.Goals.Project.DailyPayReductionFactor
  name: DailyPayReductionFactor
  nameWithType: Project.DailyPayReductionFactor
  fullName: TinyLife.Goals.Project.DailyPayReductionFactor
- uid: TinyLife.Goals.Project.Person*
  commentId: Overload:TinyLife.Goals.Project.Person
  name: Person
  nameWithType: Project.Person
  fullName: TinyLife.Goals.Project.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Goals.Project.#ctor*
  commentId: Overload:TinyLife.Goals.Project.#ctor
  name: Project
  nameWithType: Project.Project
  fullName: TinyLife.Goals.Project.Project
- uid: TinyLife.Goals.Project.Validate*
  commentId: Overload:TinyLife.Goals.Project.Validate
  name: Validate
  nameWithType: Project.Validate
  fullName: TinyLife.Goals.Project.Validate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.Project.Progress
  commentId: P:TinyLife.Goals.Project.Progress
  isExternal: true
- uid: TinyLife.Skills.Skill
  commentId: T:TinyLife.Skills.Skill
  name: Skill
  nameWithType: Skill
  fullName: TinyLife.Skills.Skill
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
- uid: TinyLife.Goals.Project.MakeProgress*
  commentId: Overload:TinyLife.Goals.Project.MakeProgress
  name: MakeProgress
  nameWithType: Project.MakeProgress
  fullName: TinyLife.Goals.Project.MakeProgress
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Goals.Project.Remove*
  commentId: Overload:TinyLife.Goals.Project.Remove
  name: Remove
  nameWithType: Project.Remove
  fullName: TinyLife.Goals.Project.Remove
- uid: TinyLife.Goals.Project.Remove
  commentId: M:TinyLife.Goals.Project.Remove
  isExternal: true
- uid: TinyLife.Goals.Project.OnNewDay*
  commentId: Overload:TinyLife.Goals.Project.OnNewDay
  name: OnNewDay
  nameWithType: Project.OnNewDay
  fullName: TinyLife.Goals.Project.OnNewDay
- uid: TinyLife.Goals.Project.Quality
  commentId: F:TinyLife.Goals.Project.Quality
  isExternal: true
- uid: TinyLife.Goals.Project.SetDailyPay*
  commentId: Overload:TinyLife.Goals.Project.SetDailyPay
  name: SetDailyPay
  nameWithType: Project.SetDailyPay
  fullName: TinyLife.Goals.Project.SetDailyPay
- uid: TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  commentId: M:TinyLife.Actions.ActionType.RegisterAll(System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings})
  isExternal: true
- uid: TinyLife.Goals.Project.ActionSettings
  commentId: T:TinyLife.Goals.Project.ActionSettings
  parent: TinyLife.Goals
  name: Project.ActionSettings
  nameWithType: Project.ActionSettings
  fullName: TinyLife.Goals.Project.ActionSettings
- uid: TinyLife.Goals.Project.CreateActions*
  commentId: Overload:TinyLife.Goals.Project.CreateActions
  name: CreateActions
  nameWithType: Project.CreateActions
  fullName: TinyLife.Goals.Project.CreateActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionType.TypeSettings}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionType.TypeSettings>
  nameWithType: IEnumerable<ActionType.TypeSettings>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionType.TypeSettings>
  nameWithType.vb: IEnumerable(Of ActionType.TypeSettings)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionType.TypeSettings)
  name.vb: IEnumerable(Of ActionType.TypeSettings)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: ActionType.TypeSettings
    nameWithType: ActionType.TypeSettings
    fullName: TinyLife.Actions.ActionType.TypeSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType.TypeSettings
    name: ActionType.TypeSettings
    nameWithType: ActionType.TypeSettings
    fullName: TinyLife.Actions.ActionType.TypeSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Goals.Project.Type
  commentId: F:TinyLife.Goals.Project.Type
  isExternal: true
- uid: TinyLife.Goals.Project.Name
  commentId: F:TinyLife.Goals.Project.Name
  isExternal: true
- uid: TinyLife.Goals.Project.GetVarieties*
  commentId: Overload:TinyLife.Goals.Project.GetVarieties
  name: GetVarieties
  nameWithType: Project.GetVarieties
  fullName: TinyLife.Goals.Project.GetVarieties
- uid: System.Predicate{TinyLife.Goals.Project}
  commentId: T:System.Predicate{TinyLife.Goals.Project}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Project>
  nameWithType: Predicate<Project>
  fullName: System.Predicate<TinyLife.Goals.Project>
  nameWithType.vb: Predicate(Of Project)
  fullName.vb: System.Predicate(Of TinyLife.Goals.Project)
  name.vb: Predicate(Of Project)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Goals.Project,System.String}
  commentId: T:System.Func{TinyLife.Goals.Project,System.String}
  parent: System
  definition: System.Func`2
  name: Func<Project, String>
  nameWithType: Func<Project, String>
  fullName: System.Func<TinyLife.Goals.Project, System.String>
  nameWithType.vb: Func(Of Project, String)
  fullName.vb: System.Func(Of TinyLife.Goals.Project, System.String)
  name.vb: Func(Of Project, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.ActionVariety}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ActionVariety>
  nameWithType: IEnumerable<ActionVariety>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.ActionVariety>
  nameWithType.vb: IEnumerable(Of ActionVariety)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.ActionVariety)
  name.vb: IEnumerable(Of ActionVariety)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionVariety
    name: ActionVariety
    nameWithType: ActionVariety
    fullName: TinyLife.Actions.ActionVariety
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.OpenNamePrompt*
  commentId: Overload:TinyLife.Goals.Project.OpenNamePrompt
  name: OpenNamePrompt
  nameWithType: Project.OpenNamePrompt
  fullName: TinyLife.Goals.Project.OpenNamePrompt
- uid: System.Action{TinyLife.Goals.Project}
  commentId: T:System.Action{TinyLife.Goals.Project}
  parent: System
  definition: System.Action`1
  name: Action<Project>
  nameWithType: Action<Project>
  fullName: System.Action<TinyLife.Goals.Project>
  nameWithType.vb: Action(Of Project)
  fullName.vb: System.Action(Of TinyLife.Goals.Project)
  name.vb: Action(Of Project)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.OpenScrapPrompt*
  commentId: Overload:TinyLife.Goals.Project.OpenScrapPrompt
  name: OpenScrapPrompt
  nameWithType: Project.OpenScrapPrompt
  fullName: TinyLife.Goals.Project.OpenScrapPrompt
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action

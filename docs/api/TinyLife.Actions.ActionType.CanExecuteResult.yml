### YamlMime:ManagedReference
items:
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  id: ActionType.CanExecuteResult
  parent: TinyLife.Actions
  children:
  - TinyLife.Actions.ActionType.CanExecuteResult.AlreadyDone
  - TinyLife.Actions.ActionType.CanExecuteResult.BlockedByEmotionModifier
  - TinyLife.Actions.ActionType.CanExecuteResult.Expired
  - TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  - TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  - TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  - TinyLife.Actions.ActionType.CanExecuteResult.NoMatchingObjectAround
  - TinyLife.Actions.ActionType.CanExecuteResult.NoSpace
  - TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughMoney
  - TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughSkill
  - TinyLife.Actions.ActionType.CanExecuteResult.NotYours
  - TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  - TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  - TinyLife.Actions.ActionType.CanExecuteResult.TooFar
  - TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  - TinyLife.Actions.ActionType.CanExecuteResult.TooStunned
  - TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  - TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  - TinyLife.Actions.ActionType.CanExecuteResult.Valid
  - TinyLife.Actions.ActionType.CanExecuteResult.WaitingRequired
  - TinyLife.Actions.ActionType.CanExecuteResult.WrongRelationshipType
  langs:
  - csharp
  - vb
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
  type: Enum
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteResult
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 383
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nAn enumeration that represents whether or not an action can be executed. This is used by <xref href=\"TinyLife.Actions.ActionType.CanExecuteDelegate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public enum CanExecuteResult
    content.vb: Public Enum CanExecuteResult
  extensionMethods:
  - TinyLife.Actions.ActionType.CanExecuteResult.TinyLife.Utilities.Extensions.JsonCopy``1
  - TinyLife.Actions.ActionType.CanExecuteResult.TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  id: Hidden
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: ActionType.CanExecuteResult.Hidden
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.Hidden
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Hidden
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 388
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that causes the action to be hidden from the actions menu (and thus be unstartable)\n"
  example: []
  syntax:
    content: Hidden = 0
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Valid
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Valid
  id: Valid
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Valid
  nameWithType: ActionType.CanExecuteResult.Valid
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.Valid
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Valid
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 392
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that causes the action to be executable both by <xref href=\"TinyLife.Objects.PersonAi\" data-throw-if-not-resolved=\"false\"></xref> and by a player\n"
  example: []
  syntax:
    content: Valid = 1
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  id: HoldingItem
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: HoldingItem
  nameWithType: ActionType.CanExecuteResult.HoldingItem
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.HoldingItem
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HoldingItem
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 396
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned when the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in question is currently holding an item which interferes with the action in some way\n"
  example: []
  syntax:
    content: HoldingItem = 2
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NoSpace
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NoSpace
  id: NoSpace
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NoSpace
  nameWithType: ActionType.CanExecuteResult.NoSpace
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NoSpace
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NoSpace
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 400
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned when the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> in question has no space for an item or <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: NoSpace = 3
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  id: NoChair
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NoChair
  nameWithType: ActionType.CanExecuteResult.NoChair
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NoChair
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NoChair
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 404
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned when a chair is required for the action, but there is none present\n"
  example: []
  syntax:
    content: NoChair = 4
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughMoney
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughMoney
  id: NotEnoughMoney
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotEnoughMoney
  nameWithType: ActionType.CanExecuteResult.NotEnoughMoney
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughMoney
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotEnoughMoney
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 408
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned when there is not enough money in the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref> to execute this action\n"
  example: []
  syntax:
    content: NotEnoughMoney = 5
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughSkill
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughSkill
  id: NotEnoughSkill
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotEnoughSkill
  nameWithType: ActionType.CanExecuteResult.NotEnoughSkill
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NotEnoughSkill
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotEnoughSkill
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 412
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in question does not have a skill level high enough to execute this action\n"
  example: []
  syntax:
    content: NotEnoughSkill = 6
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooFar
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooFar
  id: TooFar
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: TooFar
  nameWithType: ActionType.CanExecuteResult.TooFar
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.TooFar
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TooFar
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 416
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in question is too far away to execute this action\n"
  example: []
  syntax:
    content: TooFar = 7
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NotYours
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NotYours
  id: NotYours
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NotYours
  nameWithType: ActionType.CanExecuteResult.NotYours
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NotYours
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NotYours
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 420
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> does not own the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> that this action is executed on\n"
  example: []
  syntax:
    content: NotYours = 8
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  id: TooUncomfortable
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: TooUncomfortable
  nameWithType: ActionType.CanExecuteResult.TooUncomfortable
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.TooUncomfortable
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TooUncomfortable
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 424
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is considered emotionally too uncomfortable to do something\n"
  example: []
  syntax:
    content: TooUncomfortable = 9
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  id: TooEmbarrassed
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: TooEmbarrassed
  nameWithType: ActionType.CanExecuteResult.TooEmbarrassed
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.TooEmbarrassed
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TooEmbarrassed
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 428
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is considered too embarrassed to do something\n"
  example: []
  syntax:
    content: TooEmbarrassed = 10
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  id: TooSad
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: TooSad
  nameWithType: ActionType.CanExecuteResult.TooSad
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.TooSad
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TooSad
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 432
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is considered too sad to do something\n"
  example: []
  syntax:
    content: TooSad = 11
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.WrongRelationshipType
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.WrongRelationshipType
  id: WrongRelationshipType
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: WrongRelationshipType
  nameWithType: ActionType.CanExecuteResult.WrongRelationshipType
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.WrongRelationshipType
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WrongRelationshipType
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 436
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> has the wrong <xref href=\"TinyLife.Actions.ActionType.Relationship(TinyLife.Actions.ActionInfo)\" data-throw-if-not-resolved=\"false\"></xref> to a given other person\n"
  example: []
  syntax:
    content: WrongRelationshipType = 12
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  id: ObjectBroken
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: ObjectBroken
  nameWithType: ActionType.CanExecuteResult.ObjectBroken
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.ObjectBroken
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ObjectBroken
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 440
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.Objects.BreakableFurniture\" data-throw-if-not-resolved=\"false\"></xref> involved in the action is broken\n"
  example: []
  syntax:
    content: ObjectBroken = 13
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.NoMatchingObjectAround
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.NoMatchingObjectAround
  id: NoMatchingObjectAround
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: NoMatchingObjectAround
  nameWithType: ActionType.CanExecuteResult.NoMatchingObjectAround
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.NoMatchingObjectAround
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: NoMatchingObjectAround
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 444
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if some object that is required for an action is missing, like a sink for cleaning a dish\n"
  example: []
  syntax:
    content: NoMatchingObjectAround = 14
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  id: UtilitiesDisabled
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: UtilitiesDisabled
  nameWithType: ActionType.CanExecuteResult.UtilitiesDisabled
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.UtilitiesDisabled
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UtilitiesDisabled
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 448
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>&apos;s utilities are disabled due to unpaid bills\n"
  example: []
  syntax:
    content: UtilitiesDisabled = 15
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.Expired
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.Expired
  id: Expired
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: Expired
  nameWithType: ActionType.CanExecuteResult.Expired
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.Expired
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Expired
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 452
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if the action obejct is considered expired\n"
  example: []
  syntax:
    content: Expired = 16
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.BlockedByEmotionModifier
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.BlockedByEmotionModifier
  id: BlockedByEmotionModifier
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: BlockedByEmotionModifier
  nameWithType: ActionType.CanExecuteResult.BlockedByEmotionModifier
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.BlockedByEmotionModifier
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BlockedByEmotionModifier
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 456
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if a specific <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> blocks an action\n"
  example: []
  syntax:
    content: BlockedByEmotionModifier = 17
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.WaitingRequired
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.WaitingRequired
  id: WaitingRequired
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: WaitingRequired
  nameWithType: ActionType.CanExecuteResult.WaitingRequired
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.WaitingRequired
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WaitingRequired
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 460
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if an action has to be waited for due to a cooldown\n"
  example: []
  syntax:
    content: WaitingRequired = 18
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TooStunned
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.TooStunned
  id: TooStunned
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: TooStunned
  nameWithType: ActionType.CanExecuteResult.TooStunned
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.TooStunned
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TooStunned
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 464
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if a person is <xref href=\"TinyLife.Emotions.EmotionType.Stunned\" data-throw-if-not-resolved=\"false\"></xref> and it prevents an action\n"
  example: []
  syntax:
    content: TooStunned = 19
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Actions.ActionType.CanExecuteResult.AlreadyDone
  commentId: F:TinyLife.Actions.ActionType.CanExecuteResult.AlreadyDone
  id: AlreadyDone
  parent: TinyLife.Actions.ActionType.CanExecuteResult
  langs:
  - csharp
  - vb
  name: AlreadyDone
  nameWithType: ActionType.CanExecuteResult.AlreadyDone
  fullName: TinyLife.Actions.ActionType.CanExecuteResult.AlreadyDone
  type: Field
  source:
    remote:
      path: TinyLife/Actions/ActionType.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AlreadyDone
    path: ../TinyLife/Actions/ActionType.cs
    startLine: 468
  assemblies:
  - Tiny Life
  namespace: TinyLife.Actions
  summary: "\nA result that should be returned if an action is already completed, like <xref href=\"TinyLife.Actions.ActionType.DoHomework\" data-throw-if-not-resolved=\"false\"></xref> if the homework is already completed\n"
  example: []
  syntax:
    content: AlreadyDone = 20
    return:
      type: TinyLife.Actions.ActionType.CanExecuteResult
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: TinyLife.Actions.ActionType.CanExecuteDelegate
  commentId: T:TinyLife.Actions.ActionType.CanExecuteDelegate
  parent: TinyLife.Actions
  name: ActionType.CanExecuteDelegate
  nameWithType: ActionType.CanExecuteDelegate
  fullName: TinyLife.Actions.ActionType.CanExecuteDelegate
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ActionType.CanExecuteResult>()
  nameWithType: Extensions.JsonCopy<ActionType.CanExecuteResult>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.CanExecuteResult>()
  nameWithType.vb: Extensions.JsonCopy(Of ActionType.CanExecuteResult)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.CanExecuteResult)()
  name.vb: JsonCopy(Of ActionType.CanExecuteResult)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ActionType.CanExecuteResult>
    nameWithType: Extensions.JsonCopy<ActionType.CanExecuteResult>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Actions.ActionType.CanExecuteResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ActionType.CanExecuteResult)
    nameWithType: Extensions.JsonCopy(Of ActionType.CanExecuteResult)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Actions.ActionType.CanExecuteResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.ActionType.CanExecuteResult.TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  name: BothValid(Func<ActionType.CanExecuteResult>)
  nameWithType: Extensions.BothValid(Func<ActionType.CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(System.Func<TinyLife.Actions.ActionType.CanExecuteResult>)
  nameWithType.vb: Extensions.BothValid(Func(Of ActionType.CanExecuteResult))
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(System.Func(Of TinyLife.Actions.ActionType.CanExecuteResult))
  name.vb: BothValid(Func(Of ActionType.CanExecuteResult))
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.BothValid(System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  commentId: M:TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
  isExternal: true
  name: BothValid(ActionType.CanExecuteResult, Func<ActionType.CanExecuteResult>)
  nameWithType: Extensions.BothValid(ActionType.CanExecuteResult, Func<ActionType.CanExecuteResult>)
  fullName: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult, System.Func<TinyLife.Actions.ActionType.CanExecuteResult>)
  nameWithType.vb: Extensions.BothValid(ActionType.CanExecuteResult, Func(Of ActionType.CanExecuteResult))
  fullName.vb: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult, System.Func(Of TinyLife.Actions.ActionType.CanExecuteResult))
  name.vb: BothValid(ActionType.CanExecuteResult, Func(Of ActionType.CanExecuteResult))
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.BothValid(TinyLife.Actions.ActionType.CanExecuteResult,System.Func{TinyLife.Actions.ActionType.CanExecuteResult})
    name: BothValid
    nameWithType: Extensions.BothValid
    fullName: TinyLife.Utilities.Extensions.BothValid
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType.CanExecuteResult
    name: ActionType.CanExecuteResult
    nameWithType: ActionType.CanExecuteResult
    fullName: TinyLife.Actions.ActionType.CanExecuteResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Actions.ActionType.CanExecuteResult
  commentId: T:TinyLife.Actions.ActionType.CanExecuteResult
  parent: TinyLife.Actions
  name: ActionType.CanExecuteResult
  nameWithType: ActionType.CanExecuteResult
  fullName: TinyLife.Actions.ActionType.CanExecuteResult
- uid: TinyLife.Objects.PersonAi
  commentId: T:TinyLife.Objects.PersonAi
  name: PersonAi
  nameWithType: PersonAi
  fullName: TinyLife.Objects.PersonAi
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.Actions.ActionType.Relationship(TinyLife.Actions.ActionInfo)
  commentId: M:TinyLife.Actions.ActionType.Relationship(TinyLife.Actions.ActionInfo)
  isExternal: true
- uid: TinyLife.Objects.BreakableFurniture
  commentId: T:TinyLife.Objects.BreakableFurniture
  parent: TinyLife.Objects
  name: BreakableFurniture
  nameWithType: BreakableFurniture
  fullName: TinyLife.Objects.BreakableFurniture
- uid: TinyLife.Emotions.EmotionModifier
  commentId: T:TinyLife.Emotions.EmotionModifier
  parent: TinyLife.Emotions
  name: EmotionModifier
  nameWithType: EmotionModifier
  fullName: TinyLife.Emotions.EmotionModifier
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Emotions.EmotionType.Stunned
  commentId: F:TinyLife.Emotions.EmotionType.Stunned
  isExternal: true
- uid: TinyLife.Actions.ActionType.DoHomework
  commentId: F:TinyLife.Actions.ActionType.DoHomework
  isExternal: true

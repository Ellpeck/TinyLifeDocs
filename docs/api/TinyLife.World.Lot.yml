### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  id: Lot
  parent: TinyLife.World
  children:
  - TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  - TinyLife.World.Lot.Area
  - TinyLife.World.Lot.AreRequirementsMet
  - TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  - TinyLife.World.Lot.Export
  - TinyLife.World.Lot.GetCoveredArea
  - TinyLife.World.Lot.GetDefaultTile
  - TinyLife.World.Lot.GetFrontDoor
  - TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  - TinyLife.World.Lot.GetObjects``1
  - TinyLife.World.Lot.GetPrice
  - TinyLife.World.Lot.GetRoofs
  - TinyLife.World.Lot.GetStairs
  - TinyLife.World.Lot.GetTiles
  - TinyLife.World.Lot.GetWalls``1
  - TinyLife.World.Lot.GetWeeklyBills
  - TinyLife.World.Lot.Household
  - TinyLife.World.Lot.Id
  - TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  - TinyLife.World.Lot.Map
  - TinyLife.World.Lot.Name
  - TinyLife.World.Lot.OnGetWeeklyBills
  - TinyLife.World.Lot.Type
  - TinyLife.World.Lot.Validate(TinyLife.World.Map)
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lot
    path: ../TinyLife/World/Lot.cs
    startLine: 27
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot is a designated area in the world (created using the <xref href=\"TinyLife.Tools.LotTool\" data-throw-if-not-resolved=\"false\"></xref>).\nIn the way it works, it acts similarly to a small <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>, allowing the retrieval of various object types only in its designated area.\nA lot has a <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref>, which determines what things can be done on the lot.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Lot : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class Lot Inherits JsonTypeSafeGenericDataHolder Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.OnGetWeeklyBills
  commentId: E:TinyLife.World.Lot.OnGetWeeklyBills
  id: OnGetWeeklyBills
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: OnGetWeeklyBills
  nameWithType: Lot.OnGetWeeklyBills
  fullName: TinyLife.World.Lot.OnGetWeeklyBills
  type: Event
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetWeeklyBills
    path: ../TinyLife/World/Lot.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn event that is invoked when weekly bills are calculated for this lot&apos;s <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.World.Lot.GetWeeklyBills\" data-throw-if-not-resolved=\"false\"></xref>.\nMods can subscribe to this event to add additional costs or reduce the default costs.\n"
  example: []
  syntax:
    content: public static event Lot.WeeklyBillsDelegate OnGetWeeklyBills
    return:
      type: TinyLife.World.Lot.WeeklyBillsDelegate
    content.vb: Public Shared Event OnGetWeeklyBills As Lot.WeeklyBillsDelegate
- uid: TinyLife.World.Lot.Id
  commentId: F:TinyLife.World.Lot.Id
  id: Id
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Lot.Id
  fullName: TinyLife.World.Lot.Id
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/World/Lot.cs
    startLine: 41
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe unique id of this lot.\nThis is randomly generated when the lot is first added to the world, and then persists across savings to disk.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Guid Id
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Id As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  id: Area
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: ../TinyLife/World/Lot.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe area in the world that this lot occupies\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Rectangle Area { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: >-
      <DataMember>

      Public Property Area As Rectangle
  overload: TinyLife.World.Lot.Area*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  id: Type
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/Lot.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref> that this lot has.\nThis value defaults to the &quot;Residential&quot; lot type.\n"
  example: []
  syntax:
    content: public LotType Type { get; set; }
    parameters: []
    return:
      type: TinyLife.World.LotType
    content.vb: Public Property Type As LotType
  overload: TinyLife.World.Lot.Type*
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  id: Household
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Household
    path: ../TinyLife/World/Lot.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe household that is currently occupying this <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nThis can only be non-null if the <xref href=\"TinyLife.World.Lot.Type\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"TinyLife.World.LotType.IsResidential\" data-throw-if-not-resolved=\"false\"></xref> set to true.\n"
  example: []
  syntax:
    content: public Household Household { get; }
    parameters: []
    return:
      type: TinyLife.World.Household
    content.vb: Public ReadOnly Property Household As Household
  overload: TinyLife.World.Lot.Household*
- uid: TinyLife.World.Lot.Name
  commentId: F:TinyLife.World.Lot.Name
  id: Name
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Lot.Name
  fullName: TinyLife.World.Lot.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Lot.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot, as set by the player in build mode\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Name
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Name As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Lot.Map
  commentId: P:TinyLife.World.Lot.Map
  id: Map
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: Lot.Map
  fullName: TinyLife.World.Lot.Map
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/World/Lot.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe map that this lot is on.\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public Property Map As Map
  overload: TinyLife.World.Lot.Map*
- uid: TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  commentId: M:TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  id: '#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)'
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Lot(Map, Rectangle)
  nameWithType: Lot.Lot(Map, Rectangle)
  fullName: TinyLife.World.Lot.Lot(TinyLife.World.Map, Microsoft.Xna.Framework.Rectangle)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Lot.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot on the given map with the given area\n"
  example: []
  syntax:
    content: public Lot(Map map, Rectangle area)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area
    content.vb: Public Sub New(map As Map, area As Rectangle)
  overload: TinyLife.World.Lot.#ctor*
  nameWithType.vb: Lot.New(Map, Rectangle)
  fullName.vb: TinyLife.World.Lot.New(TinyLife.World.Map, Microsoft.Xna.Framework.Rectangle)
  name.vb: New(Map, Rectangle)
- uid: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Lot.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Lot.Validate(Map)
  fullName: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Lot.cs
    startLine: 95
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public void Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    content.vb: Public Sub Validate(map As Map)
  overload: TinyLife.World.Lot.Validate*
- uid: TinyLife.World.Lot.GetObjects``1
  commentId: M:TinyLife.World.Lot.GetObjects``1
  id: GetObjects``1
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetObjects<T>()
  nameWithType: Lot.GetObjects<T>()
  fullName: TinyLife.World.Lot.GetObjects<T>()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObjects
    path: ../TinyLife/World/Lot.cs
    startLine: 106
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the set of all of the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetObjects<T>() where T : MapObject'
    typeParameters:
    - id: T
      description: The type of objects to receive
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: This lot&apos;s objects
    content.vb: Public Function GetObjects(Of T As MapObject)() As IEnumerable(Of T)
  overload: TinyLife.World.Lot.GetObjects*
  nameWithType.vb: Lot.GetObjects(Of T)()
  fullName.vb: TinyLife.World.Lot.GetObjects(Of T)()
  name.vb: GetObjects(Of T)()
- uid: TinyLife.World.Lot.GetWalls``1
  commentId: M:TinyLife.World.Lot.GetWalls``1
  id: GetWalls``1
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetWalls<T>()
  nameWithType: Lot.GetWalls<T>()
  fullName: TinyLife.World.Lot.GetWalls<T>()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalls
    path: ../TinyLife/World/Lot.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.Objects.WallLike\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public IEnumerable<T> GetWalls<T>() where T : WallLike'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: This lot&apos;s walls
    content.vb: Public Function GetWalls(Of T As WallLike)() As IEnumerable(Of T)
  overload: TinyLife.World.Lot.GetWalls*
  nameWithType.vb: Lot.GetWalls(Of T)()
  fullName.vb: TinyLife.World.Lot.GetWalls(Of T)()
  name.vb: GetWalls(Of T)()
- uid: TinyLife.World.Lot.GetRoofs
  commentId: M:TinyLife.World.Lot.GetRoofs
  id: GetRoofs
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetRoofs()
  nameWithType: Lot.GetRoofs()
  fullName: TinyLife.World.Lot.GetRoofs()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoofs
    path: ../TinyLife/World/Lot.cs
    startLine: 132
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<Roof> GetRoofs()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
      description: ''
    content.vb: Public Function GetRoofs() As IEnumerable(Of Roof)
  overload: TinyLife.World.Lot.GetRoofs*
- uid: TinyLife.World.Lot.GetStairs
  commentId: M:TinyLife.World.Lot.GetStairs
  id: GetStairs
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetStairs()
  nameWithType: Lot.GetStairs()
  fullName: TinyLife.World.Lot.GetStairs()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetStairs
    path: ../TinyLife/World/Lot.cs
    startLine: 145
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Stairs\" data-throw-if-not-resolved=\"false\"></xref> on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>, both partially and fully.\n"
  example: []
  syntax:
    content: public IEnumerable<Stairs> GetStairs()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
      description: The stairs on this lot.
    content.vb: Public Function GetStairs() As IEnumerable(Of Stairs)
  overload: TinyLife.World.Lot.GetStairs*
- uid: TinyLife.World.Lot.GetTiles
  commentId: M:TinyLife.World.Lot.GetTiles
  id: GetTiles
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetTiles()
  nameWithType: Lot.GetTiles()
  fullName: TinyLife.World.Lot.GetTiles()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTiles
    path: ../TinyLife/World/Lot.cs
    startLine: 158
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the tiles on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>, including all tiles on non-ground floors.\n"
  example: []
  syntax:
    content: public IEnumerable<(Point Pos, int Floor, Tile Tile)> GetTiles()
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
      description: All tiles on this lot.
    content.vb: Public Function GetTiles() As IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  overload: TinyLife.World.Lot.GetTiles*
- uid: TinyLife.World.Lot.GetDefaultTile
  commentId: M:TinyLife.World.Lot.GetDefaultTile
  id: GetDefaultTile
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetDefaultTile()
  nameWithType: Lot.GetDefaultTile()
  fullName: TinyLife.World.Lot.GetDefaultTile()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDefaultTile
    path: ../TinyLife/World/Lot.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the default tile for this lot, which is the tile that is most likely to be the &quot;ground tile&quot; in this area.\nThis is a heuristic based on the tiles that are at the borders of this lot.\n"
  example: []
  syntax:
    content: public Tile GetDefaultTile()
    return:
      type: TinyLife.World.Tile
      description: This lot&apos;s default tile.
    content.vb: Public Function GetDefaultTile() As Tile
  overload: TinyLife.World.Lot.GetDefaultTile*
- uid: TinyLife.World.Lot.AreRequirementsMet
  commentId: M:TinyLife.World.Lot.AreRequirementsMet
  id: AreRequirementsMet
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: AreRequirementsMet()
  nameWithType: Lot.AreRequirementsMet()
  fullName: TinyLife.World.Lot.AreRequirementsMet()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AreRequirementsMet
    path: ../TinyLife/World/Lot.cs
    startLine: 188
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether this lot <xref href=\"TinyLife.World.Lot.Type\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.LotType.RequiredFurniture\" data-throw-if-not-resolved=\"false\"></xref> requirements are currently met\n"
  example: []
  syntax:
    content: public bool AreRequirementsMet()
    return:
      type: System.Boolean
      description: true if the requirements are met, false otherwise
    content.vb: Public Function AreRequirementsMet() As Boolean
  overload: TinyLife.World.Lot.AreRequirementsMet*
- uid: TinyLife.World.Lot.GetFrontDoor
  commentId: M:TinyLife.World.Lot.GetFrontDoor
  id: GetFrontDoor
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetFrontDoor()
  nameWithType: Lot.GetFrontDoor()
  fullName: TinyLife.World.Lot.GetFrontDoor()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFrontDoor
    path: ../TinyLife/World/Lot.cs
    startLine: 203
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns this lot&apos;s front door, or null if there is no <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that matches the required conditions.\nA lot&apos;s front door is the door that is closest to the lot&apos;s object of interest, which is the first entry in <xref href=\"TinyLife.World.LotType.RequiredFurniture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (Wall Wall, Vector2 OutdoorPos) GetFrontDoor()
    return:
      type: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
      description: The lot&apos;s front door, or null if there is none.
    content.vb: Public Function GetFrontDoor() As (Wall As Wall, OutdoorPos As Vector2)
  overload: TinyLife.World.Lot.GetFrontDoor*
- uid: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  id: GetHomeLocation(TinyLife.Objects.Person)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetHomeLocation(Person)
  nameWithType: Lot.GetHomeLocation(Person)
  fullName: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHomeLocation
    path: ../TinyLife/World/Lot.cs
    startLine: 228
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the home location of the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> on this lot.\nThe home position is the position of the front door, or the closest border position to the passed <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public Vector2 GetHomeLocation(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose home location to retrieve
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The person&apos;s home location on this lot
    content.vb: Public Function GetHomeLocation(person As Person) As Vector2
  overload: TinyLife.World.Lot.GetHomeLocation*
- uid: TinyLife.World.Lot.GetPrice
  commentId: M:TinyLife.World.Lot.GetPrice
  id: GetPrice
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Lot.GetPrice()
  fullName: TinyLife.World.Lot.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Lot.cs
    startLine: 248
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns this lot&apos;s current price, including the prices of all furniture objects, walls, roofs, tiles and the price of its <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: This lot&apos;s total price.
    content.vb: Public Function GetPrice() As Single
  overload: TinyLife.World.Lot.GetPrice*
- uid: TinyLife.World.Lot.GetWeeklyBills
  commentId: M:TinyLife.World.Lot.GetWeeklyBills
  id: GetWeeklyBills
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetWeeklyBills()
  nameWithType: Lot.GetWeeklyBills()
  fullName: TinyLife.World.Lot.GetWeeklyBills()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWeeklyBills
    path: ../TinyLife/World/Lot.cs
    startLine: 262
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the amount of tiny bucks that need to be paid weekly by a <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> living on this lot.\nThe bills result from the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.WaterRating\" data-throw-if-not-resolved=\"false\"></xref> of the objects on the lot, as well as additional values like the lot size, and the <xref href=\"TinyLife.PersonalityType.CityNative\" data-throw-if-not-resolved=\"false\"></xref> personality.\n"
  example: []
  syntax:
    content: public Dictionary<string, float> GetWeeklyBills()
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Single}
      description: The amount of weekly bills, in tiny bucks
    content.vb: Public Function GetWeeklyBills() As Dictionary(Of String, Single)
  overload: TinyLife.World.Lot.GetWeeklyBills*
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  id: Export
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Export()
  nameWithType: Lot.Export()
  fullName: TinyLife.World.Lot.Export()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Export
    path: ../TinyLife/World/Lot.cs
    startLine: 287
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nExports this lot&apos;s data, including all of its <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.WallLike\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> obejects and its <xref href=\"TinyLife.World.Tile\" data-throw-if-not-resolved=\"false\"></xref> ground.\nNote that this does not change the lot itself, as it doesn&apos;t remove or add anything to it.\n"
  example: []
  syntax:
    content: public ExportedLot Export()
    return:
      type: TinyLife.World.ExportedLot
      description: An exported version of this lot
    content.vb: Public Function Export() As ExportedLot
  overload: TinyLife.World.Lot.Export*
- uid: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  id: Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Import(ExportedLot, string, bool, bool)
  nameWithType: Lot.Import(ExportedLot, string, bool, bool)
  fullName: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot, string, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Import
    path: ../TinyLife/World/Lot.cs
    startLine: 314
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nImports the given <xref href=\"TinyLife.World.ExportedLot\" data-throw-if-not-resolved=\"false\"></xref> onto this lot.\nNote that everything that was previously on this lot will be removed (and the money will be returned to this lot&apos;s <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref>).\nAlso note that the <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> stays the same, and all tiles outside of the exported lot&apos;s area (if it is smaller) are replaced with Grass.\n"
  example: []
  syntax:
    content: public void Import(ExportedLot lot, string lotName, bool exact = false, bool forceClear = false)
    parameters:
    - id: lot
      type: TinyLife.World.ExportedLot
      description: ''
    - id: lotName
      type: System.String
      description: The name to export this lot as.
    - id: exact
      type: System.Boolean
      description: Whether an exact copy of the lot should be imported. If this is false, the imported lot is moved to best fit the lot&apos;s dimensions
    - id: forceClear
      type: System.Boolean
      description: Whether the lot should be force-cleared before importing, meaning even <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> objects will be removed
    content.vb: Public Sub Import(lot As ExportedLot, lotName As String, exact As Boolean = False, forceClear As Boolean = False)
  overload: TinyLife.World.Lot.Import*
  nameWithType.vb: Lot.Import(ExportedLot, String, Boolean, Boolean)
  fullName.vb: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot, String, Boolean, Boolean)
  name.vb: Import(ExportedLot, String, Boolean, Boolean)
- uid: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  commentId: M:TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  id: CanImport(TinyLife.World.ExportedLot)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanImport(ExportedLot)
  nameWithType: Lot.CanImport(ExportedLot)
  fullName: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanImport
    path: ../TinyLife/World/Lot.cs
    startLine: 330
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA method that calculates whether the given <xref href=\"TinyLife.World.ExportedLot\" data-throw-if-not-resolved=\"false\"></xref> can be imported.\nA lot can be imported if the <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> has enough money, and if this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to the exported lot&apos;s area.\n"
  example: []
  syntax:
    content: public bool CanImport(ExportedLot import)
    parameters:
    - id: import
      type: TinyLife.World.ExportedLot
      description: The lot to import
    return:
      type: System.Boolean
      description: true if the lot can be imported, false otherwise
    content.vb: Public Function CanImport(import As ExportedLot) As Boolean
  overload: TinyLife.World.Lot.CanImport*
- uid: TinyLife.World.Lot.GetCoveredArea
  commentId: M:TinyLife.World.Lot.GetCoveredArea
  id: GetCoveredArea
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetCoveredArea()
  nameWithType: Lot.GetCoveredArea()
  fullName: TinyLife.World.Lot.GetCoveredArea()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCoveredArea
    path: ../TinyLife/World/Lot.cs
    startLine: 342
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this lot actually covers.\nThe area covered by this lot is always bounded by its <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>, but will be smaller if there are fewer objects on the lot.\n"
  example: []
  syntax:
    content: public RectangleF GetCoveredArea()
    return:
      type: MLEM.Misc.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea() As RectangleF
  overload: TinyLife.World.Lot.GetCoveredArea*
references:
- uid: TinyLife.Tools.LotTool
  commentId: T:TinyLife.Tools.LotTool
  name: LotTool
  nameWithType: LotTool
  fullName: TinyLife.Tools.LotTool
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Lot>(Lot)
  nameWithType: Extensions.JsonCopy<Lot>(Lot)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Lot>(TinyLife.World.Lot)
  nameWithType.vb: Extensions.JsonCopy(Of Lot)(Lot)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Lot)(TinyLife.World.Lot)
  name.vb: JsonCopy(Of Lot)(Lot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Lot)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.Lot
    name: Lot
  - name: '>'
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Lot)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  - name: (
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
- uid: TinyLife.World.Lot.GetWeeklyBills
  commentId: M:TinyLife.World.Lot.GetWeeklyBills
  name: GetWeeklyBills()
  nameWithType: Lot.GetWeeklyBills()
  fullName: TinyLife.World.Lot.GetWeeklyBills()
  spec.csharp:
  - uid: TinyLife.World.Lot.GetWeeklyBills
    name: GetWeeklyBills
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.World.Lot.GetWeeklyBills
    name: GetWeeklyBills
  - name: (
  - name: )
- uid: TinyLife.World.Lot.WeeklyBillsDelegate
  commentId: T:TinyLife.World.Lot.WeeklyBillsDelegate
  parent: TinyLife.World
  name: Lot.WeeklyBillsDelegate
  nameWithType: Lot.WeeklyBillsDelegate
  fullName: TinyLife.World.Lot.WeeklyBillsDelegate
  spec.csharp:
  - uid: TinyLife.World.Lot
    name: Lot
  - name: .
  - uid: TinyLife.World.Lot.WeeklyBillsDelegate
    name: WeeklyBillsDelegate
  spec.vb:
  - uid: TinyLife.World.Lot
    name: Lot
  - name: .
  - uid: TinyLife.World.Lot.WeeklyBillsDelegate
    name: WeeklyBillsDelegate
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.World.Lot.Area*
  commentId: Overload:TinyLife.World.Lot.Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: TinyLife.World.Lot.Type*
  commentId: Overload:TinyLife.World.Lot.Type
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  name: IsResidential
  nameWithType: LotType.IsResidential
  fullName: TinyLife.World.LotType.IsResidential
- uid: TinyLife.World.Lot.Household*
  commentId: Overload:TinyLife.World.Lot.Household
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.World.Lot.Map*
  commentId: Overload:TinyLife.World.Lot.Map
  name: Map
  nameWithType: Lot.Map
  fullName: TinyLife.World.Lot.Map
- uid: TinyLife.World.Lot.#ctor*
  commentId: Overload:TinyLife.World.Lot.#ctor
  name: Lot
  nameWithType: Lot.Lot
  fullName: TinyLife.World.Lot.Lot
  nameWithType.vb: Lot.New
  fullName.vb: TinyLife.World.Lot.New
  name.vb: New
- uid: TinyLife.World.Lot.Validate*
  commentId: Overload:TinyLife.World.Lot.Validate
  name: Validate
  nameWithType: Lot.Validate
  fullName: TinyLife.World.Lot.Validate
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: TinyLife.World.Lot.GetObjects*
  commentId: Overload:TinyLife.World.Lot.GetObjects
  name: GetObjects
  nameWithType: Lot.GetObjects
  fullName: TinyLife.World.Lot.GetObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Lot.GetWalls*
  commentId: Overload:TinyLife.World.Lot.GetWalls
  name: GetWalls
  nameWithType: Lot.GetWalls
  fullName: TinyLife.World.Lot.GetWalls
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Lot.GetRoofs*
  commentId: Overload:TinyLife.World.Lot.GetRoofs
  name: GetRoofs
  nameWithType: Lot.GetRoofs
  fullName: TinyLife.World.Lot.GetRoofs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Roof>
  nameWithType: IEnumerable<Roof>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Roof>
  nameWithType.vb: IEnumerable(Of Roof)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Roof)
  name.vb: IEnumerable(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Roof
    name: Roof
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Roof
    name: Roof
  - name: )
- uid: TinyLife.World.Stairs
  commentId: T:TinyLife.World.Stairs
  parent: TinyLife.World
  name: Stairs
  nameWithType: Stairs
  fullName: TinyLife.World.Stairs
- uid: TinyLife.World.Lot.GetStairs*
  commentId: Overload:TinyLife.World.Lot.GetStairs
  name: GetStairs
  nameWithType: Lot.GetStairs
  fullName: TinyLife.World.Lot.GetStairs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Stairs}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Stairs>
  nameWithType: IEnumerable<Stairs>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Stairs>
  nameWithType.vb: IEnumerable(Of Stairs)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Stairs)
  name.vb: IEnumerable(Of Stairs)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Stairs
    name: Stairs
  - name: )
- uid: TinyLife.World.Lot.GetTiles*
  commentId: Overload:TinyLife.World.Lot.GetTiles
  name: GetTiles
  nameWithType: Lot.GetTiles
  fullName: TinyLife.World.Lot.GetTiles
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<(Point Pos, int Floor, Tile Tile)>
  nameWithType: IEnumerable<(Point Pos, int Floor, Tile Tile)>
  fullName: System.Collections.Generic.IEnumerable<(Microsoft.Xna.Framework.Point Pos, int Floor, TinyLife.World.Tile Tile)>
  nameWithType.vb: IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  fullName.vb: System.Collections.Generic.IEnumerable(Of (Pos As Microsoft.Xna.Framework.Point, Floor As Integer, Tile As TinyLife.World.Tile))
  name.vb: IEnumerable(Of (Pos As Point, Floor As Integer, Tile As Tile))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: ','
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Pos
    name: Pos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.pos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Floor
    name: Floor
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.floor
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Microsoft.Xna.Framework.Point,System.Int32,TinyLife.World.Tile}.Tile
    name: Tile
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-microsoft.xna.framework.point,system.int32,tinylife.world.tile-.tile
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Tile
    name: Tile
  - name: )
  - name: )
- uid: TinyLife.World.Lot.GetDefaultTile*
  commentId: Overload:TinyLife.World.Lot.GetDefaultTile
  name: GetDefaultTile
  nameWithType: Lot.GetDefaultTile
  fullName: TinyLife.World.Lot.GetDefaultTile
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  name: RequiredFurniture
  nameWithType: LotType.RequiredFurniture
  fullName: TinyLife.World.LotType.RequiredFurniture
- uid: TinyLife.World.Lot.AreRequirementsMet*
  commentId: Overload:TinyLife.World.Lot.AreRequirementsMet
  name: AreRequirementsMet
  nameWithType: Lot.AreRequirementsMet
  fullName: TinyLife.World.Lot.AreRequirementsMet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Lot.GetFrontDoor*
  commentId: Overload:TinyLife.World.Lot.GetFrontDoor
  name: GetFrontDoor
  nameWithType: Lot.GetFrontDoor
  fullName: TinyLife.World.Lot.GetFrontDoor
- uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  commentId: T:System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.wall
  name: (Wall Wall, Vector2 OutdoorPos)
  nameWithType: (Wall Wall, Vector2 OutdoorPos)
  fullName: (TinyLife.World.Wall Wall, Microsoft.Xna.Framework.Vector2 OutdoorPos)
  nameWithType.vb: (Wall As Wall, OutdoorPos As Vector2)
  fullName.vb: (Wall As TinyLife.World.Wall, OutdoorPos As Microsoft.Xna.Framework.Vector2)
  name.vb: (Wall As Wall, OutdoorPos As Vector2)
  spec.csharp:
  - name: (
  - uid: TinyLife.World.Wall
    name: Wall
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.Wall
    name: Wall
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.wall
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.OutdoorPos
    name: OutdoorPos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.outdoorpos
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.Wall
    name: Wall
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.wall
  - name: " "
  - name: As
  - name: " "
  - uid: TinyLife.World.Wall
    name: Wall
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}.OutdoorPos
    name: OutdoorPos
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-tinylife.world.wall,microsoft.xna.framework.vector2-.outdoorpos
  - name: " "
  - name: As
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Lot.GetHomeLocation*
  commentId: Overload:TinyLife.World.Lot.GetHomeLocation
  name: GetHomeLocation
  nameWithType: Lot.GetHomeLocation
  fullName: TinyLife.World.Lot.GetHomeLocation
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: TinyLife.World.Lot.GetPrice*
  commentId: Overload:TinyLife.World.Lot.GetPrice
  name: GetPrice
  nameWithType: Lot.GetPrice
  fullName: TinyLife.World.Lot.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  name: ElectricityRating
  nameWithType: FurnitureType.TypeSettings.ElectricityRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
- uid: TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  name: WaterRating
  nameWithType: FurnitureType.TypeSettings.WaterRating
  fullName: TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
- uid: TinyLife.PersonalityType.CityNative
  commentId: F:TinyLife.PersonalityType.CityNative
  name: CityNative
  nameWithType: PersonalityType.CityNative
  fullName: TinyLife.PersonalityType.CityNative
- uid: TinyLife.World.Lot.GetWeeklyBills*
  commentId: Overload:TinyLife.World.Lot.GetWeeklyBills
  name: GetWeeklyBills
  nameWithType: Lot.GetWeeklyBills
  fullName: TinyLife.World.Lot.GetWeeklyBills
- uid: System.Collections.Generic.Dictionary{System.String,System.Single}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Single}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, float>
  nameWithType: Dictionary<string, float>
  fullName: System.Collections.Generic.Dictionary<string, float>
  nameWithType.vb: Dictionary(Of String, Single)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, Single)
  name.vb: Dictionary(Of String, Single)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Lot.Export*
  commentId: Overload:TinyLife.World.Lot.Export
  name: Export
  nameWithType: Lot.Export
  fullName: TinyLife.World.Lot.Export
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  parent: TinyLife.World
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  name: NonSellable
  nameWithType: ObjectCategory.NonSellable
  fullName: TinyLife.Objects.ObjectCategory.NonSellable
- uid: TinyLife.World.Lot.Import*
  commentId: Overload:TinyLife.World.Lot.Import
  name: Import
  nameWithType: Lot.Import
  fullName: TinyLife.World.Lot.Import
- uid: TinyLife.World.Lot.CanImport*
  commentId: Overload:TinyLife.World.Lot.CanImport
  name: CanImport
  nameWithType: Lot.CanImport
  fullName: TinyLife.World.Lot.CanImport
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.World.Lot.GetCoveredArea*
  commentId: Overload:TinyLife.World.Lot.GetCoveredArea
  name: GetCoveredArea
  nameWithType: Lot.GetCoveredArea
  fullName: TinyLife.World.Lot.GetCoveredArea

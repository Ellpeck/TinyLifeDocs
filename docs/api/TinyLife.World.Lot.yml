### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  id: Lot
  parent: TinyLife.World
  children:
  - TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  - TinyLife.World.Lot.Area
  - TinyLife.World.Lot.AreRequirementsMet
  - TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  - TinyLife.World.Lot.Export
  - TinyLife.World.Lot.GetCoveredArea
  - TinyLife.World.Lot.GetDefaultTile
  - TinyLife.World.Lot.GetFrontDoor(Microsoft.Xna.Framework.Vector2)
  - TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  - TinyLife.World.Lot.GetObjects``1
  - TinyLife.World.Lot.GetPrice
  - TinyLife.World.Lot.GetRoofs
  - TinyLife.World.Lot.GetWalls
  - TinyLife.World.Lot.GetWeeklyBills
  - TinyLife.World.Lot.Household
  - TinyLife.World.Lot.Id
  - TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  - TinyLife.World.Lot.Name
  - TinyLife.World.Lot.OnGetWeeklyBills
  - TinyLife.World.Lot.Type
  - TinyLife.World.Lot.Validate(TinyLife.World.Map)
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lot
    path: ../TinyLife/World/Lot.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot is a designated area in the world (created using the <xref href=\"TinyLife.Tools.LotTool\" data-throw-if-not-resolved=\"false\"></xref>).\nIn the way it works, it acts similarly to a small <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>, allowing the retrieval of various object types only in its designated area.\nA lot has a <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref>, which determines what things can be done on the lot.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Lot : JsonTypeSafeGenericDataHolder, IGenericDataHolder, IPricedObject
    content.vb: >-
      <DataContract>

      Public Class Lot
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder, IPricedObject
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Lot.OnGetWeeklyBills
  commentId: E:TinyLife.World.Lot.OnGetWeeklyBills
  id: OnGetWeeklyBills
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: OnGetWeeklyBills
  nameWithType: Lot.OnGetWeeklyBills
  fullName: TinyLife.World.Lot.OnGetWeeklyBills
  type: Event
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetWeeklyBills
    path: ../TinyLife/World/Lot.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static event Lot.WeeklyBillsDelegate OnGetWeeklyBills
    return:
      type: TinyLife.World.Lot.WeeklyBillsDelegate
    content.vb: Public Shared Event OnGetWeeklyBills As Lot.WeeklyBillsDelegate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.World.Lot.Id
  commentId: F:TinyLife.World.Lot.Id
  id: Id
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Lot.Id
  fullName: TinyLife.World.Lot.Id
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Id
    path: ../TinyLife/World/Lot.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe unique id of this lot.\nThis is randomly generated when the lot is first added to the world, and then persists across savings to disk.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Guid Id
    return:
      type: System.Guid
    content.vb: >-
      <DataMember>

      Public ReadOnly Id As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  id: Area
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Area
    path: ../TinyLife/World/Lot.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe area in the world that this lot occupies\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Rectangle Area { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Rectangle
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Area As Rectangle
  overload: TinyLife.World.Lot.Area*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  id: Type
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/Lot.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref> that this lot has.\nThis value defaults to the &quot;Residential&quot; lot type.\n"
  example: []
  syntax:
    content: public LotType Type { get; set; }
    parameters: []
    return:
      type: TinyLife.World.LotType
    content.vb: Public Property Type As LotType
  overload: TinyLife.World.Lot.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  id: Household
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Household
    path: ../TinyLife/World/Lot.cs
    startLine: 64
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe household that is currently occupying this <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref>.\nThis can only be non-null if the <xref href=\"TinyLife.World.Lot.Type\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"TinyLife.World.LotType.IsResidential\" data-throw-if-not-resolved=\"false\"></xref> set to true.\n"
  example: []
  syntax:
    content: public Household Household { get; }
    parameters: []
    return:
      type: TinyLife.World.Household
    content.vb: Public ReadOnly Property Household As Household
  overload: TinyLife.World.Lot.Household*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Lot.Name
  commentId: F:TinyLife.World.Lot.Name
  id: Name
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Lot.Name
  fullName: TinyLife.World.Lot.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Lot.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot, as set by the player in build mode\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Name
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Name As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  commentId: M:TinyLife.World.Lot.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)
  id: '#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Rectangle)'
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Lot(Map, Rectangle)
  nameWithType: Lot.Lot(Map, Rectangle)
  fullName: TinyLife.World.Lot.Lot(TinyLife.World.Map, Microsoft.Xna.Framework.Rectangle)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Lot.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot on the given map with the given area\n"
  example: []
  syntax:
    content: public Lot(Map map, Rectangle area)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map
    - id: area
      type: Microsoft.Xna.Framework.Rectangle
      description: The area
    content.vb: Public Sub New(map As Map, area As Rectangle)
  overload: TinyLife.World.Lot.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Lot.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Lot.Validate(Map)
  fullName: TinyLife.World.Lot.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Lot.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public void Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    content.vb: Public Sub Validate(map As Map)
  overload: TinyLife.World.Lot.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetObjects``1
  commentId: M:TinyLife.World.Lot.GetObjects``1
  id: GetObjects``1
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetObjects<T>()
  nameWithType: Lot.GetObjects<T>()
  fullName: TinyLife.World.Lot.GetObjects<T>()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetObjects
    path: ../TinyLife/World/Lot.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the set of all of the <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerable<T> GetObjects<T>()
    typeParameters:
    - id: T
      description: The type of objects to receive
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: This lot&apos;s objects
    content.vb: Public Function GetObjects(Of T) As IEnumerable(Of T)
  overload: TinyLife.World.Lot.GetObjects*
  nameWithType.vb: Lot.GetObjects(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Lot.GetObjects(Of T)()
  name.vb: GetObjects(Of T)()
- uid: TinyLife.World.Lot.GetWalls
  commentId: M:TinyLife.World.Lot.GetWalls
  id: GetWalls
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetWalls()
  nameWithType: Lot.GetWalls()
  fullName: TinyLife.World.Lot.GetWalls()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalls
    path: ../TinyLife/World/Lot.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<Wall> GetWalls()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
      description: This lot&apos;s walls
    content.vb: Public Function GetWalls As IEnumerable(Of Wall)
  overload: TinyLife.World.Lot.GetWalls*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetRoofs
  commentId: M:TinyLife.World.Lot.GetRoofs
  id: GetRoofs
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetRoofs()
  nameWithType: Lot.GetRoofs()
  fullName: TinyLife.World.Lot.GetRoofs()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRoofs
    path: ../TinyLife/World/Lot.cs
    startLine: 124
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> instances on this lot&apos;s map that are contained in this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public IEnumerable<Roof> GetRoofs()
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
      description: ''
    content.vb: Public Function GetRoofs As IEnumerable(Of Roof)
  overload: TinyLife.World.Lot.GetRoofs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetDefaultTile
  commentId: M:TinyLife.World.Lot.GetDefaultTile
  id: GetDefaultTile
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetDefaultTile()
  nameWithType: Lot.GetDefaultTile()
  fullName: TinyLife.World.Lot.GetDefaultTile()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDefaultTile
    path: ../TinyLife/World/Lot.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the default tile for this lot, which is the tile that is most likely to be the &quot;ground tile&quot; in this area.\nThis is a heuristic based on the tiles that are at the borders of this lot.\n"
  example: []
  syntax:
    content: public Tile GetDefaultTile()
    return:
      type: TinyLife.World.Tile
      description: This lot&apos;s default tile.
    content.vb: Public Function GetDefaultTile As Tile
  overload: TinyLife.World.Lot.GetDefaultTile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.AreRequirementsMet
  commentId: M:TinyLife.World.Lot.AreRequirementsMet
  id: AreRequirementsMet
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: AreRequirementsMet()
  nameWithType: Lot.AreRequirementsMet()
  fullName: TinyLife.World.Lot.AreRequirementsMet()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AreRequirementsMet
    path: ../TinyLife/World/Lot.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether this lot <xref href=\"TinyLife.World.Lot.Type\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.LotType.RequiredFurniture\" data-throw-if-not-resolved=\"false\"></xref> requirements are currently met\n"
  example: []
  syntax:
    content: public bool AreRequirementsMet()
    return:
      type: System.Boolean
      description: true if the requirements are met, false otherwise
    content.vb: Public Function AreRequirementsMet As Boolean
  overload: TinyLife.World.Lot.AreRequirementsMet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetFrontDoor(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Lot.GetFrontDoor(Microsoft.Xna.Framework.Vector2)
  id: GetFrontDoor(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetFrontDoor(Vector2)
  nameWithType: Lot.GetFrontDoor(Vector2)
  fullName: TinyLife.World.Lot.GetFrontDoor(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFrontDoor
    path: ../TinyLife/World/Lot.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns this lot&apos;s front door, or null if there is no <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that matches the required conditions.\nA lot&apos;s front door is the door that is closest to the lot&apos;s object of interest, which is a <xref href=\"TinyLife.World.LotType.RequiredFurniture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (Wall, Vector2) GetFrontDoor(Vector2 position)
    parameters:
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the front door should be closest to.
    return:
      type: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
      description: The lot&apos;s front door, or null if there is none.
    content.vb: Public Function GetFrontDoor(position As Vector2) As(Wall, Vector2)(Of Wall , Vector2)
  overload: TinyLife.World.Lot.GetFrontDoor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  id: GetHomeLocation(TinyLife.Objects.Person)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetHomeLocation(Person)
  nameWithType: Lot.GetHomeLocation(Person)
  fullName: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHomeLocation
    path: ../TinyLife/World/Lot.cs
    startLine: 199
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the home location of the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> on this lot.\nThe home position is the position of the front door, or the closest border position to the passed <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n"
  example: []
  syntax:
    content: public Vector2 GetHomeLocation(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person whose home location to retrieve
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: The person&apos;s home location on this lot
    content.vb: Public Function GetHomeLocation(person As Person) As Vector2
  overload: TinyLife.World.Lot.GetHomeLocation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetPrice
  commentId: M:TinyLife.World.Lot.GetPrice
  id: GetPrice
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Lot.GetPrice()
  fullName: TinyLife.World.Lot.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Lot.cs
    startLine: 216
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.World.Lot.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetWeeklyBills
  commentId: M:TinyLife.World.Lot.GetWeeklyBills
  id: GetWeeklyBills
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetWeeklyBills()
  nameWithType: Lot.GetWeeklyBills()
  fullName: TinyLife.World.Lot.GetWeeklyBills()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWeeklyBills
    path: ../TinyLife/World/Lot.cs
    startLine: 230
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the amount of tiny bucks that need to be paid weekly by a <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> living on this lot.\nThe bills result from the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.WaterRating\" data-throw-if-not-resolved=\"false\"></xref> of the objects on the lot.\n"
  example: []
  syntax:
    content: public float GetWeeklyBills()
    return:
      type: System.Single
      description: The amount of weekly bills, in tiny bucks
    content.vb: Public Function GetWeeklyBills As Single
  overload: TinyLife.World.Lot.GetWeeklyBills*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.Export
  commentId: M:TinyLife.World.Lot.Export
  id: Export
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Export()
  nameWithType: Lot.Export()
  fullName: TinyLife.World.Lot.Export()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Export
    path: ../TinyLife/World/Lot.cs
    startLine: 248
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nExports this lot&apos;s data, including all of its <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Roof\" data-throw-if-not-resolved=\"false\"></xref> obejects and its <xref href=\"TinyLife.World.Tile\" data-throw-if-not-resolved=\"false\"></xref> ground.\nNote that this does not change the lot itself, as it doesn&apos;t remove or add anything to it.\n"
  example: []
  syntax:
    content: public ExportedLot Export()
    return:
      type: TinyLife.World.ExportedLot
      description: An exported version of this lot
    content.vb: Public Function Export As ExportedLot
  overload: TinyLife.World.Lot.Export*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Lot.Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  id: Import(TinyLife.World.ExportedLot,System.String,System.Boolean,System.Boolean)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: Import(ExportedLot, String, Boolean, Boolean)
  nameWithType: Lot.Import(ExportedLot, String, Boolean, Boolean)
  fullName: TinyLife.World.Lot.Import(TinyLife.World.ExportedLot, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Import
    path: ../TinyLife/World/Lot.cs
    startLine: 261
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nImports the given <xref href=\"TinyLife.World.ExportedLot\" data-throw-if-not-resolved=\"false\"></xref> onto this lot.\nNote that everything that was previously on this lot will be removed (and the money will be returned to this lot&apos;s <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref>).\nAlso note that the <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> stays the same, and all tiles outside of the exported lot&apos;s area (if it is smaller) are replaced with Grass.\n"
  example: []
  syntax:
    content: public void Import(ExportedLot lot, string lotName, bool exact = false, bool forceClear = false)
    parameters:
    - id: lot
      type: TinyLife.World.ExportedLot
      description: ''
    - id: lotName
      type: System.String
      description: The name to export this lot as.
    - id: exact
      type: System.Boolean
      description: Whether an exact copy of the lot should be imported. If this is false, the imported lot is moved to best fit the lot&apos;s dimensions
    - id: forceClear
      type: System.Boolean
      description: Whether the lot should be force-cleared before importing, meaning even <xref href="TinyLife.Objects.ObjectCategory.NonSellable" data-throw-if-not-resolved="false"></xref> objects will be removed
    content.vb: Public Sub Import(lot As ExportedLot, lotName As String, exact As Boolean = False, forceClear As Boolean = False)
  overload: TinyLife.World.Lot.Import*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  commentId: M:TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  id: CanImport(TinyLife.World.ExportedLot)
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: CanImport(ExportedLot)
  nameWithType: Lot.CanImport(ExportedLot)
  fullName: TinyLife.World.Lot.CanImport(TinyLife.World.ExportedLot)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanImport
    path: ../TinyLife/World/Lot.cs
    startLine: 277
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA method that calculates whether the given <xref href=\"TinyLife.World.ExportedLot\" data-throw-if-not-resolved=\"false\"></xref> can be imported.\nA lot can be imported if the <xref href=\"TinyLife.World.Lot.Household\" data-throw-if-not-resolved=\"false\"></xref> has enough money, and if this lot&apos;s <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to the exported lot&apos;s area.\n"
  example: []
  syntax:
    content: public bool CanImport(ExportedLot import)
    parameters:
    - id: import
      type: TinyLife.World.ExportedLot
      description: The lot to import
    return:
      type: System.Boolean
      description: true if the lot can be imported, false otherwise
    content.vb: Public Function CanImport(import As ExportedLot) As Boolean
  overload: TinyLife.World.Lot.CanImport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Lot.GetCoveredArea
  commentId: M:TinyLife.World.Lot.GetCoveredArea
  id: GetCoveredArea
  parent: TinyLife.World.Lot
  langs:
  - csharp
  - vb
  name: GetCoveredArea()
  nameWithType: Lot.GetCoveredArea()
  fullName: TinyLife.World.Lot.GetCoveredArea()
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCoveredArea
    path: ../TinyLife/World/Lot.cs
    startLine: 289
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a <xref href=\"MLEM.Misc.RectangleF\" data-throw-if-not-resolved=\"false\"></xref> that represents the area that this lot actually covers.\nThe area covered by this lot is always bounded by its <xref href=\"TinyLife.World.Lot.Area\" data-throw-if-not-resolved=\"false\"></xref>, but will be smaller if there are fewer objects on the lot.\n"
  example: []
  syntax:
    content: public RectangleF GetCoveredArea()
    return:
      type: MLEM.Misc.RectangleF
      description: The area that this lot covers
    content.vb: Public Function GetCoveredArea As RectangleF
  overload: TinyLife.World.Lot.GetCoveredArea*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Tools.LotTool
  commentId: T:TinyLife.Tools.LotTool
  name: LotTool
  nameWithType: LotTool
  fullName: TinyLife.Tools.LotTool
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Lot.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Lot>()
  nameWithType: Extensions.JsonCopy<Lot>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Lot>()
  nameWithType.vb: Extensions.JsonCopy(Of Lot)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Lot)()
  name.vb: JsonCopy(Of Lot)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Lot>
    nameWithType: Extensions.JsonCopy<Lot>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Lot>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Lot)
    nameWithType: Extensions.JsonCopy(Of Lot)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Lot)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.Lot.WeeklyBillsDelegate
  commentId: T:TinyLife.World.Lot.WeeklyBillsDelegate
  parent: TinyLife.World
  name: Lot.WeeklyBillsDelegate
  nameWithType: Lot.WeeklyBillsDelegate
  fullName: TinyLife.World.Lot.WeeklyBillsDelegate
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.World.Lot.Area*
  commentId: Overload:TinyLife.World.Lot.Area
  name: Area
  nameWithType: Lot.Area
  fullName: TinyLife.World.Lot.Area
- uid: Microsoft.Xna.Framework.Rectangle
  commentId: T:Microsoft.Xna.Framework.Rectangle
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: Microsoft.Xna.Framework.Rectangle
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Lot.Type*
  commentId: Overload:TinyLife.World.Lot.Type
  name: Type
  nameWithType: Lot.Type
  fullName: TinyLife.World.Lot.Type
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.Lot.Type
  commentId: P:TinyLife.World.Lot.Type
  isExternal: true
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  isExternal: true
- uid: TinyLife.World.Lot.Household*
  commentId: Overload:TinyLife.World.Lot.Household
  name: Household
  nameWithType: Lot.Household
  fullName: TinyLife.World.Lot.Household
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Lot.#ctor*
  commentId: Overload:TinyLife.World.Lot.#ctor
  name: Lot
  nameWithType: Lot.Lot
  fullName: TinyLife.World.Lot.Lot
- uid: TinyLife.World.Lot.Validate*
  commentId: Overload:TinyLife.World.Lot.Validate
  name: Validate
  nameWithType: Lot.Validate
  fullName: TinyLife.World.Lot.Validate
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Lot.Area
  commentId: P:TinyLife.World.Lot.Area
  isExternal: true
- uid: TinyLife.World.Lot.GetObjects*
  commentId: Overload:TinyLife.World.Lot.GetObjects
  name: GetObjects
  nameWithType: Lot.GetObjects
  fullName: TinyLife.World.Lot.GetObjects
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Lot.GetWalls*
  commentId: Overload:TinyLife.World.Lot.GetWalls
  name: GetWalls
  nameWithType: Lot.GetWalls
  fullName: TinyLife.World.Lot.GetWalls
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Wall}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Wall>
  nameWithType: IEnumerable<Wall>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Wall>
  nameWithType.vb: IEnumerable(Of Wall)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Wall)
  name.vb: IEnumerable(Of Wall)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Roof
  commentId: T:TinyLife.World.Roof
  parent: TinyLife.World
  name: Roof
  nameWithType: Roof
  fullName: TinyLife.World.Roof
- uid: TinyLife.World.Lot.GetRoofs*
  commentId: Overload:TinyLife.World.Lot.GetRoofs
  name: GetRoofs
  nameWithType: Lot.GetRoofs
  fullName: TinyLife.World.Lot.GetRoofs
- uid: System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.World.Roof}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Roof>
  nameWithType: IEnumerable<Roof>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.World.Roof>
  nameWithType.vb: IEnumerable(Of Roof)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.World.Roof)
  name.vb: IEnumerable(Of Roof)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Roof
    name: Roof
    nameWithType: Roof
    fullName: TinyLife.World.Roof
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Roof
    name: Roof
    nameWithType: Roof
    fullName: TinyLife.World.Roof
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Lot.GetDefaultTile*
  commentId: Overload:TinyLife.World.Lot.GetDefaultTile
  name: GetDefaultTile
  nameWithType: Lot.GetDefaultTile
  fullName: TinyLife.World.Lot.GetDefaultTile
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  isExternal: true
- uid: TinyLife.World.Lot.AreRequirementsMet*
  commentId: Overload:TinyLife.World.Lot.AreRequirementsMet
  name: AreRequirementsMet
  nameWithType: Lot.AreRequirementsMet
  fullName: TinyLife.World.Lot.AreRequirementsMet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.World.Lot.GetFrontDoor*
  commentId: Overload:TinyLife.World.Lot.GetFrontDoor
  name: GetFrontDoor
  nameWithType: Lot.GetFrontDoor
  fullName: TinyLife.World.Lot.GetFrontDoor
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  commentId: T:System.ValueTuple{TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Wall, Vector2>
  nameWithType: (T1, T2)<Wall, Vector2>
  fullName: System.ValueTuple<TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: (T1, T2)(Of Wall, Vector2)
  fullName.vb: System.ValueTuple(Of TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2)
  name.vb: (T1, T2)(Of Wall, Vector2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World.Lot.GetHomeLocation*
  commentId: Overload:TinyLife.World.Lot.GetHomeLocation
  name: GetHomeLocation
  nameWithType: Lot.GetHomeLocation
  fullName: TinyLife.World.Lot.GetHomeLocation
- uid: TinyLife.World.Lot.GetPrice*
  commentId: Overload:TinyLife.World.Lot.GetPrice
  name: GetPrice
  nameWithType: Lot.GetPrice
  fullName: TinyLife.World.Lot.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.World.Lot.Household
  commentId: P:TinyLife.World.Lot.Household
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.ElectricityRating
  isExternal: true
- uid: TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.WaterRating
  isExternal: true
- uid: TinyLife.World.Lot.GetWeeklyBills*
  commentId: Overload:TinyLife.World.Lot.GetWeeklyBills
  name: GetWeeklyBills
  nameWithType: Lot.GetWeeklyBills
  fullName: TinyLife.World.Lot.GetWeeklyBills
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.World.Lot.Export*
  commentId: Overload:TinyLife.World.Lot.Export
  name: Export
  nameWithType: Lot.Export
  fullName: TinyLife.World.Lot.Export
- uid: TinyLife.World.ExportedLot
  commentId: T:TinyLife.World.ExportedLot
  parent: TinyLife.World
  name: ExportedLot
  nameWithType: ExportedLot
  fullName: TinyLife.World.ExportedLot
- uid: TinyLife.Objects.ObjectCategory.NonSellable
  commentId: F:TinyLife.Objects.ObjectCategory.NonSellable
  isExternal: true
- uid: TinyLife.World.Lot.Import*
  commentId: Overload:TinyLife.World.Lot.Import
  name: Import
  nameWithType: Lot.Import
  fullName: TinyLife.World.Lot.Import
- uid: TinyLife.World.Lot.CanImport*
  commentId: Overload:TinyLife.World.Lot.CanImport
  name: CanImport
  nameWithType: Lot.CanImport
  fullName: TinyLife.World.Lot.CanImport
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.World.Lot.GetCoveredArea*
  commentId: Overload:TinyLife.World.Lot.GetCoveredArea
  name: GetCoveredArea
  nameWithType: Lot.GetCoveredArea
  fullName: TinyLife.World.Lot.GetCoveredArea

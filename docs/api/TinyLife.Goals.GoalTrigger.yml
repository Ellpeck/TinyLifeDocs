### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  id: GoalTrigger
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.GoalTrigger.#ctor(System.String,System.Type[],System.Type[])
  - TinyLife.Goals.GoalTrigger.ActionCompleted
  - TinyLife.Goals.GoalTrigger.ActionEnded
  - TinyLife.Goals.GoalTrigger.ActionUpdate
  - TinyLife.Goals.GoalTrigger.EarnMoney
  - TinyLife.Goals.GoalTrigger.EmotionGained
  - TinyLife.Goals.GoalTrigger.EmotionLost
  - TinyLife.Goals.GoalTrigger.Equals(System.Object)
  - TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  - TinyLife.Goals.GoalTrigger.FoodEaten
  - TinyLife.Goals.GoalTrigger.FurnitureCreated
  - TinyLife.Goals.GoalTrigger.GetHashCode
  - TinyLife.Goals.GoalTrigger.IsObjectCompatible(System.Type)
  - TinyLife.Goals.GoalTrigger.IsValueCompatible(System.Type)
  - TinyLife.Goals.GoalTrigger.Name
  - TinyLife.Goals.GoalTrigger.PersonUpdate
  - TinyLife.Goals.GoalTrigger.ProjectCompleted
  - TinyLife.Goals.GoalTrigger.ValidObjects
  - TinyLife.Goals.GoalTrigger.ValidValues
  langs:
  - csharp
  - vb
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
  type: Class
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoalTrigger
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger is used by <xref href=\"TinyLife.Goals.AutoTriggerGoal\" data-throw-if-not-resolved=\"false\"></xref> instances to determine whether they should be triggered.\nGoal triggers are compared only by their <xref href=\"TinyLife.Goals.GoalTrigger.Name\" data-throw-if-not-resolved=\"false\"></xref>, so mods can add goal triggers that work for other mods without explicit compatibility.\n"
  example: []
  syntax:
    content: 'public class GoalTrigger : IEquatable<GoalTrigger>'
    content.vb: >-
      Public Class GoalTrigger
          Implements IEquatable(Of GoalTrigger)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{TinyLife.Goals.GoalTrigger}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.GoalTrigger.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.GoalTrigger.PersonUpdate
  commentId: F:TinyLife.Goals.GoalTrigger.PersonUpdate
  id: PersonUpdate
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: PersonUpdate
  nameWithType: GoalTrigger.PersonUpdate
  fullName: TinyLife.Goals.GoalTrigger.PersonUpdate
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonUpdate
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> method is called.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger PersonUpdate
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly PersonUpdate As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.FurnitureCreated
  commentId: F:TinyLife.Goals.GoalTrigger.FurnitureCreated
  id: FurnitureCreated
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: FurnitureCreated
  nameWithType: GoalTrigger.FurnitureCreated
  fullName: TinyLife.Goals.GoalTrigger.FurnitureCreated
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FurnitureCreated
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> item is created by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this trigger is used in <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger FurnitureCreated
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly FurnitureCreated As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ActionCompleted
  commentId: F:TinyLife.Goals.GoalTrigger.ActionCompleted
  id: ActionCompleted
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ActionCompleted
  nameWithType: GoalTrigger.ActionCompleted
  fullName: TinyLife.Goals.GoalTrigger.ActionCompleted
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionCompleted
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed succesfully (the result is <xref href=\"TinyLife.Actions.CompletionType.Completed\" data-throw-if-not-resolved=\"false\"></xref>) by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ActionCompleted
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ActionCompleted As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ActionEnded
  commentId: F:TinyLife.Goals.GoalTrigger.ActionEnded
  id: ActionEnded
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ActionEnded
  nameWithType: GoalTrigger.ActionEnded
  fullName: TinyLife.Goals.GoalTrigger.ActionEnded
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionEnded
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 34
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed in any way (the <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref> doesn&apos;t matter) by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ActionEnded
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ActionEnded As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ActionUpdate
  commentId: F:TinyLife.Goals.GoalTrigger.ActionUpdate
  id: ActionUpdate
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ActionUpdate
  nameWithType: GoalTrigger.ActionUpdate
  fullName: TinyLife.Goals.GoalTrigger.ActionUpdate
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> is updated.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ActionUpdate
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ActionUpdate As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.EarnMoney
  commentId: F:TinyLife.Goals.GoalTrigger.EarnMoney
  id: EarnMoney
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: EarnMoney
  nameWithType: GoalTrigger.EarnMoney
  fullName: TinyLife.Goals.GoalTrigger.EarnMoney
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EarnMoney
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> earns money through an <xref href=\"TinyLife.Actions.Action\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.Project\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this trigger is used in <xref href=\"TinyLife.Objects.Person.EarnMoney(System.Single%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger EarnMoney
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly EarnMoney As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.EmotionGained
  commentId: F:TinyLife.Goals.GoalTrigger.EmotionGained
  id: EmotionGained
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: EmotionGained
  nameWithType: GoalTrigger.EmotionGained
  fullName: TinyLife.Goals.GoalTrigger.EmotionGained
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EmotionGained
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 47
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> is added to a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> using <xref href=\"TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier%2cSystem.Int32%2cSystem.TimeSpan%2cTinyLife.Emotions.IEmotionSource%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger EmotionGained
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly EmotionGained As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.EmotionLost
  commentId: F:TinyLife.Goals.GoalTrigger.EmotionLost
  id: EmotionLost
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: EmotionLost
  nameWithType: GoalTrigger.EmotionLost
  fullName: TinyLife.Goals.GoalTrigger.EmotionLost
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EmotionLost
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> is removed from a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)\" data-throw-if-not-resolved=\"false\"></xref> or when it runs out.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger EmotionLost
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly EmotionLost As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.FoodEaten
  commentId: F:TinyLife.Goals.GoalTrigger.FoodEaten
  id: FoodEaten
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: FoodEaten
  nameWithType: GoalTrigger.FoodEaten
  fullName: TinyLife.Goals.GoalTrigger.FoodEaten
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FoodEaten
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> item is eaten by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> in <xref href=\"TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action%2cTinyLife.Objects.FoodTypedItem)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger FoodEaten
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly FoodEaten As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ProjectCompleted
  commentId: F:TinyLife.Goals.GoalTrigger.ProjectCompleted
  id: ProjectCompleted
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ProjectCompleted
  nameWithType: GoalTrigger.ProjectCompleted
  fullName: TinyLife.Goals.GoalTrigger.ProjectCompleted
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ProjectCompleted
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Goals.Project\" data-throw-if-not-resolved=\"false\"></xref> is marked as completed in <xref href=\"TinyLife.Goals.Project.OnCompleted\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ProjectCompleted
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ProjectCompleted As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.Name
  commentId: F:TinyLife.Goals.GoalTrigger.Name
  id: Name
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: GoalTrigger.Name
  fullName: TinyLife.Goals.GoalTrigger.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ValidObjects
  commentId: F:TinyLife.Goals.GoalTrigger.ValidObjects
  id: ValidObjects
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ValidObjects
  nameWithType: GoalTrigger.ValidObjects
  fullName: TinyLife.Goals.GoalTrigger.ValidObjects
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidObjects
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public readonly Type[] ValidObjects
    return:
      type: System.Type[]
    content.vb: Public ReadOnly ValidObjects As Type()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ValidValues
  commentId: F:TinyLife.Goals.GoalTrigger.ValidValues
  id: ValidValues
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ValidValues
  nameWithType: GoalTrigger.ValidValues
  fullName: TinyLife.Goals.GoalTrigger.ValidValues
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ValidValues
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public readonly Type[] ValidValues
    return:
      type: System.Type[]
    content.vb: Public ReadOnly ValidValues As Type()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.#ctor(System.String,System.Type[],System.Type[])
  commentId: M:TinyLife.Goals.GoalTrigger.#ctor(System.String,System.Type[],System.Type[])
  id: '#ctor(System.String,System.Type[],System.Type[])'
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: GoalTrigger(String, Type[], Type[])
  nameWithType: GoalTrigger.GoalTrigger(String, Type[], Type[])
  fullName: TinyLife.Goals.GoalTrigger.GoalTrigger(System.String, System.Type[], System.Type[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public GoalTrigger(string name, Type[] validObjects, Type[] validGoals)
    parameters:
    - id: name
      type: System.String
    - id: validObjects
      type: System.Type[]
    - id: validGoals
      type: System.Type[]
    content.vb: Public Sub New(name As String, validObjects As Type(), validGoals As Type())
  overload: TinyLife.Goals.GoalTrigger.#ctor*
  nameWithType.vb: GoalTrigger.GoalTrigger(String, Type(), Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.GoalTrigger.GoalTrigger(System.String, System.Type(), System.Type())
  name.vb: GoalTrigger(String, Type(), Type())
- uid: TinyLife.Goals.GoalTrigger.IsObjectCompatible(System.Type)
  commentId: M:TinyLife.Goals.GoalTrigger.IsObjectCompatible(System.Type)
  id: IsObjectCompatible(System.Type)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: IsObjectCompatible(Type)
  nameWithType: GoalTrigger.IsObjectCompatible(Type)
  fullName: TinyLife.Goals.GoalTrigger.IsObjectCompatible(System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsObjectCompatible
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 82
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public bool IsObjectCompatible(Type objType)
    parameters:
    - id: objType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Function IsObjectCompatible(objType As Type) As Boolean
  overload: TinyLife.Goals.GoalTrigger.IsObjectCompatible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalTrigger.IsValueCompatible(System.Type)
  commentId: M:TinyLife.Goals.GoalTrigger.IsValueCompatible(System.Type)
  id: IsValueCompatible(System.Type)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: IsValueCompatible(Type)
  nameWithType: GoalTrigger.IsValueCompatible(Type)
  fullName: TinyLife.Goals.GoalTrigger.IsValueCompatible(System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsValueCompatible
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public bool IsValueCompatible(Type valueType)
    parameters:
    - id: valueType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Function IsValueCompatible(valueType As Type) As Boolean
  overload: TinyLife.Goals.GoalTrigger.IsValueCompatible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  commentId: M:TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  id: Equals(TinyLife.Goals.GoalTrigger)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Equals(GoalTrigger)
  nameWithType: GoalTrigger.Equals(GoalTrigger)
  fullName: TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public bool Equals(GoalTrigger other)
    parameters:
    - id: other
      type: TinyLife.Goals.GoalTrigger
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As GoalTrigger) As Boolean
  overload: TinyLife.Goals.GoalTrigger.Equals*
  implements:
  - System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalTrigger.Equals(System.Object)
  commentId: M:TinyLife.Goals.GoalTrigger.Equals(System.Object)
  id: Equals(System.Object)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GoalTrigger.Equals(Object)
  fullName: TinyLife.Goals.GoalTrigger.Equals(System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: TinyLife.Goals.GoalTrigger.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Goals.GoalTrigger.GetHashCode
  commentId: M:TinyLife.Goals.GoalTrigger.GetHashCode
  id: GetHashCode
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GoalTrigger.GetHashCode()
  fullName: TinyLife.Goals.GoalTrigger.GetHashCode()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHashCode
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: TinyLife.Goals.GoalTrigger.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TinyLife.Goals.AutoTriggerGoal
  commentId: T:TinyLife.Goals.AutoTriggerGoal
  parent: TinyLife.Goals
  name: AutoTriggerGoal
  nameWithType: AutoTriggerGoal
  fullName: TinyLife.Goals.AutoTriggerGoal
- uid: TinyLife.Goals.GoalTrigger.Name
  commentId: F:TinyLife.Goals.GoalTrigger.Name
  isExternal: true
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{TinyLife.Goals.GoalTrigger}
  commentId: T:System.IEquatable{TinyLife.Goals.GoalTrigger}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<GoalTrigger>
  nameWithType: IEquatable<GoalTrigger>
  fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>
  nameWithType.vb: IEquatable(Of GoalTrigger)
  fullName.vb: System.IEquatable(Of TinyLife.Goals.GoalTrigger)
  name.vb: IEquatable(Of GoalTrigger)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<GoalTrigger>()
  nameWithType: Extensions.JsonCopy<GoalTrigger>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalTrigger>()
  nameWithType.vb: Extensions.JsonCopy(Of GoalTrigger)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalTrigger)()
  name.vb: JsonCopy(Of GoalTrigger)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<GoalTrigger>
    nameWithType: Extensions.JsonCopy<GoalTrigger>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalTrigger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of GoalTrigger)
    nameWithType: Extensions.JsonCopy(Of GoalTrigger)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalTrigger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  parent: TinyLife.Goals
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Actions.CompletionType.Completed
  commentId: F:TinyLife.Actions.CompletionType.Completed
  isExternal: true
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: TinyLife.Goals.Project
  commentId: T:TinyLife.Goals.Project
  parent: TinyLife.Goals
  name: Project
  nameWithType: Project
  fullName: TinyLife.Goals.Project
- uid: TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  commentId: M:TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  isExternal: true
- uid: TinyLife.Emotions.EmotionModifier
  commentId: T:TinyLife.Emotions.EmotionModifier
  parent: TinyLife.Emotions
  name: EmotionModifier
  nameWithType: EmotionModifier
  fullName: TinyLife.Emotions.EmotionModifier
- uid: TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  commentId: M:TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  isExternal: true
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  commentId: M:TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  isExternal: true
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  parent: TinyLife.Skills
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
- uid: TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  commentId: M:TinyLife.Skills.FoodType.InvokeOnEaten(TinyLife.Actions.Action,TinyLife.Objects.FoodTypedItem)
  isExternal: true
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Goals.Project.OnCompleted
  commentId: M:TinyLife.Goals.Project.OnCompleted
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Goals.GoalTrigger.#ctor*
  commentId: Overload:TinyLife.Goals.GoalTrigger.#ctor
  name: GoalTrigger
  nameWithType: GoalTrigger.GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger.GoalTrigger
- uid: TinyLife.Goals.GoalTrigger.IsObjectCompatible*
  commentId: Overload:TinyLife.Goals.GoalTrigger.IsObjectCompatible
  name: IsObjectCompatible
  nameWithType: GoalTrigger.IsObjectCompatible
  fullName: TinyLife.Goals.GoalTrigger.IsObjectCompatible
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.GoalTrigger.IsValueCompatible*
  commentId: Overload:TinyLife.Goals.GoalTrigger.IsValueCompatible
  name: IsValueCompatible
  nameWithType: GoalTrigger.IsValueCompatible
  fullName: TinyLife.Goals.GoalTrigger.IsValueCompatible
- uid: TinyLife.Goals.GoalTrigger.Equals*
  commentId: Overload:TinyLife.Goals.GoalTrigger.Equals
  name: Equals
  nameWithType: GoalTrigger.Equals
  fullName: TinyLife.Goals.GoalTrigger.Equals
- uid: System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  commentId: M:System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  parent: System.IEquatable{TinyLife.Goals.GoalTrigger}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(GoalTrigger)
  nameWithType: IEquatable<GoalTrigger>.Equals(GoalTrigger)
  fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>.Equals(TinyLife.Goals.GoalTrigger)
  nameWithType.vb: IEquatable(Of GoalTrigger).Equals(GoalTrigger)
  fullName.vb: System.IEquatable(Of TinyLife.Goals.GoalTrigger).Equals(TinyLife.Goals.GoalTrigger)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<GoalTrigger>.Equals
    fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of GoalTrigger).Equals
    fullName: System.IEquatable(Of TinyLife.Goals.GoalTrigger).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger.GetHashCode*
  commentId: Overload:TinyLife.Goals.GoalTrigger.GetHashCode
  name: GetHashCode
  nameWithType: GoalTrigger.GetHashCode
  fullName: TinyLife.Goals.GoalTrigger.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32

### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  id: GoalTrigger
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.GoalTrigger.#ctor(System.String)
  - TinyLife.Goals.GoalTrigger.ActionCompleted
  - TinyLife.Goals.GoalTrigger.ActionUpdate
  - TinyLife.Goals.GoalTrigger.EarnMoney
  - TinyLife.Goals.GoalTrigger.Equals(System.Object)
  - TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  - TinyLife.Goals.GoalTrigger.FurnitureCreated
  - TinyLife.Goals.GoalTrigger.GetHashCode
  - TinyLife.Goals.GoalTrigger.Name
  - TinyLife.Goals.GoalTrigger.op_Equality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  - TinyLife.Goals.GoalTrigger.op_Inequality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  - TinyLife.Goals.GoalTrigger.PersonUpdate
  langs:
  - csharp
  - vb
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
  type: Struct
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoalTrigger
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger is used by <xref href=\"TinyLife.Goals.AutoTriggerGoal%601\" data-throw-if-not-resolved=\"false\"></xref> instances to determine whether they should be triggered.\nGoal triggers are compared only by their <xref href=\"TinyLife.Goals.GoalTrigger.Name\" data-throw-if-not-resolved=\"false\"></xref>, so mods can add goal triggers that work for other mods without explicit compatibility.\n"
  example: []
  syntax:
    content: 'public readonly struct GoalTrigger : IEquatable<GoalTrigger>'
    content.vb: >-
      Public Structure GoalTrigger
          Implements IEquatable(Of GoalTrigger)
  implements:
  - System.IEquatable{TinyLife.Goals.GoalTrigger}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Goals.GoalTrigger.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Goals.GoalTrigger.PersonUpdate
  commentId: F:TinyLife.Goals.GoalTrigger.PersonUpdate
  id: PersonUpdate
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: PersonUpdate
  nameWithType: GoalTrigger.PersonUpdate
  fullName: TinyLife.Goals.GoalTrigger.PersonUpdate
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonUpdate
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 15
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> method is called.\nThis trigger is supported by <xref href=\"TinyLife.Goals.TimedGoal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> type parameter.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger PersonUpdate
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly PersonUpdate As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.FurnitureCreated
  commentId: F:TinyLife.Goals.GoalTrigger.FurnitureCreated
  id: FurnitureCreated
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: FurnitureCreated
  nameWithType: GoalTrigger.FurnitureCreated
  fullName: TinyLife.Goals.GoalTrigger.FurnitureCreated
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FurnitureCreated
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 21
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> item is created by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this trigger is used in <xref href=\"TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis trigger is supported by <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> type parameter or subtypes.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger FurnitureCreated
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly FurnitureCreated As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ActionCompleted
  commentId: F:TinyLife.Goals.GoalTrigger.ActionCompleted
  id: ActionCompleted
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ActionCompleted
  nameWithType: GoalTrigger.ActionCompleted
  fullName: TinyLife.Goals.GoalTrigger.ActionCompleted
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionCompleted
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed by a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nThis trigger is supported by <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> type parameter or subtypes.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ActionCompleted
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ActionCompleted As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.ActionUpdate
  commentId: F:TinyLife.Goals.GoalTrigger.ActionUpdate
  id: ActionUpdate
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: ActionUpdate
  nameWithType: GoalTrigger.ActionUpdate
  fullName: TinyLife.Goals.GoalTrigger.ActionUpdate
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionUpdate
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> is updated.\nThis trigger is supported by <xref href=\"TinyLife.Goals.TimedGoal\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> type parameter or subtypes.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger ActionUpdate
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly ActionUpdate As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.EarnMoney
  commentId: F:TinyLife.Goals.GoalTrigger.EarnMoney
  id: EarnMoney
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: EarnMoney
  nameWithType: GoalTrigger.EarnMoney
  fullName: TinyLife.Goals.GoalTrigger.EarnMoney
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EarnMoney
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal trigger for when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> earns money through an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.Project\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, this trigger is used in <xref href=\"TinyLife.Objects.Person.EarnMoney(System.Single%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis trigger is supported by <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref> (where the amount is the amount of money earned) using the <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.Project\" data-throw-if-not-resolved=\"false\"></xref> type parameters or subtypes.\n"
  example: []
  syntax:
    content: public static readonly GoalTrigger EarnMoney
    return:
      type: TinyLife.Goals.GoalTrigger
    content.vb: Public Shared ReadOnly EarnMoney As GoalTrigger
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.Name
  commentId: F:TinyLife.Goals.GoalTrigger.Name
  id: Name
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: GoalTrigger.Name
  fullName: TinyLife.Goals.GoalTrigger.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this goal trigger.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalTrigger.#ctor(System.String)
  commentId: M:TinyLife.Goals.GoalTrigger.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: GoalTrigger(String)
  nameWithType: GoalTrigger.GoalTrigger(String)
  fullName: TinyLife.Goals.GoalTrigger.GoalTrigger(System.String)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 48
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new goal trigger with the given name.\n"
  example: []
  syntax:
    content: public GoalTrigger(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of this goal trigger.
    content.vb: Public Sub New(name As String)
  overload: TinyLife.Goals.GoalTrigger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  commentId: M:TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  id: Equals(TinyLife.Goals.GoalTrigger)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Equals(GoalTrigger)
  nameWithType: GoalTrigger.Equals(GoalTrigger)
  fullName: TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 56
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public readonly bool Equals(GoalTrigger other)
    parameters:
    - id: other
      type: TinyLife.Goals.GoalTrigger
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
    content.vb: Public Function Equals(other As GoalTrigger) As Boolean
  overload: TinyLife.Goals.GoalTrigger.Equals*
  implements:
  - System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalTrigger.Equals(System.Object)
  commentId: M:TinyLife.Goals.GoalTrigger.Equals(System.Object)
  id: Equals(System.Object)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: GoalTrigger.Equals(Object)
  fullName: TinyLife.Goals.GoalTrigger.Equals(System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Equals
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 64
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current instance.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">obj</code> and this instance are the same type and represent the same value; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: TinyLife.Goals.GoalTrigger.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Goals.GoalTrigger.GetHashCode
  commentId: M:TinyLife.Goals.GoalTrigger.GetHashCode
  id: GetHashCode
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GoalTrigger.GetHashCode()
  fullName: TinyLife.Goals.GoalTrigger.GetHashCode()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHashCode
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 70
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: TinyLife.Goals.GoalTrigger.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Goals.GoalTrigger.op_Equality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  commentId: M:TinyLife.Goals.GoalTrigger.op_Equality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  id: op_Equality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Equality(GoalTrigger, GoalTrigger)
  nameWithType: GoalTrigger.Equality(GoalTrigger, GoalTrigger)
  fullName: TinyLife.Goals.GoalTrigger.Equality(TinyLife.Goals.GoalTrigger, TinyLife.Goals.GoalTrigger)
  type: Operator
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: op_Equality
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public static bool operator ==(GoalTrigger left, GoalTrigger right)
    parameters:
    - id: left
      type: TinyLife.Goals.GoalTrigger
    - id: right
      type: TinyLife.Goals.GoalTrigger
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As GoalTrigger, right As GoalTrigger) As Boolean
  overload: TinyLife.Goals.GoalTrigger.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TinyLife.Goals.GoalTrigger.op_Inequality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  commentId: M:TinyLife.Goals.GoalTrigger.op_Inequality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  id: op_Inequality(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalTrigger)
  parent: TinyLife.Goals.GoalTrigger
  langs:
  - csharp
  - vb
  name: Inequality(GoalTrigger, GoalTrigger)
  nameWithType: GoalTrigger.Inequality(GoalTrigger, GoalTrigger)
  fullName: TinyLife.Goals.GoalTrigger.Inequality(TinyLife.Goals.GoalTrigger, TinyLife.Goals.GoalTrigger)
  type: Operator
  source:
    remote:
      path: TinyLife/Goals/GoalTrigger.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: op_Inequality
    path: ../TinyLife/Goals/GoalTrigger.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public static bool operator !=(GoalTrigger left, GoalTrigger right)
    parameters:
    - id: left
      type: TinyLife.Goals.GoalTrigger
    - id: right
      type: TinyLife.Goals.GoalTrigger
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As GoalTrigger, right As GoalTrigger) As Boolean
  overload: TinyLife.Goals.GoalTrigger.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.AutoTriggerGoal`1
  commentId: T:TinyLife.Goals.AutoTriggerGoal`1
  name: AutoTriggerGoal<T>
  nameWithType: AutoTriggerGoal<T>
  fullName: TinyLife.Goals.AutoTriggerGoal<T>
  nameWithType.vb: AutoTriggerGoal(Of T)
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T)
  name.vb: AutoTriggerGoal(Of T)
  spec.csharp:
  - uid: TinyLife.Goals.AutoTriggerGoal`1
    name: AutoTriggerGoal
    nameWithType: AutoTriggerGoal
    fullName: TinyLife.Goals.AutoTriggerGoal
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TinyLife.Goals.AutoTriggerGoal`1
    name: AutoTriggerGoal
    nameWithType: AutoTriggerGoal
    fullName: TinyLife.Goals.AutoTriggerGoal
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger.Name
  commentId: F:TinyLife.Goals.GoalTrigger.Name
  isExternal: true
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.IEquatable{TinyLife.Goals.GoalTrigger}
  commentId: T:System.IEquatable{TinyLife.Goals.GoalTrigger}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<GoalTrigger>
  nameWithType: IEquatable<GoalTrigger>
  fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>
  nameWithType.vb: IEquatable(Of GoalTrigger)
  fullName.vb: System.IEquatable(Of TinyLife.Goals.GoalTrigger)
  name.vb: IEquatable(Of GoalTrigger)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<GoalTrigger>()
  nameWithType: Extensions.JsonCopy<GoalTrigger>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalTrigger>()
  nameWithType.vb: Extensions.JsonCopy(Of GoalTrigger)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalTrigger)()
  name.vb: JsonCopy(Of GoalTrigger)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<GoalTrigger>
    nameWithType: Extensions.JsonCopy<GoalTrigger>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalTrigger>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of GoalTrigger)
    nameWithType: Extensions.JsonCopy(Of GoalTrigger)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalTrigger)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Goals.TimedGoal
  commentId: T:TinyLife.Goals.TimedGoal
  name: TimedGoal
  nameWithType: TimedGoal
  fullName: TinyLife.Goals.TimedGoal
- uid: TinyLife.Goals.ConditionedGoal
  commentId: T:TinyLife.Goals.ConditionedGoal
  name: ConditionedGoal
  nameWithType: ConditionedGoal
  fullName: TinyLife.Goals.ConditionedGoal
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  parent: TinyLife.Goals
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Furniture
  isExternal: true
  name: SetCreator(Person, Boolean)
  nameWithType: Furniture.SetCreator(Person, Boolean)
  fullName: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.SetCreator(TinyLife.Objects.Person,System.Boolean)
    name: SetCreator
    nameWithType: Furniture.SetCreator
    fullName: TinyLife.Objects.Furniture.SetCreator
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.DistinctGoal
  commentId: T:TinyLife.Goals.DistinctGoal
  name: DistinctGoal
  nameWithType: DistinctGoal
  fullName: TinyLife.Goals.DistinctGoal
- uid: TinyLife.Goals.AmountGoal
  commentId: T:TinyLife.Goals.AmountGoal
  name: AmountGoal
  nameWithType: AmountGoal
  fullName: TinyLife.Goals.AmountGoal
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: TinyLife.Goals.Project
  commentId: T:TinyLife.Goals.Project
  parent: TinyLife.Goals
  name: Project
  nameWithType: Project
  fullName: TinyLife.Goals.Project
- uid: TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  commentId: M:TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Goals.GoalTrigger.#ctor*
  commentId: Overload:TinyLife.Goals.GoalTrigger.#ctor
  name: GoalTrigger
  nameWithType: GoalTrigger.GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger.GoalTrigger
- uid: TinyLife.Goals.GoalTrigger.Equals*
  commentId: Overload:TinyLife.Goals.GoalTrigger.Equals
  name: Equals
  nameWithType: GoalTrigger.Equals
  fullName: TinyLife.Goals.GoalTrigger.Equals
- uid: System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  commentId: M:System.IEquatable{TinyLife.Goals.GoalTrigger}.Equals(TinyLife.Goals.GoalTrigger)
  parent: System.IEquatable{TinyLife.Goals.GoalTrigger}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(GoalTrigger)
  nameWithType: IEquatable<GoalTrigger>.Equals(GoalTrigger)
  fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>.Equals(TinyLife.Goals.GoalTrigger)
  nameWithType.vb: IEquatable(Of GoalTrigger).Equals(GoalTrigger)
  fullName.vb: System.IEquatable(Of TinyLife.Goals.GoalTrigger).Equals(TinyLife.Goals.GoalTrigger)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<GoalTrigger>.Equals
    fullName: System.IEquatable<TinyLife.Goals.GoalTrigger>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of GoalTrigger).Equals
    fullName: System.IEquatable(Of TinyLife.Goals.GoalTrigger).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalTrigger
    name: GoalTrigger
    nameWithType: GoalTrigger
    fullName: TinyLife.Goals.GoalTrigger
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalTrigger.GetHashCode*
  commentId: Overload:TinyLife.Goals.GoalTrigger.GetHashCode
  name: GetHashCode
  nameWithType: GoalTrigger.GetHashCode
  fullName: TinyLife.Goals.GoalTrigger.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  commentId: M:TinyLife.Goals.GoalTrigger.Equals(TinyLife.Goals.GoalTrigger)
  isExternal: true
- uid: TinyLife.Goals.GoalTrigger.op_Equality*
  commentId: Overload:TinyLife.Goals.GoalTrigger.op_Equality
  name: Equality
  nameWithType: GoalTrigger.Equality
  fullName: TinyLife.Goals.GoalTrigger.Equality
- uid: TinyLife.Goals.GoalTrigger.op_Inequality*
  commentId: Overload:TinyLife.Goals.GoalTrigger.op_Inequality
  name: Inequality
  nameWithType: GoalTrigger.Inequality
  fullName: TinyLife.Goals.GoalTrigger.Inequality

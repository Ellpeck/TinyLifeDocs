### YamlMime:ManagedReference
items:
- uid: TinyLife.World.MapAudioEmitter
  commentId: T:TinyLife.World.MapAudioEmitter
  id: MapAudioEmitter
  parent: TinyLife.World
  children:
  - TinyLife.World.MapAudioEmitter.WorldPosition
  langs:
  - csharp
  - vb
  name: MapAudioEmitter
  nameWithType: MapAudioEmitter
  fullName: TinyLife.World.MapAudioEmitter
  type: Class
  source:
    remote:
      path: TinyLife/World/MapAudioEmitter.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MapAudioEmitter
    path: ../TinyLife/World/MapAudioEmitter.cs
    startLine: 7
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn extension of the <see cref=\"!:AudioEmitter\"></see> class that also stores the emitter&apos;s <xref href=\"TinyLife.World.MapAudioEmitter.WorldPosition\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class MapAudioEmitter : AudioEmitter'
    content.vb: >-
      Public Class MapAudioEmitter
          Inherits AudioEmitter
  inheritance:
  - System.Object
  extensionMethods:
  - TinyLife.World.MapAudioEmitter.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.MapAudioEmitter.WorldPosition
  commentId: P:TinyLife.World.MapAudioEmitter.WorldPosition
  id: WorldPosition
  parent: TinyLife.World.MapAudioEmitter
  langs:
  - csharp
  - vb
  name: WorldPosition
  nameWithType: MapAudioEmitter.WorldPosition
  fullName: TinyLife.World.MapAudioEmitter.WorldPosition
  type: Property
  source:
    remote:
      path: TinyLife/World/MapAudioEmitter.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WorldPosition
    path: ../TinyLife/World/MapAudioEmitter.cs
    startLine: 12
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis audio emitter&apos;s <see cref=\"!:AudioEmitter.Position\"></see>, but measured in world coordinates\n"
  example: []
  syntax:
    content: public Vector2 WorldPosition { get; set; }
    parameters: []
    return:
      type: Vector2
    content.vb: Public Property WorldPosition As Vector2
  overload: TinyLife.World.MapAudioEmitter.WorldPosition*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.MapAudioEmitter.WorldPosition
  commentId: P:TinyLife.World.MapAudioEmitter.WorldPosition
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.MapAudioEmitter.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<MapAudioEmitter>()
  nameWithType: Extensions.JsonCopy<MapAudioEmitter>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.MapAudioEmitter>()
  nameWithType.vb: Extensions.JsonCopy(Of MapAudioEmitter)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.MapAudioEmitter)()
  name.vb: JsonCopy(Of MapAudioEmitter)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<MapAudioEmitter>
    nameWithType: Extensions.JsonCopy<MapAudioEmitter>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.MapAudioEmitter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of MapAudioEmitter)
    nameWithType: Extensions.JsonCopy(Of MapAudioEmitter)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.MapAudioEmitter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.MapAudioEmitter.WorldPosition*
  commentId: Overload:TinyLife.World.MapAudioEmitter.WorldPosition
  name: WorldPosition
  nameWithType: MapAudioEmitter.WorldPosition
  fullName: TinyLife.World.MapAudioEmitter.WorldPosition
- uid: Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2

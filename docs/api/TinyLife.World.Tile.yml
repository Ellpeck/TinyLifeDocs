### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  id: Tile
  parent: TinyLife.World
  children:
  - TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,System.Boolean,MLEM.Textures.TextureRegion)
  - TinyLife.World.Tile.BaseName
  - TinyLife.World.Tile.CanBuy
  - TinyLife.World.Tile.Colors
  - TinyLife.World.Tile.ColorSchemes
  - TinyLife.World.Tile.Draw(System.Object,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  - TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  - TinyLife.World.Tile.GetPrice
  - TinyLife.World.Tile.Height
  - TinyLife.World.Tile.Icon
  - TinyLife.World.Tile.Name
  - TinyLife.World.Tile.Natural
  - TinyLife.World.Tile.PathCostModifier
  - TinyLife.World.Tile.Price
  - TinyLife.World.Tile.ReferencePrice
  - TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  - TinyLife.World.Tile.Tiles
  - TinyLife.World.Tile.Width
  langs:
  - csharp
  - vb
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
  type: Class
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tile
    path: World/Tile.cs
    startLine: 25
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA tile is an object on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that represents the covering of the ground (or the ground itself).\nTo register a tile, use <xref href=\"TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cMLEM.Textures.TextureRegion%2cTinyLife.Utilities.ColorScheme%5b%5d%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Misc.Direction2%2cMLEM.Textures.TextureRegion%7d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(Tile.Converter))]

      public class Tile : IPricedObject
    content.vb: >-
      <JsonConverter(GetType(Tile.Converter))>

      Public Class Tile
          Implements IPricedObject
  inheritance:
  - System.Object
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Tile.Tiles
  commentId: F:TinyLife.World.Tile.Tiles
  id: Tiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: Tile.Tiles
  fullName: TinyLife.World.Tile.Tiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tiles
    path: World/Tile.cs
    startLine: 32
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA registry of all tiles that exist in the game and its mods\n"
  example: []
  syntax:
    content: public static readonly IDictionary<string, Tile[]> Tiles
    return:
      type: System.Collections.Generic.IDictionary{System.String,TinyLife.World.Tile[]}
    content.vb: Public Shared ReadOnly Tiles As IDictionary(Of String, Tile())
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.Width
  commentId: F:TinyLife.World.Tile.Width
  id: Width
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: Tile.Width
  fullName: TinyLife.World.Tile.Width
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Width
    path: World/Tile.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe width of each tile, in pixels\n"
  example: []
  syntax:
    content: public static readonly int Width
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Width As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.Height
  commentId: F:TinyLife.World.Tile.Height
  id: Height
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Tile.Height
  fullName: TinyLife.World.Tile.Height
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Height
    path: World/Tile.cs
    startLine: 40
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe height of each tile, in pixels\n"
  example: []
  syntax:
    content: public static readonly int Height
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Height As Integer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.ReferencePrice
  commentId: F:TinyLife.World.Tile.ReferencePrice
  id: ReferencePrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ReferencePrice
  nameWithType: Tile.ReferencePrice
  fullName: TinyLife.World.Tile.ReferencePrice
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ReferencePrice
    path: World/Tile.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe reference price for tiles.\nSince Grass is replaced by Concrete in a newly created room, the two tiles have to cost the same. This is that price.\nThis value is set to 5.\n"
  example: []
  syntax:
    content: public const int ReferencePrice = 5
    return:
      type: System.Int32
    content.vb: Public Const ReferencePrice As Integer = 5
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  id: BaseName
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: BaseName
  nameWithType: Tile.BaseName
  fullName: TinyLife.World.Tile.BaseName
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BaseName
    path: World/Tile.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this type of tile. Whereas <xref href=\"TinyLife.World.Tile.Name\" data-throw-if-not-resolved=\"false\"></xref> has the index of its <xref href=\"TinyLife.World.Tile.Colors\" data-throw-if-not-resolved=\"false\"></xref> appended to it, this one is just the type&apos;s name.\n"
  example: []
  syntax:
    content: public readonly string BaseName
    return:
      type: System.String
    content.vb: Public ReadOnly BaseName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  id: Name
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Tile.Name
  fullName: TinyLife.World.Tile.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: World/Tile.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this specific tile. This is comprised of the <xref href=\"TinyLife.World.Tile.BaseName\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.World.Tile.Colors\" data-throw-if-not-resolved=\"false\"></xref>&apos;s index attached to it.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Price
  commentId: F:TinyLife.World.Tile.Price
  id: Price
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Tile.Price
  fullName: TinyLife.World.Tile.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: World/Tile.cs
    startLine: 82
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of this tile\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.ColorSchemes
  commentId: F:TinyLife.World.Tile.ColorSchemes
  id: ColorSchemes
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ColorSchemes
  nameWithType: Tile.ColorSchemes
  fullName: TinyLife.World.Tile.ColorSchemes
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSchemes
    path: World/Tile.cs
    startLine: 86
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe color scheme that this tile can have\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] ColorSchemes
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly ColorSchemes As ColorScheme()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  id: Colors
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Tile.Colors
  fullName: TinyLife.World.Tile.Colors
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: World/Tile.cs
    startLine: 90
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe indices of the colors in each <xref href=\"TinyLife.World.Tile.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref> entry that this tile has\n"
  example: []
  syntax:
    content: public readonly int[] Colors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly Colors As Integer()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.CanBuy
  commentId: F:TinyLife.World.Tile.CanBuy
  id: CanBuy
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: CanBuy
  nameWithType: Tile.CanBuy
  fullName: TinyLife.World.Tile.CanBuy
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanBuy
    path: World/Tile.cs
    startLine: 94
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that indicates whether this tile can be bought without the &quot;ShowNonBuyable&quot; cheat enabled\n"
  example: []
  syntax:
    content: public readonly bool CanBuy
    return:
      type: System.Boolean
    content.vb: Public ReadOnly CanBuy As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.PathCostModifier
  commentId: F:TinyLife.World.Tile.PathCostModifier
  id: PathCostModifier
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: PathCostModifier
  nameWithType: Tile.PathCostModifier
  fullName: TinyLife.World.Tile.PathCostModifier
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PathCostModifier
    path: World/Tile.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that indicates the &quot;cost&quot; for pathfinding of this tile.\nThe default modifier is 1, and it should not be set to a value lower than that.\n"
  example: []
  syntax:
    content: public readonly float PathCostModifier
    return:
      type: System.Single
    content.vb: Public ReadOnly PathCostModifier As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Natural
  commentId: F:TinyLife.World.Tile.Natural
  id: Natural
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Natural
  nameWithType: Tile.Natural
  fullName: TinyLife.World.Tile.Natural
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Natural
    path: World/Tile.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that indicates whether this tile is considered natural.\nA natural tile is a tile that objects with the <xref href=\"TinyLife.Objects.ObjectCategory.NaturalGroundRequired\" data-throw-if-not-resolved=\"false\"></xref> category can be placed on.\n"
  example: []
  syntax:
    content: public readonly bool Natural
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Natural As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Icon
  commentId: F:TinyLife.World.Tile.Icon
  id: Icon
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Tile.Icon
  fullName: TinyLife.World.Tile.Icon
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: World/Tile.cs
    startLine: 109
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe build mode icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,System.Boolean,MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,System.Boolean,MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,System.Boolean,MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tile(String, String, Int32, Dictionary<Direction2, TextureRegion>, ColorScheme[], Int32[], Boolean, Single, Boolean, TextureRegion)
  nameWithType: Tile.Tile(String, String, Int32, Dictionary<Direction2, TextureRegion>, ColorScheme[], Int32[], Boolean, Single, Boolean, TextureRegion)
  fullName: TinyLife.World.Tile.Tile(System.String, System.String, System.Int32, System.Collections.Generic.Dictionary<MLEM.Misc.Direction2, MLEM.Textures.TextureRegion>, TinyLife.Utilities.ColorScheme[], System.Int32[], System.Boolean, System.Single, System.Boolean, MLEM.Textures.TextureRegion)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: World/Tile.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new tile with the given settings.\nTo create an instance of a custom tile class, use <xref href=\"TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cMLEM.Textures.TextureRegion%2cTinyLife.Utilities.ColorScheme%5b%5d%2cSystem.Single%2cSystem.Boolean%2cSystem.Boolean%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Misc.Direction2%2cMLEM.Textures.TextureRegion%7d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Tile(string baseName, string name, int price, Dictionary<Direction2, TextureRegion> textureRegions, ColorScheme[] colorSchemes, int[] colors, bool canBuy, float pathCostModifier, bool natural, TextureRegion icon)
    parameters:
    - id: baseName
      type: System.String
    - id: name
      type: System.String
    - id: price
      type: System.Int32
    - id: textureRegions
      type: System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
    - id: colorSchemes
      type: TinyLife.Utilities.ColorScheme[]
    - id: colors
      type: System.Int32[]
    - id: canBuy
      type: System.Boolean
    - id: pathCostModifier
      type: System.Single
    - id: natural
      type: System.Boolean
    - id: icon
      type: MLEM.Textures.TextureRegion
    content.vb: Protected Sub New(baseName As String, name As String, price As Integer, textureRegions As Dictionary(Of Direction2, TextureRegion), colorSchemes As ColorScheme(), colors As Integer(), canBuy As Boolean, pathCostModifier As Single, natural As Boolean, icon As TextureRegion)
  overload: TinyLife.World.Tile.#ctor*
  nameWithType.vb: Tile.Tile(String, String, Int32, Dictionary(Of Direction2, TextureRegion), ColorScheme(), Int32(), Boolean, Single, Boolean, TextureRegion)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.World.Tile.Tile(System.String, System.String, System.Int32, System.Collections.Generic.Dictionary(Of MLEM.Misc.Direction2, MLEM.Textures.TextureRegion), TinyLife.Utilities.ColorScheme(), System.Int32(), System.Boolean, System.Single, System.Boolean, MLEM.Textures.TextureRegion)
  name.vb: Tile(String, String, Int32, Dictionary(Of Direction2, TextureRegion), ColorScheme(), Int32(), Boolean, Single, Boolean, TextureRegion)
- uid: TinyLife.World.Tile.Draw(System.Object,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  commentId: M:TinyLife.World.Tile.Draw(System.Object,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  id: Draw(System.Object,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Boolean)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Draw(Object, Vector2, Single, Single, Boolean)
  nameWithType: Tile.Draw(Object, Vector2, Single, Single, Boolean)
  fullName: TinyLife.World.Tile.Draw(System.Object, Microsoft.Xna.Framework.Vector2, System.Single, System.Single, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: World/Tile.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this tile at the given position in the world using a <xref href=\"Microsoft.Xna.Framework.Graphics.SpriteBatch\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"MLEM.Misc.StaticSpriteBatch\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual void Draw(object batch, Vector2 drawPos, float depth, float scale, bool offsetDepth = true)
    parameters:
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which can either be a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or a <xref href="MLEM.Misc.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at
    - id: depth
      type: System.Single
      description: The depth to use for drawing
    - id: scale
      type: System.Single
      description: The scale to draw the tile with
    - id: offsetDepth
      type: System.Boolean
      description: Whether the depth value should be offset for each layer
    content.vb: Public Overridable Sub Draw(batch As Object, drawPos As Vector2, depth As Single, scale As Single, offsetDepth As Boolean = True)
  overload: TinyLife.World.Tile.Draw*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  commentId: M:TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DrawUi(Element, SpriteBatch, Single)
  nameWithType: Tile.DrawUi(Element, SpriteBatch, Single)
  fullName: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: World/Tile.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this tile on the given ui element, in ui space\n"
  example: []
  syntax:
    content: public virtual void DrawUi(Element e, SpriteBatch batch, float drawScale = 0.4F)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The element to draw on
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: drawScale
      type: System.Single
      description: The scale to draw the tile with. Defaults to 0.4.
    content.vb: Public Overridable Sub DrawUi(e As Element, batch As SpriteBatch, drawScale As Single = 0.4F)
  overload: TinyLife.World.Tile.DrawUi*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.GetPrice
  commentId: M:TinyLife.World.Tile.GetPrice
  id: GetPrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Tile.GetPrice()
  fullName: TinyLife.World.Tile.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: World/Tile.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Overridable Function GetPrice As Single
  overload: TinyLife.World.Tile.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  id: Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(String, Int32, TextureRegion, ColorScheme[], Single, Boolean, Boolean, TextureRegion, Func<Direction2, TextureRegion>, Type)
  nameWithType: Tile.Register(String, Int32, TextureRegion, ColorScheme[], Single, Boolean, Boolean, TextureRegion, Func<Direction2, TextureRegion>, Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, MLEM.Textures.TextureRegion, TinyLife.Utilities.ColorScheme[], System.Single, System.Boolean, System.Boolean, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, MLEM.Textures.TextureRegion>, System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: World/Tile.cs
    startLine: 187
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new tile with the given settings\n"
  example: []
  syntax:
    content: public static void Register(string name, int price, TextureRegion textureRegion, ColorScheme[] colors, float pathCostModifier = 1F, bool canBuy = true, bool natural = false, TextureRegion icon = null, Func<Direction2, TextureRegion> variations = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have
    - id: price
      type: System.Int32
      description: The tile&apos;s price
    - id: textureRegion
      type: MLEM.Textures.TextureRegion
      description: The texture region that this tile should use for rendering
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color scheme that this tile should have
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, >= 1, that this tile should have
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool
    - id: natural
      type: System.Boolean
      description: Whether or not the tile is considered natural ground
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object
    - id: variations
      type: System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
      description: An optional set of variation textures that should be used based on the given camera rotation
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances
    content.vb: Public Shared Sub Register(name As String, price As Integer, textureRegion As TextureRegion, colors As ColorScheme(), pathCostModifier As Single = 1F, canBuy As Boolean = True, natural As Boolean = False, icon As TextureRegion = Nothing, variations As Func(Of Direction2, TextureRegion) = Nothing, constructedType As Type = Nothing)
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Int32, TextureRegion, ColorScheme(), Single, Boolean, Boolean, TextureRegion, Func(Of Direction2, TextureRegion), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, MLEM.Textures.TextureRegion, TinyLife.Utilities.ColorScheme(), System.Single, System.Boolean, System.Boolean, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, MLEM.Textures.TextureRegion), System.Type)
  name.vb: Register(String, Int32, TextureRegion, ColorScheme(), Single, Boolean, Boolean, TextureRegion, Func(Of Direction2, TextureRegion), Type)
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,MLEM.Textures.TextureRegion,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,System.Boolean,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion},System.Type)
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Tile>()
  nameWithType: Extensions.JsonCopy<Tile>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Tile>()
  nameWithType.vb: Extensions.JsonCopy(Of Tile)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Tile)()
  name.vb: JsonCopy(Of Tile)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Tile>
    nameWithType: Extensions.JsonCopy<Tile>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Tile>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Tile)
    nameWithType: Extensions.JsonCopy(Of Tile)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Tile)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.Generic.IDictionary{System.String,TinyLife.World.Tile[]}
  commentId: T:System.Collections.Generic.IDictionary{System.String,TinyLife.World.Tile[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Tile[]>
  nameWithType: IDictionary<String, Tile[]>
  fullName: System.Collections.Generic.IDictionary<System.String, TinyLife.World.Tile[]>
  nameWithType.vb: IDictionary(Of String, Tile())
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, TinyLife.World.Tile())
  name.vb: IDictionary(Of String, Tile())
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  isExternal: true
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  isExternal: true
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.Tile.ColorSchemes
  commentId: F:TinyLife.World.Tile.ColorSchemes
  isExternal: true
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  commentId: F:TinyLife.Objects.ObjectCategory.NaturalGroundRequired
  isExternal: true
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.World.Tile.#ctor*
  commentId: Overload:TinyLife.World.Tile.#ctor
  name: Tile
  nameWithType: Tile.Tile
  fullName: TinyLife.World.Tile.Tile
- uid: System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
  commentId: T:System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Direction2, TextureRegion>
  nameWithType: Dictionary<Direction2, TextureRegion>
  fullName: System.Collections.Generic.Dictionary<MLEM.Misc.Direction2, MLEM.Textures.TextureRegion>
  nameWithType.vb: Dictionary(Of Direction2, TextureRegion)
  fullName.vb: System.Collections.Generic.Dictionary(Of MLEM.Misc.Direction2, MLEM.Textures.TextureRegion)
  name.vb: Dictionary(Of Direction2, TextureRegion)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Misc.StaticSpriteBatch
  commentId: T:MLEM.Misc.StaticSpriteBatch
  isExternal: true
- uid: TinyLife.World.Tile.Draw*
  commentId: Overload:TinyLife.World.Tile.Draw
  name: Draw
  nameWithType: Tile.Draw
  fullName: TinyLife.World.Tile.Draw
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Tile.DrawUi*
  commentId: Overload:TinyLife.World.Tile.DrawUi
  name: DrawUi
  nameWithType: Tile.DrawUi
  fullName: TinyLife.World.Tile.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.World.Tile.GetPrice*
  commentId: Overload:TinyLife.World.Tile.GetPrice
  name: GetPrice
  nameWithType: Tile.GetPrice
  fullName: TinyLife.World.Tile.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: TinyLife.World.Tile.Register*
  commentId: Overload:TinyLife.World.Tile.Register
  name: Register
  nameWithType: Tile.Register
  fullName: TinyLife.World.Tile.Register
- uid: System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
  commentId: T:System.Func{MLEM.Misc.Direction2,MLEM.Textures.TextureRegion}
  parent: System
  definition: System.Func`2
  name: Func<Direction2, TextureRegion>
  nameWithType: Func<Direction2, TextureRegion>
  fullName: System.Func<MLEM.Misc.Direction2, MLEM.Textures.TextureRegion>
  nameWithType.vb: Func(Of Direction2, TextureRegion)
  fullName.vb: System.Func(Of MLEM.Misc.Direction2, MLEM.Textures.TextureRegion)
  name.vb: Func(Of Direction2, TextureRegion)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )

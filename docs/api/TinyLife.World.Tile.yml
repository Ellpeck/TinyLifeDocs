### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  id: Tile
  parent: TinyLife.World
  children:
  - TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Int32[])
  - TinyLife.World.Tile.BaseName
  - TinyLife.World.Tile.CanBuy
  - TinyLife.World.Tile.Categories
  - TinyLife.World.Tile.Colors
  - TinyLife.World.Tile.ColorSchemes
  - TinyLife.World.Tile.DefaultColors
  - TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean)
  - TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  - TinyLife.World.Tile.GetPrice
  - TinyLife.World.Tile.GetVariationTexture(MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Tile.GetVisualOffset(MLEM.Misc.Direction2,System.Int32,System.Int32)
  - TinyLife.World.Tile.Height
  - TinyLife.World.Tile.Icon
  - TinyLife.World.Tile.Name
  - TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.World.Tile.PathCostModifier
  - TinyLife.World.Tile.Price
  - TinyLife.World.Tile.ReferencePrice
  - TinyLife.World.Tile.Regions
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Type)
  - TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Type)
  - TinyLife.World.Tile.Textures
  - TinyLife.World.Tile.Tiles
  - TinyLife.World.Tile.Width
  langs:
  - csharp
  - vb
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
  type: Class
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tile
    path: ../TinyLife/World/Tile.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA tile is an object on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that represents the covering of the ground (or the ground itself).\nTo register a tile, use <xref href=\"TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cSystem.Collections.Generic.Dictionary%7bMicrosoft.Xna.Framework.Point%2cMLEM.Textures.TextureRegion%7d%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%2cSystem.Single%2cSystem.Boolean%2cTinyLife.World.Tile.Category%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Misc.Direction2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Point%7d%7d%2cSystem.Nullable%7bSystem.Int32%7d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(Tile.Converter))]

      public class Tile : IPricedObject
    content.vb: >-
      <JsonConverter(GetType(Tile.Converter))>

      Public Class Tile
          Implements IPricedObject
  inheritance:
  - System.Object
  derivedClasses:
  - TinyLife.World.GrassyAutoTile
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Tile.Tiles
  commentId: F:TinyLife.World.Tile.Tiles
  id: Tiles
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: Tile.Tiles
  fullName: TinyLife.World.Tile.Tiles
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tiles
    path: ../TinyLife/World/Tile.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA registry of all tiles that exist in the game and its mods\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, Tile[]> Tiles
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
    content.vb: Public Shared ReadOnly Tiles As ReadOnlyDictionary(Of String, Tile())
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.Width
  commentId: P:TinyLife.World.Tile.Width
  id: Width
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: Tile.Width
  fullName: TinyLife.World.Tile.Width
  type: Property
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Width
    path: ../TinyLife/World/Tile.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe width of each tile, in pixels\n"
  example: []
  syntax:
    content: public static int Width { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Width As Integer
  overload: TinyLife.World.Tile.Width*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.Height
  commentId: P:TinyLife.World.Tile.Height
  id: Height
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Tile.Height
  fullName: TinyLife.World.Tile.Height
  type: Property
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Height
    path: ../TinyLife/World/Tile.cs
    startLine: 37
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe height of each tile, in pixels\n"
  example: []
  syntax:
    content: public static int Height { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly Property Height As Integer
  overload: TinyLife.World.Tile.Height*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.World.Tile.ReferencePrice
  commentId: F:TinyLife.World.Tile.ReferencePrice
  id: ReferencePrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ReferencePrice
  nameWithType: Tile.ReferencePrice
  fullName: TinyLife.World.Tile.ReferencePrice
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ReferencePrice
    path: ../TinyLife/World/Tile.cs
    startLine: 43
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe reference price for tiles.\nSince Grass is replaced by Concrete in a newly created room, the two tiles have to cost the same. This is that price.\nThis value is set to 5.\n"
  example: []
  syntax:
    content: public const int ReferencePrice = 5
    return:
      type: System.Int32
    content.vb: Public Const ReferencePrice As Integer = 5
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  id: BaseName
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: BaseName
  nameWithType: Tile.BaseName
  fullName: TinyLife.World.Tile.BaseName
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: BaseName
    path: ../TinyLife/World/Tile.cs
    startLine: 79
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this type of tile. Whereas <xref href=\"TinyLife.World.Tile.Name\" data-throw-if-not-resolved=\"false\"></xref> has the index of its <xref href=\"TinyLife.World.Tile.Colors\" data-throw-if-not-resolved=\"false\"></xref> appended to it, this one is just the type&apos;s name.\n"
  example: []
  syntax:
    content: public readonly string BaseName
    return:
      type: System.String
    content.vb: Public ReadOnly BaseName As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  id: Name
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Tile.Name
  fullName: TinyLife.World.Tile.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Tile.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this specific tile. This is comprised of the <xref href=\"TinyLife.World.Tile.BaseName\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"TinyLife.World.Tile.Colors\" data-throw-if-not-resolved=\"false\"></xref>&apos;s index attached to it.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Price
  commentId: F:TinyLife.World.Tile.Price
  id: Price
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Tile.Price
  fullName: TinyLife.World.Tile.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/World/Tile.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of this tile\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.ColorSchemes
  commentId: F:TinyLife.World.Tile.ColorSchemes
  id: ColorSchemes
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: ColorSchemes
  nameWithType: Tile.ColorSchemes
  fullName: TinyLife.World.Tile.ColorSchemes
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ColorSchemes
    path: ../TinyLife/World/Tile.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe color scheme that this tile can have\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] ColorSchemes
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly ColorSchemes As ColorScheme()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  id: Colors
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: Tile.Colors
  fullName: TinyLife.World.Tile.Colors
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/World/Tile.cs
    startLine: 95
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe indices of the colors in each <xref href=\"TinyLife.World.Tile.ColorSchemes\" data-throw-if-not-resolved=\"false\"></xref> entry that this tile has\n"
  example: []
  syntax:
    content: public readonly int[] Colors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly Colors As Integer()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.CanBuy
  commentId: F:TinyLife.World.Tile.CanBuy
  id: CanBuy
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: CanBuy
  nameWithType: Tile.CanBuy
  fullName: TinyLife.World.Tile.CanBuy
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanBuy
    path: ../TinyLife/World/Tile.cs
    startLine: 99
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that indicates whether this tile can be bought without the &quot;ShowNonBuyable&quot; cheat enabled\n"
  example: []
  syntax:
    content: public readonly bool CanBuy
    return:
      type: System.Boolean
    content.vb: Public ReadOnly CanBuy As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.PathCostModifier
  commentId: F:TinyLife.World.Tile.PathCostModifier
  id: PathCostModifier
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: PathCostModifier
  nameWithType: Tile.PathCostModifier
  fullName: TinyLife.World.Tile.PathCostModifier
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PathCostModifier
    path: ../TinyLife/World/Tile.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that indicates the &quot;cost&quot; for pathfinding of this tile.\nThe default modifier is 1, and it should not be set to a value lower than that.\n"
  example: []
  syntax:
    content: public readonly float PathCostModifier
    return:
      type: System.Single
    content.vb: Public ReadOnly PathCostModifier As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Categories
  commentId: F:TinyLife.World.Tile.Categories
  id: Categories
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: Tile.Categories
  fullName: TinyLife.World.Tile.Categories
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Categories
    path: ../TinyLife/World/Tile.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.Tile.Category\" data-throw-if-not-resolved=\"false\"></xref> flags that this tile has.\n"
  example: []
  syntax:
    content: public readonly Tile.Category Categories
    return:
      type: TinyLife.World.Tile.Category
    content.vb: Public ReadOnly Categories As Tile.Category
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Icon
  commentId: F:TinyLife.World.Tile.Icon
  id: Icon
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: Tile.Icon
  fullName: TinyLife.World.Tile.Icon
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/World/Tile.cs
    startLine: 113
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe build mode icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.DefaultColors
  commentId: F:TinyLife.World.Tile.DefaultColors
  id: DefaultColors
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DefaultColors
  nameWithType: Tile.DefaultColors
  fullName: TinyLife.World.Tile.DefaultColors
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DefaultColors
    path: ../TinyLife/World/Tile.cs
    startLine: 117
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe colors that this tile should have by default.\n"
  example: []
  syntax:
    content: public readonly int[] DefaultColors
    return:
      type: System.Int32[]
    content.vb: Public ReadOnly DefaultColors As Integer()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Textures
  commentId: F:TinyLife.World.Tile.Textures
  id: Textures
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Textures
  nameWithType: Tile.Textures
  fullName: TinyLife.World.Tile.Textures
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Textures
    path: ../TinyLife/World/Tile.cs
    startLine: 121
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe texture atlas used for this tile.\n"
  example: []
  syntax:
    content: public readonly Dictionary<Point, TextureRegion> Textures
    return:
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    content.vb: Public ReadOnly Textures As Dictionary(Of Point, TextureRegion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.Regions
  commentId: F:TinyLife.World.Tile.Regions
  id: Regions
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Regions
  nameWithType: Tile.Regions
  fullName: TinyLife.World.Tile.Regions
  type: Field
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Regions
    path: ../TinyLife/World/Tile.cs
    startLine: 125
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe texture regions this tile uses, which refer to entries in <xref href=\"TinyLife.World.Tile.Textures\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly Dictionary<Direction2, Point[]> Regions
    return:
      type: System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
    content.vb: Public ReadOnly Regions As Dictionary(Of Direction2, Point())
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Int32[])
  commentId: M:TinyLife.World.Tile.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Int32[])
  id: '#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},TinyLife.Utilities.ColorScheme[],System.Int32[],System.Boolean,System.Single,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Int32[])'
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Tile(String, String, Int32, Dictionary<Point, TextureRegion>, Dictionary<Direction2, Point[]>, ColorScheme[], Int32[], Boolean, Single, Tile.Category, TextureRegion, Int32[])
  nameWithType: Tile.Tile(String, String, Int32, Dictionary<Point, TextureRegion>, Dictionary<Direction2, Point[]>, ColorScheme[], Int32[], Boolean, Single, Tile.Category, TextureRegion, Int32[])
  fullName: TinyLife.World.Tile.Tile(System.String, System.String, System.Int32, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, System.Collections.Generic.Dictionary<MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point[]>, TinyLife.Utilities.ColorScheme[], System.Int32[], System.Boolean, System.Single, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Int32[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Tile.cs
    startLine: 131
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new tile with the given settings.\nTo create an instance of a custom tile class, use <xref href=\"TinyLife.World.Tile.Register(System.String%2cSystem.Int32%2cSystem.Collections.Generic.Dictionary%7bMicrosoft.Xna.Framework.Point%2cMLEM.Textures.TextureRegion%7d%2cMicrosoft.Xna.Framework.Point%2cTinyLife.Utilities.ColorScheme%2cSystem.Single%2cSystem.Boolean%2cTinyLife.World.Tile.Category%2cMLEM.Textures.TextureRegion%2cSystem.Func%7bMLEM.Misc.Direction2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Point%7d%7d%2cSystem.Nullable%7bSystem.Int32%7d%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected Tile(string baseName, string name, int price, Dictionary<Point, TextureRegion> textures, Dictionary<Direction2, Point[]> regions, ColorScheme[] colorSchemes, int[] colors, bool canBuy, float pathCostModifier, Tile.Category categories, TextureRegion icon, int[] defaultColors)
    parameters:
    - id: baseName
      type: System.String
    - id: name
      type: System.String
    - id: price
      type: System.Int32
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
    - id: regions
      type: System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
    - id: colorSchemes
      type: TinyLife.Utilities.ColorScheme[]
    - id: colors
      type: System.Int32[]
    - id: canBuy
      type: System.Boolean
    - id: pathCostModifier
      type: System.Single
    - id: categories
      type: TinyLife.World.Tile.Category
    - id: icon
      type: MLEM.Textures.TextureRegion
    - id: defaultColors
      type: System.Int32[]
    content.vb: Protected Sub New(baseName As String, name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), regions As Dictionary(Of Direction2, Point()), colorSchemes As ColorScheme(), colors As Integer(), canBuy As Boolean, pathCostModifier As Single, categories As Tile.Category, icon As TextureRegion, defaultColors As Integer())
  overload: TinyLife.World.Tile.#ctor*
  nameWithType.vb: Tile.Tile(String, String, Int32, Dictionary(Of Point, TextureRegion), Dictionary(Of Direction2, Point()), ColorScheme(), Int32(), Boolean, Single, Tile.Category, TextureRegion, Int32())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.World.Tile.Tile(System.String, System.String, System.Int32, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), System.Collections.Generic.Dictionary(Of MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point()), TinyLife.Utilities.ColorScheme(), System.Int32(), System.Boolean, System.Single, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Int32())
  name.vb: Tile(String, String, Int32, Dictionary(Of Point, TextureRegion), Dictionary(Of Direction2, Point()), ColorScheme(), Int32(), Boolean, Single, Tile.Category, TextureRegion, Int32())
- uid: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean)
  commentId: M:TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean)
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Draw(GameTime, Object, Map, Point, Vector2, Single, Single, ICollection<StaticSpriteBatch.Item>, Boolean)
  nameWithType: Tile.Draw(GameTime, Object, Map, Point, Vector2, Single, Single, ICollection<StaticSpriteBatch.Item>, Boolean)
  fullName: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime, System.Object, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Vector2, System.Single, System.Single, System.Collections.Generic.ICollection<MLEM.Graphics.StaticSpriteBatch.Item>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Tile.cs
    startLine: 159
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this tile at the given position in the world using a <xref href=\"Microsoft.Xna.Framework.Graphics.SpriteBatch\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"MLEM.Graphics.StaticSpriteBatch\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public virtual bool Draw(GameTime time, object batch, Map map, Point pos, Vector2 drawPos, float depth, float scale, ICollection<StaticSpriteBatch.Item> items, bool hasStaticContext)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time.
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which can either be a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: map
      type: TinyLife.World.Map
      description: The map that the tile is on.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is on.
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at.
    - id: depth
      type: System.Single
      description: The depth to use for drawing.
    - id: scale
      type: System.Single
      description: The scale to draw the tile with.
    - id: items
      type: System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
      description: The <xref href="MLEM.Graphics.StaticSpriteBatch.Item" data-throw-if-not-resolved="false"></xref> collection that added items can optionally be added to.
    - id: hasStaticContext
      type: System.Boolean
      description: Whether this tile also has a static context, that is, whether it will already be drawn using a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: Whether this tile was fully drawn. If the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref> and false is returned, this tile will be marked as an animated tile, causing it to draw every frame.
    content.vb: Public Overridable Function Draw(time As GameTime, batch As Object, map As Map, pos As Point, drawPos As Vector2, depth As Single, scale As Single, items As ICollection(Of StaticSpriteBatch.Item), hasStaticContext As Boolean) As Boolean
  overload: TinyLife.World.Tile.Draw*
  nameWithType.vb: Tile.Draw(GameTime, Object, Map, Point, Vector2, Single, Single, ICollection(Of StaticSpriteBatch.Item), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.World.Tile.Draw(Microsoft.Xna.Framework.GameTime, System.Object, TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Vector2, System.Single, System.Single, System.Collections.Generic.ICollection(Of MLEM.Graphics.StaticSpriteBatch.Item), System.Boolean)
  name.vb: Draw(GameTime, Object, Map, Point, Vector2, Single, Single, ICollection(Of StaticSpriteBatch.Item), Boolean)
- uid: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  commentId: M:TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: DrawUi(Element, GameTime, SpriteBatch, Single)
  nameWithType: Tile.DrawUi(Element, GameTime, SpriteBatch, Single)
  fullName: TinyLife.World.Tile.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: ../TinyLife/World/Tile.cs
    startLine: 185
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this tile on the given ui element, in ui space\n"
  example: []
  syntax:
    content: public virtual void DrawUi(Element e, GameTime time, SpriteBatch batch, float drawScale = 0.4F)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The element to draw on
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s current time.
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: drawScale
      type: System.Single
      description: The scale to draw the tile with. Defaults to 0.4.
    content.vb: Public Overridable Sub DrawUi(e As Element, time As GameTime, batch As SpriteBatch, drawScale As Single = 0.4F)
  overload: TinyLife.World.Tile.DrawUi*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.GetPrice
  commentId: M:TinyLife.World.Tile.GetPrice
  id: GetPrice
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Tile.GetPrice()
  fullName: TinyLife.World.Tile.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Tile.cs
    startLine: 192
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public virtual float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Overridable Function GetPrice As Single
  overload: TinyLife.World.Tile.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  id: OnNeighborChanged(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: OnNeighborChanged(Map, Point, Point)
  nameWithType: Tile.OnNeighborChanged(Map, Point, Point)
  fullName: TinyLife.World.Tile.OnNeighborChanged(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnNeighborChanged
    path: ../TinyLife/World/Tile.cs
    startLine: 203
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA method that is called when a neighboring <xref href=\"TinyLife.World.Tile\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> changes.\nThis method does nothing by default, but is overriden by <xref href=\"TinyLife.World.GrassyAutoTile\" data-throw-if-not-resolved=\"false\"></xref> to notify neighboring tiles of changes.\n"
  example: []
  syntax:
    content: public virtual void OnNeighborChanged(Map map, Point pos, Point neighbor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the tile is on.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is on.
    - id: neighbor
      type: Microsoft.Xna.Framework.Point
      description: The position of the tile that changed.
    content.vb: Public Overridable Sub OnNeighborChanged(map As Map, pos As Point, neighbor As Point)
  overload: TinyLife.World.Tile.OnNeighborChanged*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.World.Tile.GetVariationTexture(MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.Tile.GetVariationTexture(MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point)
  id: GetVariationTexture(MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetVariationTexture(Direction2, Point)
  nameWithType: Tile.GetVariationTexture(Direction2, Point)
  fullName: TinyLife.World.Tile.GetVariationTexture(MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVariationTexture
    path: ../TinyLife/World/Tile.cs
    startLine: 212
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns a random texture that should be displayed at the given position, based on the <xref href=\"TinyLife.World.Tile.Textures\" data-throw-if-not-resolved=\"false\"></xref> variations that this tile has.\nIf a tile only has one variation texture, this method always returns that texture.\n"
  example: []
  syntax:
    content: protected Point GetVariationTexture(Direction2 direction, Point pos)
    parameters:
    - id: direction
      type: MLEM.Misc.Direction2
      description: The camera rotation.
    - id: pos
      type: Microsoft.Xna.Framework.Point
      description: The position that the tile is at.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The texture to display at the location.
    content.vb: Protected Function GetVariationTexture(direction As Direction2, pos As Point) As Point
  overload: TinyLife.World.Tile.GetVariationTexture*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.World.Tile.GetVisualOffset(MLEM.Misc.Direction2,System.Int32,System.Int32)
  commentId: M:TinyLife.World.Tile.GetVisualOffset(MLEM.Misc.Direction2,System.Int32,System.Int32)
  id: GetVisualOffset(MLEM.Misc.Direction2,System.Int32,System.Int32)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: GetVisualOffset(Direction2, Int32, Int32)
  nameWithType: Tile.GetVisualOffset(Direction2, Int32, Int32)
  fullName: TinyLife.World.Tile.GetVisualOffset(MLEM.Misc.Direction2, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisualOffset
    path: ../TinyLife/World/Tile.cs
    startLine: 224
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the visual offset of the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">x</code> and <code data-dev-comment-type=\"paramref\" class=\"paramref\">y</code> values, based on the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">direction</code>, which is usually the game&apos;s <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected static Point GetVisualOffset(Direction2 direction, int x, int y)
    parameters:
    - id: direction
      type: MLEM.Misc.Direction2
      description: The rotation.
    - id: x
      type: System.Int32
      description: The x coordinate to offset.
    - id: y
      type: System.Int32
      description: The y coordinate to offset.
    return:
      type: Microsoft.Xna.Framework.Point
      description: The visual offset.
    content.vb: Protected Shared Function GetVisualOffset(direction As Direction2, x As Integer, y As Integer) As Point
  overload: TinyLife.World.Tile.GetVisualOffset*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Nullable<Int32>, Type)
  nameWithType: Tile.Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Nullable<Int32>, Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, System.Nullable<Microsoft.Xna.Framework.Point>>, System.Nullable<System.Int32>, System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/Tile.cs
    startLine: 248
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new tile with the given settings.\n"
  example: []
  syntax:
    content: public static void Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point textureRegion, ColorScheme color, float pathCostModifier = 1F, bool canBuy = true, Tile.Category categories = Tile.Category.None, TextureRegion icon = null, Func<Direction2, Point?> variations = null, int? defaultColor = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile&apos;s price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region that this tile should use for rendering.
    - id: color
      type: TinyLife.Utilities.ColorScheme
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, >= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile&apos;s <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColor
      type: System.Nullable{System.Int32}
      description: The color that this tile should display with in the tile tool by default.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Sub Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, color As ColorScheme, pathCostModifier As Single = 1F, canBuy As Boolean = True, categories As Tile.Category = Tile.Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point?) = Nothing, defaultColor As Integer? = Nothing, constructedType As Type = Nothing)
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Nullable(Of Int32), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, System.Nullable(Of Microsoft.Xna.Framework.Point)), System.Nullable(Of System.Int32), System.Type)
  name.vb: Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Nullable(Of Int32), Type)
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Int32[],System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme[], Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Int32[], Type)
  nameWithType: Tile.Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme[], Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Int32[], Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme[], System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, System.Nullable<Microsoft.Xna.Framework.Point>>, System.Int32[], System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/Tile.cs
    startLine: 267
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new tile with the given settings.\n"
  example: []
  syntax:
    content: public static void Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point textureRegion, ColorScheme[] colors, float pathCostModifier = 1F, bool canBuy = true, Tile.Category categories = Tile.Category.None, TextureRegion icon = null, Func<Direction2, Point?> variations = null, int[] defaultColors = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile&apos;s price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegion
      type: Microsoft.Xna.Framework.Point
      description: The texture region that this tile should use for rendering.
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, >= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile&apos;s <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColors
      type: System.Int32[]
      description: The colors that this tile should display with in the tile tool by default.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Sub Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegion As Point, colors As ColorScheme(), pathCostModifier As Single = 1F, canBuy As Boolean = True, categories As Tile.Category = Tile.Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point?) = Nothing, defaultColors As Integer() = Nothing, constructedType As Type = Nothing)
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Int32(), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme(), System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, System.Nullable(Of Microsoft.Xna.Framework.Point)), System.Int32(), System.Type)
  name.vb: Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Int32(), Type)
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Type)
  id: Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point[],TinyLife.Utilities.ColorScheme[],System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]},System.Int32[],System.Type)
  parent: TinyLife.World.Tile
  langs:
  - csharp
  - vb
  name: Register(String, Int32, Dictionary<Point, TextureRegion>, Point[], ColorScheme[], Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Point[]>, Int32[], Type)
  nameWithType: Tile.Register(String, Int32, Dictionary<Point, TextureRegion>, Point[], ColorScheme[], Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Point[]>, Int32[], Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point[], TinyLife.Utilities.ColorScheme[], System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point[]>, System.Int32[], System.Type)
  type: Method
  source:
    remote:
      path: TinyLife/World/Tile.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/Tile.cs
    startLine: 289
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new tile with the given settings.\n"
  example: []
  syntax:
    content: public static void Register(string name, int price, Dictionary<Point, TextureRegion> textures, Point[] textureRegions, ColorScheme[] colors, float pathCostModifier = 1F, bool canBuy = true, Tile.Category categories = Tile.Category.None, TextureRegion icon = null, Func<Direction2, Point[]> variations = null, int[] defaultColors = null, Type constructedType = null)
    parameters:
    - id: name
      type: System.String
      description: The name that the tile should have.
    - id: price
      type: System.Int32
      description: The tile&apos;s price.
    - id: textures
      type: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
      description: The texture atlas to use.
    - id: textureRegions
      type: Microsoft.Xna.Framework.Point[]
      description: The texture regions that this tile should use for rendering, from which a random value will be chosen for each tile.
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color scheme that this tile should have.
    - id: pathCostModifier
      type: System.Single
      description: The path cost modifier, >= 1, that this tile should have.
    - id: canBuy
      type: System.Boolean
      description: Whether or not the tile can be bought in the tile tool.
    - id: categories
      type: TinyLife.World.Tile.Category
      description: This tile&apos;s <xref href="TinyLife.World.Tile.Category" data-throw-if-not-resolved="false"></xref> flags.
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object.
    - id: variations
      type: System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
      description: An optional set of variation textures that should be used based on the given camera rotation.
    - id: defaultColors
      type: System.Int32[]
      description: The colors that this tile should display with in the tile tool by default.
    - id: constructedType
      type: System.Type
      description: The type that tiles should be constructed from, or null to construct <xref href="TinyLife.World.Tile" data-throw-if-not-resolved="false"></xref> instances.
    content.vb: Public Shared Sub Register(name As String, price As Integer, textures As Dictionary(Of Point, TextureRegion), textureRegions As Point(), colors As ColorScheme(), pathCostModifier As Single = 1F, canBuy As Boolean = True, categories As Tile.Category = Tile.Category.None, icon As TextureRegion = Nothing, variations As Func(Of Direction2, Point()) = Nothing, defaultColors As Integer() = Nothing, constructedType As Type = Nothing)
  overload: TinyLife.World.Tile.Register*
  nameWithType.vb: Tile.Register(String, Int32, Dictionary(Of Point, TextureRegion), Point(), ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point()), Int32(), Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point(), TinyLife.Utilities.ColorScheme(), System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point()), System.Int32(), System.Type)
  name.vb: Register(String, Int32, Dictionary(Of Point, TextureRegion), Point(), ColorScheme(), Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Point()), Int32(), Type)
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  commentId: M:TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
  parent: TinyLife.World.Tile
  isExternal: true
  name: Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Nullable<Int32>, Type)
  nameWithType: Tile.Register(String, Int32, Dictionary<Point, TextureRegion>, Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func<Direction2, Nullable<Point>>, Nullable<Int32>, Type)
  fullName: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>, Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func<MLEM.Misc.Direction2, System.Nullable<Microsoft.Xna.Framework.Point>>, System.Nullable<System.Int32>, System.Type)
  nameWithType.vb: Tile.Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Nullable(Of Int32), Type)
  fullName.vb: TinyLife.World.Tile.Register(System.String, System.Int32, System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion), Microsoft.Xna.Framework.Point, TinyLife.Utilities.ColorScheme, System.Single, System.Boolean, TinyLife.World.Tile.Category, MLEM.Textures.TextureRegion, System.Func(Of MLEM.Misc.Direction2, System.Nullable(Of Microsoft.Xna.Framework.Point)), System.Nullable(Of System.Int32), System.Type)
  name.vb: Register(String, Int32, Dictionary(Of Point, TextureRegion), Point, ColorScheme, Single, Boolean, Tile.Category, TextureRegion, Func(Of Direction2, Nullable(Of Point)), Nullable(Of Int32), Type)
  spec.csharp:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
    name: Register
    nameWithType: Tile.Register
    fullName: TinyLife.World.Tile.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile.Category
    name: Tile.Category
    nameWithType: Tile.Category
    fullName: TinyLife.World.Tile.Category
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Tile.Register(System.String,System.Int32,System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion},Microsoft.Xna.Framework.Point,TinyLife.Utilities.ColorScheme,System.Single,System.Boolean,TinyLife.World.Tile.Category,MLEM.Textures.TextureRegion,System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}},System.Nullable{System.Int32},System.Type)
    name: Register
    nameWithType: Tile.Register
    fullName: TinyLife.World.Tile.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile.Category
    name: Tile.Category
    nameWithType: Tile.Category
    fullName: TinyLife.World.Tile.Category
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Tile>()
  nameWithType: Extensions.JsonCopy<Tile>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Tile>()
  nameWithType.vb: Extensions.JsonCopy(Of Tile)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Tile)()
  name.vb: JsonCopy(Of Tile)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Tile>
    nameWithType: Extensions.JsonCopy<Tile>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Tile>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Tile)
    nameWithType: Extensions.JsonCopy(Of Tile)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Tile)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile
  commentId: T:TinyLife.World.Tile
  parent: TinyLife.World
  name: Tile
  nameWithType: Tile
  fullName: TinyLife.World.Tile
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.Tile[]}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, Tile[]>
  nameWithType: ReadOnlyDictionary<String, Tile[]>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.World.Tile[]>
  nameWithType.vb: ReadOnlyDictionary(Of String, Tile())
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.World.Tile())
  name.vb: ReadOnlyDictionary(Of String, Tile())
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Tile
    name: Tile
    nameWithType: Tile
    fullName: TinyLife.World.Tile
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.World.Tile.Width*
  commentId: Overload:TinyLife.World.Tile.Width
  name: Width
  nameWithType: Tile.Width
  fullName: TinyLife.World.Tile.Width
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Tile.Height*
  commentId: Overload:TinyLife.World.Tile.Height
  name: Height
  nameWithType: Tile.Height
  fullName: TinyLife.World.Tile.Height
- uid: TinyLife.World.Tile.Name
  commentId: F:TinyLife.World.Tile.Name
  parent: TinyLife.World.Tile
  name: Name
  nameWithType: Tile.Name
  fullName: TinyLife.World.Tile.Name
- uid: TinyLife.World.Tile.Colors
  commentId: F:TinyLife.World.Tile.Colors
  parent: TinyLife.World.Tile
  name: Colors
  nameWithType: Tile.Colors
  fullName: TinyLife.World.Tile.Colors
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.World.Tile.BaseName
  commentId: F:TinyLife.World.Tile.BaseName
  parent: TinyLife.World.Tile
  name: BaseName
  nameWithType: Tile.BaseName
  fullName: TinyLife.World.Tile.BaseName
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
    nameWithType: ColorScheme
    fullName: TinyLife.Utilities.ColorScheme
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.Tile.ColorSchemes
  commentId: F:TinyLife.World.Tile.ColorSchemes
  parent: TinyLife.World.Tile
  name: ColorSchemes
  nameWithType: Tile.ColorSchemes
  fullName: TinyLife.World.Tile.ColorSchemes
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.World.Tile.Category
  commentId: T:TinyLife.World.Tile.Category
  parent: TinyLife.World
  name: Tile.Category
  nameWithType: Tile.Category
  fullName: TinyLife.World.Tile.Category
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  commentId: T:System.Collections.Generic.Dictionary{Microsoft.Xna.Framework.Point,MLEM.Textures.TextureRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Point, TextureRegion>
  nameWithType: Dictionary<Point, TextureRegion>
  fullName: System.Collections.Generic.Dictionary<Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion>
  nameWithType.vb: Dictionary(Of Point, TextureRegion)
  fullName.vb: System.Collections.Generic.Dictionary(Of Microsoft.Xna.Framework.Point, MLEM.Textures.TextureRegion)
  name.vb: Dictionary(Of Point, TextureRegion)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.World.Tile.Textures
  commentId: F:TinyLife.World.Tile.Textures
  parent: TinyLife.World.Tile
  name: Textures
  nameWithType: Tile.Textures
  fullName: TinyLife.World.Tile.Textures
- uid: System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
  commentId: T:System.Collections.Generic.Dictionary{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Direction2, Point[]>
  nameWithType: Dictionary<Direction2, Point[]>
  fullName: System.Collections.Generic.Dictionary<MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point[]>
  nameWithType.vb: Dictionary(Of Direction2, Point())
  fullName.vb: System.Collections.Generic.Dictionary(Of MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point())
  name.vb: Dictionary(Of Direction2, Point())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile.#ctor*
  commentId: Overload:TinyLife.World.Tile.#ctor
  name: Tile
  nameWithType: Tile.Tile
  fullName: TinyLife.World.Tile.Tile
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: MLEM.Graphics.StaticSpriteBatch
  commentId: T:MLEM.Graphics.StaticSpriteBatch
  isExternal: true
- uid: MLEM.Graphics.StaticSpriteBatch.Item
  commentId: T:MLEM.Graphics.StaticSpriteBatch.Item
  isExternal: true
- uid: TinyLife.World.Tile.Draw*
  commentId: Overload:TinyLife.World.Tile.Draw
  name: Draw
  nameWithType: Tile.Draw
  fullName: TinyLife.World.Tile.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
  commentId: T:System.Collections.Generic.ICollection{MLEM.Graphics.StaticSpriteBatch.Item}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<StaticSpriteBatch.Item>
  nameWithType: ICollection<StaticSpriteBatch.Item>
  fullName: System.Collections.Generic.ICollection<MLEM.Graphics.StaticSpriteBatch.Item>
  nameWithType.vb: ICollection(Of StaticSpriteBatch.Item)
  fullName.vb: System.Collections.Generic.ICollection(Of MLEM.Graphics.StaticSpriteBatch.Item)
  name.vb: ICollection(Of StaticSpriteBatch.Item)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Tile.DrawUi*
  commentId: Overload:TinyLife.World.Tile.DrawUi
  name: DrawUi
  nameWithType: Tile.DrawUi
  fullName: TinyLife.World.Tile.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.World.Tile.GetPrice*
  commentId: Overload:TinyLife.World.Tile.GetPrice
  name: GetPrice
  nameWithType: Tile.GetPrice
  fullName: TinyLife.World.Tile.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.GrassyAutoTile
  commentId: T:TinyLife.World.GrassyAutoTile
  parent: TinyLife.World
  name: GrassyAutoTile
  nameWithType: GrassyAutoTile
  fullName: TinyLife.World.GrassyAutoTile
- uid: TinyLife.World.Tile.OnNeighborChanged*
  commentId: Overload:TinyLife.World.Tile.OnNeighborChanged
  name: OnNeighborChanged
  nameWithType: Tile.OnNeighborChanged
  fullName: TinyLife.World.Tile.OnNeighborChanged
- uid: TinyLife.World.Tile.GetVariationTexture*
  commentId: Overload:TinyLife.World.Tile.GetVariationTexture
  name: GetVariationTexture
  nameWithType: Tile.GetVariationTexture
  fullName: TinyLife.World.Tile.GetVariationTexture
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  isExternal: true
- uid: TinyLife.World.Tile.GetVisualOffset*
  commentId: Overload:TinyLife.World.Tile.GetVisualOffset
  name: GetVisualOffset
  nameWithType: Tile.GetVisualOffset
  fullName: TinyLife.World.Tile.GetVisualOffset
- uid: TinyLife.World.Tile.Register*
  commentId: Overload:TinyLife.World.Tile.Register
  name: Register
  nameWithType: Tile.Register
  fullName: TinyLife.World.Tile.Register
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
  commentId: T:System.Func{MLEM.Misc.Direction2,System.Nullable{Microsoft.Xna.Framework.Point}}
  parent: System
  definition: System.Func`2
  name: Func<Direction2, Nullable<Point>>
  nameWithType: Func<Direction2, Nullable<Point>>
  fullName: System.Func<MLEM.Misc.Direction2, System.Nullable<Microsoft.Xna.Framework.Point>>
  nameWithType.vb: Func(Of Direction2, Nullable(Of Point))
  fullName.vb: System.Func(Of MLEM.Misc.Direction2, System.Nullable(Of Microsoft.Xna.Framework.Point))
  name.vb: Func(Of Direction2, Nullable(Of Point))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Point[]
  isExternal: true
  name: Point[]
  nameWithType: Point[]
  fullName: Microsoft.Xna.Framework.Point[]
  nameWithType.vb: Point()
  fullName.vb: Microsoft.Xna.Framework.Point()
  name.vb: Point()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
  commentId: T:System.Func{MLEM.Misc.Direction2,Microsoft.Xna.Framework.Point[]}
  parent: System
  definition: System.Func`2
  name: Func<Direction2, Point[]>
  nameWithType: Func<Direction2, Point[]>
  fullName: System.Func<MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point[]>
  nameWithType.vb: Func(Of Direction2, Point())
  fullName.vb: System.Func(Of MLEM.Misc.Direction2, Microsoft.Xna.Framework.Point())
  name.vb: Func(Of Direction2, Point())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )

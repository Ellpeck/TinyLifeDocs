### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LockType
  commentId: T:TinyLife.World.LockType
  id: LockType
  parent: TinyLife.World
  children:
  - TinyLife.World.LockType.Employees
  - TinyLife.World.LockType.Household
  - TinyLife.World.LockType.HouseholdFriends
  - TinyLife.World.LockType.Others
  langs:
  - csharp
  - vb
  name: LockType
  nameWithType: LockType
  fullName: TinyLife.World.LockType
  type: Enum
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LockType
    path: ../TinyLife/World/Opening.cs
    startLine: 191
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA flags enumeration that determines which groups of people a <xref href=\"TinyLife.World.SwingingDoor\" data-throw-if-not-resolved=\"false\"></xref> is locked for.\nUse <xref href=\"TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType%2cTinyLife.Objects.Person%2cTinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a combined lock type flag is locked for a given person.\n"
  example: []
  syntax:
    content: >-
      [Flags]

      public enum LockType
    content.vb: >-
      <Flags>

      Public Enum LockType
  extensionMethods:
  - TinyLife.World.LockType.TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.Objects.Person,TinyLife.World.Lot)
  - TinyLife.World.LockType.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LockType.Household
  commentId: F:TinyLife.World.LockType.Household
  id: Household
  parent: TinyLife.World.LockType
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: LockType.Household
  fullName: TinyLife.World.LockType.Household
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Household
    path: ../TinyLife/World/Opening.cs
    startLine: 197
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lock type that represents a lock for all household members\n"
  example: []
  syntax:
    content: Household = 1
    return:
      type: TinyLife.World.LockType
- uid: TinyLife.World.LockType.HouseholdFriends
  commentId: F:TinyLife.World.LockType.HouseholdFriends
  id: HouseholdFriends
  parent: TinyLife.World.LockType
  langs:
  - csharp
  - vb
  name: HouseholdFriends
  nameWithType: LockType.HouseholdFriends
  fullName: TinyLife.World.LockType.HouseholdFriends
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HouseholdFriends
    path: ../TinyLife/World/Opening.cs
    startLine: 201
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lock type that represents a lock for all friends of the household, which is anyone that has a relationship type of <xref href=\"TinyLife.RelationshipType.Friends\" data-throw-if-not-resolved=\"false\"></xref> or greater with any of the household members\n"
  example: []
  syntax:
    content: HouseholdFriends = 2
    return:
      type: TinyLife.World.LockType
- uid: TinyLife.World.LockType.Employees
  commentId: F:TinyLife.World.LockType.Employees
  id: Employees
  parent: TinyLife.World.LockType
  langs:
  - csharp
  - vb
  name: Employees
  nameWithType: LockType.Employees
  fullName: TinyLife.World.LockType.Employees
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Employees
    path: ../TinyLife/World/Opening.cs
    startLine: 205
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lock type that represents a lock for all employees, which are people that have a <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: Employees = 4
    return:
      type: TinyLife.World.LockType
- uid: TinyLife.World.LockType.Others
  commentId: F:TinyLife.World.LockType.Others
  id: Others
  parent: TinyLife.World.LockType
  langs:
  - csharp
  - vb
  name: Others
  nameWithType: LockType.Others
  fullName: TinyLife.World.LockType.Others
  type: Field
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Others
    path: ../TinyLife/World/Opening.cs
    startLine: 209
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lock type that represents a lock for everyone that doesn&apos;t match any of the other <xref href=\"TinyLife.World.LockType\" data-throw-if-not-resolved=\"false\"></xref> categories\n"
  example: []
  syntax:
    content: Others = 8
    return:
      type: TinyLife.World.LockType
references:
- uid: TinyLife.World.SwingingDoor
  commentId: T:TinyLife.World.SwingingDoor
  name: SwingingDoor
  nameWithType: SwingingDoor
  fullName: TinyLife.World.SwingingDoor
- uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  commentId: M:TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  name: IsLockedFor(LockType, Person, Lot)
  nameWithType: Extensions.IsLockedFor(LockType, Person, Lot)
  fullName: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType, TinyLife.Objects.Person, TinyLife.World.Lot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
    name: IsLockedFor
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
    name: IsLockedFor
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: TinyLife.World.LockType.TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.Objects.Person,TinyLife.World.Lot)
  commentId: M:TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
  name: IsLockedFor(LockType, Person, Lot)
  nameWithType: Extensions.IsLockedFor(LockType, Person, Lot)
  fullName: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType, TinyLife.Objects.Person, TinyLife.World.Lot)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
    name: IsLockedFor
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.IsLockedFor(TinyLife.World.LockType,TinyLife.Objects.Person,TinyLife.World.Lot)
    name: IsLockedFor
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: )
- uid: TinyLife.World.LockType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LockType>(LockType)
  nameWithType: Extensions.JsonCopy<LockType>(LockType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LockType>(TinyLife.World.LockType)
  nameWithType.vb: Extensions.JsonCopy(Of LockType)(LockType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LockType)(TinyLife.World.LockType)
  name.vb: JsonCopy(Of LockType)(LockType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LockType)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.LockType
    name: LockType
  - name: '>'
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LockType)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LockType
    name: LockType
  - name: )
  - name: (
  - uid: TinyLife.World.LockType
    name: LockType
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.LockType
  commentId: T:TinyLife.World.LockType
  parent: TinyLife.World
  name: LockType
  nameWithType: LockType
  fullName: TinyLife.World.LockType
- uid: TinyLife.RelationshipType.Friends
  commentId: F:TinyLife.RelationshipType.Friends
  name: Friends
  nameWithType: RelationshipType.Friends
  fullName: TinyLife.RelationshipType.Friends
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment

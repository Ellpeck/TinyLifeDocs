### YamlMime:ManagedReference
items:
- uid: TinyLife.World.ExportedHousehold
  commentId: T:TinyLife.World.ExportedHousehold
  id: ExportedHousehold
  parent: TinyLife.World
  children:
  - TinyLife.World.ExportedHousehold.ClothesStorage
  - TinyLife.World.ExportedHousehold.Description
  - TinyLife.World.ExportedHousehold.ExportedVersion
  - TinyLife.World.ExportedHousehold.FurnitureStorage
  - TinyLife.World.ExportedHousehold.Members
  - TinyLife.World.ExportedHousehold.Money
  langs:
  - csharp
  - vb
  name: ExportedHousehold
  nameWithType: ExportedHousehold
  fullName: TinyLife.World.ExportedHousehold
  type: Class
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedHousehold
    path: ../TinyLife/World/Household.cs
    startLine: 361
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis class represents an exported version of a <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>, storing all of the <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>-independent data.\n"
  example: []
  syntax:
    content: public class ExportedHousehold
    content.vb: Public Class ExportedHousehold
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.ExportedHousehold.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.ExportedHousehold.ExportedVersion
  commentId: F:TinyLife.World.ExportedHousehold.ExportedVersion
  id: ExportedVersion
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: ExportedVersion
  nameWithType: ExportedHousehold.ExportedVersion
  fullName: TinyLife.World.ExportedHousehold.ExportedVersion
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ExportedVersion
    path: ../TinyLife/World/Household.cs
    startLine: 366
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe game version that this household was exported with\n"
  example: []
  syntax:
    content: public string ExportedVersion
    return:
      type: System.String
    content.vb: Public ExportedVersion As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedHousehold.Members
  commentId: F:TinyLife.World.ExportedHousehold.Members
  id: Members
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: Members
  nameWithType: ExportedHousehold.Members
  fullName: TinyLife.World.ExportedHousehold.Members
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Members
    path: ../TinyLife/World/Household.cs
    startLine: 370
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> instances that are members of this household\n"
  example: []
  syntax:
    content: public List<Person> Members
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Person}
    content.vb: Public Members As List(Of Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedHousehold.Money
  commentId: F:TinyLife.World.ExportedHousehold.Money
  id: Money
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: ExportedHousehold.Money
  fullName: TinyLife.World.ExportedHousehold.Money
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Money
    path: ../TinyLife/World/Household.cs
    startLine: 374
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe money that this household has\n"
  example: []
  syntax:
    content: public float Money
    return:
      type: System.Single
    content.vb: Public Money As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedHousehold.FurnitureStorage
  commentId: F:TinyLife.World.ExportedHousehold.FurnitureStorage
  id: FurnitureStorage
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: FurnitureStorage
  nameWithType: ExportedHousehold.FurnitureStorage
  fullName: TinyLife.World.ExportedHousehold.FurnitureStorage
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FurnitureStorage
    path: ../TinyLife/World/Household.cs
    startLine: 378
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis household&apos;s furniture storage\n"
  example: []
  syntax:
    content: public List<Furniture> FurnitureStorage
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Furniture}
    content.vb: Public FurnitureStorage As List(Of Furniture)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedHousehold.ClothesStorage
  commentId: F:TinyLife.World.ExportedHousehold.ClothesStorage
  id: ClothesStorage
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: ClothesStorage
  nameWithType: ExportedHousehold.ClothesStorage
  fullName: TinyLife.World.ExportedHousehold.ClothesStorage
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ClothesStorage
    path: ../TinyLife/World/Household.cs
    startLine: 382
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis household&apos;s clothing storage\n"
  example: []
  syntax:
    content: public List<WornClothes> ClothesStorage
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.WornClothes}
    content.vb: Public ClothesStorage As List(Of WornClothes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.ExportedHousehold.Description
  commentId: F:TinyLife.World.ExportedHousehold.Description
  id: Description
  parent: TinyLife.World.ExportedHousehold
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ExportedHousehold.Description
  fullName: TinyLife.World.ExportedHousehold.Description
  type: Field
  source:
    remote:
      path: TinyLife/World/Household.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Description
    path: ../TinyLife/World/Household.cs
    startLine: 386
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe exported household&apos;s description\n"
  example: []
  syntax:
    content: public string Description
    return:
      type: System.String
    content.vb: Public Description As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.ExportedHousehold.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<ExportedHousehold>()
  nameWithType: Extensions.JsonCopy<ExportedHousehold>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedHousehold>()
  nameWithType.vb: Extensions.JsonCopy(Of ExportedHousehold)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedHousehold)()
  name.vb: JsonCopy(Of ExportedHousehold)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<ExportedHousehold>
    nameWithType: Extensions.JsonCopy<ExportedHousehold>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.ExportedHousehold>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of ExportedHousehold)
    nameWithType: Extensions.JsonCopy(Of ExportedHousehold)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.ExportedHousehold)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Collections.Generic.List{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Person>
  nameWithType: List<Person>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Person>
  nameWithType.vb: List(Of Person)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Person)
  name.vb: List(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Generic.List{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Furniture>
  nameWithType: List<Furniture>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Furniture>
  nameWithType.vb: List(Of Furniture)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Furniture)
  name.vb: List(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{TinyLife.Objects.WornClothes}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.WornClothes}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<WornClothes>
  nameWithType: List<WornClothes>
  fullName: System.Collections.Generic.List<TinyLife.Objects.WornClothes>
  nameWithType.vb: List(Of WornClothes)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.WornClothes)
  name.vb: List(Of WornClothes)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.WornClothes
    name: WornClothes
    nameWithType: WornClothes
    fullName: TinyLife.Objects.WornClothes
  - name: )
    nameWithType: )
    fullName: )

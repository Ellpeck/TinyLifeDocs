### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment.Instance
  commentId: T:TinyLife.World.LotEmployment.Instance
  id: LotEmployment.Instance
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  - TinyLife.World.LotEmployment.Instance.Lot
  - TinyLife.World.LotEmployment.Instance.Map
  - TinyLife.World.LotEmployment.Instance.SetManually
  - TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  - TinyLife.World.LotEmployment.Instance.Type
  - TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: LotEmployment.Instance
  nameWithType: LotEmployment.Instance
  fullName: TinyLife.World.LotEmployment.Instance
  type: Class
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Instance
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 208
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn instance of a <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is used by <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> to store additional info about their employment.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class LotEmployment.Instance
    content.vb: >-
      <DataContract>

      Public Class LotEmployment.Instance
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.Map
  commentId: P:TinyLife.World.LotEmployment.Instance.Map
  id: Map
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Map
  nameWithType: LotEmployment.Instance.Map
  fullName: TinyLife.World.LotEmployment.Instance.Map
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Map
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 214
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe map that this lot employment instance&apos;s <xref href=\"TinyLife.World.LotEmployment.Instance.Lot\" data-throw-if-not-resolved=\"false\"></xref> is on.\n"
  example: []
  syntax:
    content: public Map Map { get; }
    parameters: []
    return:
      type: TinyLife.World.Map
    content.vb: Public ReadOnly Property Map As Map
  overload: TinyLife.World.LotEmployment.Instance.Map*
- uid: TinyLife.World.LotEmployment.Instance.Lot
  commentId: P:TinyLife.World.LotEmployment.Instance.Lot
  id: Lot
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: LotEmployment.Instance.Lot
  fullName: TinyLife.World.LotEmployment.Instance.Lot
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lot
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 218
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe lot that this employment is active on\n"
  example: []
  syntax:
    content: public Lot Lot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property Lot As Lot
  overload: TinyLife.World.LotEmployment.Instance.Lot*
- uid: TinyLife.World.LotEmployment.Instance.Type
  commentId: P:TinyLife.World.LotEmployment.Instance.Type
  id: Type
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 222
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe underlying <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> type of this instance\n"
  example: []
  syntax:
    content: public LotEmployment Type { get; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public ReadOnly Property Type As LotEmployment
  overload: TinyLife.World.LotEmployment.Instance.Type*
- uid: TinyLife.World.LotEmployment.Instance.SetManually
  commentId: P:TinyLife.World.LotEmployment.Instance.SetManually
  id: SetManually
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetManually
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 235
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this person was set manually (by a user) or automatically (using <xref href=\"TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool SetManually { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property SetManually As Boolean
  overload: TinyLife.World.LotEmployment.Instance.SetManually*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  id: '#ctor(TinyLife.Objects.Person,TinyLife.World.Map,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)'
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Instance(Person, Map, Lot, LotEmployment, bool)
  nameWithType: LotEmployment.Instance.Instance(Person, Map, Lot, LotEmployment, bool)
  fullName: TinyLife.World.LotEmployment.Instance.Instance(TinyLife.Objects.Person, TinyLife.World.Map, TinyLife.World.Lot, TinyLife.World.LotEmployment, bool)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 259
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot employment instance with the given settings\n"
  example: []
  syntax:
    content: public Instance(Person person, Map map, Lot employmentLot, LotEmployment type, bool setManually)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to be employed
    - id: map
      type: TinyLife.World.Map
      description: The map that this lot employment is for.
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot to be employed on, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry
    - id: type
      type: TinyLife.World.LotEmployment
      description: The lot employment
    - id: setManually
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection%7bTinyLife.World.Map%7d%2cSystem.Action%7bSystem.String%7d%2cSystem.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(person As Person, map As Map, employmentLot As Lot, type As LotEmployment, setManually As Boolean)
  overload: TinyLife.World.LotEmployment.Instance.#ctor*
  nameWithType.vb: LotEmployment.Instance.New(Person, Map, Lot, LotEmployment, Boolean)
  fullName.vb: TinyLife.World.LotEmployment.Instance.New(TinyLife.Objects.Person, TinyLife.World.Map, TinyLife.World.Lot, TinyLife.World.LotEmployment, Boolean)
  name.vb: New(Person, Map, Lot, LotEmployment, Boolean)
- uid: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: LotEmployment.Instance.Validate(Person)
  fullName: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\n"
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to validate this lot employment for
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.World.LotEmployment.Instance.Validate*
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  commentId: M:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  id: ShouldWorkRightNow
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: ShouldWorkRightNow()
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow()
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow()
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldWorkRightNow
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 285
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the <xref href=\"TinyLife.World.Map.Time\" data-throw-if-not-resolved=\"false\"></xref> is in range of this <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>&apos;s work hours and it is not <xref href=\"TinyLife.World.LotEmployment.IsFinished\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool ShouldWorkRightNow()
    return:
      type: System.Boolean
      description: Whether work needs to be done right now
    content.vb: Public Function ShouldWorkRightNow() As Boolean
  overload: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
references:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Instance>(Instance)
  nameWithType: Extensions.JsonCopy<LotEmployment.Instance>(LotEmployment.Instance)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment.Instance>(TinyLife.World.LotEmployment.Instance)
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment.Instance)(LotEmployment.Instance)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment.Instance)(TinyLife.World.LotEmployment.Instance)
  name.vb: JsonCopy(Of Instance)(Instance)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment.Instance)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotEmployment.Instance)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: )
  - name: (
  - uid: TinyLife.World.LotEmployment.Instance
    name: Instance
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.LotEmployment.Instance.Lot
  commentId: P:TinyLife.World.LotEmployment.Instance.Lot
  name: Lot
  nameWithType: LotEmployment.Instance.Lot
  fullName: TinyLife.World.LotEmployment.Instance.Lot
- uid: TinyLife.World.LotEmployment.Instance.Map*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Map
  name: Map
  nameWithType: LotEmployment.Instance.Map
  fullName: TinyLife.World.LotEmployment.Instance.Map
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.LotEmployment.Instance.Lot*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Lot
  name: Lot
  nameWithType: LotEmployment.Instance.Lot
  fullName: TinyLife.World.LotEmployment.Instance.Lot
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.LotEmployment.Instance.Type*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Type
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  nameWithType: Map.UpdateExternalPeople(ICollection<Map>, Action<string>, Action<float>)
  fullName: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection<TinyLife.World.Map>, System.Action<string>, System.Action<float>)
  nameWithType.vb: Map.UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  fullName.vb: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection(Of TinyLife.World.Map), System.Action(Of String), System.Action(Of Single))
  name.vb: UpdateExternalPeople(ICollection(Of Map), Action(Of String), Action(Of Single))
  spec.csharp:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: TinyLife.World.Map
    name: Map
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  - name: )
  spec.vb:
  - uid: TinyLife.World.Map.UpdateExternalPeople(System.Collections.Generic.ICollection{TinyLife.World.Map},System.Action{System.String},System.Action{System.Single})
    name: UpdateExternalPeople
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  - name: )
- uid: TinyLife.World.LotEmployment.Instance.SetManually*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.SetManually
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  name: MapWideEmployments
  nameWithType: LotEmployment.MapWideEmployments
  fullName: TinyLife.World.LotEmployment.MapWideEmployments
- uid: TinyLife.World.LotEmployment.Instance.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.#ctor
  name: Instance
  nameWithType: LotEmployment.Instance.Instance
  fullName: TinyLife.World.LotEmployment.Instance.Instance
  nameWithType.vb: LotEmployment.Instance.New
  fullName.vb: TinyLife.World.LotEmployment.Instance.New
  name.vb: New
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: TinyLife.World.LotEmployment.Instance.Validate*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Validate
  name: Validate
  nameWithType: LotEmployment.Instance.Validate
  fullName: TinyLife.World.LotEmployment.Instance.Validate
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  name: Time
  nameWithType: Map.Time
  fullName: TinyLife.World.Map.Time
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  name: IsFinished
  nameWithType: LotEmployment.IsFinished
  fullName: TinyLife.World.LotEmployment.IsFinished
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  name: ShouldWorkRightNow
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow

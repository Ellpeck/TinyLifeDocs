### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotEmployment.Instance
  commentId: T:TinyLife.World.LotEmployment.Instance
  id: LotEmployment.Instance
  parent: TinyLife.World
  children:
  - TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  - TinyLife.World.LotEmployment.Instance.Lot
  - TinyLife.World.LotEmployment.Instance.SetManually
  - TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  - TinyLife.World.LotEmployment.Instance.Type
  - TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: LotEmployment.Instance
  nameWithType: LotEmployment.Instance
  fullName: TinyLife.World.LotEmployment.Instance
  type: Class
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Instance
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 206
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn instance of a <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is used by <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> to store additional info about their employment.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Instance
    content.vb: >-
      <DataContract>

      Public Class Instance
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.LotEmployment.Instance.Lot
  commentId: P:TinyLife.World.LotEmployment.Instance.Lot
  id: Lot
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Lot
  nameWithType: LotEmployment.Instance.Lot
  fullName: TinyLife.World.LotEmployment.Instance.Lot
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Lot
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 212
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe lot that this employment is active on\n"
  example: []
  syntax:
    content: public Lot Lot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property Lot As Lot
  overload: TinyLife.World.LotEmployment.Instance.Lot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.Instance.Type
  commentId: P:TinyLife.World.LotEmployment.Instance.Type
  id: Type
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 216
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe underlying <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> type of this instance\n"
  example: []
  syntax:
    content: public LotEmployment Type { get; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment
    content.vb: Public ReadOnly Property Type As LotEmployment
  overload: TinyLife.World.LotEmployment.Instance.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.Instance.SetManually
  commentId: P:TinyLife.World.LotEmployment.Instance.SetManually
  id: SetManually
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
  type: Property
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetManually
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 229
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this person was set manually (by a user) or automatically (using <xref href=\"TinyLife.World.Map.UpdateExternalPeople(System.Action%7bSystem.Single%7d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool SetManually { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public ReadOnly Property SetManually As Boolean
  overload: TinyLife.World.LotEmployment.Instance.SetManually*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  commentId: M:TinyLife.World.LotEmployment.Instance.#ctor(TinyLife.Objects.Person,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)
  id: '#ctor(TinyLife.Objects.Person,TinyLife.World.Lot,TinyLife.World.LotEmployment,System.Boolean)'
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Instance(Person, Lot, LotEmployment, Boolean)
  nameWithType: LotEmployment.Instance.Instance(Person, Lot, LotEmployment, Boolean)
  fullName: TinyLife.World.LotEmployment.Instance.Instance(TinyLife.Objects.Person, TinyLife.World.Lot, TinyLife.World.LotEmployment, System.Boolean)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 250
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot employment instance with the given settings\n"
  example: []
  syntax:
    content: public Instance(Person person, Lot employmentLot, LotEmployment type, bool setManually)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to be employed
    - id: employmentLot
      type: TinyLife.World.Lot
      description: The lot to be employed on, or null for a <xref href="TinyLife.World.LotEmployment.MapWideEmployments" data-throw-if-not-resolved="false"></xref> entry
    - id: type
      type: TinyLife.World.LotEmployment
      description: The lot employment
    - id: setManually
      type: System.Boolean
      description: Whether this person was set manually (by a user) or automatically (using <xref href="TinyLife.World.Map.UpdateExternalPeople(System.Action%7bSystem.Single%7d)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(person As Person, employmentLot As Lot, type As LotEmployment, setManually As Boolean)
  overload: TinyLife.World.LotEmployment.Instance.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  id: Validate(TinyLife.Objects.Person)
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: Validate(Person)
  nameWithType: LotEmployment.Instance.Validate(Person)
  fullName: TinyLife.World.LotEmployment.Instance.Validate(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\n"
  example: []
  syntax:
    content: public bool Validate(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to validate this lot employment for
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(person As Person) As Boolean
  overload: TinyLife.World.LotEmployment.Instance.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  commentId: M:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  id: ShouldWorkRightNow
  parent: TinyLife.World.LotEmployment.Instance
  langs:
  - csharp
  - vb
  name: ShouldWorkRightNow()
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow()
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow()
  type: Method
  source:
    remote:
      path: TinyLife/World/LotEmployment.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ShouldWorkRightNow
    path: ../TinyLife/World/LotEmployment.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the <xref href=\"TinyLife.GameImpl.CurrentTime\" data-throw-if-not-resolved=\"false\"></xref> is in range of this <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>&apos;s work hours and it is not <xref href=\"TinyLife.World.LotEmployment.IsFinished\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool ShouldWorkRightNow()
    return:
      type: System.Boolean
      description: Whether work needs to be done right now
    content.vb: Public Function ShouldWorkRightNow As Boolean
  overload: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.LotEmployment.Instance.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LotEmployment.Instance>()
  nameWithType: Extensions.JsonCopy<LotEmployment.Instance>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment.Instance>()
  nameWithType.vb: Extensions.JsonCopy(Of LotEmployment.Instance)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment.Instance)()
  name.vb: JsonCopy(Of LotEmployment.Instance)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<LotEmployment.Instance>
    nameWithType: Extensions.JsonCopy<LotEmployment.Instance>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotEmployment.Instance>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of LotEmployment.Instance)
    nameWithType: Extensions.JsonCopy(Of LotEmployment.Instance)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotEmployment.Instance)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.LotEmployment.Instance.Lot*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Lot
  name: Lot
  nameWithType: LotEmployment.Instance.Lot
  fullName: TinyLife.World.LotEmployment.Instance.Lot
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.World.LotEmployment.Instance.Type*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Type
  name: Type
  nameWithType: LotEmployment.Instance.Type
  fullName: TinyLife.World.LotEmployment.Instance.Type
- uid: TinyLife.World.Map.UpdateExternalPeople(System.Action{System.Single})
  commentId: M:TinyLife.World.Map.UpdateExternalPeople(System.Action{System.Single})
  isExternal: true
- uid: TinyLife.World.LotEmployment.Instance.SetManually*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.SetManually
  name: SetManually
  nameWithType: LotEmployment.Instance.SetManually
  fullName: TinyLife.World.LotEmployment.Instance.SetManually
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.World.LotEmployment.MapWideEmployments
  commentId: F:TinyLife.World.LotEmployment.MapWideEmployments
  isExternal: true
- uid: TinyLife.World.LotEmployment.Instance.#ctor*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.#ctor
  name: Instance
  nameWithType: LotEmployment.Instance.Instance
  fullName: TinyLife.World.LotEmployment.Instance.Instance
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.World.LotEmployment.Instance.Validate*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.Validate
  name: Validate
  nameWithType: LotEmployment.Instance.Validate
  fullName: TinyLife.World.LotEmployment.Instance.Validate
- uid: TinyLife.GameImpl.CurrentTime
  commentId: P:TinyLife.GameImpl.CurrentTime
  isExternal: true
- uid: TinyLife.World.LotEmployment.IsFinished
  commentId: P:TinyLife.World.LotEmployment.IsFinished
  isExternal: true
- uid: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow*
  commentId: Overload:TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow
  name: ShouldWorkRightNow
  nameWithType: LotEmployment.Instance.ShouldWorkRightNow
  fullName: TinyLife.World.LotEmployment.Instance.ShouldWorkRightNow

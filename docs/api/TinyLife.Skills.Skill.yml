### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.Skill
  commentId: T:TinyLife.Skills.Skill
  id: Skill
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.Skill.#ctor(TinyLife.Skills.SkillType)
  - TinyLife.Skills.Skill.Level
  - TinyLife.Skills.Skill.PointPercentage
  - TinyLife.Skills.Skill.PointsToNextLevel
  - TinyLife.Skills.Skill.RequiredPointsToNextLevel
  - TinyLife.Skills.Skill.TotalPercentage
  - TinyLife.Skills.Skill.Type
  langs:
  - csharp
  - vb
  name: Skill
  nameWithType: Skill
  fullName: TinyLife.Skills.Skill
  type: Class
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Skill
    path: ../TinyLife/Skills/Skill.cs
    startLine: 24
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA skill is an ability that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have which influences their behavior in some way.\nSkill instances are created from their corresponding <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Skill
    content.vb: >-
      <DataContract>

      Public Class Skill
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.Skill.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.Skill.Type
  commentId: F:TinyLife.Skills.Skill.Type
  id: Type
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Skill.Type
  fullName: TinyLife.Skills.Skill.Type
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Skills/Skill.cs
    startLine: 31
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe underlying <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> that this skill instance originates from\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly SkillType Type
    return:
      type: TinyLife.Skills.SkillType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As SkillType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.PointsToNextLevel
  commentId: P:TinyLife.Skills.Skill.PointsToNextLevel
  id: PointsToNextLevel
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: PointsToNextLevel
  nameWithType: Skill.PointsToNextLevel
  fullName: TinyLife.Skills.Skill.PointsToNextLevel
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PointsToNextLevel
    path: ../TinyLife/Skills/Skill.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe amount of skill points that are required until the next <xref href=\"TinyLife.Skills.Skill.Level\" data-throw-if-not-resolved=\"false\"></xref> is reached.\nTo modify this value, use <xref href=\"TinyLife.Skills.Skill.Gain(TinyLife.Objects.Person%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float PointsToNextLevel { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly Property PointsToNextLevel As Single
  overload: TinyLife.Skills.Skill.PointsToNextLevel*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.Level
  commentId: P:TinyLife.Skills.Skill.Level
  id: Level
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: Skill.Level
  fullName: TinyLife.Skills.Skill.Level
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Level
    path: ../TinyLife/Skills/Skill.cs
    startLine: 42
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe current level of this skill. Note that this value never goes beyond <xref href=\"TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)\" data-throw-if-not-resolved=\"false\"></xref>.\nTo modify this value, use <xref href=\"TinyLife.Skills.Skill.Gain(TinyLife.Objects.Person%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int Level { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Level As Integer
  overload: TinyLife.Skills.Skill.Level*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.RequiredPointsToNextLevel
  commentId: P:TinyLife.Skills.Skill.RequiredPointsToNextLevel
  id: RequiredPointsToNextLevel
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: RequiredPointsToNextLevel
  nameWithType: Skill.RequiredPointsToNextLevel
  fullName: TinyLife.Skills.Skill.RequiredPointsToNextLevel
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredPointsToNextLevel
    path: ../TinyLife/Skills/Skill.cs
    startLine: 49
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the amount of skill points that is required to reach the next level.\nThis value is depenedent on the current <xref href=\"TinyLife.Skills.Skill.Level\" data-throw-if-not-resolved=\"false\"></xref>, meaning higher skill levels are harder to reach.\n"
  example: []
  syntax:
    content: public int RequiredPointsToNextLevel { get; }
    parameters: []
    return:
      type: System.Int32
      description: The points required for the next level
    content.vb: Public ReadOnly Property RequiredPointsToNextLevel As Integer
  overload: TinyLife.Skills.Skill.RequiredPointsToNextLevel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.PointPercentage
  commentId: P:TinyLife.Skills.Skill.PointPercentage
  id: PointPercentage
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: PointPercentage
  nameWithType: Skill.PointPercentage
  fullName: TinyLife.Skills.Skill.PointPercentage
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PointPercentage
    path: ../TinyLife/Skills/Skill.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe percentage of <xref href=\"TinyLife.Skills.Skill.PointsToNextLevel\" data-throw-if-not-resolved=\"false\"></xref> out of the <xref href=\"TinyLife.Skills.Skill.RequiredPointsToNextLevel\" data-throw-if-not-resolved=\"false\"></xref>.\nThis value is always between 0 and 1.\n"
  example: []
  syntax:
    content: public float PointPercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property PointPercentage As Single
  overload: TinyLife.Skills.Skill.PointPercentage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.TotalPercentage
  commentId: P:TinyLife.Skills.Skill.TotalPercentage
  id: TotalPercentage
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: TotalPercentage
  nameWithType: Skill.TotalPercentage
  fullName: TinyLife.Skills.Skill.TotalPercentage
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: TotalPercentage
    path: ../TinyLife/Skills/Skill.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe percentage of the <xref href=\"TinyLife.Skills.Skill.Level\" data-throw-if-not-resolved=\"false\"></xref>, plus the <xref href=\"TinyLife.Skills.Skill.PointPercentage\" data-throw-if-not-resolved=\"false\"></xref>, out of the total <xref href=\"TinyLife.Skills.SkillType.MaxLevel\" data-throw-if-not-resolved=\"false\"></xref>.\nEssentially, this value represents the total progress that this skill has, between 0 and 1.\n"
  example: []
  syntax:
    content: public float TotalPercentage { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property TotalPercentage As Single
  overload: TinyLife.Skills.Skill.TotalPercentage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.Skill.#ctor(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Skills.Skill.#ctor(TinyLife.Skills.SkillType)
  id: '#ctor(TinyLife.Skills.SkillType)'
  parent: TinyLife.Skills.Skill
  langs:
  - csharp
  - vb
  name: Skill(SkillType)
  nameWithType: Skill.Skill(SkillType)
  fullName: TinyLife.Skills.Skill.Skill(TinyLife.Skills.SkillType)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/Skill.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new skill instance from the given <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Skill(SkillType type)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to construct
    content.vb: Public Sub New(type As SkillType)
  overload: TinyLife.Skills.Skill.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.Skill.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Skill>()
  nameWithType: Extensions.JsonCopy<Skill>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.Skill>()
  nameWithType.vb: Extensions.JsonCopy(Of Skill)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.Skill)()
  name.vb: JsonCopy(Of Skill)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Skill>
    nameWithType: Extensions.JsonCopy<Skill>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.Skill>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Skill)
    nameWithType: Extensions.JsonCopy(Of Skill)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.Skill)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.Skill.Level
  commentId: P:TinyLife.Skills.Skill.Level
  isExternal: true
- uid: TinyLife.Skills.Skill.Gain(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Skills.Skill.Gain(TinyLife.Objects.Person,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  isExternal: true
- uid: TinyLife.Skills.Skill.PointsToNextLevel*
  commentId: Overload:TinyLife.Skills.Skill.PointsToNextLevel
  name: PointsToNextLevel
  nameWithType: Skill.PointsToNextLevel
  fullName: TinyLife.Skills.Skill.PointsToNextLevel
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  isExternal: true
- uid: TinyLife.Skills.Skill.Level*
  commentId: Overload:TinyLife.Skills.Skill.Level
  name: Level
  nameWithType: Skill.Level
  fullName: TinyLife.Skills.Skill.Level
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Skills.Skill.RequiredPointsToNextLevel*
  commentId: Overload:TinyLife.Skills.Skill.RequiredPointsToNextLevel
  name: RequiredPointsToNextLevel
  nameWithType: Skill.RequiredPointsToNextLevel
  fullName: TinyLife.Skills.Skill.RequiredPointsToNextLevel
- uid: TinyLife.Skills.Skill.PointsToNextLevel
  commentId: P:TinyLife.Skills.Skill.PointsToNextLevel
  isExternal: true
- uid: TinyLife.Skills.Skill.RequiredPointsToNextLevel
  commentId: P:TinyLife.Skills.Skill.RequiredPointsToNextLevel
  isExternal: true
- uid: TinyLife.Skills.Skill.PointPercentage*
  commentId: Overload:TinyLife.Skills.Skill.PointPercentage
  name: PointPercentage
  nameWithType: Skill.PointPercentage
  fullName: TinyLife.Skills.Skill.PointPercentage
- uid: TinyLife.Skills.Skill.PointPercentage
  commentId: P:TinyLife.Skills.Skill.PointPercentage
  isExternal: true
- uid: TinyLife.Skills.SkillType.MaxLevel
  commentId: F:TinyLife.Skills.SkillType.MaxLevel
  isExternal: true
- uid: TinyLife.Skills.Skill.TotalPercentage*
  commentId: Overload:TinyLife.Skills.Skill.TotalPercentage
  name: TotalPercentage
  nameWithType: Skill.TotalPercentage
  fullName: TinyLife.Skills.Skill.TotalPercentage
- uid: TinyLife.Skills.Skill.#ctor*
  commentId: Overload:TinyLife.Skills.Skill.#ctor
  name: Skill
  nameWithType: Skill.Skill
  fullName: TinyLife.Skills.Skill.Skill

### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  id: GoalSet
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.GoalSet.#ctor(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  - TinyLife.Goals.GoalSet.GetDisplay(MLEM.Ui.Anchor)
  - TinyLife.Goals.GoalSet.GetGoal``1
  - TinyLife.Goals.GoalSet.GetGoal``1(System.String)
  - TinyLife.Goals.GoalSet.GetGoals``1
  - TinyLife.Goals.GoalSet.GetProgress
  - TinyLife.Goals.GoalSet.Info
  - TinyLife.Goals.GoalSet.IsCompleted
  - TinyLife.Goals.GoalSet.Person
  - TinyLife.Goals.GoalSet.Reset
  - TinyLife.Goals.GoalSet.Validate(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
  type: Class
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoalSet
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA goal set is a set of <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instances that manages them.\nGoal sets are used by a <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.Goals.Job.DailyTasks\" data-throw-if-not-resolved=\"false\"></xref> as well as by the <xref href=\"TinyLife.Goals.LifeGoal\" data-throw-if-not-resolved=\"false\"></xref> system.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class GoalSet : JsonTypeSafeGenericDataHolder, IGenericDataHolder
    content.vb: >-
      <DataContract>

      Public Class GoalSet
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.GoalSet.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.GoalSet.Info
  commentId: P:TinyLife.Goals.GoalSet.Info
  id: Info
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: GoalSet.Info
  fullName: TinyLife.Goals.GoalSet.Info
  type: Property
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Info
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe underlying <xref href=\"TinyLife.Goals.GoalSetInfo\" data-throw-if-not-resolved=\"false\"></xref> that this goal set was constructed from\n"
  example: []
  syntax:
    content: public GoalSetInfo Info { get; }
    parameters: []
    return:
      type: TinyLife.Goals.GoalSetInfo
    content.vb: Public ReadOnly Property Info As GoalSetInfo
  overload: TinyLife.Goals.GoalSet.Info*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalSet.Person
  commentId: P:TinyLife.Goals.GoalSet.Person
  id: Person
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: GoalSet.Person
  fullName: TinyLife.Goals.GoalSet.Person
  type: Property
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe person that these goals should be completed by\n"
  example: []
  syntax:
    content: public Person Person { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Person
    content.vb: Public ReadOnly Property Person As Person
  overload: TinyLife.Goals.GoalSet.Person*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.GoalSet.#ctor(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.GoalSet.#ctor(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  id: '#ctor(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)'
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GoalSet(GoalSetInfo, Person)
  nameWithType: GoalSet.GoalSet(GoalSetInfo, Person)
  fullName: TinyLife.Goals.GoalSet.GoalSet(TinyLife.Goals.GoalSetInfo, TinyLife.Objects.Person)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 65
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new goal set with the given settings\n"
  example: []
  syntax:
    content: public GoalSet(GoalSetInfo info, Person person)
    parameters:
    - id: info
      type: TinyLife.Goals.GoalSetInfo
      description: The underlying goal set info
    - id: person
      type: TinyLife.Objects.Person
      description: The person that these goals should be completed by
    content.vb: Public Sub New(info As GoalSetInfo, person As Person)
  overload: TinyLife.Goals.GoalSet.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalSet.GetProgress
  commentId: M:TinyLife.Goals.GoalSet.GetProgress
  id: GetProgress
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GetProgress()
  nameWithType: GoalSet.GetProgress()
  fullName: TinyLife.Goals.GoalSet.GetProgress()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetProgress
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the progress of this goal set as a percentage between 0 and 1, which is a combination of the <xref href=\"TinyLife.Goals.Goal.GetProgress\" data-throw-if-not-resolved=\"false\"></xref> values from the underlying <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instances\n"
  example: []
  syntax:
    content: public float GetProgress()
    return:
      type: System.Single
      description: The progress, between 0 and 1
    content.vb: Public Function GetProgress As Single
  overload: TinyLife.Goals.GoalSet.GetProgress*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalSet.IsCompleted
  commentId: M:TinyLife.Goals.GoalSet.IsCompleted
  id: IsCompleted
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: IsCompleted()
  nameWithType: GoalSet.IsCompleted()
  fullName: TinyLife.Goals.GoalSet.IsCompleted()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCompleted
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns whether this goal set is completed.\nThis returns whether <xref href=\"TinyLife.Goals.GoalSet.GetProgress\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to 1.\n"
  example: []
  syntax:
    content: public bool IsCompleted()
    return:
      type: System.Boolean
      description: Whether this goal set is completed
    content.vb: Public Function IsCompleted As Boolean
  overload: TinyLife.Goals.GoalSet.IsCompleted*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalSet.Reset
  commentId: M:TinyLife.Goals.GoalSet.Reset
  id: Reset
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: GoalSet.Reset()
  fullName: TinyLife.Goals.GoalSet.Reset()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Reset
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 94
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nResets this goal set by calling the <xref href=\"TinyLife.Goals.Goal.Reset\" data-throw-if-not-resolved=\"false\"></xref> methods of the underlying goals\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: TinyLife.Goals.GoalSet.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalSet.GetGoals``1
  commentId: M:TinyLife.Goals.GoalSet.GetGoals``1
  id: GetGoals``1
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GetGoals<T>()
  nameWithType: GoalSet.GetGoals<T>()
  fullName: TinyLife.Goals.GoalSet.GetGoals<T>()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGoals
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns a set of all of the <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instnaces that are contained in this goal set, optionally matching the specified type parameter <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetGoals<T>()
          where T : Goal
    typeParameters:
    - id: T
      description: The type of goal to return
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The goals in this goal set
    content.vb: Public Function GetGoals(Of T As Goal) As IEnumerable(Of T)
  overload: TinyLife.Goals.GoalSet.GetGoals*
  nameWithType.vb: GoalSet.GetGoals(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.GoalSet.GetGoals(Of T)()
  name.vb: GetGoals(Of T)()
- uid: TinyLife.Goals.GoalSet.GetGoal``1(System.String)
  commentId: M:TinyLife.Goals.GoalSet.GetGoal``1(System.String)
  id: GetGoal``1(System.String)
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GetGoal<T>(String)
  nameWithType: GoalSet.GetGoal<T>(String)
  fullName: TinyLife.Goals.GoalSet.GetGoal<T>(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGoal
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 114
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instance in this goal set with the given name, or null if there is no matching goal\n"
  example: []
  syntax:
    content: >-
      public T GetGoal<T>(string name)
          where T : Goal
    parameters:
    - id: name
      type: System.String
      description: The name of the goal to return
    typeParameters:
    - id: T
      description: The type of goal to return
    return:
      type: '{T}'
      description: The goal with the given name and type
    content.vb: Public Function GetGoal(Of T As Goal)(name As String) As T
  overload: TinyLife.Goals.GoalSet.GetGoal*
  nameWithType.vb: GoalSet.GetGoal(Of T)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.GoalSet.GetGoal(Of T)(System.String)
  name.vb: GetGoal(Of T)(String)
- uid: TinyLife.Goals.GoalSet.GetGoal``1
  commentId: M:TinyLife.Goals.GoalSet.GetGoal``1
  id: GetGoal``1
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GetGoal<T>()
  nameWithType: GoalSet.GetGoal<T>()
  fullName: TinyLife.Goals.GoalSet.GetGoal<T>()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGoal
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 124
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the single <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instance in this goal set of the given type.\nIf there are more goals of the given type, this method will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: >-
      public T GetGoal<T>()
          where T : Goal
    typeParameters:
    - id: T
      description: The type of goal to return
    return:
      type: '{T}'
      description: The single goal of the given type
    content.vb: Public Function GetGoal(Of T As Goal) As T
  overload: TinyLife.Goals.GoalSet.GetGoal*
  nameWithType.vb: GoalSet.GetGoal(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.GoalSet.GetGoal(Of T)()
  name.vb: GetGoal(Of T)()
- uid: TinyLife.Goals.GoalSet.GetDisplay(MLEM.Ui.Anchor)
  commentId: M:TinyLife.Goals.GoalSet.GetDisplay(MLEM.Ui.Anchor)
  id: GetDisplay(MLEM.Ui.Anchor)
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: GetDisplay(Anchor)
  nameWithType: GoalSet.GetDisplay(Anchor)
  fullName: TinyLife.Goals.GoalSet.GetDisplay(MLEM.Ui.Anchor)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplay
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns a <xref href=\"MLEM.Ui.Elements.Group\" data-throw-if-not-resolved=\"false\"></xref> of elements that display the progress of this goal set dynamically\n"
  example: []
  syntax:
    content: public Group GetDisplay(Anchor anchor)
    parameters:
    - id: anchor
      type: MLEM.Ui.Anchor
      description: The anchor that the returned group should have
    return:
      type: MLEM.Ui.Elements.Group
      description: A group that displays this goal set&apos;s progress
    content.vb: Public Function GetDisplay(anchor As Anchor) As Group
  overload: TinyLife.Goals.GoalSet.GetDisplay*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.GoalSet.Validate(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  commentId: M:TinyLife.Goals.GoalSet.Validate(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  id: Validate(TinyLife.Goals.GoalSetInfo,TinyLife.Objects.Person)
  parent: TinyLife.Goals.GoalSet
  langs:
  - csharp
  - vb
  name: Validate(GoalSetInfo, Person)
  nameWithType: GoalSet.Validate(GoalSetInfo, Person)
  fullName: TinyLife.Goals.GoalSet.Validate(TinyLife.Goals.GoalSetInfo, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/GoalSet.cs
      branch: 0.20.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Goals/GoalSet.cs
    startLine: 154
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nValidates this goal set and all of the underlying <xref href=\"TinyLife.Goals.Goal\" data-throw-if-not-resolved=\"false\"></xref> instances.\nThis method should be called when this goal set is loaded from disk.\n"
  example: []
  syntax:
    content: public bool Validate(GoalSetInfo info, Person person)
    parameters:
    - id: info
      type: TinyLife.Goals.GoalSetInfo
      description: The underlying goal set info that this goal set was constructed from
    - id: person
      type: TinyLife.Objects.Person
      description: The person that this goal set is tracking
    return:
      type: System.Boolean
      description: Whether this goal set is considered valid
    content.vb: Public Function Validate(info As GoalSetInfo, person As Person) As Boolean
  overload: TinyLife.Goals.GoalSet.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Goals.Goal
  commentId: T:TinyLife.Goals.Goal
  parent: TinyLife.Goals
  name: Goal
  nameWithType: Goal
  fullName: TinyLife.Goals.Goal
- uid: TinyLife.Goals.Job
  commentId: T:TinyLife.Goals.Job
  parent: TinyLife.Goals
  name: Job
  nameWithType: Job
  fullName: TinyLife.Goals.Job
- uid: TinyLife.Goals.Job.DailyTasks
  commentId: P:TinyLife.Goals.Job.DailyTasks
  isExternal: true
- uid: TinyLife.Goals.LifeGoal
  commentId: T:TinyLife.Goals.LifeGoal
  parent: TinyLife.Goals
  name: LifeGoal
  nameWithType: LifeGoal
  fullName: TinyLife.Goals.LifeGoal
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalSet.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<GoalSet>()
  nameWithType: Extensions.JsonCopy<GoalSet>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalSet>()
  nameWithType.vb: Extensions.JsonCopy(Of GoalSet)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalSet)()
  name.vb: JsonCopy(Of GoalSet)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<GoalSet>
    nameWithType: Extensions.JsonCopy<GoalSet>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.GoalSet>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of GoalSet)
    nameWithType: Extensions.JsonCopy(Of GoalSet)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.GoalSet)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.GoalSetInfo
  commentId: T:TinyLife.Goals.GoalSetInfo
  parent: TinyLife.Goals
  name: GoalSetInfo
  nameWithType: GoalSetInfo
  fullName: TinyLife.Goals.GoalSetInfo
- uid: TinyLife.Goals.GoalSet.Info*
  commentId: Overload:TinyLife.Goals.GoalSet.Info
  name: Info
  nameWithType: GoalSet.Info
  fullName: TinyLife.Goals.GoalSet.Info
- uid: TinyLife.Goals.GoalSet.Person*
  commentId: Overload:TinyLife.Goals.GoalSet.Person
  name: Person
  nameWithType: GoalSet.Person
  fullName: TinyLife.Goals.GoalSet.Person
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Goals.GoalSet.#ctor*
  commentId: Overload:TinyLife.Goals.GoalSet.#ctor
  name: GoalSet
  nameWithType: GoalSet.GoalSet
  fullName: TinyLife.Goals.GoalSet.GoalSet
- uid: TinyLife.Goals.Goal.GetProgress
  commentId: M:TinyLife.Goals.Goal.GetProgress
  parent: TinyLife.Goals.Goal
  name: GetProgress()
  nameWithType: Goal.GetProgress()
  fullName: TinyLife.Goals.Goal.GetProgress()
  spec.csharp:
  - uid: TinyLife.Goals.Goal.GetProgress
    name: GetProgress
    nameWithType: Goal.GetProgress
    fullName: TinyLife.Goals.Goal.GetProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.GetProgress
    name: GetProgress
    nameWithType: Goal.GetProgress
    fullName: TinyLife.Goals.Goal.GetProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalSet.GetProgress*
  commentId: Overload:TinyLife.Goals.GoalSet.GetProgress
  name: GetProgress
  nameWithType: GoalSet.GetProgress
  fullName: TinyLife.Goals.GoalSet.GetProgress
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Goals.GoalSet.GetProgress
  commentId: M:TinyLife.Goals.GoalSet.GetProgress
  isExternal: true
- uid: TinyLife.Goals.GoalSet.IsCompleted*
  commentId: Overload:TinyLife.Goals.GoalSet.IsCompleted
  name: IsCompleted
  nameWithType: GoalSet.IsCompleted
  fullName: TinyLife.Goals.GoalSet.IsCompleted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.Goal.Reset
  commentId: M:TinyLife.Goals.Goal.Reset
  parent: TinyLife.Goals.Goal
  name: Reset()
  nameWithType: Goal.Reset()
  fullName: TinyLife.Goals.Goal.Reset()
  spec.csharp:
  - uid: TinyLife.Goals.Goal.Reset
    name: Reset
    nameWithType: Goal.Reset
    fullName: TinyLife.Goals.Goal.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.Reset
    name: Reset
    nameWithType: Goal.Reset
    fullName: TinyLife.Goals.Goal.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.GoalSet.Reset*
  commentId: Overload:TinyLife.Goals.GoalSet.Reset
  name: Reset
  nameWithType: GoalSet.Reset
  fullName: TinyLife.Goals.GoalSet.Reset
- uid: TinyLife.Goals.GoalSet.GetGoals*
  commentId: Overload:TinyLife.Goals.GoalSet.GetGoals
  name: GetGoals
  nameWithType: GoalSet.GetGoals
  fullName: TinyLife.Goals.GoalSet.GetGoals
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Goals.GoalSet.GetGoal*
  commentId: Overload:TinyLife.Goals.GoalSet.GetGoal
  name: GetGoal
  nameWithType: GoalSet.GetGoal
  fullName: TinyLife.Goals.GoalSet.GetGoal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: MLEM.Ui.Elements.Group
  commentId: T:MLEM.Ui.Elements.Group
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Group
  nameWithType: Group
  fullName: MLEM.Ui.Elements.Group
- uid: TinyLife.Goals.GoalSet.GetDisplay*
  commentId: Overload:TinyLife.Goals.GoalSet.GetDisplay
  name: GetDisplay
  nameWithType: GoalSet.GetDisplay
  fullName: TinyLife.Goals.GoalSet.GetDisplay
- uid: MLEM.Ui.Anchor
  commentId: T:MLEM.Ui.Anchor
  parent: MLEM.Ui
  isExternal: true
  name: Anchor
  nameWithType: Anchor
  fullName: MLEM.Ui.Anchor
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: MLEM.Ui
  commentId: N:MLEM.Ui
  isExternal: true
  name: MLEM.Ui
  nameWithType: MLEM.Ui
  fullName: MLEM.Ui
- uid: TinyLife.Goals.GoalSet.Validate*
  commentId: Overload:TinyLife.Goals.GoalSet.Validate
  name: Validate
  nameWithType: GoalSet.Validate
  fullName: TinyLife.Goals.GoalSet.Validate

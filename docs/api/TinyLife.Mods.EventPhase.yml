### YamlMime:ManagedReference
items:
- uid: TinyLife.Mods.EventPhase
  commentId: T:TinyLife.Mods.EventPhase
  id: EventPhase
  parent: TinyLife.Mods
  children:
  - TinyLife.Mods.EventPhase.Post
  - TinyLife.Mods.EventPhase.Pre
  langs:
  - csharp
  - vb
  name: EventPhase
  nameWithType: EventPhase
  fullName: TinyLife.Mods.EventPhase
  type: Enum
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EventPhase
    path: ../TinyLife/Mods/EventPhase.cs
    startLine: 5
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nAn enumeration that represents the phases that a time-sensitive event can be invoked in\n"
  example: []
  syntax:
    content: public enum EventPhase
    content.vb: Public Enum EventPhase
  extensionMethods:
  - TinyLife.Mods.EventPhase.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.Mods.EventPhase.Pre
  commentId: F:TinyLife.Mods.EventPhase.Pre
  id: Pre
  parent: TinyLife.Mods.EventPhase
  langs:
  - csharp
  - vb
  name: Pre
  nameWithType: EventPhase.Pre
  fullName: TinyLife.Mods.EventPhase.Pre
  type: Field
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Pre
    path: ../TinyLife/Mods/EventPhase.cs
    startLine: 10
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA phase that represents an event that is invoked *before* something happens\n"
  example: []
  syntax:
    content: Pre = 0
    return:
      type: TinyLife.Mods.EventPhase
- uid: TinyLife.Mods.EventPhase.Post
  commentId: F:TinyLife.Mods.EventPhase.Post
  id: Post
  parent: TinyLife.Mods.EventPhase
  langs:
  - csharp
  - vb
  name: Post
  nameWithType: EventPhase.Post
  fullName: TinyLife.Mods.EventPhase.Post
  type: Field
  source:
    remote:
      path: TinyLife/Mods/EventPhase.cs
      branch: 0.37.5-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Post
    path: ../TinyLife/Mods/EventPhase.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Mods
  summary: "\nA phase that represents an event that is invoked *after* something happens\n"
  example: []
  syntax:
    content: Post = 1
    return:
      type: TinyLife.Mods.EventPhase
references:
- uid: TinyLife.Mods
  commentId: N:TinyLife.Mods
  name: TinyLife.Mods
  nameWithType: TinyLife.Mods
  fullName: TinyLife.Mods
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Mods
    name: Mods
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Mods
    name: Mods
- uid: TinyLife.Mods.EventPhase.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<EventPhase>(EventPhase)
  nameWithType: Extensions.JsonCopy<EventPhase>(EventPhase)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Mods.EventPhase>(TinyLife.Mods.EventPhase)
  nameWithType.vb: Extensions.JsonCopy(Of EventPhase)(EventPhase)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Mods.EventPhase)(TinyLife.Mods.EventPhase)
  name.vb: JsonCopy(Of EventPhase)(EventPhase)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Mods.EventPhase)
    name: JsonCopy
  - name: <
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: '>'
  - name: (
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.Mods.EventPhase)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: )
  - name: (
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.Mods.EventPhase
  commentId: T:TinyLife.Mods.EventPhase
  parent: TinyLife.Mods
  name: EventPhase
  nameWithType: EventPhase
  fullName: TinyLife.Mods.EventPhase

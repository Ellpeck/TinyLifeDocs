### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Door
  commentId: T:TinyLife.World.Door
  id: Door
  parent: TinyLife.World
  children:
  - TinyLife.World.Door.#ctor(TinyLife.World.OpeningType,System.Int32)
  - TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  - TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  langs:
  - csharp
  - vb
  name: Door
  nameWithType: Door
  fullName: TinyLife.World.Door
  type: Class
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Door
    path: ../TinyLife/World/Opening.cs
    startLine: 80
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn opening is some sort of extrusion in a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, like a window or a door.\nOpenings are created from their underlying <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class Door : Opening, IPricedObject'
    content.vb: >-
      Public Class Door
          Inherits Opening
          Implements IPricedObject
  inheritance:
  - System.Object
  - TinyLife.World.Opening
  derivedClasses:
  - TinyLife.World.SwingingDoor
  implements:
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - TinyLife.World.Opening.Type
  - TinyLife.World.Opening.Color
  - TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Opening.GetPrice
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Door.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Door.#ctor(TinyLife.World.OpeningType,System.Int32)
  commentId: M:TinyLife.World.Door.#ctor(TinyLife.World.OpeningType,System.Int32)
  id: '#ctor(TinyLife.World.OpeningType,System.Int32)'
  parent: TinyLife.World.Door
  langs:
  - csharp
  - vb
  name: Door(OpeningType, Int32)
  nameWithType: Door.Door(OpeningType, Int32)
  fullName: TinyLife.World.Door.Door(TinyLife.World.OpeningType, System.Int32)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Opening.cs
    startLine: 83
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new opening from the given opening type and color\n"
  example: []
  syntax:
    content: public Door(OpeningType type, int color)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The opening type
    - id: color
      type: System.Int32
      description: The index of the color
    content.vb: Public Sub New(type As OpeningType, color As Integer)
  overload: TinyLife.World.Door.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  id: CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  parent: TinyLife.World.Door
  langs:
  - csharp
  - vb
  name: CanWalkThrough(Wall, Person)
  nameWithType: Door.CanWalkThrough(Wall, Person)
  fullName: TinyLife.World.Door.CanWalkThrough(TinyLife.World.Wall, TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanWalkThrough
    path: ../TinyLife/World/Opening.cs
    startLine: 86
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is able to walk through a <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> that has this opening.\nThis returns true for <xref href=\"TinyLife.World.Door\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.SwingingDoor\" data-throw-if-not-resolved=\"false\"></xref> and false for <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool CanWalkThrough(Wall wall, Person person)
    parameters:
    - id: wall
      type: TinyLife.World.Wall
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function CanWalkThrough(wall As Wall, person As Person) As Boolean
  overridden: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  overload: TinyLife.World.Door.CanWalkThrough*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  id: CanPlaceOn(TinyLife.Objects.FurnitureType)
  parent: TinyLife.World.Door
  langs:
  - csharp
  - vb
  name: CanPlaceOn(FurnitureType)
  nameWithType: Door.CanPlaceOn(FurnitureType)
  fullName: TinyLife.World.Door.CanPlaceOn(TinyLife.Objects.FurnitureType)
  type: Method
  source:
    remote:
      path: TinyLife/World/Opening.cs
      branch: master
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanPlaceOn
    path: ../TinyLife/World/Opening.cs
    startLine: 91
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether the given <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> can be attached to this opening.\nBy default, this method returns true when the furniture has the <xref href=\"TinyLife.Objects.ObjectCategory.CanCoverWindow\" data-throw-if-not-resolved=\"false\"></xref> category.\n"
  example: []
  syntax:
    content: public override bool CanPlaceOn(FurnitureType type)
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
    return:
      type: System.Boolean
      description: Whether the opening is a window
    content.vb: Public Overrides Function CanPlaceOn(type As FurnitureType) As Boolean
  overridden: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  overload: TinyLife.World.Door.CanPlaceOn*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: TinyLife.World.Opening.Type
  commentId: F:TinyLife.World.Opening.Type
  parent: TinyLife.World.Opening
  name: Type
  nameWithType: Opening.Type
  fullName: TinyLife.World.Opening.Type
- uid: TinyLife.World.Opening.Color
  commentId: F:TinyLife.World.Opening.Color
  parent: TinyLife.World.Opening
  name: Color
  nameWithType: Opening.Color
  fullName: TinyLife.World.Opening.Color
- uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Opening
  isExternal: true
  name: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  nameWithType: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable<Color>)
  fullName: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable<Microsoft.Xna.Framework.Color>)
  nameWithType.vb: Opening.Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  fullName.vb: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, TinyLife.World.Map, TinyLife.World.Wall, Microsoft.Xna.Framework.Vector2, System.Boolean, System.Single, System.Single, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(GameTime, SpriteBatch, Map, Wall, Vector2, Boolean, Single, Single, Nullable(Of Color))
  spec.csharp:
  - uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Opening.Draw
    fullName: TinyLife.World.Opening.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,TinyLife.World.Map,TinyLife.World.Wall,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})
    name: Draw
    nameWithType: Opening.Draw
    fullName: TinyLife.World.Opening.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Opening.GetPrice
  commentId: M:TinyLife.World.Opening.GetPrice
  parent: TinyLife.World.Opening
  name: GetPrice()
  nameWithType: Opening.GetPrice()
  fullName: TinyLife.World.Opening.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.Opening.GetPrice
    name: GetPrice
    nameWithType: Opening.GetPrice
    fullName: TinyLife.World.Opening.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.GetPrice
    name: GetPrice
    nameWithType: Opening.GetPrice
    fullName: TinyLife.World.Opening.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Door.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Door>()
  nameWithType: Extensions.JsonCopy<Door>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Door>()
  nameWithType.vb: Extensions.JsonCopy(Of Door)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Door)()
  name.vb: JsonCopy(Of Door)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Door>
    nameWithType: Extensions.JsonCopy<Door>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Door>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Door)
    nameWithType: Extensions.JsonCopy(Of Door)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Door)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.World.Door.#ctor*
  commentId: Overload:TinyLife.World.Door.#ctor
  name: Door
  nameWithType: Door.Door
  fullName: TinyLife.World.Door.Door
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
  parent: TinyLife.World.Opening
  name: CanWalkThrough(Wall, Person)
  nameWithType: Opening.CanWalkThrough(Wall, Person)
  fullName: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall, TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
    name: CanWalkThrough
    nameWithType: Opening.CanWalkThrough
    fullName: TinyLife.World.Opening.CanWalkThrough
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.CanWalkThrough(TinyLife.World.Wall,TinyLife.Objects.Person)
    name: CanWalkThrough
    nameWithType: Opening.CanWalkThrough
    fullName: TinyLife.World.Opening.CanWalkThrough
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Wall
    name: Wall
    nameWithType: Wall
    fullName: TinyLife.World.Wall
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Door.CanWalkThrough*
  commentId: Overload:TinyLife.World.Door.CanWalkThrough
  name: CanWalkThrough
  nameWithType: Door.CanWalkThrough
  fullName: TinyLife.World.Door.CanWalkThrough
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  commentId: M:TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  parent: TinyLife.World.Opening
  name: CanPlaceOn(FurnitureType)
  nameWithType: Opening.CanPlaceOn(FurnitureType)
  fullName: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
  spec.csharp:
  - uid: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
    name: CanPlaceOn
    nameWithType: Opening.CanPlaceOn
    fullName: TinyLife.World.Opening.CanPlaceOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.Opening.CanPlaceOn(TinyLife.Objects.FurnitureType)
    name: CanPlaceOn
    nameWithType: Opening.CanPlaceOn
    fullName: TinyLife.World.Opening.CanPlaceOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Door.CanPlaceOn*
  commentId: Overload:TinyLife.World.Door.CanPlaceOn
  name: CanPlaceOn
  nameWithType: Door.CanPlaceOn
  fullName: TinyLife.World.Door.CanPlaceOn
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType

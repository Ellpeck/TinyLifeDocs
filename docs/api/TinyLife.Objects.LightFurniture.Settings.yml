### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.LightFurniture.Settings
  commentId: T:TinyLife.Objects.LightFurniture.Settings
  id: LightFurniture.Settings
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.LightFurniture.Settings.CreateLights
  - TinyLife.Objects.LightFurniture.Settings.FireParticleOffsets
  - TinyLife.Objects.LightFurniture.Settings.Flickers
  - TinyLife.Objects.LightFurniture.Settings.IsAutomatic
  - TinyLife.Objects.LightFurniture.Settings.IsElectrical
  langs:
  - csharp
  - vb
  name: LightFurniture.Settings
  nameWithType: LightFurniture.Settings
  fullName: TinyLife.Objects.LightFurniture.Settings
  type: Struct
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Settings
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 142
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of settings for a <xref href=\"TinyLife.Objects.LightFurniture\" data-throw-if-not-resolved=\"false\"></xref>, which can be added to a furniture type using <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.LightSettings\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public struct Settings
    content.vb: Public Structure Settings
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - TinyLife.Objects.LightFurniture.Settings.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TinyLife.Objects.LightFurniture.Settings.CreateLights
  commentId: F:TinyLife.Objects.LightFurniture.Settings.CreateLights
  id: CreateLights
  parent: TinyLife.Objects.LightFurniture.Settings
  langs:
  - csharp
  - vb
  name: CreateLights
  nameWithType: LightFurniture.Settings.CreateLights
  fullName: TinyLife.Objects.LightFurniture.Settings.CreateLights
  type: Field
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateLights
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA function that is used to create the lights for the <xref href=\"TinyLife.Objects.LightFurniture\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Func<LightFurniture, Light[]> CreateLights
    return:
      type: System.Func{TinyLife.Objects.LightFurniture,TinyLife.Objects.Light[]}
    content.vb: Public CreateLights As Func(Of LightFurniture, Light())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.LightFurniture.Settings.IsElectrical
  commentId: F:TinyLife.Objects.LightFurniture.Settings.IsElectrical
  id: IsElectrical
  parent: TinyLife.Objects.LightFurniture.Settings
  langs:
  - csharp
  - vb
  name: IsElectrical
  nameWithType: LightFurniture.Settings.IsElectrical
  fullName: TinyLife.Objects.LightFurniture.Settings.IsElectrical
  type: Field
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsElectrical
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 151
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether the light furniture is electrical. If it is, it will automatically be <xref href=\"TinyLife.Objects.LightFurniture.IsDisabled\" data-throw-if-not-resolved=\"false\"></xref> if the owning household&apos;s bills have not been paid.\n"
  example: []
  syntax:
    content: public bool IsElectrical
    return:
      type: System.Boolean
    content.vb: Public IsElectrical As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.LightFurniture.Settings.Flickers
  commentId: F:TinyLife.Objects.LightFurniture.Settings.Flickers
  id: Flickers
  parent: TinyLife.Objects.LightFurniture.Settings
  langs:
  - csharp
  - vb
  name: Flickers
  nameWithType: LightFurniture.Settings.Flickers
  fullName: TinyLife.Objects.LightFurniture.Settings.Flickers
  type: Field
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Flickers
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 155
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether the light furniture flickers, which causes the lights created in <xref href=\"TinyLife.Objects.LightFurniture.Settings.CreateLights\" data-throw-if-not-resolved=\"false\"></xref> to change size slightly over time.\n"
  example: []
  syntax:
    content: public bool Flickers
    return:
      type: System.Boolean
    content.vb: Public Flickers As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.LightFurniture.Settings.FireParticleOffsets
  commentId: F:TinyLife.Objects.LightFurniture.Settings.FireParticleOffsets
  id: FireParticleOffsets
  parent: TinyLife.Objects.LightFurniture.Settings
  langs:
  - csharp
  - vb
  name: FireParticleOffsets
  nameWithType: LightFurniture.Settings.FireParticleOffsets
  fullName: TinyLife.Objects.LightFurniture.Settings.FireParticleOffsets
  type: Field
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FireParticleOffsets
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 161
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of positions that fire particles should be displayed with, based on the given <xref href=\"TinyLife.Objects.LightFurniture\" data-throw-if-not-resolved=\"false\"></xref> instance&apos;s position.\nThese offsets are applied to <xref href=\"TinyLife.Objects.Particle.DrawOffset\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this is null, no fire particles will be displayed.\n"
  example: []
  syntax:
    content: public Func<LightFurniture, Vector2>[] FireParticleOffsets
    return:
      type: System.Func{TinyLife.Objects.LightFurniture,Microsoft.Xna.Framework.Vector2}[]
    content.vb: Public FireParticleOffsets As Func(Of LightFurniture, Vector2)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.LightFurniture.Settings.IsAutomatic
  commentId: F:TinyLife.Objects.LightFurniture.Settings.IsAutomatic
  id: IsAutomatic
  parent: TinyLife.Objects.LightFurniture.Settings
  langs:
  - csharp
  - vb
  name: IsAutomatic
  nameWithType: LightFurniture.Settings.IsAutomatic
  fullName: TinyLife.Objects.LightFurniture.Settings.IsAutomatic
  type: Field
  source:
    remote:
      path: TinyLife/Objects/LightFurniture.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsAutomatic
    path: ../TinyLife/Objects/LightFurniture.cs
    startLine: 166
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether this light furniture is lit and unlit automatically based on the time of day.\nLight furniture with this setting should not use the <xref href=\"TinyLife.Objects.ObjectCategory.Lamp\" data-throw-if-not-resolved=\"false\"></xref> category, as that is what allows it to be toggled on and off by people.\n"
  example: []
  syntax:
    content: public bool IsAutomatic
    return:
      type: System.Boolean
    content.vb: Public IsAutomatic As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.Objects.LightFurniture
  commentId: T:TinyLife.Objects.LightFurniture
  parent: TinyLife.Objects
  name: LightFurniture
  nameWithType: LightFurniture
  fullName: TinyLife.Objects.LightFurniture
- uid: TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.LightSettings
  isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.LightFurniture.Settings.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LightFurniture.Settings>()
  nameWithType: Extensions.JsonCopy<LightFurniture.Settings>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.LightFurniture.Settings>()
  nameWithType.vb: Extensions.JsonCopy(Of LightFurniture.Settings)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.LightFurniture.Settings)()
  name.vb: JsonCopy(Of LightFurniture.Settings)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<LightFurniture.Settings>
    nameWithType: Extensions.JsonCopy<LightFurniture.Settings>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.LightFurniture.Settings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of LightFurniture.Settings)
    nameWithType: Extensions.JsonCopy(Of LightFurniture.Settings)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.LightFurniture.Settings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Func{TinyLife.Objects.LightFurniture,TinyLife.Objects.Light[]}
  commentId: T:System.Func{TinyLife.Objects.LightFurniture,TinyLife.Objects.Light[]}
  parent: System
  definition: System.Func`2
  name: Func<LightFurniture, Light[]>
  nameWithType: Func<LightFurniture, Light[]>
  fullName: System.Func<TinyLife.Objects.LightFurniture, TinyLife.Objects.Light[]>
  nameWithType.vb: Func(Of LightFurniture, Light())
  fullName.vb: System.Func(Of TinyLife.Objects.LightFurniture, TinyLife.Objects.Light())
  name.vb: Func(Of LightFurniture, Light())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.LightFurniture
    name: LightFurniture
    nameWithType: LightFurniture
    fullName: TinyLife.Objects.LightFurniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Light
    name: Light
    nameWithType: Light
    fullName: TinyLife.Objects.Light
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.LightFurniture
    name: LightFurniture
    nameWithType: LightFurniture
    fullName: TinyLife.Objects.LightFurniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.Light
    name: Light
    nameWithType: Light
    fullName: TinyLife.Objects.Light
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.LightFurniture.IsDisabled
  commentId: F:TinyLife.Objects.LightFurniture.IsDisabled
  parent: TinyLife.Objects.LightFurniture
  name: IsDisabled
  nameWithType: LightFurniture.IsDisabled
  fullName: TinyLife.Objects.LightFurniture.IsDisabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.LightFurniture.Settings.CreateLights
  commentId: F:TinyLife.Objects.LightFurniture.Settings.CreateLights
  isExternal: true
- uid: TinyLife.Objects.Particle.DrawOffset
  commentId: F:TinyLife.Objects.Particle.DrawOffset
  isExternal: true
- uid: System.Func{TinyLife.Objects.LightFurniture,Microsoft.Xna.Framework.Vector2}[]
  isExternal: true
  name: Func<LightFurniture, Vector2>[]
  nameWithType: Func<LightFurniture, Vector2>[]
  fullName: System.Func<TinyLife.Objects.LightFurniture, Microsoft.Xna.Framework.Vector2>[]
  nameWithType.vb: Func(Of LightFurniture, Vector2)()
  fullName.vb: System.Func(Of TinyLife.Objects.LightFurniture, Microsoft.Xna.Framework.Vector2)()
  name.vb: Func(Of LightFurniture, Vector2)()
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.LightFurniture
    name: LightFurniture
    nameWithType: LightFurniture
    fullName: TinyLife.Objects.LightFurniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.LightFurniture
    name: LightFurniture
    nameWithType: LightFurniture
    fullName: TinyLife.Objects.LightFurniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.ObjectCategory.Lamp
  commentId: F:TinyLife.Objects.ObjectCategory.Lamp
  isExternal: true

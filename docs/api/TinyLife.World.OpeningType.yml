### YamlMime:ManagedReference
items:
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  id: OpeningType
  parent: TinyLife.World
  children:
  - TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  - TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  - TinyLife.World.OpeningType.Colors
  - TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  - TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Point)
  - TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Int32[],System.Single)
  - TinyLife.World.OpeningType.Icon
  - TinyLife.World.OpeningType.Name
  - TinyLife.World.OpeningType.Price
  - TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  - TinyLife.World.OpeningType.Types
  - TinyLife.World.OpeningType.WallMode
  langs:
  - csharp
  - vb
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
  type: Class
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OpeningType
    path: ../TinyLife/World/OpeningType.cs
    startLine: 18
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nAn opening is some sort of extrusion in a <xref href=\"TinyLife.Objects.WallLike\" data-throw-if-not-resolved=\"false\"></xref>, like a window or a door.\nAn opening type stores data that can be used to construct a <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<OpeningType>), new object[] { typeof(OpeningType), "PrivateTypes" })]

      public class OpeningType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of OpeningType)), New Object() { GetType(OpeningType), "PrivateTypes" })>

      Public Class OpeningType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.OpeningType.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.OpeningType.Types
  commentId: F:TinyLife.World.OpeningType.Types
  id: Types
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: OpeningType.Types
  fullName: TinyLife.World.OpeningType.Types
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/World/OpeningType.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA registry for all <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref> instances from the game and mods.\nUse <xref href=\"TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)\" data-throw-if-not-resolved=\"false\"></xref> to register custom opening types.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, OpeningType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, OpeningType)
- uid: TinyLife.World.OpeningType.Name
  commentId: F:TinyLife.World.OpeningType.Name
  id: Name
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: OpeningType.Name
  fullName: TinyLife.World.OpeningType.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/OpeningType.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this opening type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  id: WallMode
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: WallMode
  nameWithType: OpeningType.WallMode
  fullName: TinyLife.World.OpeningType.WallMode
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WallMode
    path: ../TinyLife/World/OpeningType.cs
    startLine: 55
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.OpeningType.WallMode\" data-throw-if-not-resolved=\"false\"></xref> that <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref> instances with this opening in it should use for rendering\n"
  example: []
  syntax:
    content: public readonly WallMode WallMode
    return:
      type: TinyLife.World.WallMode
    content.vb: Public ReadOnly WallMode As WallMode
- uid: TinyLife.World.OpeningType.Price
  commentId: F:TinyLife.World.OpeningType.Price
  id: Price
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: OpeningType.Price
  fullName: TinyLife.World.OpeningType.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/World/OpeningType.cs
    startLine: 59
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of this opening\n"
  example: []
  syntax:
    content: public readonly int Price
    return:
      type: System.Int32
    content.vb: Public ReadOnly Price As Integer
- uid: TinyLife.World.OpeningType.Colors
  commentId: F:TinyLife.World.OpeningType.Colors
  id: Colors
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Colors
  nameWithType: OpeningType.Colors
  fullName: TinyLife.World.OpeningType.Colors
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Colors
    path: ../TinyLife/World/OpeningType.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe color schemes that opening instances can have when created from this type\n"
  example: []
  syntax:
    content: public readonly ColorScheme[] Colors
    return:
      type: TinyLife.Utilities.ColorScheme[]
    content.vb: Public ReadOnly Colors As ColorScheme()
- uid: TinyLife.World.OpeningType.Icon
  commentId: F:TinyLife.World.OpeningType.Icon
  id: Icon
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: OpeningType.Icon
  fullName: TinyLife.World.OpeningType.Icon
  type: Field
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/World/OpeningType.cs
    startLine: 68
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe build mode icon for this object, which represents the category / theme / mod that it comes from.\nIf this value is nonnull, the icon will be displayed in the corner of the build mode button for this object.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme,System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: OpeningType(string, TextureRegion, WallMode, int, ColorScheme, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  nameWithType: OpeningType.OpeningType(string, TextureRegion, WallMode, int, ColorScheme, Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  fullName: TinyLife.World.OpeningType.OpeningType(string, MLEM.Textures.TextureRegion, TinyLife.World.WallMode, int, TinyLife.Utilities.ColorScheme, System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>, MLEM.Textures.TextureRegion)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/OpeningType.cs
    startLine: 76
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new opening type with the given settings.\n"
  example: []
  syntax:
    content: public OpeningType(string name, TextureRegion textureRegion, WallMode wallMode, int price, ColorScheme color, Func<OpeningType, int[], WallLike, Opening> construct = null, TextureRegion icon = null)
    parameters:
    - id: name
      type: System.String
    - id: textureRegion
      type: MLEM.Textures.TextureRegion
    - id: wallMode
      type: TinyLife.World.WallMode
    - id: price
      type: System.Int32
    - id: color
      type: TinyLife.Utilities.ColorScheme
    - id: construct
      type: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
    - id: icon
      type: MLEM.Textures.TextureRegion
    content.vb: Public Sub New(name As String, textureRegion As TextureRegion, wallMode As WallMode, price As Integer, color As ColorScheme, construct As Func(Of OpeningType, Integer(), WallLike, Opening) = Nothing, icon As TextureRegion = Nothing)
  overload: TinyLife.World.OpeningType.#ctor*
  nameWithType.vb: OpeningType.New(String, TextureRegion, WallMode, Integer, ColorScheme, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
  fullName.vb: TinyLife.World.OpeningType.New(String, MLEM.Textures.TextureRegion, TinyLife.World.WallMode, Integer, TinyLife.Utilities.ColorScheme, System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening), MLEM.Textures.TextureRegion)
  name.vb: New(String, TextureRegion, WallMode, Integer, ColorScheme, Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
- uid: TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  commentId: M:TinyLife.World.OpeningType.#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,TinyLife.World.WallMode,System.Int32,TinyLife.Utilities.ColorScheme[],System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening},MLEM.Textures.TextureRegion)'
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: OpeningType(string, TextureRegion, WallMode, int, ColorScheme[], Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  nameWithType: OpeningType.OpeningType(string, TextureRegion, WallMode, int, ColorScheme[], Func<OpeningType, int[], WallLike, Opening>, TextureRegion)
  fullName: TinyLife.World.OpeningType.OpeningType(string, MLEM.Textures.TextureRegion, TinyLife.World.WallMode, int, TinyLife.Utilities.ColorScheme[], System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>, MLEM.Textures.TextureRegion)
  type: Constructor
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/OpeningType.cs
    startLine: 89
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new opening type with the given settings\n"
  example: []
  syntax:
    content: public OpeningType(string name, TextureRegion textureRegion, WallMode wallMode, int price, ColorScheme[] colors, Func<OpeningType, int[], WallLike, Opening> construct = null, TextureRegion icon = null)
    parameters:
    - id: name
      type: System.String
      description: The name
    - id: textureRegion
      type: MLEM.Textures.TextureRegion
      description: The texture to use for rendering
    - id: wallMode
      type: TinyLife.World.WallMode
      description: The wall mode
    - id: price
      type: System.Int32
      description: The price
    - id: colors
      type: TinyLife.Utilities.ColorScheme[]
      description: The color schemes for this opening
    - id: construct
      type: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
      description: The function that is used for constructing an <xref href="TinyLife.World.Opening" data-throw-if-not-resolved="false"></xref> from this opening type
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The build mode category icon of this object
    content.vb: Public Sub New(name As String, textureRegion As TextureRegion, wallMode As WallMode, price As Integer, colors As ColorScheme(), construct As Func(Of OpeningType, Integer(), WallLike, Opening) = Nothing, icon As TextureRegion = Nothing)
  overload: TinyLife.World.OpeningType.#ctor*
  nameWithType.vb: OpeningType.New(String, TextureRegion, WallMode, Integer, ColorScheme(), Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
  fullName.vb: TinyLife.World.OpeningType.New(String, MLEM.Textures.TextureRegion, TinyLife.World.WallMode, Integer, TinyLife.Utilities.ColorScheme(), System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening), MLEM.Textures.TextureRegion)
  name.vb: New(String, TextureRegion, WallMode, Integer, ColorScheme(), Func(Of OpeningType, Integer(), WallLike, Opening), TextureRegion)
- uid: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Point)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Single,System.Single,System.Int32[],System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Point)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, bool, float, float, int[], Color?, Point)
  nameWithType: OpeningType.Draw(GameTime, SpriteBatch, Vector2, bool, float, float, int[], Color?, Point)
  fullName: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, bool, float, float, int[], Microsoft.Xna.Framework.Color?, Microsoft.Xna.Framework.Point)
  type: Method
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/OpeningType.cs
    startLine: 111
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this opening in a wall\n"
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, Vector2 drawPos, bool vertical, float scale, float depth, int[] colors, Color? overrideColor, Point textureOffset = default)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to render with
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at
    - id: vertical
      type: System.Boolean
      description: Whether the underlying wall is vertical
    - id: scale
      type: System.Single
      description: The scale to render with
    - id: depth
      type: System.Single
      description: The depth to use for rendering
    - id: colors
      type: System.Int32[]
      description: The color indices that should be used for rendering
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    - id: textureOffset
      type: Microsoft.Xna.Framework.Point
      description: An offset that should be applied to the texture region. This value is multiplied with the texture region&apos;s size.
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, drawPos As Vector2, vertical As Boolean, scale As Single, depth As Single, colors As Integer(), overrideColor As Color?, textureOffset As Point = Nothing)
  overload: TinyLife.World.OpeningType.Draw*
  nameWithType.vb: OpeningType.Draw(GameTime, SpriteBatch, Vector2, Boolean, Single, Single, Integer(), Color?, Point)
  fullName.vb: TinyLife.World.OpeningType.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Boolean, Single, Single, Integer(), Microsoft.Xna.Framework.Color?, Microsoft.Xna.Framework.Point)
  name.vb: Draw(GameTime, SpriteBatch, Vector2, Boolean, Single, Single, Integer(), Color?, Point)
- uid: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Int32[],System.Single)
  commentId: M:TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Int32[],System.Single)
  id: DrawUi(MLEM.Ui.Elements.Element,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,System.Int32[],System.Single)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: DrawUi(Element, SpriteBatch, GameTime, int[], float)
  nameWithType: OpeningType.DrawUi(Element, SpriteBatch, GameTime, int[], float)
  fullName: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, int[], float)
  type: Method
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: ../TinyLife/World/OpeningType.cs
    startLine: 134
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this opening in ui space rather than world space\n"
  example: []
  syntax:
    content: public void DrawUi(Element e, SpriteBatch batch, GameTime time, int[] colors, float drawScale = 0.3)
    parameters:
    - id: e
      type: MLEM.Ui.Elements.Element
      description: The ui element to draw this opening onto
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: colors
      type: System.Int32[]
      description: The color indices to draw with
    - id: drawScale
      type: System.Single
      description: The scale to draw with. 0.3 by default.
    content.vb: Public Sub DrawUi(e As Element, batch As SpriteBatch, time As GameTime, colors As Integer(), drawScale As Single = 0.3)
  overload: TinyLife.World.OpeningType.DrawUi*
  nameWithType.vb: OpeningType.DrawUi(Element, SpriteBatch, GameTime, Integer(), Single)
  fullName.vb: TinyLife.World.OpeningType.DrawUi(MLEM.Ui.Elements.Element, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.GameTime, Integer(), Single)
  name.vb: DrawUi(Element, SpriteBatch, GameTime, Integer(), Single)
- uid: TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  commentId: M:TinyLife.World.OpeningType.Construct(System.Int32[],TinyLife.Objects.WallLike)
  id: Construct(System.Int32[],TinyLife.Objects.WallLike)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Construct(int[], WallLike)
  nameWithType: OpeningType.Construct(int[], WallLike)
  fullName: TinyLife.World.OpeningType.Construct(int[], TinyLife.Objects.WallLike)
  type: Method
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/World/OpeningType.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nConstructs a new <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref> instance from this opening type\n"
  example: []
  syntax:
    content: public Opening Construct(int[] colors, WallLike wall)
    parameters:
    - id: colors
      type: System.Int32[]
      description: The color indices to use
    - id: wall
      type: TinyLife.Objects.WallLike
      description: The wall that this opening will be slotted into
    return:
      type: TinyLife.World.Opening
      description: A new opening instance based on this type
    content.vb: Public Function Construct(colors As Integer(), wall As WallLike) As Opening
  overload: TinyLife.World.OpeningType.Construct*
  nameWithType.vb: OpeningType.Construct(Integer(), WallLike)
  fullName.vb: TinyLife.World.OpeningType.Construct(Integer(), TinyLife.Objects.WallLike)
  name.vb: Construct(Integer(), WallLike)
- uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  commentId: M:TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  id: Register(TinyLife.World.OpeningType)
  parent: TinyLife.World.OpeningType
  langs:
  - csharp
  - vb
  name: Register(OpeningType)
  nameWithType: OpeningType.Register(OpeningType)
  fullName: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  type: Method
  source:
    remote:
      path: TinyLife/World/OpeningType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/OpeningType.cs
    startLine: 156
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters the given <xref href=\"TinyLife.World.OpeningType\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.World.OpeningType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static OpeningType Register(OpeningType type)
    parameters:
    - id: type
      type: TinyLife.World.OpeningType
      description: The type to register
    return:
      type: TinyLife.World.OpeningType
      description: The passed <code data-dev-comment-type="paramref" class="paramref">type</code>, for chaining.
    content.vb: Public Shared Function Register(type As OpeningType) As OpeningType
  overload: TinyLife.World.OpeningType.Register*
references:
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.OpeningType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<OpeningType>(OpeningType)
  nameWithType: Extensions.JsonCopy<OpeningType>(OpeningType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.OpeningType>(TinyLife.World.OpeningType)
  nameWithType.vb: Extensions.JsonCopy(Of OpeningType)(OpeningType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.OpeningType)(TinyLife.World.OpeningType)
  name.vb: JsonCopy(Of OpeningType)(OpeningType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.OpeningType)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: '>'
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.OpeningType)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.OpeningType
  commentId: T:TinyLife.World.OpeningType
  parent: TinyLife.World
  name: OpeningType
  nameWithType: OpeningType
  fullName: TinyLife.World.OpeningType
- uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  commentId: M:TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  name: Register(OpeningType)
  nameWithType: OpeningType.Register(OpeningType)
  fullName: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
  spec.csharp:
  - uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
    name: Register
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
  spec.vb:
  - uid: TinyLife.World.OpeningType.Register(TinyLife.World.OpeningType)
    name: Register
  - name: (
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.OpeningType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, OpeningType>
  nameWithType: ReadOnlyDictionary<string, OpeningType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.World.OpeningType>
  nameWithType.vb: ReadOnlyDictionary(Of String, OpeningType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.World.OpeningType)
  name.vb: ReadOnlyDictionary(Of String, OpeningType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  name: WallMode
  nameWithType: OpeningType.WallMode
  fullName: TinyLife.World.OpeningType.WallMode
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.WallMode
  commentId: T:TinyLife.World.WallMode
  parent: TinyLife.World
  name: WallMode
  nameWithType: WallMode
  fullName: TinyLife.World.WallMode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.Utilities.ColorScheme[]
  isExternal: true
  name: ColorScheme[]
  nameWithType: ColorScheme[]
  fullName: TinyLife.Utilities.ColorScheme[]
  nameWithType.vb: ColorScheme()
  fullName.vb: TinyLife.Utilities.ColorScheme()
  name.vb: ColorScheme()
  spec.csharp:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.Utilities.ColorScheme
    name: ColorScheme
  - name: (
  - name: )
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.World.OpeningType.#ctor*
  commentId: Overload:TinyLife.World.OpeningType.#ctor
  name: OpeningType
  nameWithType: OpeningType.OpeningType
  fullName: TinyLife.World.OpeningType.OpeningType
  nameWithType.vb: OpeningType.New
  fullName.vb: TinyLife.World.OpeningType.New
  name.vb: New
- uid: TinyLife.Utilities.ColorScheme
  commentId: T:TinyLife.Utilities.ColorScheme
  parent: TinyLife.Utilities
  name: ColorScheme
  nameWithType: ColorScheme
  fullName: TinyLife.Utilities.ColorScheme
- uid: System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
  commentId: T:System.Func{TinyLife.World.OpeningType,System.Int32[],TinyLife.Objects.WallLike,TinyLife.World.Opening}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<OpeningType, int[], WallLike, Opening>
  nameWithType: Func<OpeningType, int[], WallLike, Opening>
  fullName: System.Func<TinyLife.World.OpeningType, int[], TinyLife.Objects.WallLike, TinyLife.World.Opening>
  nameWithType.vb: Func(Of OpeningType, Integer(), WallLike, Opening)
  fullName.vb: System.Func(Of TinyLife.World.OpeningType, Integer(), TinyLife.Objects.WallLike, TinyLife.World.Opening)
  name.vb: Func(Of OpeningType, Integer(), WallLike, Opening)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.OpeningType
    name: OpeningType
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.OpeningType.Draw*
  commentId: Overload:TinyLife.World.OpeningType.Draw
  name: Draw
  nameWithType: OpeningType.Draw
  fullName: TinyLife.World.OpeningType.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.OpeningType.DrawUi*
  commentId: Overload:TinyLife.World.OpeningType.DrawUi
  name: DrawUi
  nameWithType: OpeningType.DrawUi
  fullName: TinyLife.World.OpeningType.DrawUi
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Ui
    name: Ui
    isExternal: true
  - name: .
  - uid: MLEM.Ui.Elements
    name: Elements
    isExternal: true
- uid: TinyLife.World.OpeningType.Construct*
  commentId: Overload:TinyLife.World.OpeningType.Construct
  name: Construct
  nameWithType: OpeningType.Construct
  fullName: TinyLife.World.OpeningType.Construct
- uid: TinyLife.World.OpeningType.Types
  commentId: F:TinyLife.World.OpeningType.Types
  name: Types
  nameWithType: OpeningType.Types
  fullName: TinyLife.World.OpeningType.Types
- uid: TinyLife.World.OpeningType.Register*
  commentId: Overload:TinyLife.World.OpeningType.Register
  name: Register
  nameWithType: OpeningType.Register
  fullName: TinyLife.World.OpeningType.Register

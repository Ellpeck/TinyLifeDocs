### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  id: Wall
  parent: TinyLife.World
  children:
  - TinyLife.World.Wall.#ctor(Microsoft.Xna.Framework.Point[])
  - TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  - TinyLife.World.Wall.GetDepth(TinyLife.World.Map,System.Single)
  - TinyLife.World.Wall.GetDisplayMode
  - TinyLife.World.Wall.GetFreeActionSpotInfo(TinyLife.Objects.Person)
  - TinyLife.World.Wall.GetIndexForCamera
  - TinyLife.World.Wall.GetPositionForCamera
  - TinyLife.World.Wall.GetPrice
  - TinyLife.World.Wall.IsDown
  - TinyLife.World.Wall.IsStatic
  - TinyLife.World.Wall.IsVerticalForCamera
  - TinyLife.World.Wall.Opening
  - TinyLife.World.Wall.Positions
  - TinyLife.World.Wall.Price
  - TinyLife.World.Wall.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  - TinyLife.World.Wall.Validate(TinyLife.World.Map)
  - TinyLife.World.Wall.Vertical
  - TinyLife.World.Wall.Wallpapers
  langs:
  - csharp
  - vb
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
  type: Class
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wall
    path: ../TinyLife/World/Wall.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA wall is an element of a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that stops traversal and that has a <xref href=\"TinyLife.World.Wallpaper\" data-throw-if-not-resolved=\"false\"></xref> and optionally an <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref> attached to it.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Wall : JsonTypeSafeGenericDataHolder, IGenericDataHolder, IPricedObject
    content.vb: >-
      <DataContract>

      Public Class Wall
          Inherits JsonTypeSafeGenericDataHolder
          Implements IGenericDataHolder, IPricedObject
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.World.IPricedObject
  inheritedMembers:
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Wall.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.World.Wall.Price
  commentId: F:TinyLife.World.Wall.Price
  id: Price
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Wall.Price
  fullName: TinyLife.World.Wall.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/World/Wall.cs
    startLine: 23
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of building a single wall element\n"
  example: []
  syntax:
    content: public const int Price = 125
    return:
      type: System.Int32
    content.vb: Public Const Price As Integer = 125
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.World.Wall.Positions
  commentId: F:TinyLife.World.Wall.Positions
  id: Positions
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Positions
  nameWithType: Wall.Positions
  fullName: TinyLife.World.Wall.Positions
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Positions
    path: ../TinyLife/World/Wall.cs
    startLine: 30
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe two positions that this wall is placed in.\nThe two positions refer to the tile coordinate of the tile on the front face of the wall, and the tile coordinate of the tile on the back face of the wall.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Point[] Positions
    return:
      type: Microsoft.Xna.Framework.Point[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Positions As Point()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wall.Wallpapers
  commentId: F:TinyLife.World.Wall.Wallpapers
  id: Wallpapers
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Wallpapers
  nameWithType: Wall.Wallpapers
  fullName: TinyLife.World.Wall.Wallpapers
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wallpapers
    path: ../TinyLife/World/Wall.cs
    startLine: 35
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe two wallpapers attached to this <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, on either one of its sides\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Wallpaper[] Wallpapers
    return:
      type: TinyLife.World.Wallpaper[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Wallpapers As Wallpaper()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wall.Vertical
  commentId: P:TinyLife.World.Wall.Vertical
  id: Vertical
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Vertical
  nameWithType: Wall.Vertical
  fullName: TinyLife.World.Wall.Vertical
  type: Property
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Vertical
    path: ../TinyLife/World/Wall.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nStores whether this wall is vertical. A vertical wall is one where the <xref href=\"TinyLife.World.Wall.Positions\" data-throw-if-not-resolved=\"false\"></xref> have the same y, but different x coordinates.\n"
  example: []
  syntax:
    content: public bool Vertical { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Vertical As Boolean
  overload: TinyLife.World.Wall.Vertical*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wall.Opening
  commentId: P:TinyLife.World.Wall.Opening
  id: Opening
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Opening
  nameWithType: Wall.Opening
  fullName: TinyLife.World.Wall.Opening
  type: Property
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Opening
    path: ../TinyLife/World/Wall.cs
    startLine: 44
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref> attached to this wall, or null if there is none.\nUse <xref href=\"TinyLife.World.Wall.SetOpening(TinyLife.World.Map%2cTinyLife.World.Opening)\" data-throw-if-not-resolved=\"false\"></xref> to set this value.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Opening Opening { get; }
    parameters: []
    return:
      type: TinyLife.World.Opening
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Opening As Opening
  overload: TinyLife.World.Wall.Opening*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.World.Wall.IsStatic
  commentId: F:TinyLife.World.Wall.IsStatic
  id: IsStatic
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: Wall.IsStatic
  fullName: TinyLife.World.Wall.IsStatic
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsStatic
    path: ../TinyLife/World/Wall.cs
    startLine: 50
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA field that is true for objects that are part of the exported base map that the current map is created from\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool IsStatic
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public IsStatic As Boolean
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.#ctor(Microsoft.Xna.Framework.Point[])
  commentId: M:TinyLife.World.Wall.#ctor(Microsoft.Xna.Framework.Point[])
  id: '#ctor(Microsoft.Xna.Framework.Point[])'
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Wall(Point[])
  nameWithType: Wall.Wall(Point[])
  fullName: TinyLife.World.Wall.Wall(Microsoft.Xna.Framework.Point[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Wall.cs
    startLine: 58
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new wall at the given position, with the implicitly given verticality\n"
  example: []
  syntax:
    content: public Wall(params Point[] positions)
    parameters:
    - id: positions
      type: Microsoft.Xna.Framework.Point[]
      description: The positions that the wall should be placed between
    content.vb: Public Sub New(ParamArray positions As Point())
  overload: TinyLife.World.Wall.#ctor*
  nameWithType.vb: Wall.Wall(Point())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Wall.Wall(Microsoft.Xna.Framework.Point())
  name.vb: Wall(Point())
- uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  id: Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Draw(Map, GameTime, SpriteBatch, Vector2, Nullable<Color>)
  nameWithType: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Nullable<Color>)
  fullName: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Wall.cs
    startLine: 75
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this wall in the world, along with its <xref href=\"TinyLife.World.Wall.Wallpapers\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Draw(Map map, GameTime time, SpriteBatch batch, Vector2 drawPos, Color? overrideColor)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to draw this wall on
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the wall at, in draw space
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    content.vb: Public Sub Draw(map As Map, time As GameTime, batch As SpriteBatch, drawPos As Vector2, overrideColor As Color?)
  overload: TinyLife.World.Wall.Draw*
  nameWithType.vb: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Nullable(Of Color))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color))
  name.vb: Draw(Map, GameTime, SpriteBatch, Vector2, Nullable(Of Color))
- uid: TinyLife.World.Wall.IsDown
  commentId: M:TinyLife.World.Wall.IsDown
  id: IsDown
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: IsDown()
  nameWithType: Wall.IsDown()
  fullName: TinyLife.World.Wall.IsDown()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsDown
    path: ../TinyLife/World/Wall.cs
    startLine: 93
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether this wall should be rendered with a lower height than its actual height.\nIf this value returns true, <xref href=\"TinyLife.World.Wall.Draw(TinyLife.World.Map%2cMicrosoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d)\" data-throw-if-not-resolved=\"false\"></xref> only draws the first 5 or so pixels of the wall to allow for a simple view of what is behind the wall.\nThis value is based on the lot visibility, the <xref href=\"TinyLife.Options.WallMode\" data-throw-if-not-resolved=\"false\"></xref> and more.\n"
  example: []
  syntax:
    content: public bool IsDown()
    return:
      type: System.Boolean
      description: Whether the wall should be rendered down
    content.vb: Public Function IsDown As Boolean
  overload: TinyLife.World.Wall.IsDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  commentId: M:TinyLife.World.Wall.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  id: SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: SetOpening(Map, Opening)
  nameWithType: Wall.SetOpening(Map, Opening)
  fullName: TinyLife.World.Wall.SetOpening(TinyLife.World.Map, TinyLife.World.Opening)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetOpening
    path: ../TinyLife/World/Wall.cs
    startLine: 108
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nChanges the <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref> in this wall to the specified one\n"
  example: []
  syntax:
    content: public void SetOpening(Map map, Opening opening)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this wall is on
    - id: opening
      type: TinyLife.World.Opening
      description: The opening to set, or null to remove the current one
    content.vb: Public Sub SetOpening(map As Map, opening As Opening)
  overload: TinyLife.World.Wall.SetOpening*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetDisplayMode
  commentId: M:TinyLife.World.Wall.GetDisplayMode
  id: GetDisplayMode
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetDisplayMode()
  nameWithType: Wall.GetDisplayMode()
  fullName: TinyLife.World.Wall.GetDisplayMode()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayMode
    path: ../TinyLife/World/Wall.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.World.WallMode\" data-throw-if-not-resolved=\"false\"></xref> that this wall should be rendered with.\nIf the <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref> is nonnull, its <xref href=\"TinyLife.World.OpeningType.WallMode\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public WallMode GetDisplayMode()
    return:
      type: TinyLife.World.WallMode
      description: The wall mode
    content.vb: Public Function GetDisplayMode As WallMode
  overload: TinyLife.World.Wall.GetDisplayMode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetDepth(TinyLife.World.Map,System.Single)
  commentId: M:TinyLife.World.Wall.GetDepth(TinyLife.World.Map,System.Single)
  id: GetDepth(TinyLife.World.Map,System.Single)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetDepth(Map, Single)
  nameWithType: Wall.GetDepth(Map, Single)
  fullName: TinyLife.World.Wall.GetDepth(TinyLife.World.Map, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDepth
    path: ../TinyLife/World/Wall.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the depth that should be used for a wall placed at this wall&apos;s positions.\nThis method is used for rendering <xref href=\"TinyLife.World.Wallpaper\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.World.Wall.Opening\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetDepth(Map map, float offset = 0F)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that this wall is on
    - id: offset
      type: System.Single
      description: An offset that will be added to the depth calculation
    return:
      type: System.Single
      description: ''
    content.vb: Public Function GetDepth(map As Map, offset As Single = 0F) As Single
  overload: TinyLife.World.Wall.GetDepth*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetIndexForCamera
  commentId: M:TinyLife.World.Wall.GetIndexForCamera
  id: GetIndexForCamera
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetIndexForCamera()
  nameWithType: Wall.GetIndexForCamera()
  fullName: TinyLife.World.Wall.GetIndexForCamera()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetIndexForCamera
    path: ../TinyLife/World/Wall.cs
    startLine: 141
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the side of the wall that should be rendered.\nFor <xref href=\"TinyLife.World.Wall.Vertical\" data-throw-if-not-resolved=\"false\"></xref> walls, the position with the highest X value is returned.\nFor non-<xref href=\"TinyLife.World.Wall.Vertical\" data-throw-if-not-resolved=\"false\"></xref> walls, the position with the highest Y value is returned.\n"
  example: []
  syntax:
    content: public int GetIndexForCamera()
    return:
      type: System.Int32
      description: The side of the wall that should be rendered
    content.vb: Public Function GetIndexForCamera As Integer
  overload: TinyLife.World.Wall.GetIndexForCamera*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetPositionForCamera
  commentId: M:TinyLife.World.Wall.GetPositionForCamera
  id: GetPositionForCamera
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetPositionForCamera()
  nameWithType: Wall.GetPositionForCamera()
  fullName: TinyLife.World.Wall.GetPositionForCamera()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPositionForCamera
    path: ../TinyLife/World/Wall.cs
    startLine: 156
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the position from the <xref href=\"TinyLife.World.Wall.Positions\" data-throw-if-not-resolved=\"false\"></xref> array that <xref href=\"TinyLife.World.Wall.GetIndexForCamera\" data-throw-if-not-resolved=\"false\"></xref> suggests.\nThis is the side of the wall that currently faces the game camera.\n"
  example: []
  syntax:
    content: public Point GetPositionForCamera()
    return:
      type: Microsoft.Xna.Framework.Point
      description: The wall position that is facing the camera
    content.vb: Public Function GetPositionForCamera As Point
  overload: TinyLife.World.Wall.GetPositionForCamera*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.IsVerticalForCamera
  commentId: M:TinyLife.World.Wall.IsVerticalForCamera
  id: IsVerticalForCamera
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: IsVerticalForCamera()
  nameWithType: Wall.IsVerticalForCamera()
  fullName: TinyLife.World.Wall.IsVerticalForCamera()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsVerticalForCamera
    path: ../TinyLife/World/Wall.cs
    startLine: 165
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether the wall is considered <xref href=\"TinyLife.World.Wall.Vertical\" data-throw-if-not-resolved=\"false\"></xref> based on the game&apos;s current <xref href=\"TinyLife.Options.CameraRotation\" data-throw-if-not-resolved=\"false\"></xref>.\nIf the camera rotation is offset by 90 or -90 degrees from the default, wall verticalities are visually inversed.\n"
  example: []
  syntax:
    content: public bool IsVerticalForCamera()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsVerticalForCamera As Boolean
  overload: TinyLife.World.Wall.IsVerticalForCamera*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetPrice
  commentId: M:TinyLife.World.Wall.GetPrice
  id: GetPrice
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Wall.GetPrice()
  fullName: TinyLife.World.Wall.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Wall.cs
    startLine: 173
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price that this object can be bought or sold for.\nNote that, like in the case of the <xref href=\"TinyLife.Objects.Painting\" data-throw-if-not-resolved=\"false\"></xref>, the returned price isn&apos;t necessarily the full price that the object can be sold for. Instead, the price returned here should be the price that this object has when bought or sold from the <xref href=\"TinyLife.Tools.FurnitureTool\" data-throw-if-not-resolved=\"false\"></xref> or similar.\n"
  example: []
  syntax:
    content: public float GetPrice()
    return:
      type: System.Single
      description: The object&apos;s price
    content.vb: Public Function GetPrice As Single
  overload: TinyLife.World.Wall.GetPrice*
  implements:
  - TinyLife.World.IPricedObject.GetPrice
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Wall.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Wall.Validate(Map)
  fullName: TinyLife.World.Wall.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Wall.cs
    startLine: 181
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public bool Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Function Validate(map As Map) As Boolean
  overload: TinyLife.World.Wall.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.World.Wall.GetFreeActionSpotInfo(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Wall.GetFreeActionSpotInfo(TinyLife.Objects.Person)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person)
  nameWithType: Wall.GetFreeActionSpotInfo(Person)
  fullName: TinyLife.World.Wall.GetFreeActionSpotInfo(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: ../TinyLife/World/Wall.cs
    startLine: 196
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> that contains this wall and the first free position on either of its sides\nIf an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> is already present in a situation, <xref href=\"TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref> should be used instead of this method.\n"
  example: []
  syntax:
    content: public ActionInfo GetFreeActionSpotInfo(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to return the action spot info for
    return:
      type: TinyLife.Actions.ActionInfo
      description: A free action spot info, or null if there is no free spot
    content.vb: Public Function GetFreeActionSpotInfo(person As Person) As ActionInfo
  overload: TinyLife.World.Wall.GetFreeActionSpotInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  parent: TinyLife.World
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
- uid: TinyLife.World.Wall.Opening
  commentId: P:TinyLife.World.Wall.Opening
  isExternal: true
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.World.IPricedObject
  commentId: T:TinyLife.World.IPricedObject
  parent: TinyLife.World
  name: IPricedObject
  nameWithType: IPricedObject
  fullName: TinyLife.World.IPricedObject
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wall.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Wall>()
  nameWithType: Extensions.JsonCopy<Wall>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Wall>()
  nameWithType.vb: Extensions.JsonCopy(Of Wall)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Wall)()
  name.vb: JsonCopy(Of Wall)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Wall>
    nameWithType: Extensions.JsonCopy<Wall>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Wall>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Wall)
    nameWithType: Extensions.JsonCopy(Of Wall)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Wall)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Xna.Framework.Point[]
  isExternal: true
  name: Point[]
  nameWithType: Point[]
  fullName: Microsoft.Xna.Framework.Point[]
  nameWithType.vb: Point()
  fullName.vb: Microsoft.Xna.Framework.Point()
  name.vb: Point()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Wallpaper[]
  isExternal: true
  name: Wallpaper[]
  nameWithType: Wallpaper[]
  fullName: TinyLife.World.Wallpaper[]
  nameWithType.vb: Wallpaper()
  fullName.vb: TinyLife.World.Wallpaper()
  name.vb: Wallpaper()
  spec.csharp:
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
    nameWithType: Wallpaper
    fullName: TinyLife.World.Wallpaper
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
    nameWithType: Wallpaper
    fullName: TinyLife.World.Wallpaper
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.World.Wall.Positions
  commentId: F:TinyLife.World.Wall.Positions
  isExternal: true
- uid: TinyLife.World.Wall.Vertical*
  commentId: Overload:TinyLife.World.Wall.Vertical
  name: Vertical
  nameWithType: Wall.Vertical
  fullName: TinyLife.World.Wall.Vertical
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.World.Wall.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  commentId: M:TinyLife.World.Wall.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  isExternal: true
- uid: TinyLife.World.Wall.Opening*
  commentId: Overload:TinyLife.World.Wall.Opening
  name: Opening
  nameWithType: Wall.Opening
  fullName: TinyLife.World.Wall.Opening
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World.Wall.#ctor*
  commentId: Overload:TinyLife.World.Wall.#ctor
  name: Wall
  nameWithType: Wall.Wall
  fullName: TinyLife.World.Wall.Wall
- uid: TinyLife.World.Wall.Wallpapers
  commentId: F:TinyLife.World.Wall.Wallpapers
  isExternal: true
- uid: TinyLife.World.Wall.Draw*
  commentId: Overload:TinyLife.World.Wall.Draw
  name: Draw
  nameWithType: Wall.Draw
  fullName: TinyLife.World.Wall.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  commentId: M:TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color})
  isExternal: true
- uid: TinyLife.Options.WallMode
  commentId: P:TinyLife.Options.WallMode
  isExternal: true
- uid: TinyLife.World.Wall.IsDown*
  commentId: Overload:TinyLife.World.Wall.IsDown
  name: IsDown
  nameWithType: Wall.IsDown
  fullName: TinyLife.World.Wall.IsDown
- uid: TinyLife.World.Wall.SetOpening*
  commentId: Overload:TinyLife.World.Wall.SetOpening
  name: SetOpening
  nameWithType: Wall.SetOpening
  fullName: TinyLife.World.Wall.SetOpening
- uid: TinyLife.World.WallMode
  commentId: T:TinyLife.World.WallMode
  parent: TinyLife.World
  name: WallMode
  nameWithType: WallMode
  fullName: TinyLife.World.WallMode
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  isExternal: true
- uid: TinyLife.World.Wall.GetDisplayMode*
  commentId: Overload:TinyLife.World.Wall.GetDisplayMode
  name: GetDisplayMode
  nameWithType: Wall.GetDisplayMode
  fullName: TinyLife.World.Wall.GetDisplayMode
- uid: TinyLife.World.Wall.GetDepth*
  commentId: Overload:TinyLife.World.Wall.GetDepth
  name: GetDepth
  nameWithType: Wall.GetDepth
  fullName: TinyLife.World.Wall.GetDepth
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.World.Wall.Vertical
  commentId: P:TinyLife.World.Wall.Vertical
  isExternal: true
- uid: TinyLife.World.Wall.GetIndexForCamera*
  commentId: Overload:TinyLife.World.Wall.GetIndexForCamera
  name: GetIndexForCamera
  nameWithType: Wall.GetIndexForCamera
  fullName: TinyLife.World.Wall.GetIndexForCamera
- uid: TinyLife.World.Wall.GetIndexForCamera
  commentId: M:TinyLife.World.Wall.GetIndexForCamera
  isExternal: true
- uid: TinyLife.World.Wall.GetPositionForCamera*
  commentId: Overload:TinyLife.World.Wall.GetPositionForCamera
  name: GetPositionForCamera
  nameWithType: Wall.GetPositionForCamera
  fullName: TinyLife.World.Wall.GetPositionForCamera
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: TinyLife.Options.CameraRotation
  commentId: F:TinyLife.Options.CameraRotation
  isExternal: true
- uid: TinyLife.World.Wall.IsVerticalForCamera*
  commentId: Overload:TinyLife.World.Wall.IsVerticalForCamera
  name: IsVerticalForCamera
  nameWithType: Wall.IsVerticalForCamera
  fullName: TinyLife.World.Wall.IsVerticalForCamera
- uid: TinyLife.World.Wall.GetPrice*
  commentId: Overload:TinyLife.World.Wall.GetPrice
  name: GetPrice
  nameWithType: Wall.GetPrice
  fullName: TinyLife.World.Wall.GetPrice
- uid: TinyLife.World.IPricedObject.GetPrice
  commentId: M:TinyLife.World.IPricedObject.GetPrice
  parent: TinyLife.World.IPricedObject
  name: GetPrice()
  nameWithType: IPricedObject.GetPrice()
  fullName: TinyLife.World.IPricedObject.GetPrice()
  spec.csharp:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.World.IPricedObject.GetPrice
    name: GetPrice
    nameWithType: IPricedObject.GetPrice
    fullName: TinyLife.World.IPricedObject.GetPrice
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World.Wall.Validate*
  commentId: Overload:TinyLife.World.Wall.Validate
  name: Validate
  nameWithType: Wall.Validate
  fullName: TinyLife.World.Wall.Validate
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Actions.ActionInfo.ToFreeActionSpot(TinyLife.Objects.ObjectCategory)
  isExternal: true
- uid: TinyLife.World.Wall.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.World.Wall.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: Wall.GetFreeActionSpotInfo
  fullName: TinyLife.World.Wall.GetFreeActionSpotInfo
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects

### YamlMime:ManagedReference
items:
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  id: Wall
  parent: TinyLife.World
  children:
  - TinyLife.World.Wall.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  - TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  - TinyLife.World.Wall.GetDisplayMode
  - TinyLife.World.Wall.GetPrice
  - TinyLife.World.Wall.IsDown
  - TinyLife.World.Wall.OnAdded(TinyLife.World.Map)
  - TinyLife.World.Wall.Price
  - TinyLife.World.Wall.Validate(TinyLife.World.Map)
  - TinyLife.World.Wall.Wallpapers
  langs:
  - csharp
  - vb
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
  type: Class
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wall
    path: ../TinyLife/World/Wall.cs
    startLine: 11
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA wall is an element of a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that stops traversal and that has a <xref href=\"TinyLife.World.Wallpaper\" data-throw-if-not-resolved=\"false\"></xref> and optionally an <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref> attached to it.\n"
  example: []
  syntax:
    content: 'public class Wall : WallLike, IGenericDataHolder'
    content.vb: Public Class Wall Inherits WallLike Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Objects.WallLike
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Objects.WallLike.Positions
  - TinyLife.Objects.WallLike.Floor
  - TinyLife.Objects.WallLike.IsStatic
  - TinyLife.Objects.WallLike.Opening
  - TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  - TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map,TinyLife.Objects.Person)
  - TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  - TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  - TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  - TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  - TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  - TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.Wall.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.Wall.Price
  commentId: F:TinyLife.World.Wall.Price
  id: Price
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Price
  nameWithType: Wall.Price
  fullName: TinyLife.World.Wall.Price
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Price
    path: ../TinyLife/World/Wall.cs
    startLine: 16
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe price of building a single wall element\n"
  example: []
  syntax:
    content: public const int Price = 125
    return:
      type: System.Int32
    content.vb: Public Const Price As Integer = 125
- uid: TinyLife.World.Wall.Wallpapers
  commentId: F:TinyLife.World.Wall.Wallpapers
  id: Wallpapers
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Wallpapers
  nameWithType: Wall.Wallpapers
  fullName: TinyLife.World.Wall.Wallpapers
  type: Field
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Wallpapers
    path: ../TinyLife/World/Wall.cs
    startLine: 22
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe two wallpapers attached to this <xref href=\"TinyLife.World.Wall\" data-throw-if-not-resolved=\"false\"></xref>, on either one of its sides\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Wallpaper[] Wallpapers
    return:
      type: TinyLife.World.Wallpaper[]
    content.vb: >-
      <DataMember>

      Public ReadOnly Wallpapers As Wallpaper()
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: TinyLife.World.Wall.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  commentId: M:TinyLife.World.Wall.#ctor(System.Int32,Microsoft.Xna.Framework.Point[])
  id: '#ctor(System.Int32,Microsoft.Xna.Framework.Point[])'
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Wall(int, params Point[])
  nameWithType: Wall.Wall(int, params Point[])
  fullName: TinyLife.World.Wall.Wall(int, params Microsoft.Xna.Framework.Point[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Wall.cs
    startLine: 33
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new wall at the given position, with the implicitly given verticality\n"
  example: []
  syntax:
    content: public Wall(int floor, params Point[] positions)
    parameters:
    - id: floor
      type: System.Int32
      description: The floor that this wall is on.
    - id: positions
      type: Microsoft.Xna.Framework.Point[]
      description: The positions that the wall should be placed between
    content.vb: Public Sub New(floor As Integer, ParamArray positions As Point())
  overload: TinyLife.World.Wall.#ctor*
  nameWithType.vb: Wall.New(Integer, ParamArray Point())
  fullName.vb: TinyLife.World.Wall.New(Integer, ParamArray Microsoft.Xna.Framework.Point())
  name.vb: New(Integer, ParamArray Point())
- uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  id: Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  nameWithType: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  fullName: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, bool, bool)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/World/Wall.cs
    startLine: 38
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nDraws this wall in the world, along with its <xref href=\"TinyLife.Objects.WallLike.Opening\" data-throw-if-not-resolved=\"false\"></xref> and potentially <xref href=\"TinyLife.World.Wall.Wallpapers\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.FenceWall.Type\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void Draw(Map map, GameTime time, SpriteBatch batch, Vector2 drawPos, Color? overrideColor = null, bool drawOpening = true, bool isInWorld = true)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to draw this wall on
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to draw with
    - id: drawPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the wall at, in draw space
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: A color that this object should be rendered with, instead of its default color
    - id: drawOpening
      type: System.Boolean
      description: Whether this wall-like object&apos;s <xref href="TinyLife.Objects.WallLike.Opening" data-throw-if-not-resolved="false"></xref> should be drawn.
    - id: isInWorld
      type: System.Boolean
      description: Whether this wall-like object is currently in the world, or just a preview.
    content.vb: Public Overrides Sub Draw(map As Map, time As GameTime, batch As SpriteBatch, drawPos As Vector2, overrideColor As Color? = Nothing, drawOpening As Boolean = True, isInWorld As Boolean = True)
  overridden: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  overload: TinyLife.World.Wall.Draw*
  nameWithType.vb: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  fullName.vb: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, Boolean, Boolean)
  name.vb: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
- uid: TinyLife.World.Wall.IsDown
  commentId: M:TinyLife.World.Wall.IsDown
  id: IsDown
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: IsDown()
  nameWithType: Wall.IsDown()
  fullName: TinyLife.World.Wall.IsDown()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsDown
    path: ../TinyLife/World/Wall.cs
    startLine: 54
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns whether this wall should be rendered with a lower height than its actual height.\nIf this value returns true, <xref href=\"TinyLife.World.Wall.Draw(TinyLife.World.Map%2cMicrosoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cMicrosoft.Xna.Framework.Vector2%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> only draws the first 5 or so pixels of the wall to allow for a simple view of what is behind the wall.\nThis value is based on the lot visibility, the <xref href=\"TinyLife.Options.WallMode\" data-throw-if-not-resolved=\"false\"></xref> and more.\n"
  example: []
  syntax:
    content: public bool IsDown()
    return:
      type: System.Boolean
      description: Whether the wall should be rendered down
    content.vb: Public Function IsDown() As Boolean
  overload: TinyLife.World.Wall.IsDown*
- uid: TinyLife.World.Wall.GetDisplayMode
  commentId: M:TinyLife.World.Wall.GetDisplayMode
  id: GetDisplayMode
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetDisplayMode()
  nameWithType: Wall.GetDisplayMode()
  fullName: TinyLife.World.Wall.GetDisplayMode()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayMode
    path: ../TinyLife/World/Wall.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the <xref href=\"TinyLife.World.WallMode\" data-throw-if-not-resolved=\"false\"></xref> that this wall should be rendered with.\nIf the <xref href=\"TinyLife.World.Opening\" data-throw-if-not-resolved=\"false\"></xref> is nonnull, its <xref href=\"TinyLife.World.OpeningType.WallMode\" data-throw-if-not-resolved=\"false\"></xref> is returned.\n"
  example: []
  syntax:
    content: public WallMode GetDisplayMode()
    return:
      type: TinyLife.World.WallMode
      description: The wall mode
    content.vb: Public Function GetDisplayMode() As WallMode
  overload: TinyLife.World.Wall.GetDisplayMode*
- uid: TinyLife.World.Wall.GetPrice
  commentId: M:TinyLife.World.Wall.GetPrice
  id: GetPrice
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: GetPrice()
  nameWithType: Wall.GetPrice()
  fullName: TinyLife.World.Wall.GetPrice()
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPrice
    path: ../TinyLife/World/Wall.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the price for this wall, including its <xref href=\"TinyLife.Objects.WallLike.Opening\" data-throw-if-not-resolved=\"false\"></xref> as well as its <xref href=\"TinyLife.World.Wall.Wallpapers\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.FenceWall.Type\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override float GetPrice()
    return:
      type: System.Single
      description: The price.
    content.vb: Public Overrides Function GetPrice() As Single
  overridden: TinyLife.Objects.WallLike.GetPrice
  overload: TinyLife.World.Wall.GetPrice*
- uid: TinyLife.World.Wall.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.World.Wall.Validate(TinyLife.World.Map)
  id: Validate(TinyLife.World.Map)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: Validate(Map)
  nameWithType: Wall.Validate(Map)
  fullName: TinyLife.World.Wall.Validate(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/World/Wall.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThis method is called when this object is loaded from disk.\n"
  example: []
  syntax:
    content: public override bool Validate(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overrides Function Validate(map As Map) As Boolean
  overridden: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
  overload: TinyLife.World.Wall.Validate*
- uid: TinyLife.World.Wall.OnAdded(TinyLife.World.Map)
  commentId: M:TinyLife.World.Wall.OnAdded(TinyLife.World.Map)
  id: OnAdded(TinyLife.World.Map)
  parent: TinyLife.World.Wall
  langs:
  - csharp
  - vb
  name: OnAdded(Map)
  nameWithType: Wall.OnAdded(Map)
  fullName: TinyLife.World.Wall.OnAdded(TinyLife.World.Map)
  type: Method
  source:
    remote:
      path: TinyLife/World/Wall.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnAdded
    path: ../TinyLife/World/Wall.cs
    startLine: 97
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCalled when this wall is added to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">map</code>.\nBy default, this method marks surrounding locations dirty for pathfinding and calls <xref href=\"TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void OnAdded(Map map)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map.
    content.vb: Public Overrides Sub OnAdded(map As Map)
  overridden: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  overload: TinyLife.World.Wall.OnAdded*
references:
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.World.Wallpaper
  commentId: T:TinyLife.World.Wallpaper
  parent: TinyLife.World
  name: Wallpaper
  nameWithType: Wallpaper
  fullName: TinyLife.World.Wallpaper
- uid: TinyLife.World.Opening
  commentId: T:TinyLife.World.Opening
  parent: TinyLife.World
  name: Opening
  nameWithType: Opening
  fullName: TinyLife.World.Opening
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Objects.WallLike
  commentId: T:TinyLife.Objects.WallLike
  parent: TinyLife.Objects
  name: WallLike
  nameWithType: WallLike
  fullName: TinyLife.Objects.WallLike
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Objects.WallLike.Positions
  commentId: F:TinyLife.Objects.WallLike.Positions
  parent: TinyLife.Objects.WallLike
  name: Positions
  nameWithType: WallLike.Positions
  fullName: TinyLife.Objects.WallLike.Positions
- uid: TinyLife.Objects.WallLike.Floor
  commentId: F:TinyLife.Objects.WallLike.Floor
  parent: TinyLife.Objects.WallLike
  name: Floor
  nameWithType: WallLike.Floor
  fullName: TinyLife.Objects.WallLike.Floor
- uid: TinyLife.Objects.WallLike.IsStatic
  commentId: F:TinyLife.Objects.WallLike.IsStatic
  parent: TinyLife.Objects.WallLike
  name: IsStatic
  nameWithType: WallLike.IsStatic
  fullName: TinyLife.Objects.WallLike.IsStatic
- uid: TinyLife.Objects.WallLike.Opening
  commentId: P:TinyLife.Objects.WallLike.Opening
  parent: TinyLife.Objects.WallLike
  name: Opening
  nameWithType: WallLike.Opening
  fullName: TinyLife.Objects.WallLike.Opening
- uid: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  name: OnRemoved(Map)
  nameWithType: WallLike.OnRemoved(Map)
  fullName: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
    name: OnRemoved
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.OnRemoved(TinyLife.World.Map)
    name: OnRemoved
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map,TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map,TinyLife.Objects.Person)
  parent: TinyLife.Objects.WallLike
  name: GetFreeActionSpotInfo(Map, Person)
  nameWithType: WallLike.GetFreeActionSpotInfo(Map, Person)
  fullName: TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map, TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map,TinyLife.Objects.Person)
    name: GetFreeActionSpotInfo
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetFreeActionSpotInfo(TinyLife.World.Map,TinyLife.Objects.Person)
    name: GetFreeActionSpotInfo
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: )
- uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  commentId: M:TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
  parent: TinyLife.Objects.WallLike
  name: SetOpening(Map, Opening)
  nameWithType: WallLike.SetOpening(Map, Opening)
  fullName: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map, TinyLife.World.Opening)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
    name: SetOpening
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.SetOpening(TinyLife.World.Map,TinyLife.World.Opening)
    name: SetOpening
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.World.Opening
    name: Opening
  - name: )
- uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  name: NotifyNeighbors(Map)
  nameWithType: WallLike.NotifyNeighbors(Map)
  fullName: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
    name: NotifyNeighbors
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.NotifyNeighbors(TinyLife.World.Map)
    name: NotifyNeighbors
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  commentId: M:TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
  parent: TinyLife.Objects.WallLike
  name: OnNeighborChanged(Map, WallLike)
  nameWithType: WallLike.OnNeighborChanged(Map, WallLike)
  fullName: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map, TinyLife.Objects.WallLike)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
    name: OnNeighborChanged
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.OnNeighborChanged(TinyLife.World.Map,TinyLife.Objects.WallLike)
    name: OnNeighborChanged
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.WallLike
    name: WallLike
  - name: )
- uid: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  commentId: M:TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: GetDepth(Map, Point, Point, int, float)
  nameWithType: WallLike.GetDepth(Map, Point, Point, int, float)
  fullName: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, int, float)
  nameWithType.vb: WallLike.GetDepth(Map, Point, Point, Integer, Single)
  fullName.vb: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map, Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point, Integer, Single)
  name.vb: GetDepth(Map, Point, Point, Integer, Single)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
    name: GetDepth
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetDepth(TinyLife.World.Map,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,System.Int32,System.Single)
    name: GetDepth
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  name: GetIndexForCamera(Point, Point)
  nameWithType: WallLike.GetIndexForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetIndexForCamera
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetIndexForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetIndexForCamera
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  name: GetPositionForCamera(Point, Point)
  nameWithType: WallLike.GetPositionForCamera(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetPositionForCamera
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetPositionForCamera(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetPositionForCamera
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  name: GetCenterBottomPos(Point, Point)
  nameWithType: WallLike.GetCenterBottomPos(Point, Point)
  fullName: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetCenterBottomPos
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetCenterBottomPos(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: GetCenterBottomPos
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  commentId: M:TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: IsVerticalForCamera(bool)
  nameWithType: WallLike.IsVerticalForCamera(bool)
  fullName: TinyLife.Objects.WallLike.IsVerticalForCamera(bool)
  nameWithType.vb: WallLike.IsVerticalForCamera(Boolean)
  fullName.vb: TinyLife.Objects.WallLike.IsVerticalForCamera(Boolean)
  name.vb: IsVerticalForCamera(Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
    name: IsVerticalForCamera
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.IsVerticalForCamera(System.Boolean)
    name: IsVerticalForCamera
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  name: IsVertical(Point, Point)
  nameWithType: WallLike.IsVertical(Point, Point)
  fullName: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point, Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: IsVertical
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.IsVertical(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)
    name: IsVertical
  - name: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData(string, object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(string, object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(string, object)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(String, Object)
  name.vb: SetData(String, Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetData<T>(string)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(string)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(string)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.Wall.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Wall>(Wall)
  nameWithType: Extensions.JsonCopy<Wall>(Wall)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.Wall>(TinyLife.World.Wall)
  nameWithType.vb: Extensions.JsonCopy(Of Wall)(Wall)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.Wall)(TinyLife.World.Wall)
  name.vb: JsonCopy(Of Wall)(Wall)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Wall)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.Wall
    name: Wall
  - name: '>'
  - name: (
  - uid: TinyLife.World.Wall
    name: Wall
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.Wall)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Wall
    name: Wall
  - name: )
  - name: (
  - uid: TinyLife.World.Wall
    name: Wall
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Data
    name: Data
    isExternal: true
  - name: .
  - uid: MLEM.Data.Json
    name: Json
    isExternal: true
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Misc
    name: Misc
    isExternal: true
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: SetData<T>(string, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(string, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TinyLife.World.Wall
  commentId: T:TinyLife.World.Wall
  parent: TinyLife.World
  name: Wall
  nameWithType: Wall
  fullName: TinyLife.World.Wall
- uid: TinyLife.World.Wallpaper[]
  isExternal: true
  name: Wallpaper[]
  nameWithType: Wallpaper[]
  fullName: TinyLife.World.Wallpaper[]
  nameWithType.vb: Wallpaper()
  fullName.vb: TinyLife.World.Wallpaper()
  name.vb: Wallpaper()
  spec.csharp:
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.Wallpaper
    name: Wallpaper
  - name: (
  - name: )
- uid: TinyLife.World.Wall.#ctor*
  commentId: Overload:TinyLife.World.Wall.#ctor
  name: Wall
  nameWithType: Wall.Wall
  fullName: TinyLife.World.Wall.Wall
  nameWithType.vb: Wall.New
  fullName.vb: TinyLife.World.Wall.New
  name.vb: New
- uid: Microsoft.Xna.Framework.Point[]
  isExternal: true
  name: Point[]
  nameWithType: Point[]
  fullName: Microsoft.Xna.Framework.Point[]
  nameWithType.vb: Point()
  fullName.vb: Microsoft.Xna.Framework.Point()
  name.vb: Point()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    isExternal: true
  - name: (
  - name: )
- uid: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  parent: TinyLife.Objects.WallLike
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  nameWithType: WallLike.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  fullName: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, bool, bool)
  nameWithType.vb: WallLike.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, Boolean, Boolean)
  name.vb: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
    name: Draw
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
    name: Draw
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.World.Wall.Draw*
  commentId: Overload:TinyLife.World.Wall.Draw
  name: Draw
  nameWithType: Wall.Draw
  fullName: TinyLife.World.Wall.Draw
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Color?
  nameWithType: Color?
  fullName: Microsoft.Xna.Framework.Color?
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Xna
    name: Xna
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework
    name: Framework
    isExternal: true
  - name: .
  - uid: Microsoft.Xna.Framework.Graphics
    name: Graphics
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  commentId: M:TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  nameWithType: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, bool, bool)
  fullName: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, bool, bool)
  nameWithType.vb: Wall.Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  fullName.vb: TinyLife.World.Wall.Draw(TinyLife.World.Map, Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color?, Boolean, Boolean)
  name.vb: Draw(Map, GameTime, SpriteBatch, Vector2, Color?, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
    name: Draw
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: TinyLife.World.Wall.Draw(TinyLife.World.Map,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Boolean)
    name: Draw
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TinyLife.Options.WallMode
  commentId: F:TinyLife.Options.WallMode
  name: WallMode
  nameWithType: Options.WallMode
  fullName: TinyLife.Options.WallMode
- uid: TinyLife.World.Wall.IsDown*
  commentId: Overload:TinyLife.World.Wall.IsDown
  name: IsDown
  nameWithType: Wall.IsDown
  fullName: TinyLife.World.Wall.IsDown
- uid: TinyLife.World.WallMode
  commentId: T:TinyLife.World.WallMode
  parent: TinyLife.World
  name: WallMode
  nameWithType: WallMode
  fullName: TinyLife.World.WallMode
- uid: TinyLife.World.OpeningType.WallMode
  commentId: F:TinyLife.World.OpeningType.WallMode
  name: WallMode
  nameWithType: OpeningType.WallMode
  fullName: TinyLife.World.OpeningType.WallMode
- uid: TinyLife.World.Wall.GetDisplayMode*
  commentId: Overload:TinyLife.World.Wall.GetDisplayMode
  name: GetDisplayMode
  nameWithType: Wall.GetDisplayMode
  fullName: TinyLife.World.Wall.GetDisplayMode
- uid: TinyLife.Objects.WallLike.GetPrice
  commentId: M:TinyLife.Objects.WallLike.GetPrice
  parent: TinyLife.Objects.WallLike
  name: GetPrice()
  nameWithType: WallLike.GetPrice()
  fullName: TinyLife.Objects.WallLike.GetPrice()
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.GetPrice
    name: GetPrice
  - name: (
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.GetPrice
    name: GetPrice
  - name: (
  - name: )
- uid: TinyLife.World.Wall.GetPrice*
  commentId: Overload:TinyLife.World.Wall.GetPrice
  name: GetPrice
  nameWithType: Wall.GetPrice
  fullName: TinyLife.World.Wall.GetPrice
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  name: Validate(Map)
  nameWithType: WallLike.Validate(Map)
  fullName: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
    name: Validate
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.Validate(TinyLife.World.Map)
    name: Validate
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: TinyLife.World.Wall.Validate*
  commentId: Overload:TinyLife.World.Wall.Validate
  name: Validate
  nameWithType: Wall.Validate
  fullName: TinyLife.World.Wall.Validate
- uid: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  parent: TinyLife.Objects.WallLike
  name: OnAdded(Map)
  nameWithType: WallLike.OnAdded(Map)
  fullName: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
    name: OnAdded
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
  spec.vb:
  - uid: TinyLife.Objects.WallLike.OnAdded(TinyLife.World.Map)
    name: OnAdded
  - name: (
  - uid: TinyLife.World.Map
    name: Map
  - name: )
- uid: TinyLife.World.Wall.OnAdded*
  commentId: Overload:TinyLife.World.Wall.OnAdded
  name: OnAdded
  nameWithType: Wall.OnAdded
  fullName: TinyLife.World.Wall.OnAdded

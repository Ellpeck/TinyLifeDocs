### YamlMime:ManagedReference
items:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  id: Person
  parent: TinyLife.Objects
  children:
  - TinyLife.Objects.Person.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.Person.ActionQueue
  - TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  - TinyLife.Objects.Person.AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  - TinyLife.Objects.Person.Age
  - TinyLife.Objects.Person.AgeGroups
  - TinyLife.Objects.Person.AllActions
  - TinyLife.Objects.Person.AnimateHeldObject
  - TinyLife.Objects.Person.AnimationSpeed
  - TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  - TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  - TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
  - TinyLife.Objects.Person.Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  - TinyLife.Objects.Person.CurrentActions
  - TinyLife.Objects.Person.CurrentAgeDays
  - TinyLife.Objects.Person.CurrentEmote
  - TinyLife.Objects.Person.CurrentOutfit
  - TinyLife.Objects.Person.CurrentOutfitIndex
  - TinyLife.Objects.Person.CurrentPose
  - TinyLife.Objects.Person.CurrentRoomDecorativeRating
  - TinyLife.Objects.Person.CurrentSpeakStyle
  - TinyLife.Objects.Person.DaysLived
  - TinyLife.Objects.Person.DepleteNeed(TinyLife.NeedType,System.Single,System.Single)
  - TinyLife.Objects.Person.Description
  - TinyLife.Objects.Person.Die(TinyLife.Objects.Person.DeathReason,System.Boolean)
  - TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  - TinyLife.Objects.Person.DisplayEmoteAndSpeak(TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  - TinyLife.Objects.Person.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.Person.DrawSize
  - TinyLife.Objects.Person.DrawUi(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2)
  - TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  - TinyLife.Objects.Person.Emotion
  - TinyLife.Objects.Person.EmotionModifiers
  - TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  - TinyLife.Objects.Person.Finalize
  - TinyLife.Objects.Person.FindPathAsync(Microsoft.Xna.Framework.Point,System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point},MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost)
  - TinyLife.Objects.Person.FirstName
  - TinyLife.Objects.Person.FocusCameraOnEvent
  - TinyLife.Objects.Person.FullName
  - TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  - TinyLife.Objects.Person.GetCategories(TinyLife.Objects.Person)
  - TinyLife.Objects.Person.GetCurrentGoals
  - TinyLife.Objects.Person.GetDaysBeforeAging
  - TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.Person.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.Person.GetFreeTalkingSpots(TinyLife.Objects.Person)
  - TinyLife.Objects.Person.GetHeldActionInfo
  - TinyLife.Objects.Person.GetHeldObject``1(System.Boolean)
  - TinyLife.Objects.Person.GetHomeLocation
  - TinyLife.Objects.Person.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  - TinyLife.Objects.Person.GetMemories``1(TinyLife.Goals.MemoryType)
  - TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  - TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  - TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  - TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  - TinyLife.Objects.Person.GetProject(System.String,System.String)
  - TinyLife.Objects.Person.GetProjects(System.String)
  - TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  - TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  - TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person,System.Boolean)
  - TinyLife.Objects.Person.GetSkill(TinyLife.Skills.SkillType,System.Boolean)
  - TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  - TinyLife.Objects.Person.GetSkillPointPercentage(TinyLife.Skills.SkillType)
  - TinyLife.Objects.Person.GetSkillTotalPercentage(TinyLife.Skills.SkillType)
  - TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  - TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType[])
  - TinyLife.Objects.Person.GetWalkSpeed
  - TinyLife.Objects.Person.GoToExitRoad
  - TinyLife.Objects.Person.HasEmotionModifier(TinyLife.Emotions.EmotionModifier)
  - TinyLife.Objects.Person.HasHouseholdMember(System.Guid)
  - TinyLife.Objects.Person.HasHouseholdMember(TinyLife.Objects.Person)
  - TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  - TinyLife.Objects.Person.HasSkillLevel(TinyLife.Skills.SkillType,System.Int32)
  - TinyLife.Objects.Person.HeldObjectRotation
  - TinyLife.Objects.Person.HomeLot
  - TinyLife.Objects.Person.Household
  - TinyLife.Objects.Person.Intersects(MLEM.Misc.RectangleF)
  - TinyLife.Objects.Person.IsCloseForTalking(Microsoft.Xna.Framework.Vector2)
  - TinyLife.Objects.Person.IsCurrentHousehold
  - TinyLife.Objects.Person.IsDead
  - TinyLife.Objects.Person.IsIdMatch(System.Guid)
  - TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  - TinyLife.Objects.Person.IsMinorUpdateNow
  - TinyLife.Objects.Person.IsMoving
  - TinyLife.Objects.Person.IsRegularVisitor
  - TinyLife.Objects.Person.Job
  - TinyLife.Objects.Person.LastBedSleptIn
  - TinyLife.Objects.Person.LastName
  - TinyLife.Objects.Person.LastVisitedLot
  - TinyLife.Objects.Person.LifeGoal
  - TinyLife.Objects.Person.LotEmployment
  - TinyLife.Objects.Person.LotVisitCooldown
  - TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  - TinyLife.Objects.Person.LowerEmotionModifier(TinyLife.Emotions.EmotionModifier,System.Single,System.Single)
  - TinyLife.Objects.Person.MaxRecentActionsAmount
  - TinyLife.Objects.Person.Memories
  - TinyLife.Objects.Person.Money
  - TinyLife.Objects.Person.Needs
  - TinyLife.Objects.Person.OccupiedFurniture
  - TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  - TinyLife.Objects.Person.OnActionInitialized
  - TinyLife.Objects.Person.OnActionsChanged
  - TinyLife.Objects.Person.OnActionsCompleted
  - TinyLife.Objects.Person.OnActionUpdated
  - TinyLife.Objects.Person.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  - TinyLife.Objects.Person.OnEmotionChanged
  - TinyLife.Objects.Person.OnEmotionModifiersChanged
  - TinyLife.Objects.Person.OnGetCurrentGoals
  - TinyLife.Objects.Person.OnGetEfficiencyModifier
  - TinyLife.Objects.Person.OnGetPassiveActionPriority
  - TinyLife.Objects.Person.OnGetWalkSpeed
  - TinyLife.Objects.Person.OnJobChanged
  - TinyLife.Objects.Person.OnLifeGoalChanged
  - TinyLife.Objects.Person.OnNewSkillLearned
  - TinyLife.Objects.Person.OnOutfitChanged
  - TinyLife.Objects.Person.OnRestoreNeed
  - TinyLife.Objects.Person.Outfits
  - TinyLife.Objects.Person.ParentInfo
  - TinyLife.Objects.Person.PersonalityTypes
  - TinyLife.Objects.Person.Portrait
  - TinyLife.Objects.Person.PrepareForPermanentRemoval
  - TinyLife.Objects.Person.Projects
  - TinyLife.Objects.Person.RandomlyGenerated
  - TinyLife.Objects.Person.RecentActions
  - TinyLife.Objects.Person.Relationships
  - TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  - TinyLife.Objects.Person.RemoveMemory``1(TinyLife.Goals.MemoryType)
  - TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  - TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  - TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.Person.Rotation
  - TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  - TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  - TinyLife.Objects.Person.SetHeldObject(TinyLife.Objects.Furniture,System.Boolean)
  - TinyLife.Objects.Person.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  - TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType,System.Int32)
  - TinyLife.Objects.Person.SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  - TinyLife.Objects.Person.Skills
  - TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  - TinyLife.Objects.Person.SpeakSounds
  - TinyLife.Objects.Person.SpeakStyles
  - TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  - TinyLife.Objects.Person.StopEmoting
  - TinyLife.Objects.Person.StopSpeaking
  - TinyLife.Objects.Person.Tint
  - TinyLife.Objects.Person.ToCreatedByString
  - TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Objects.Person.UpdatePortraitIfDirty
  - TinyLife.Objects.Person.Validate
  - TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  - TinyLife.Objects.Person.VisuallyOccupiedSpot
  - TinyLife.Objects.Person.VisualPosition
  - TinyLife.Objects.Person.VoicePitch
  - TinyLife.Objects.Person.VoiceStyle
  - TinyLife.Objects.Person.VoiceStyles
  - TinyLife.Objects.Person.WornLayers
  langs:
  - csharp
  - vb
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
  type: Class
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Person
    path: ../TinyLife/Objects/Person.cs
    startLine: 46
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA person is a <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref> placed on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref> that represents a person.\nIt stores its actions, clothes, data and movement.\n"
  example: []
  syntax:
    content: 'public class Person : MapObject, IGenericDataHolder, IUpdatingObject'
    content.vb: >-
      Public Class Person
          Inherits MapObject
          Implements IGenericDataHolder, IUpdatingObject
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Objects.MapObject
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.Objects.IUpdatingObject
  inheritedMembers:
  - TinyLife.Objects.MapObject.PersonRotationOrder
  - TinyLife.Objects.MapObject.OnCreated
  - TinyLife.Objects.MapObject.OnValidated
  - TinyLife.Objects.MapObject.OnEventsAttachable
  - TinyLife.Objects.MapObject.OnDraw
  - TinyLife.Objects.MapObject.OnUpdate
  - TinyLife.Objects.MapObject.OnGetHoverInfo
  - TinyLife.Objects.MapObject.Position
  - TinyLife.Objects.MapObject.Visibility
  - TinyLife.Objects.MapObject.Id
  - TinyLife.Objects.MapObject.Map
  - TinyLife.Objects.MapObject.CurrentLot
  - TinyLife.Objects.MapObject.CurrentRoom
  - TinyLife.Objects.MapObject.IsInWorld
  - TinyLife.Objects.MapObject.OnAdded
  - TinyLife.Objects.MapObject.OnRemoved
  - TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  - TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  - TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  - TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  - TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  - TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  - TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  - TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  - TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  - TinyLife.Objects.MapObject.GetModCategory(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Objects.Person.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Objects.Person.MaxRecentActionsAmount
  commentId: F:TinyLife.Objects.Person.MaxRecentActionsAmount
  id: MaxRecentActionsAmount
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: MaxRecentActionsAmount
  nameWithType: Person.MaxRecentActionsAmount
  fullName: TinyLife.Objects.Person.MaxRecentActionsAmount
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxRecentActionsAmount
    path: ../TinyLife/Objects/Person.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe maximum amount of recent actions that is stored in <xref href=\"TinyLife.Objects.Person.RecentActions\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public const int MaxRecentActionsAmount = 200
    return:
      type: System.Int32
    content.vb: Public Const MaxRecentActionsAmount As Integer = 200
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: TinyLife.Objects.Person.AgeGroups
  commentId: F:TinyLife.Objects.Person.AgeGroups
  id: AgeGroups
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AgeGroups
  nameWithType: Person.AgeGroups
  fullName: TinyLife.Objects.Person.AgeGroups
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AgeGroups
    path: ../TinyLife/Objects/Person.cs
    startLine: 57
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of all <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref> enum values that are explicitly defined.\n"
  example: []
  syntax:
    content: public static readonly AgeGroup[] AgeGroups
    return:
      type: TinyLife.Objects.AgeGroup[]
    content.vb: Public Shared ReadOnly AgeGroups As AgeGroup()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Person.SpeakSounds
  commentId: F:TinyLife.Objects.Person.SpeakSounds
  id: SpeakSounds
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SpeakSounds
  nameWithType: Person.SpeakSounds
  fullName: TinyLife.Objects.Person.SpeakSounds
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakSounds
    path: ../TinyLife/Objects/Person.cs
    startLine: 61
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAll of the <xref href=\"Microsoft.Xna.Framework.Audio.SoundEffect\" data-throw-if-not-resolved=\"false\"></xref> instances that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can use for speaking, which are returned in <xref href=\"TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle%2cTinyLife.Objects.SpeakStyle%2cSystem.Collections.Generic.List%7bMicrosoft.Xna.Framework.Audio.SoundEffect%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>. Mods can simply add to this collection to add new speak sounds.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<(VoiceStyle, SpeakStyle), List<SoundEffect>> SpeakSounds
    return:
      type: System.Collections.Generic.Dictionary{System.ValueTuple{TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle},System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}}
    content.vb: Public Shared ReadOnly SpeakSounds As Dictionary(Of(VoiceStyle, SpeakStyle)(Of VoiceStyle , SpeakStyle), List(Of SoundEffect))
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Person.SpeakStyles
  commentId: F:TinyLife.Objects.Person.SpeakStyles
  id: SpeakStyles
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SpeakStyles
  nameWithType: Person.SpeakStyles
  fullName: TinyLife.Objects.Person.SpeakStyles
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SpeakStyles
    path: ../TinyLife/Objects/Person.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static readonly SpeakStyle[] SpeakStyles
    return:
      type: TinyLife.Objects.SpeakStyle[]
    content.vb: Public Shared ReadOnly SpeakStyles As SpeakStyle()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Person.VoiceStyles
  commentId: F:TinyLife.Objects.Person.VoiceStyles
  id: VoiceStyles
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VoiceStyles
  nameWithType: Person.VoiceStyles
  fullName: TinyLife.Objects.Person.VoiceStyles
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VoiceStyles
    path: ../TinyLife/Objects/Person.cs
    startLine: 63
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public static readonly VoiceStyle[] VoiceStyles
    return:
      type: TinyLife.Objects.VoiceStyle[]
    content.vb: Public Shared ReadOnly VoiceStyles As VoiceStyle()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Objects.Person.ParentInfo
  commentId: P:TinyLife.Objects.Person.ParentInfo
  id: ParentInfo
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ParentInfo
  nameWithType: Person.ParentInfo
  fullName: TinyLife.Objects.Person.ParentInfo
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ParentInfo
    path: ../TinyLife/Objects/Person.cs
    startLine: 74
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> for this object in its current context.\nBy default, this method returns <xref uid=\"langword_csharp_default\" name=\"default\" href=\"\"></xref>, and <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> returns a <xref href=\"TinyLife.Objects.MapObject.ParentInfo\" data-throw-if-not-resolved=\"false\"></xref> based on its current attachments.\n"
  example: []
  syntax:
    content: public override ParentInfo ParentInfo { get; }
    parameters: []
    return:
      type: TinyLife.Objects.ParentInfo
    content.vb: Public Overrides ReadOnly Property ParentInfo As ParentInfo
  overridden: TinyLife.Objects.MapObject.ParentInfo
  overload: TinyLife.Objects.Person.ParentInfo*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentActions
  commentId: F:TinyLife.Objects.Person.CurrentActions
  id: CurrentActions
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentActions
  nameWithType: Person.CurrentActions
  fullName: TinyLife.Objects.Person.CurrentActions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentActions
    path: ../TinyLife/Objects/Person.cs
    startLine: 81
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe actions that are currently being executed by this person.\nUse <xref href=\"TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cTinyLife.Actions.ActionVariety%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action%2cTinyLife.Actions.Action%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to modify this list.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Action> CurrentActions
    return:
      type: System.Collections.Generic.List{TinyLife.Actions.Action}
    content.vb: >-
      <DataMember>

      Public ReadOnly CurrentActions As List(Of Action)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  id: ActionQueue
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ActionQueue
  nameWithType: Person.ActionQueue
  fullName: TinyLife.Objects.Person.ActionQueue
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ActionQueue
    path: ../TinyLife/Objects/Person.cs
    startLine: 88
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe actions that are currently enqueued to be executed by this person.\nEach entry is the action that is enqueued along with a boolean value that represents whether this action should be force-started (true) or whether it should do the necessary checks (false).\nUse <xref href=\"TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType%2cTinyLife.Actions.ActionInfo%2cSystem.Boolean%2cTinyLife.Actions.ActionVariety%2cSystem.Boolean%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action%2cTinyLife.Actions.Action%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to modify this list.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<(Action, bool)> ActionQueue
    return:
      type: System.Collections.Generic.List{System.ValueTuple{TinyLife.Actions.Action,System.Boolean}}
    content.vb: >-
      <DataMember>

      Public ReadOnly ActionQueue As List(Of(Action, Boolean)(Of Action , Boolean))
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.AllActions
  commentId: P:TinyLife.Objects.Person.AllActions
  id: AllActions
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AllActions
  nameWithType: Person.AllActions
  fullName: TinyLife.Objects.Person.AllActions
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AllActions
    path: ../TinyLife/Objects/Person.cs
    startLine: 92
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA concatenation of <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> that represents all actions that the current person has knowledge about\n"
  example: []
  syntax:
    content: public IEnumerable<Action> AllActions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
    content.vb: Public ReadOnly Property AllActions As IEnumerable(Of Action)
  overload: TinyLife.Objects.Person.AllActions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Needs
  commentId: F:TinyLife.Objects.Person.Needs
  id: Needs
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Needs
  nameWithType: Person.Needs
  fullName: TinyLife.Objects.Person.Needs
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Needs
    path: ../TinyLife/Objects/Person.cs
    startLine: 98
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> data. When this person is instantiated, all of their needs are gathered from <xref href=\"TinyLife.NeedType.Types\" data-throw-if-not-resolved=\"false\"></xref> automatically.\nTo access this collection efficiently, use <xref href=\"TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Dictionary<string, Need> Needs
    return:
      type: System.Collections.Generic.Dictionary{System.String,TinyLife.Need}
    content.vb: >-
      <DataMember>

      Public ReadOnly Needs As Dictionary(Of String, Need)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Skills
  commentId: F:TinyLife.Objects.Person.Skills
  id: Skills
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Skills
  nameWithType: Person.Skills
  fullName: TinyLife.Objects.Person.Skills
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Skills
    path: ../TinyLife/Objects/Person.cs
    startLine: 104
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> data.\nTo access this collection efficiently, use <xref href=\"TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly Dictionary<string, Skill> Skills
    return:
      type: System.Collections.Generic.Dictionary{System.String,TinyLife.Skills.Skill}
    content.vb: >-
      <DataMember>

      Public ReadOnly Skills As Dictionary(Of String, Skill)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Relationships
  commentId: F:TinyLife.Objects.Person.Relationships
  id: Relationships
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Relationships
  nameWithType: Person.Relationships
  fullName: TinyLife.Objects.Person.Relationships
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Relationships
    path: ../TinyLife/Objects/Person.cs
    startLine: 110
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref> data.\nTo access this collection efficiently, use <xref href=\"TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Relationship> Relationships
    return:
      type: System.Collections.Generic.List{TinyLife.Relationship}
    content.vb: >-
      <DataMember>

      Public ReadOnly Relationships As List(Of Relationship)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Outfits
  commentId: F:TinyLife.Objects.Person.Outfits
  id: Outfits
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Outfits
  nameWithType: Person.Outfits
  fullName: TinyLife.Objects.Person.Outfits
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Outfits
    path: ../TinyLife/Objects/Person.cs
    startLine: 116
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA list of the outfits that this person has, gathered by the <xref href=\"TinyLife.Uis.CharacterCreator\" data-throw-if-not-resolved=\"false\"></xref>.\nEach outfit is a dictionary that matches a <xref href=\"TinyLife.Objects.WornClothes\" data-throw-if-not-resolved=\"false\"></xref> item to its layer.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      [JsonConverter(typeof(Person.OutfitsConverter))]

      public readonly List<Outfit> Outfits
    return:
      type: System.Collections.Generic.List{TinyLife.Objects.Outfit}
    content.vb: >-
      <DataMember>

      <JsonConverter(GetType(Person.OutfitsConverter))>

      Public ReadOnly Outfits As List(Of Outfit)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.PersonalityTypes
  commentId: F:TinyLife.Objects.Person.PersonalityTypes
  id: PersonalityTypes
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: PersonalityTypes
  nameWithType: Person.PersonalityTypes
  fullName: TinyLife.Objects.Person.PersonalityTypes
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PersonalityTypes
    path: ../TinyLife/Objects/Person.cs
    startLine: 122
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe names of the <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref> values that this person has.\nTo access this collection efficiently, use <xref href=\"TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly HashSet<PersonalityType> PersonalityTypes
    return:
      type: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
    content.vb: >-
      <DataMember>

      Public ReadOnly PersonalityTypes As HashSet(Of PersonalityType)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.EmotionModifiers
  commentId: F:TinyLife.Objects.Person.EmotionModifiers
  id: EmotionModifiers
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: EmotionModifiers
  nameWithType: Person.EmotionModifiers
  fullName: TinyLife.Objects.Person.EmotionModifiers
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EmotionModifiers
    path: ../TinyLife/Objects/Person.cs
    startLine: 128
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Emotions.EmotionModifier.Instance\" data-throw-if-not-resolved=\"false\"></xref> objects that are currently applied to this person.\nTo access this collection efficiently, use <xref href=\"TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier%2cSystem.Int32%2cSystem.TimeSpan%2cTinyLife.Emotions.IEmotionSource%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<EmotionModifier.Instance> EmotionModifiers
    return:
      type: System.Collections.Generic.List{TinyLife.Emotions.EmotionModifier.Instance}
    content.vb: >-
      <DataMember>

      Public ReadOnly EmotionModifiers As List(Of EmotionModifier.Instance)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Projects
  commentId: F:TinyLife.Objects.Person.Projects
  id: Projects
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Projects
  nameWithType: Person.Projects
  fullName: TinyLife.Objects.Person.Projects
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Projects
    path: ../TinyLife/Objects/Person.cs
    startLine: 134
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Goals.Project\" data-throw-if-not-resolved=\"false\"></xref> instances that this person currently has.\nUse <xref href=\"TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.GetProject(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.GetProjects(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Goals.Project.Remove\" data-throw-if-not-resolved=\"false\"></xref> to modify this collection effectively.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Project> Projects
    return:
      type: System.Collections.Generic.List{TinyLife.Goals.Project}
    content.vb: >-
      <DataMember>

      Public ReadOnly Projects As List(Of Project)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Portrait
  commentId: F:TinyLife.Objects.Person.Portrait
  id: Portrait
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Portrait
  nameWithType: Person.Portrait
  fullName: TinyLife.Objects.Person.Portrait
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Portrait
    path: ../TinyLife/Objects/Person.cs
    startLine: 139
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"Microsoft.Xna.Framework.Graphics.RenderTarget2D\" data-throw-if-not-resolved=\"false\"></xref> that this person&apos;s portrait is rendered onto.\nThis will automatically be updated and can be used for rendering of any kind.\n"
  example: []
  syntax:
    content: public readonly RenderTarget2D Portrait
    return:
      type: Microsoft.Xna.Framework.Graphics.RenderTarget2D
    content.vb: Public ReadOnly Portrait As RenderTarget2D
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.RecentActions
  commentId: F:TinyLife.Objects.Person.RecentActions
  id: RecentActions
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RecentActions
  nameWithType: Person.RecentActions
  fullName: TinyLife.Objects.Person.RecentActions
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RecentActions
    path: ../TinyLife/Objects/Person.cs
    startLine: 146
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> of actions that this person has done recently, in order that they have been done in, with the most recent action being at the end of the list.\nNote that the size of this list never exceeds <xref href=\"TinyLife.Objects.Person.MaxRecentActionsAmount\" data-throw-if-not-resolved=\"false\"></xref>.\nCompleted actions are added to this queue automatically.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<ActionType> RecentActions
    return:
      type: System.Collections.Generic.List{TinyLife.Actions.ActionType}
    content.vb: >-
      <DataMember>

      Public ReadOnly RecentActions As List(Of ActionType)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.OccupiedFurniture
  commentId: F:TinyLife.Objects.Person.OccupiedFurniture
  id: OccupiedFurniture
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OccupiedFurniture
  nameWithType: Person.OccupiedFurniture
  fullName: TinyLife.Objects.Person.OccupiedFurniture
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OccupiedFurniture
    path: ../TinyLife/Objects/Person.cs
    startLine: 152
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe set of <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and their occresponding <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> that this person is currently occupying in some capacity.\nNote that this value is not saved to disk, and is cleared every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\nTo edit this value, use <xref href=\"TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly List<(Furniture Furniture, ActionSpot Spot)> OccupiedFurniture
    return:
      type: System.Collections.Generic.List{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}}
    content.vb: Public ReadOnly OccupiedFurniture As List(Of(Furniture As Furniture, Spot As ActionSpot)(Of Furniture , ActionSpot))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Memories
  commentId: F:TinyLife.Objects.Person.Memories
  id: Memories
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Memories
  nameWithType: Person.Memories
  fullName: TinyLife.Objects.Person.Memories
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Memories
    path: ../TinyLife/Objects/Person.cs
    startLine: 158
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA set of <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instances that this person currently has or tracks.\nTo edit and query this collection easily, <xref href=\"TinyLife.Objects.Person.AddMemory%60%601(TinyLife.Goals.MemoryType%2cTinyLife.Actions.ActionInfo%2cSystem.Nullable%7bSystem.TimeSpan%7d)\" data-throw-if-not-resolved=\"false\"></xref>/>, <xref href=\"TinyLife.Objects.Person.GetMemories%60%601(TinyLife.Goals.MemoryType)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)\" data-throw-if-not-resolved=\"false\"></xref> can be used.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly List<Memory> Memories
    return:
      type: System.Collections.Generic.List{TinyLife.Goals.Memory}
    content.vb: >-
      <DataMember>

      Public ReadOnly Memories As List(Of Memory)
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.FirstName
  commentId: F:TinyLife.Objects.Person.FirstName
  id: FirstName
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: Person.FirstName
  fullName: TinyLife.Objects.Person.FirstName
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FirstName
    path: ../TinyLife/Objects/Person.cs
    startLine: 164
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s first name\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string FirstName
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public FirstName As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.LastName
  commentId: F:TinyLife.Objects.Person.LastName
  id: LastName
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: Person.LastName
  fullName: TinyLife.Objects.Person.LastName
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LastName
    path: ../TinyLife/Objects/Person.cs
    startLine: 169
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s last name\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string LastName
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public LastName As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.FullName
  commentId: P:TinyLife.Objects.Person.FullName
  id: FullName
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: Person.FullName
  fullName: TinyLife.Objects.Person.FullName
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FullName
    path: ../TinyLife/Objects/Person.cs
    startLine: 173
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s full name, which is a concatenation of their <xref href=\"TinyLife.Objects.Person.FirstName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.LastName\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string FullName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FullName As String
  overload: TinyLife.Objects.Person.FullName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.VoiceStyle
  commentId: F:TinyLife.Objects.Person.VoiceStyle
  id: VoiceStyle
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VoiceStyle
  nameWithType: Person.VoiceStyle
  fullName: TinyLife.Objects.Person.VoiceStyle
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VoiceStyle
    path: ../TinyLife/Objects/Person.cs
    startLine: 179
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe style of this person&apos;s voice, used for speaking (<xref href=\"TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>).\nNote that, if this person is a <xref href=\"TinyLife.Objects.AgeGroup.Child\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"TinyLife.Objects.VoiceStyle.Child\" data-throw-if-not-resolved=\"false\"></xref> will be used regardless of this field&apos;s value.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public VoiceStyle VoiceStyle
    return:
      type: TinyLife.Objects.VoiceStyle
    content.vb: >-
      <DataMember>

      Public VoiceStyle As VoiceStyle
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.VoicePitch
  commentId: F:TinyLife.Objects.Person.VoicePitch
  id: VoicePitch
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VoicePitch
  nameWithType: Person.VoicePitch
  fullName: TinyLife.Objects.Person.VoicePitch
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VoicePitch
    path: ../TinyLife/Objects/Person.cs
    startLine: 185
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe pitch of this person&apos;s voice, used for speaking (<xref href=\"TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>).\nThe voice pitch should be between -1 and 1, but the character creator only sets it between -0.5 and 0.5.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float VoicePitch
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public VoicePitch As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Rotation
  commentId: P:TinyLife.Objects.Person.Rotation
  id: Rotation
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Rotation
  nameWithType: Person.Rotation
  fullName: TinyLife.Objects.Person.Rotation
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Rotation
    path: ../TinyLife/Objects/Person.cs
    startLine: 189
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"MLEM.Misc.Direction2\" data-throw-if-not-resolved=\"false\"></xref> that this person is currently facing in\n"
  example: []
  syntax:
    content: public Direction2 Rotation { get; set; }
    parameters: []
    return:
      type: MLEM.Misc.Direction2
    content.vb: Public Property Rotation As Direction2
  overload: TinyLife.Objects.Person.Rotation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Household
  commentId: P:TinyLife.Objects.Person.Household
  id: Household
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Household
  nameWithType: Person.Household
  fullName: TinyLife.Objects.Person.Household
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Household
    path: ../TinyLife/Objects/Person.cs
    startLine: 200
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Person.Household\" data-throw-if-not-resolved=\"false\"></xref> that this person is a part of\n"
  example: []
  syntax:
    content: public Household Household { get; }
    parameters: []
    return:
      type: TinyLife.World.Household
    content.vb: Public ReadOnly Property Household As Household
  overload: TinyLife.Objects.Person.Household*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentEmote
  commentId: P:TinyLife.Objects.Person.CurrentEmote
  id: CurrentEmote
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentEmote
  nameWithType: Person.CurrentEmote
  fullName: TinyLife.Objects.Person.CurrentEmote
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentEmote
    path: ../TinyLife/Objects/Person.cs
    startLine: 205
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Actions.Emote\" data-throw-if-not-resolved=\"false\"></xref> that this person is currently displaying.\nUse <xref href=\"TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> to modify this property.\n"
  example: []
  syntax:
    content: public Emote CurrentEmote { get; }
    parameters: []
    return:
      type: TinyLife.Actions.Emote
    content.vb: Public ReadOnly Property CurrentEmote As Emote
  overload: TinyLife.Objects.Person.CurrentEmote*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentSpeakStyle
  commentId: P:TinyLife.Objects.Person.CurrentSpeakStyle
  id: CurrentSpeakStyle
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentSpeakStyle
  nameWithType: Person.CurrentSpeakStyle
  fullName: TinyLife.Objects.Person.CurrentSpeakStyle
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentSpeakStyle
    path: ../TinyLife/Objects/Person.cs
    startLine: 210
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe current speak styles that speaking sounds are chosen from.\nUse <xref href=\"TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> to modify this property.\n"
  example: []
  syntax:
    content: public SpeakStyle? CurrentSpeakStyle { get; }
    parameters: []
    return:
      type: System.Nullable{TinyLife.Objects.SpeakStyle}
    content.vb: Public ReadOnly Property CurrentSpeakStyle As SpeakStyle?
  overload: TinyLife.Objects.Person.CurrentSpeakStyle*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.DrawSize
  commentId: P:TinyLife.Objects.Person.DrawSize
  id: DrawSize
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DrawSize
  nameWithType: Person.DrawSize
  fullName: TinyLife.Objects.Person.DrawSize
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawSize
    path: ../TinyLife/Objects/Person.cs
    startLine: 215
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe size, in draw space pixels, that this person&apos;s texture takes up.\nThis is gathered from the <xref href=\"TinyLife.Objects.ClothesLayer.Body\" data-throw-if-not-resolved=\"false\"></xref> layer of its texture data.\n"
  example: []
  syntax:
    content: public Point DrawSize { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property DrawSize As Point
  overload: TinyLife.Objects.Person.DrawSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.LastVisitedLot
  commentId: P:TinyLife.Objects.Person.LastVisitedLot
  id: LastVisitedLot
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LastVisitedLot
  nameWithType: Person.LastVisitedLot
  fullName: TinyLife.Objects.Person.LastVisitedLot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LastVisitedLot
    path: ../TinyLife/Objects/Person.cs
    startLine: 221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that was last visited by this person.\nA visited lot is a lot that was actively moved to using <xref href=\"TinyLife.Actions.VisitLotAction\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Actions.GoHomeAction\" data-throw-if-not-resolved=\"false\"></xref> or if the person is currently occupying this lot.\nTo modify this value, use <xref href=\"TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Lot LastVisitedLot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property LastVisitedLot As Lot
  overload: TinyLife.Objects.Person.LastVisitedLot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.LotVisitCooldown
  commentId: P:TinyLife.Objects.Person.LotVisitCooldown
  id: LotVisitCooldown
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LotVisitCooldown
  nameWithType: Person.LotVisitCooldown
  fullName: TinyLife.Objects.Person.LotVisitCooldown
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotVisitCooldown
    path: ../TinyLife/Objects/Person.cs
    startLine: 226
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe amount of time that has to pass before this person can visit another lot.\nIf <xref href=\"TinyLife.Objects.Person.LastVisitedLot\" data-throw-if-not-resolved=\"false\"></xref> is set using <xref href=\"TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref>, this value will be set to 2 hours or 4 hours of in-game time, based on whether the visited lot is their home lot or not.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public TimeSpan LotVisitCooldown { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public ReadOnly Property LotVisitCooldown As TimeSpan
  overload: TinyLife.Objects.Person.LotVisitCooldown*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Job
  commentId: P:TinyLife.Objects.Person.Job
  id: Job
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Job
  nameWithType: Person.Job
  fullName: TinyLife.Objects.Person.Job
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Job
    path: ../TinyLife/Objects/Person.cs
    startLine: 232
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.Person.Job\" data-throw-if-not-resolved=\"false\"></xref> that this person currently has.\nTo edit this value, use <xref href=\"TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType%2cSystem.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Job Job { get; }
    parameters: []
    return:
      type: TinyLife.Goals.Job
    content.vb: >-
      <DataMember>

      Public ReadOnly Property Job As Job
  overload: TinyLife.Objects.Person.Job*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Emotion
  commentId: P:TinyLife.Objects.Person.Emotion
  id: Emotion
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Emotion
  nameWithType: Person.Emotion
  fullName: TinyLife.Objects.Person.Emotion
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Emotion
    path: ../TinyLife/Objects/Person.cs
    startLine: 237
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Emotions.EmotionType\" data-throw-if-not-resolved=\"false\"></xref> that this person currently has, resulting from their current <xref href=\"TinyLife.Objects.Person.EmotionModifiers\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public EmotionType Emotion { get; }
    parameters: []
    return:
      type: TinyLife.Emotions.EmotionType
    content.vb: Public ReadOnly Property Emotion As EmotionType
  overload: TinyLife.Objects.Person.Emotion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentRoomDecorativeRating
  commentId: P:TinyLife.Objects.Person.CurrentRoomDecorativeRating
  id: CurrentRoomDecorativeRating
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentRoomDecorativeRating
  nameWithType: Person.CurrentRoomDecorativeRating
  fullName: TinyLife.Objects.Person.CurrentRoomDecorativeRating
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentRoomDecorativeRating
    path: ../TinyLife/Objects/Person.cs
    startLine: 247
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe decorative rating of the <xref href=\"TinyLife.Objects.MapObject.CurrentRoom\" data-throw-if-not-resolved=\"false\"></xref>, resulting from the <xref href=\"TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating\" data-throw-if-not-resolved=\"false\"></xref> of the contained furniture\n"
  example: []
  syntax:
    content: public int CurrentRoomDecorativeRating { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CurrentRoomDecorativeRating As Integer
  overload: TinyLife.Objects.Person.CurrentRoomDecorativeRating*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.LastBedSleptIn
  commentId: F:TinyLife.Objects.Person.LastBedSleptIn
  id: LastBedSleptIn
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LastBedSleptIn
  nameWithType: Person.LastBedSleptIn
  fullName: TinyLife.Objects.Person.LastBedSleptIn
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LastBedSleptIn
    path: ../TinyLife/Objects/Person.cs
    startLine: 252
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe id of the last bed <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that this person has slept in, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> if no such bed exists\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public Guid LastBedSleptIn
    return:
      type: System.Guid
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public LastBedSleptIn As Guid
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.IsMoving
  commentId: P:TinyLife.Objects.Person.IsMoving
  id: IsMoving
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsMoving
  nameWithType: Person.IsMoving
  fullName: TinyLife.Objects.Person.IsMoving
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsMoving
    path: ../TinyLife/Objects/Person.cs
    startLine: 257
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis property stores whether this person is currently moving.\nA person is considered moving when their <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> has changed since the last update frame.\n"
  example: []
  syntax:
    content: public bool IsMoving { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMoving As Boolean
  overload: TinyLife.Objects.Person.IsMoving*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  id: LotEmployment
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LotEmployment
  nameWithType: Person.LotEmployment
  fullName: TinyLife.Objects.Person.LotEmployment
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotEmployment
    path: ../TinyLife/Objects/Person.cs
    startLine: 263
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.World.LotEmployment.Instance\" data-throw-if-not-resolved=\"false\"></xref> that this person works in.\nIf this value is non-null, it implicitly means that this person does not have a <xref href=\"TinyLife.Objects.Person.HomeLot\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.Household\" data-throw-if-not-resolved=\"false\"></xref> that they are a part of.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public LotEmployment.Instance LotEmployment
    return:
      type: TinyLife.World.LotEmployment.Instance
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public LotEmployment As LotEmployment.Instance
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.CurrentOutfitIndex
  commentId: P:TinyLife.Objects.Person.CurrentOutfitIndex
  id: CurrentOutfitIndex
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentOutfitIndex
  nameWithType: Person.CurrentOutfitIndex
  fullName: TinyLife.Objects.Person.CurrentOutfitIndex
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentOutfitIndex
    path: ../TinyLife/Objects/Person.cs
    startLine: 268
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe index of the outfit, in the <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref> list, that this person is currently wearing.\nTo change this value, use <xref href=\"TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int CurrentOutfitIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Property CurrentOutfitIndex As Integer
  overload: TinyLife.Objects.Person.CurrentOutfitIndex*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentOutfit
  commentId: P:TinyLife.Objects.Person.CurrentOutfit
  id: CurrentOutfit
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentOutfit
  nameWithType: Person.CurrentOutfit
  fullName: TinyLife.Objects.Person.CurrentOutfit
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentOutfit
    path: ../TinyLife/Objects/Person.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the outfit that this person is currently wearing, which is the <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref> entry at the <xref href=\"TinyLife.Objects.Person.CurrentOutfitIndex\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Outfit CurrentOutfit { get; }
    parameters: []
    return:
      type: TinyLife.Objects.Outfit
    content.vb: Public ReadOnly Property CurrentOutfit As Outfit
  overload: TinyLife.Objects.Person.CurrentOutfit*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.IsCurrentHousehold
  commentId: P:TinyLife.Objects.Person.IsCurrentHousehold
  id: IsCurrentHousehold
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsCurrentHousehold
  nameWithType: Person.IsCurrentHousehold
  fullName: TinyLife.Objects.Person.IsCurrentHousehold
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCurrentHousehold
    path: ../TinyLife/Objects/Person.cs
    startLine: 275
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that indicates whether or not this household is the same as <xref href=\"TinyLife.GameImpl.CurrentHousehold\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool IsCurrentHousehold { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCurrentHousehold As Boolean
  overload: TinyLife.Objects.Person.IsCurrentHousehold*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.HomeLot
  commentId: P:TinyLife.Objects.Person.HomeLot
  id: HomeLot
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HomeLot
  nameWithType: Person.HomeLot
  fullName: TinyLife.Objects.Person.HomeLot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HomeLot
    path: ../TinyLife/Objects/Person.cs
    startLine: 277
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.World.Household.Lot\" data-throw-if-not-resolved=\"false\"></xref> that this household lives on.\nFor exported households, this might be null.\n"
  example: []
  syntax:
    content: public Lot HomeLot { get; }
    parameters: []
    return:
      type: TinyLife.World.Lot
    content.vb: Public ReadOnly Property HomeLot As Lot
  overload: TinyLife.Objects.Person.HomeLot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Money
  commentId: P:TinyLife.Objects.Person.Money
  id: Money
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: Person.Money
  fullName: TinyLife.Objects.Person.Money
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Money
    path: ../TinyLife/Objects/Person.cs
    startLine: 279
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe money that this household has, rounded by two digits after the decimal point\n"
  example: []
  syntax:
    content: public float Money { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Money As Single
  overload: TinyLife.Objects.Person.Money*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.IsRegularVisitor
  commentId: P:TinyLife.Objects.Person.IsRegularVisitor
  id: IsRegularVisitor
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsRegularVisitor
  nameWithType: Person.IsRegularVisitor
  fullName: TinyLife.Objects.Person.IsRegularVisitor
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsRegularVisitor
    path: ../TinyLife/Objects/Person.cs
    startLine: 290
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that computes whether this person is a regular visitor.\nA person is considered a regular visitor if they have no <xref href=\"TinyLife.Objects.Person.Household\" data-throw-if-not-resolved=\"false\"></xref>, but also have no <xref href=\"TinyLife.Objects.Person.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref>, and are not dead (<xref href=\"TinyLife.Objects.Person.IsDead\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: public bool IsRegularVisitor { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRegularVisitor As Boolean
  overload: TinyLife.Objects.Person.IsRegularVisitor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.Age
  commentId: P:TinyLife.Objects.Person.Age
  id: Age
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Age
  nameWithType: Person.Age
  fullName: TinyLife.Objects.Person.Age
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Age
    path: ../TinyLife/Objects/Person.cs
    startLine: 294
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref> that this person currently has.\n"
  example: []
  syntax:
    content: public AgeGroup Age { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public Property Age As AgeGroup
  overload: TinyLife.Objects.Person.Age*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.LifeGoal
  commentId: P:TinyLife.Objects.Person.LifeGoal
  id: LifeGoal
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LifeGoal
  nameWithType: Person.LifeGoal
  fullName: TinyLife.Objects.Person.LifeGoal
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LifeGoal
    path: ../TinyLife/Objects/Person.cs
    startLine: 307
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s current <xref href=\"TinyLife.Goals.LifeGoal.Instance\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public LifeGoal.Instance LifeGoal { get; set; }
    parameters: []
    return:
      type: TinyLife.Goals.LifeGoal.Instance
    content.vb: Public Property LifeGoal As LifeGoal.Instance
  overload: TinyLife.Objects.Person.LifeGoal*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Description
  commentId: F:TinyLife.Objects.Person.Description
  id: Description
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Person.Description
  fullName: TinyLife.Objects.Person.Description
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Description
    path: ../TinyLife/Objects/Person.cs
    startLine: 320
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s description\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Description
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Description As String
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.IsDead
  commentId: P:TinyLife.Objects.Person.IsDead
  id: IsDead
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsDead
  nameWithType: Person.IsDead
  fullName: TinyLife.Objects.Person.IsDead
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsDead
    path: ../TinyLife/Objects/Person.cs
    startLine: 325
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that computes whether this person is dead.\nNote that a person has to be on a <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>&apos;s <xref href=\"TinyLife.World.Map.DeadPeople\" data-throw-if-not-resolved=\"false\"></xref> list for this property to function correctly.\n"
  example: []
  syntax:
    content: public bool IsDead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDead As Boolean
  overload: TinyLife.Objects.Person.IsDead*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentAgeDays
  commentId: F:TinyLife.Objects.Person.CurrentAgeDays
  id: CurrentAgeDays
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentAgeDays
  nameWithType: Person.CurrentAgeDays
  fullName: TinyLife.Objects.Person.CurrentAgeDays
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentAgeDays
    path: ../TinyLife/Objects/Person.cs
    startLine: 331
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe amount of in-game days that this person has had their current <xref href=\"TinyLife.Objects.Person.Age\" data-throw-if-not-resolved=\"false\"></xref> for.\nSee <xref href=\"TinyLife.Objects.Person.DaysLived\" data-throw-if-not-resolved=\"false\"></xref> for a full amount of days lived.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int CurrentAgeDays
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public CurrentAgeDays As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.DaysLived
  commentId: F:TinyLife.Objects.Person.DaysLived
  id: DaysLived
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DaysLived
  nameWithType: Person.DaysLived
  fullName: TinyLife.Objects.Person.DaysLived
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DaysLived
    path: ../TinyLife/Objects/Person.cs
    startLine: 337
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe amount of in-game days that this person has lived for in total.\nSee <xref href=\"TinyLife.Objects.Person.CurrentAgeDays\" data-throw-if-not-resolved=\"false\"></xref> for the amount of days with their current <xref href=\"TinyLife.Objects.Person.Age\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public int DaysLived
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public DaysLived As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.RandomlyGenerated
  commentId: P:TinyLife.Objects.Person.RandomlyGenerated
  id: RandomlyGenerated
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RandomlyGenerated
  nameWithType: Person.RandomlyGenerated
  fullName: TinyLife.Objects.Person.RandomlyGenerated
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RandomlyGenerated
    path: ../TinyLife/Objects/Person.cs
    startLine: 341
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that stores whether this person has been randomly generated by invoking the <xref href=\"TinyLife.Objects.Person.Create(TinyLife.World.Map%2cSystem.Random%2cTinyLife.Objects.AgeGroup)\" data-throw-if-not-resolved=\"false\"></xref> method with a nonnull <xref href=\"TinyLife.Objects.Person.Random\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool RandomlyGenerated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public ReadOnly Property RandomlyGenerated As Boolean
  overload: TinyLife.Objects.Person.RandomlyGenerated*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.IsMinorUpdateNow
  commentId: P:TinyLife.Objects.Person.IsMinorUpdateNow
  id: IsMinorUpdateNow
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsMinorUpdateNow
  nameWithType: Person.IsMinorUpdateNow
  fullName: TinyLife.Objects.Person.IsMinorUpdateNow
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsMinorUpdateNow
    path: ../TinyLife/Objects/Person.cs
    startLine: 344
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA property that returns whether this updating object should currently update minorly, rather than majorly.\nA minor update means that <xref href=\"TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> is only called once every 10 in-game minutes (see <xref href=\"TinyLife.World.MapSection.MinorUpdateMinutes\" data-throw-if-not-resolved=\"false\"></xref>), but all of the parameters to <xref href=\"TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> are modified accordingly to maintain proper time calculations.\nNote that this property is only queried every 10 in-game minutes, as switching between major and minor update schedules only happens when a minor update is executed.\nFor example, a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> updates minorly when they&apos;re out of town to aid the game&apos;s performance.\n"
  example: []
  syntax:
    content: public bool IsMinorUpdateNow { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMinorUpdateNow As Boolean
  overload: TinyLife.Objects.Person.IsMinorUpdateNow*
  implements:
  - TinyLife.Objects.IUpdatingObject.IsMinorUpdateNow
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.CurrentPose
  commentId: F:TinyLife.Objects.Person.CurrentPose
  id: CurrentPose
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CurrentPose
  nameWithType: Person.CurrentPose
  fullName: TinyLife.Objects.Person.CurrentPose
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CurrentPose
    path: ../TinyLife/Objects/Person.cs
    startLine: 351
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis person&apos;s current <xref href=\"TinyLife.Objects.Person.Pose\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this value is reset to <xref href=\"TinyLife.Objects.Person.Pose.Standing\" data-throw-if-not-resolved=\"false\"></xref> every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public Person.Pose CurrentPose
    return:
      type: TinyLife.Objects.Person.Pose
    content.vb: >-
      <DataMember>

      Public CurrentPose As Person.Pose
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.WornLayers
  commentId: F:TinyLife.Objects.Person.WornLayers
  id: WornLayers
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: WornLayers
  nameWithType: Person.WornLayers
  fullName: TinyLife.Objects.Person.WornLayers
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WornLayers
    path: ../TinyLife/Objects/Person.cs
    startLine: 358
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ClothesLayer\" data-throw-if-not-resolved=\"false\"></xref> flags that represent what layers this person is currently wearing.\nNote that this value is reset to ~0 (every layer) every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\nSetting this value to 0 (no layer) will also stop the <xref href=\"TinyLife.Actions.Emote\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.GetHeldObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> from drawing.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public ClothesLayer WornLayers
    return:
      type: TinyLife.Objects.ClothesLayer
    content.vb: >-
      <DataMember>

      Public WornLayers As ClothesLayer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.AnimateHeldObject
  commentId: F:TinyLife.Objects.Person.AnimateHeldObject
  id: AnimateHeldObject
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AnimateHeldObject
  nameWithType: Person.AnimateHeldObject
  fullName: TinyLife.Objects.Person.AnimateHeldObject
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AnimateHeldObject
    path: ../TinyLife/Objects/Person.cs
    startLine: 363
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nWhether or not the <xref href=\"TinyLife.Objects.Person.GetHeldObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should be animated with this person&apos;s movement animation.\nNote that this value is not saved to disk, and is reset to true every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\n"
  example: []
  syntax:
    content: public bool AnimateHeldObject
    return:
      type: System.Boolean
    content.vb: Public AnimateHeldObject As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HeldObjectRotation
  commentId: F:TinyLife.Objects.Person.HeldObjectRotation
  id: HeldObjectRotation
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HeldObjectRotation
  nameWithType: Person.HeldObjectRotation
  fullName: TinyLife.Objects.Person.HeldObjectRotation
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HeldObjectRotation
    path: ../TinyLife/Objects/Person.cs
    startLine: 369
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe rotation that the <xref href=\"TinyLife.Objects.Person.GetHeldObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should assume in this person&apos;s hand.\nIf this value is set to null, the held object&apos;s rotation will be set to the person&apos;s <xref href=\"TinyLife.Objects.Person.Rotation\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this value is not saved to disk, and is reset to null every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\n"
  example: []
  syntax:
    content: public Direction2? HeldObjectRotation
    return:
      type: System.Nullable{MLEM.Misc.Direction2}
    content.vb: Public HeldObjectRotation As Direction2?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.VisuallyOccupiedSpot
  commentId: P:TinyLife.Objects.Person.VisuallyOccupiedSpot
  id: VisuallyOccupiedSpot
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VisuallyOccupiedSpot
  nameWithType: Person.VisuallyOccupiedSpot
  fullName: TinyLife.Objects.Person.VisuallyOccupiedSpot
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisuallyOccupiedSpot
    path: ../TinyLife/Objects/Person.cs
    startLine: 376
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe <xref href=\"TinyLife.Objects.ActionSpot\" data-throw-if-not-resolved=\"false\"></xref> and corresponding <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that this person is visually occupying in the <xref href=\"TinyLife.Objects.Person.OccupiedFurniture\" data-throw-if-not-resolved=\"false\"></xref> collection.\nIf this tuple has no value, or any of its entries are null, this person is not visually occupying any of the spots.\nNote that this value is not saved to disk, and is reset to -1 every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\nTo edit this value, use <xref href=\"TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public (Furniture Furniture, ActionSpot Spot) VisuallyOccupiedSpot { get; }
    parameters: []
    return:
      type: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}
    content.vb: Public ReadOnly Property VisuallyOccupiedSpot As(Furniture As Furniture, Spot As ActionSpot)(Of Furniture , ActionSpot)
  overload: TinyLife.Objects.Person.VisuallyOccupiedSpot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Objects.Person.AnimationSpeed
  commentId: F:TinyLife.Objects.Person.AnimationSpeed
  id: AnimationSpeed
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AnimationSpeed
  nameWithType: Person.AnimationSpeed
  fullName: TinyLife.Objects.Person.AnimationSpeed
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AnimationSpeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 381
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe speed that this person&apos;s animation should run with.\nNote that this value is not saved to disk, and is reset to 1 every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\n"
  example: []
  syntax:
    content: public float AnimationSpeed
    return:
      type: System.Single
    content.vb: Public AnimationSpeed As Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Tint
  commentId: F:TinyLife.Objects.Person.Tint
  id: Tint
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Tint
  nameWithType: Person.Tint
  fullName: TinyLife.Objects.Person.Tint
  type: Field
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Tint
    path: ../TinyLife/Objects/Person.cs
    startLine: 386
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA color that this person should render with.\nNote that this value is not saved to disk, and is reset to null every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\n"
  example: []
  syntax:
    content: public Color? Tint
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Color}
    content.vb: Public Tint As Color?
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.VisualPosition
  commentId: P:TinyLife.Objects.Person.VisualPosition
  id: VisualPosition
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VisualPosition
  nameWithType: Person.VisualPosition
  fullName: TinyLife.Objects.Person.VisualPosition
  type: Property
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisualPosition
    path: ../TinyLife/Objects/Person.cs
    startLine: 392
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe visual position of this person, which is influenced by their <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> and a visual override that can additionally be set using <xref href=\"TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this value is reset to <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref> every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame.\nAlso note that the visual position does not affect collision detection or most interactions.\n"
  example: []
  syntax:
    content: public Vector2 VisualPosition { get; set; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Property VisualPosition As Vector2
  overload: TinyLife.Objects.Person.VisualPosition*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnActionsChanged
  commentId: E:TinyLife.Objects.Person.OnActionsChanged
  id: OnActionsChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnActionsChanged
  nameWithType: Person.OnActionsChanged
  fullName: TinyLife.Objects.Person.OnActionsChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionsChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 401
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when the <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> of this person changed\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person> OnActionsChanged
    return:
      type: System.Action{TinyLife.Objects.Person}
    content.vb: Public Event OnActionsChanged As Action(Of Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnNewSkillLearned
  commentId: E:TinyLife.Objects.Person.OnNewSkillLearned
  id: OnNewSkillLearned
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnNewSkillLearned
  nameWithType: Person.OnNewSkillLearned
  fullName: TinyLife.Objects.Person.OnNewSkillLearned
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnNewSkillLearned
    path: ../TinyLife/Objects/Person.cs
    startLine: 406
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when the <xref href=\"TinyLife.Objects.Person.Skills\" data-throw-if-not-resolved=\"false\"></xref> list gains a new entry, meaning the person learned a new skill\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person> OnNewSkillLearned
    return:
      type: System.Action{TinyLife.Objects.Person}
    content.vb: Public Event OnNewSkillLearned As Action(Of Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnJobChanged
  commentId: E:TinyLife.Objects.Person.OnJobChanged
  id: OnJobChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnJobChanged
  nameWithType: Person.OnJobChanged
  fullName: TinyLife.Objects.Person.OnJobChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnJobChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 411
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when the <xref href=\"TinyLife.Objects.Person.Job\" data-throw-if-not-resolved=\"false\"></xref> changes.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person> OnJobChanged
    return:
      type: System.Action{TinyLife.Objects.Person}
    content.vb: Public Event OnJobChanged As Action(Of Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnEmotionModifiersChanged
  commentId: E:TinyLife.Objects.Person.OnEmotionModifiersChanged
  id: OnEmotionModifiersChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnEmotionModifiersChanged
  nameWithType: Person.OnEmotionModifiersChanged
  fullName: TinyLife.Objects.Person.OnEmotionModifiersChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEmotionModifiersChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 416
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when the <xref href=\"TinyLife.Objects.Person.EmotionModifiers\" data-throw-if-not-resolved=\"false\"></xref> change.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.EmotionModifiersChangedDelegate OnEmotionModifiersChanged
    return:
      type: TinyLife.Objects.Person.EmotionModifiersChangedDelegate
    content.vb: Public Event OnEmotionModifiersChanged As Person.EmotionModifiersChangedDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnEmotionChanged
  commentId: E:TinyLife.Objects.Person.OnEmotionChanged
  id: OnEmotionChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnEmotionChanged
  nameWithType: Person.OnEmotionChanged
  fullName: TinyLife.Objects.Person.OnEmotionChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnEmotionChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 421
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when the <xref href=\"TinyLife.Objects.Person.Emotion\" data-throw-if-not-resolved=\"false\"></xref> changes.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Person> OnEmotionChanged
    return:
      type: System.Action{TinyLife.Objects.Person}
    content.vb: Public Event OnEmotionChanged As Action(Of Person)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnGetEfficiencyModifier
  commentId: E:TinyLife.Objects.Person.OnGetEfficiencyModifier
  id: OnGetEfficiencyModifier
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnGetEfficiencyModifier
  nameWithType: Person.OnGetEfficiencyModifier
  fullName: TinyLife.Objects.Person.OnGetEfficiencyModifier
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetEfficiencyModifier
    path: ../TinyLife/Objects/Person.cs
    startLine: 427
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked at the end of <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>, after the default efficiency modifier is evaulated.\nThis event can be used to change this person&apos;s efficiency based on additional mod factors.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.EfficiencyModifierDelegate OnGetEfficiencyModifier
    return:
      type: TinyLife.Objects.Person.EfficiencyModifierDelegate
    content.vb: Public Event OnGetEfficiencyModifier As Person.EfficiencyModifierDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnGetWalkSpeed
  commentId: E:TinyLife.Objects.Person.OnGetWalkSpeed
  id: OnGetWalkSpeed
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnGetWalkSpeed
  nameWithType: Person.OnGetWalkSpeed
  fullName: TinyLife.Objects.Person.OnGetWalkSpeed
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetWalkSpeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 433
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked at the end of <xref href=\"TinyLife.Objects.Person.GetWalkSpeed\" data-throw-if-not-resolved=\"false\"></xref>, after the default walk speed is evaluated.\nThis event can be used to change this person&apos;s walk speed based on additional mod factors.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.WalkSpeedDelegate OnGetWalkSpeed
    return:
      type: TinyLife.Objects.Person.WalkSpeedDelegate
    content.vb: Public Event OnGetWalkSpeed As Person.WalkSpeedDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnGetPassiveActionPriority
  commentId: E:TinyLife.Objects.Person.OnGetPassiveActionPriority
  id: OnGetPassiveActionPriority
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnGetPassiveActionPriority
  nameWithType: Person.OnGetPassiveActionPriority
  fullName: TinyLife.Objects.Person.OnGetPassiveActionPriority
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetPassiveActionPriority
    path: ../TinyLife/Objects/Person.cs
    startLine: 439
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked at the end of <xref href=\"TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)\" data-throw-if-not-resolved=\"false\"></xref>, after the default action priority is evaulated.\nThis event can be used to change the action priority based on additional mod factors.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.PassiveActionPriorityDelegate OnGetPassiveActionPriority
    return:
      type: TinyLife.Objects.Person.PassiveActionPriorityDelegate
    content.vb: Public Event OnGetPassiveActionPriority As Person.PassiveActionPriorityDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnActionInitialized
  commentId: E:TinyLife.Objects.Person.OnActionInitialized
  id: OnActionInitialized
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnActionInitialized
  nameWithType: Person.OnActionInitialized
  fullName: TinyLife.Objects.Person.OnActionInitialized
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionInitialized
    path: ../TinyLife/Objects/Person.cs
    startLine: 444
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> is initialized.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Action, EventPhase> OnActionInitialized
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Mods.EventPhase}
    content.vb: Public Event OnActionInitialized As Action(Of Action, EventPhase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnActionsCompleted
  commentId: E:TinyLife.Objects.Person.OnActionsCompleted
  id: OnActionsCompleted
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnActionsCompleted
  nameWithType: Person.OnActionsCompleted
  fullName: TinyLife.Objects.Person.OnActionsCompleted
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionsCompleted
    path: ../TinyLife/Objects/Person.cs
    startLine: 449
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> is completed, no matter the resulting <xref href=\"TinyLife.Actions.CompletionType\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<Action, CompletionType, EventPhase> OnActionsCompleted
    return:
      type: System.Action{TinyLife.Actions.Action,TinyLife.Actions.CompletionType,TinyLife.Mods.EventPhase}
    content.vb: Public Event OnActionsCompleted As Action(Of Action, CompletionType, EventPhase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnActionUpdated
  commentId: E:TinyLife.Objects.Person.OnActionUpdated
  id: OnActionUpdated
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnActionUpdated
  nameWithType: Person.OnActionUpdated
  fullName: TinyLife.Objects.Person.OnActionUpdated
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnActionUpdated
    path: ../TinyLife/Objects/Person.cs
    startLine: 454
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when an <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> is updated in <xref href=\"TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.ActionUpdateDelegate OnActionUpdated
    return:
      type: TinyLife.Objects.Person.ActionUpdateDelegate
    content.vb: Public Event OnActionUpdated As Person.ActionUpdateDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnOutfitChanged
  commentId: E:TinyLife.Objects.Person.OnOutfitChanged
  id: OnOutfitChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnOutfitChanged
  nameWithType: Person.OnOutfitChanged
  fullName: TinyLife.Objects.Person.OnOutfitChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnOutfitChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 459
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when this person&apos;s <xref href=\"TinyLife.Objects.Person.CurrentOutfitIndex\" data-throw-if-not-resolved=\"false\"></xref> changes.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action OnOutfitChanged
    return:
      type: System.Action
    content.vb: Public Event OnOutfitChanged As Action
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnGetCurrentGoals
  commentId: E:TinyLife.Objects.Person.OnGetCurrentGoals
  id: OnGetCurrentGoals
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnGetCurrentGoals
  nameWithType: Person.OnGetCurrentGoals
  fullName: TinyLife.Objects.Person.OnGetCurrentGoals
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnGetCurrentGoals
    path: ../TinyLife/Objects/Person.cs
    startLine: 465
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked in <xref href=\"TinyLife.Objects.Person.GetCurrentGoals\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event allows adding more goals to a person that should be tracked by <xref href=\"TinyLife.Goals.AutoGoalInfo\" data-throw-if-not-resolved=\"false\"></xref> goals.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<List<IGoalTriggerable>> OnGetCurrentGoals
    return:
      type: System.Action{System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}}
    content.vb: Public Event OnGetCurrentGoals As Action(Of List(Of IGoalTriggerable))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnLifeGoalChanged
  commentId: E:TinyLife.Objects.Person.OnLifeGoalChanged
  id: OnLifeGoalChanged
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnLifeGoalChanged
  nameWithType: Person.OnLifeGoalChanged
  fullName: TinyLife.Objects.Person.OnLifeGoalChanged
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnLifeGoalChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 470
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked when a person&apos;s current <xref href=\"TinyLife.Objects.Person.LifeGoal\" data-throw-if-not-resolved=\"false\"></xref> is changed.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Action<LifeGoal.Instance> OnLifeGoalChanged
    return:
      type: System.Action{TinyLife.Goals.LifeGoal.Instance}
    content.vb: Public Event OnLifeGoalChanged As Action(Of LifeGoal.Instance)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OnRestoreNeed
  commentId: E:TinyLife.Objects.Person.OnRestoreNeed
  id: OnRestoreNeed
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnRestoreNeed
  nameWithType: Person.OnRestoreNeed
  fullName: TinyLife.Objects.Person.OnRestoreNeed
  type: Event
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRestoreNeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 476
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAn event that is invoked in <xref href=\"TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType%2cSystem.Single%2cTinyLife.Actions.ActionInfo%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis event allows modifying the amount that a need is restored by based on custom factors.\nThis event can be subscribed to using <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public event Person.RestoreNeedDelegate OnRestoreNeed
    return:
      type: TinyLife.Objects.Person.RestoreNeedDelegate
    content.vb: Public Event OnRestoreNeed As Person.RestoreNeedDelegate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.Person.#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)
  id: '#ctor(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2)'
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Person(Map, Vector2)
  nameWithType: Person.Person(Map, Vector2)
  fullName: TinyLife.Objects.Person.Person(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2)
  type: Constructor
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Objects/Person.cs
    startLine: 523
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new person with the given settings\n"
  example: []
  syntax:
    content: public Person(Map map, Vector2 position)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to place this person on
    - id: position
      type: Microsoft.Xna.Framework.Vector2
      description: The position to place this person on
    content.vb: Public Sub New(map As Map, position As Vector2)
  overload: TinyLife.Objects.Person.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Finalize
  commentId: M:TinyLife.Objects.Person.Finalize
  id: Finalize
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: Person.Finalize()
  fullName: TinyLife.Objects.Person.Finalize()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Finalize
    path: ../TinyLife/Objects/Person.cs
    startLine: 541
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: TinyLife.Objects.Person.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Person.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Objects/Person.cs
    startLine: 546
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThe update method, which is called every update frame by the underlying <xref href=\"TinyLife.World.Map\" data-throw-if-not-resolved=\"false\"></xref>, as well as additional places like the <xref href=\"TinyLife.World.Household.FurnitureStorage\" data-throw-if-not-resolved=\"false\"></xref>. Because of this, some actions might only want to be invoked if an object <xref href=\"TinyLife.Objects.MapObject.IsInWorld\" data-throw-if-not-resolved=\"false\"></xref>.\nTo call this method while invoking all required events, use <xref href=\"TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed since the last call
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Objects.Person.Update*
  implements:
  - TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.Person.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  id: Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Draw(GameTime, Object, Vector2, Nullable<Color>, List<StaticSpriteBatch.Item>)
  nameWithType: Person.Draw(GameTime, Object, Vector2, Nullable<Color>, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.Person.Draw(Microsoft.Xna.Framework.GameTime, System.Object, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Draw
    path: ../TinyLife/Objects/Person.cs
    startLine: 802
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDraws this object on the current <xref href=\"TinyLife.Objects.MapObject.Map\" data-throw-if-not-resolved=\"false\"></xref>, at the current <xref href=\"TinyLife.Objects.MapObject.Position\" data-throw-if-not-resolved=\"false\"></xref>.\nTo draw a map object while invoking all the required events, use <xref href=\"TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime%2cSystem.Object%2cSystem.Nullable%7bMicrosoft.Xna.Framework.Color%7d%2cSystem.Boolean%2cSystem.Collections.Generic.List%7bMLEM.Graphics.StaticSpriteBatch.Item%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void Draw(GameTime time, object batch, Vector2 _, Color? overrideColor, List<StaticSpriteBatch.Item> items)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The current time
    - id: batch
      type: System.Object
      description: The sprite batch to use for drawing, which is either a <xref href="Microsoft.Xna.Framework.Graphics.SpriteBatch" data-throw-if-not-resolved="false"></xref> or <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    - id: _
      type: Microsoft.Xna.Framework.Vector2
    - id: overrideColor
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color that should be used instead of this object&apos;s actual color. If null, the object&apos;s regular color should be used.
    - id: items
      type: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
      description: A list of sprite batch items that items should be added to if the <code data-dev-comment-type="paramref" class="paramref">batch</code> is a <xref href="MLEM.Graphics.StaticSpriteBatch" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Sub Draw(time As GameTime, batch As Object, _ As Vector2, overrideColor As Color?, items As List(Of StaticSpriteBatch.Item))
  overridden: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  overload: TinyLife.Objects.Person.Draw*
  nameWithType.vb: Person.Draw(GameTime, Object, Vector2, Nullable(Of Color), List(Of StaticSpriteBatch.Item))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: TinyLife.Objects.Person.Draw(Microsoft.Xna.Framework.GameTime, System.Object, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color), System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Nullable(Of Color), List(Of StaticSpriteBatch.Item))
- uid: TinyLife.Objects.Person.Validate
  commentId: M:TinyLife.Objects.Person.Validate
  id: Validate
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Person.Validate()
  fullName: TinyLife.Objects.Person.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Objects/Person.cs
    startLine: 871
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is called when this object is loaded from disk.\nReturning false on this method causes the object to be removed from the map.\nBy default, this method invokes <xref href=\"TinyLife.Objects.MapObject.OnValidated\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.MapObject.OnEventsAttachable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Validate()
    return:
      type: System.Boolean
      description: false if the object is not valid, true otherwise
    content.vb: Public Overrides Function Validate As Boolean
  overridden: TinyLife.Objects.MapObject.Validate
  overload: TinyLife.Objects.Person.Validate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Person.GetCategories(TinyLife.Objects.Person)
  id: GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetCategories(Person)
  nameWithType: Person.GetCategories(Person)
  fullName: TinyLife.Objects.Person.GetCategories(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCategories
    path: ../TinyLife/Objects/Person.cs
    startLine: 907
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Objects.ObjectCategory\" data-throw-if-not-resolved=\"false\"></xref> flags that this object has, based on the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override ObjectCategory GetCategories(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query categories for
    return:
      type: TinyLife.Objects.ObjectCategory
      description: A set of categories that this object has
    content.vb: Public Overrides Function GetCategories(person As Person) As ObjectCategory
  overridden: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  overload: TinyLife.Objects.Person.GetCategories*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.Person.Intersects(MLEM.Misc.RectangleF)
  id: Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Intersects(RectangleF)
  nameWithType: Person.Intersects(RectangleF)
  fullName: TinyLife.Objects.Person.Intersects(MLEM.Misc.RectangleF)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Intersects
    path: ../TinyLife/Objects/Person.cs
    startLine: 912
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this map object intersects with the given rectangle.\nThis is used for <xref href=\"TinyLife.World.Map.GetObjects%60%601(MLEM.Misc.RectangleF)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public override bool Intersects(RectangleF rectangle)
    parameters:
    - id: rectangle
      type: MLEM.Misc.RectangleF
      description: The area that should be checked for
    return:
      type: System.Boolean
      description: true if this object intersects with the given rectangle
    content.vb: Public Overrides Function Intersects(rectangle As RectangleF) As Boolean
  overridden: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  overload: TinyLife.Objects.Person.Intersects*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.Person.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  id: GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetHoverInfo(Tooltip)
  nameWithType: Person.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.Person.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHoverInfo
    path: ../TinyLife/Objects/Person.cs
    startLine: 917
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAllows adding a set of paragraphs and other ui elements to the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">tooltip</code>, which is then displayed when this object is hovered over using the cursor in the world.\nBy default, this method raises <xref href=\"TinyLife.Objects.MapObject.OnGetHoverInfo\" data-throw-if-not-resolved=\"false\"></xref> for <xref href=\"TinyLife.Objects.MapObject\" data-throw-if-not-resolved=\"false\"></xref>, and adds additional information for <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override void GetHoverInfo(Tooltip tooltip)
    parameters:
    - id: tooltip
      type: MLEM.Ui.Elements.Tooltip
      description: The tooltip that will be displayed.
    content.vb: Public Overrides Sub GetHoverInfo(tooltip As Tooltip)
  overridden: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  overload: TinyLife.Objects.Person.GetHoverInfo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Person.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  id: GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: Person.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.Person.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeActionSpotInfo
    path: ../TinyLife/Objects/Person.cs
    startLine: 938
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the first free action spot, packed into an <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override ActionInfo GetFreeActionSpotInfo(Person person, ObjectCategory context = null)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to query free action spots for
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The object category that this action spot needs to have
    return:
      type: TinyLife.Actions.ActionInfo
      description: The first free action spot as an <xref href="TinyLife.Actions.ActionInfo" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Overrides Function GetFreeActionSpotInfo(person As Person, context As ObjectCategory = Nothing) As ActionInfo
  overridden: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  overload: TinyLife.Objects.Person.GetFreeActionSpotInfo*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Person.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  id: OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: Person.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.Person.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnCameraRotationChanged
    path: ../TinyLife/Objects/Person.cs
    startLine: 951
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis method is invoked when the game&apos;s camera rotation changes.\nAdditionally, the old and new rotations are passed.\n"
  example: []
  syntax:
    content: public override void OnCameraRotationChanged(Direction2 oldRotation, Direction2 newRotation)
    parameters:
    - id: oldRotation
      type: MLEM.Misc.Direction2
      description: The old camera rotation
    - id: newRotation
      type: MLEM.Misc.Direction2
      description: The new camera rotation
    content.vb: Public Overrides Sub OnCameraRotationChanged(oldRotation As Direction2, newRotation As Direction2)
  overridden: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  overload: TinyLife.Objects.Person.OnCameraRotationChanged*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.FocusCameraOnEvent
  commentId: M:TinyLife.Objects.Person.FocusCameraOnEvent
  id: FocusCameraOnEvent
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: FocusCameraOnEvent()
  nameWithType: Person.FocusCameraOnEvent()
  fullName: TinyLife.Objects.Person.FocusCameraOnEvent()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FocusCameraOnEvent
    path: ../TinyLife/Objects/Person.cs
    startLine: 960
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nA helper method that causes the game camera to focus on this person if it is relevant.\nThis person is considered relevant if its <xref href=\"TinyLife.Objects.Person.Household\" data-throw-if-not-resolved=\"false\"></xref> is current or if the <xref href=\"TinyLife.Objects.MapObject.CurrentLot\" data-throw-if-not-resolved=\"false\"></xref> is visible to the <xref href=\"TinyLife.GameImpl.CurrentHousehold\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void FocusCameraOnEvent()
    content.vb: Public Sub FocusCameraOnEvent
  overload: TinyLife.Objects.Person.FocusCameraOnEvent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType,System.Int32)
  commentId: M:TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType,System.Int32)
  id: SetJob(TinyLife.Goals.JobType,System.Int32)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetJob(JobType, Int32)
  nameWithType: Person.SetJob(JobType, Int32)
  fullName: TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetJob
    path: ../TinyLife/Objects/Person.cs
    startLine: 974
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets this person&apos;s current <xref href=\"TinyLife.Objects.Person.Job\" data-throw-if-not-resolved=\"false\"></xref>.\nIf null is passed, the person&apos;s job gets removed.\n"
  example: []
  syntax:
    content: public void SetJob(JobType type, int level = 0)
    parameters:
    - id: type
      type: TinyLife.Goals.JobType
      description: The job to start
    - id: level
      type: System.Int32
      description: The level to start this job with
    content.vb: Public Sub SetJob(type As JobType, level As Integer = 0)
  overload: TinyLife.Objects.Person.SetJob*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  id: ResetToStatic(System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ResetToStatic(Boolean)
  nameWithType: Person.ResetToStatic(Boolean)
  fullName: TinyLife.Objects.Person.ResetToStatic(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ResetToStatic
    path: ../TinyLife/Objects/Person.cs
    startLine: 980
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  example: []
  syntax:
    content: public override bool ResetToStatic(bool thorough)
    parameters:
    - id: thorough
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Overrides Function ResetToStatic(thorough As Boolean) As Boolean
  overridden: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  overload: TinyLife.Objects.Person.ResetToStatic*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TinyLife.Objects.Person.PrepareForPermanentRemoval
  commentId: M:TinyLife.Objects.Person.PrepareForPermanentRemoval
  id: PrepareForPermanentRemoval
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: PrepareForPermanentRemoval()
  nameWithType: Person.PrepareForPermanentRemoval()
  fullName: TinyLife.Objects.Person.PrepareForPermanentRemoval()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PrepareForPermanentRemoval
    path: ../TinyLife/Objects/Person.cs
    startLine: 1033
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nPrepares this person for permanent removal, which includes removing all references to this person from other people&apos;s <xref href=\"TinyLife.Objects.Person.Relationships\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method should only be called when a person is about to be irrevocably deleted.\n"
  example: []
  syntax:
    content: public void PrepareForPermanentRemoval()
    content.vb: Public Sub PrepareForPermanentRemoval
  overload: TinyLife.Objects.Person.PrepareForPermanentRemoval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  commentId: M:TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  id: VisitLot(TinyLife.World.Lot)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: VisitLot(Lot)
  nameWithType: Person.VisitLot(Lot)
  fullName: TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: VisitLot
    path: ../TinyLife/Objects/Person.cs
    startLine: 1047
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nMarks the given lot as visited, setting <xref href=\"TinyLife.Objects.Person.LotVisitCooldown\" data-throw-if-not-resolved=\"false\"></xref> to 4 hours if the lot is the person&apos;s home lot, and 2 otherwise\nThe passed lot is additionally marked as visible using <xref href=\"TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)\" data-throw-if-not-resolved=\"false\"></xref>,\n"
  example: []
  syntax:
    content: public void VisitLot(Lot lot)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot to mark as visited
    content.vb: Public Sub VisitLot(lot As Lot)
  overload: TinyLife.Objects.Person.VisitLot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.DrawUi(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.Person.DrawUi(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2)
  id: DrawUi(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DrawUi(SpriteBatch, Vector2, Single, Direction2)
  nameWithType: Person.DrawUi(SpriteBatch, Vector2, Single, Direction2)
  fullName: TinyLife.Objects.Person.DrawUi(Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, System.Single, MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DrawUi
    path: ../TinyLife/Objects/Person.cs
    startLine: 1063
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRenders this person on a ui level rather than a world level\n"
  example: []
  syntax:
    content: public void DrawUi(SpriteBatch batch, Vector2 pos, float scale, Direction2 rotation = Direction2.Right)
    parameters:
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use for drawing
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position, in screen space, to draw at
    - id: scale
      type: System.Single
      description: The scale to draw with
    - id: rotation
      type: MLEM.Misc.Direction2
      description: The rotation that this person should be drawn with. Defaults to <xref href="MLEM.Misc.Direction2.Right" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub DrawUi(batch As SpriteBatch, pos As Vector2, scale As Single, rotation As Direction2 = Direction2.Right)
  overload: TinyLife.Objects.Person.DrawUi*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetHomeLocation
  commentId: M:TinyLife.Objects.Person.GetHomeLocation
  id: GetHomeLocation
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetHomeLocation()
  nameWithType: Person.GetHomeLocation()
  fullName: TinyLife.Objects.Person.GetHomeLocation()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHomeLocation
    path: ../TinyLife/Objects/Person.cs
    startLine: 1071
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nShorthand method for <xref href=\"TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref> that returns the home location of this person&apos;s <xref href=\"TinyLife.Objects.Person.Household\" data-throw-if-not-resolved=\"false\"></xref>&apos;s lot\n"
  example: []
  syntax:
    content: public Vector2 GetHomeLocation()
    return:
      type: Microsoft.Xna.Framework.Vector2
      description: This person&apos;s home location
    content.vb: Public Function GetHomeLocation As Vector2
  overload: TinyLife.Objects.Person.GetHomeLocation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person,System.Boolean)
  id: GetRelationship(TinyLife.Objects.Person,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetRelationship(Person, Boolean)
  nameWithType: Person.GetRelationship(Person, Boolean)
  fullName: TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRelationship
    path: ../TinyLife/Objects/Person.cs
    startLine: 1082
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the current relationship level for the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this returns this person&apos;s <xref href=\"TinyLife.Objects.Person.Relationships\" data-throw-if-not-resolved=\"false\"></xref> entry, which might have different values from the passed <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>&apos;s.\n"
  example: []
  syntax:
    content: public Relationship GetRelationship(Person person, bool initialize)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to get relationship values for
    - id: initialize
      type: System.Boolean
      description: Whether a new relationship should be added to the relationships menu if no relationship exists yet
    return:
      type: TinyLife.Relationship
      description: The relationship, or null if there is none and <code data-dev-comment-type="paramref" class="paramref">initialize</code> is false
    content.vb: Public Function GetRelationship(person As Person, initialize As Boolean) As Relationship
  overload: TinyLife.Objects.Person.GetRelationship*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  id: ChangeFriendship(TinyLife.Objects.Person,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ChangeFriendship(Person, Single)
  nameWithType: Person.ChangeFriendship(Person, Single)
  fullName: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChangeFriendship
    path: ../TinyLife/Objects/Person.cs
    startLine: 1105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nChanges the <xref href=\"TinyLife.Relationship.FriendLevel\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref> wit the given person by the given amount.\nAdditionally, a friendship <xref href=\"TinyLife.Objects.Particle\" data-throw-if-not-resolved=\"false\"></xref> is displayed and a <xref href=\"TinyLife.Uis.Notifications\" data-throw-if-not-resolved=\"false\"></xref> is displayed if the friendship type changes.\n"
  example: []
  syntax:
    content: public void ChangeFriendship(Person person, float amount)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to change friendship with
    - id: amount
      type: System.Single
      description: The amount to change friendship by, can be negative
    content.vb: Public Sub ChangeFriendship(person As Person, amount As Single)
  overload: TinyLife.Objects.Person.ChangeFriendship*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person,System.Single)
  id: ChangeRomance(TinyLife.Objects.Person,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ChangeRomance(Person, Single)
  nameWithType: Person.ChangeRomance(Person, Single)
  fullName: TinyLife.Objects.Person.ChangeRomance(TinyLife.Objects.Person, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChangeRomance
    path: ../TinyLife/Objects/Person.cs
    startLine: 1149
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nChanges the <xref href=\"TinyLife.Relationship.RomanceLevel\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Relationship\" data-throw-if-not-resolved=\"false\"></xref> wit the given person by the given amount.\nAdditionally, a romance <xref href=\"TinyLife.Objects.Particle\" data-throw-if-not-resolved=\"false\"></xref> is displayed.\n"
  example: []
  syntax:
    content: public void ChangeRomance(Person person, float amount)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person to change romance with
    - id: amount
      type: System.Single
      description: The amount to change romance by, can be negative
    content.vb: Public Sub ChangeRomance(person As Person, amount As Single)
  overload: TinyLife.Objects.Person.ChangeRomance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  id: DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DisplayEmote(EmoteCategory, Single, Single)
  nameWithType: Person.DisplayEmote(EmoteCategory, Single, Single)
  fullName: TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayEmote
    path: ../TinyLife/Objects/Person.cs
    startLine: 1173
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to display a <xref href=\"TinyLife.Actions.Emote\" data-throw-if-not-resolved=\"false\"></xref> over its head for 1 to 3 seconds\n"
  example: []
  syntax:
    content: public void DisplayEmote(EmoteCategory possibleCategories, float minimumSeconds = 1F, float maximumSeconds = 3F)
    parameters:
    - id: possibleCategories
      type: TinyLife.Actions.EmoteCategory
      description: A combined flag that represents the categories to pick emotes from
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of real-time seconds that the emote should be displayed for, or 1 by default
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of real-time seconds that the emote should be displayed for, or 3 by default
    content.vb: Public Sub DisplayEmote(possibleCategories As EmoteCategory, minimumSeconds As Single = 1F, maximumSeconds As Single = 3F)
  overload: TinyLife.Objects.Person.DisplayEmote*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.StopEmoting
  commentId: M:TinyLife.Objects.Person.StopEmoting
  id: StopEmoting
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: StopEmoting()
  nameWithType: Person.StopEmoting()
  fullName: TinyLife.Objects.Person.StopEmoting()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StopEmoting
    path: ../TinyLife/Objects/Person.cs
    startLine: 1183
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to stop displaying the current emote immediately\n"
  example: []
  syntax:
    content: public void StopEmoting()
    content.vb: Public Sub StopEmoting
  overload: TinyLife.Objects.Person.StopEmoting*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  id: Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Speak(SpeakStyle, Single, Single)
  nameWithType: Person.Speak(SpeakStyle, Single, Single)
  fullName: TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Speak
    path: ../TinyLife/Objects/Person.cs
    startLine: 1194
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to play speaking sounds with their <xref href=\"TinyLife.Objects.Person.VoicePitch\" data-throw-if-not-resolved=\"false\"></xref> applied for the given amount of time\n"
  example: []
  syntax:
    content: public void Speak(SpeakStyle possibleStyles, float minimumSeconds = 1F, float maximumSeconds = 3F)
    parameters:
    - id: possibleStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to choose sounds from, can be a combined flag
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of time, in seconds, to speak for
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of time, in seconds, to speak for
    content.vb: Public Sub Speak(possibleStyles As SpeakStyle, minimumSeconds As Single = 1F, maximumSeconds As Single = 3F)
  overload: TinyLife.Objects.Person.Speak*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.StopSpeaking
  commentId: M:TinyLife.Objects.Person.StopSpeaking
  id: StopSpeaking
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: StopSpeaking()
  nameWithType: Person.StopSpeaking()
  fullName: TinyLife.Objects.Person.StopSpeaking()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StopSpeaking
    path: ../TinyLife/Objects/Person.cs
    startLine: 1204
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to stop speaking, resetting their <xref href=\"TinyLife.Objects.Person.CurrentSpeakStyle\" data-throw-if-not-resolved=\"false\"></xref> and interrupting any currently playing speak sounds\n"
  example: []
  syntax:
    content: public void StopSpeaking()
    content.vb: Public Sub StopSpeaking
  overload: TinyLife.Objects.Person.StopSpeaking*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.DisplayEmoteAndSpeak(TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.DisplayEmoteAndSpeak(TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  id: DisplayEmoteAndSpeak(TinyLife.Actions.EmoteCategory,TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DisplayEmoteAndSpeak(EmoteCategory, SpeakStyle, Single, Single)
  nameWithType: Person.DisplayEmoteAndSpeak(EmoteCategory, SpeakStyle, Single, Single)
  fullName: TinyLife.Objects.Person.DisplayEmoteAndSpeak(TinyLife.Actions.EmoteCategory, TinyLife.Objects.SpeakStyle, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayEmoteAndSpeak
    path: ../TinyLife/Objects/Person.cs
    startLine: 1221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis is a combined helper method that invokes <xref href=\"TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> together.\nSince both methods choose a random amount of time for their actions independently, the emote display might end at a different time than the speaking sound.\n"
  example: []
  syntax:
    content: public void DisplayEmoteAndSpeak(EmoteCategory emoteCategories, SpeakStyle speakStyles, float minimumSeconds = 1F, float maximumSeconds = 3F)
    parameters:
    - id: emoteCategories
      type: TinyLife.Actions.EmoteCategory
      description: The emote categories to choose from, can be a combined flag
    - id: speakStyles
      type: TinyLife.Objects.SpeakStyle
      description: The speak styles to choose from, can be a combined flag
    - id: minimumSeconds
      type: System.Single
      description: The minimum amount of time, in seconds, to speak and display the emote for
    - id: maximumSeconds
      type: System.Single
      description: The maximum amount of time, in seconds, to speak and display the emote for
    content.vb: Public Sub DisplayEmoteAndSpeak(emoteCategories As EmoteCategory, speakStyles As SpeakStyle, minimumSeconds As Single = 1F, maximumSeconds As Single = 3F)
  overload: TinyLife.Objects.Person.DisplayEmoteAndSpeak*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetFreeTalkingSpots(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Person.GetFreeTalkingSpots(TinyLife.Objects.Person)
  id: GetFreeTalkingSpots(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetFreeTalkingSpots(Person)
  nameWithType: Person.GetFreeTalkingSpots(Person)
  fullName: TinyLife.Objects.Person.GetFreeTalkingSpots(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFreeTalkingSpots
    path: ../TinyLife/Objects/Person.cs
    startLine: 1230
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of locations, in world space, that this person can be talked to from while standing in its current location\n"
  example: []
  syntax:
    content: public IEnumerable<Vector2> GetFreeTalkingSpots(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
      description: A set of free talking spots
    content.vb: Public Function GetFreeTalkingSpots(person As Person) As IEnumerable(Of Vector2)
  overload: TinyLife.Objects.Person.GetFreeTalkingSpots*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OccupyActionSpot(Furniture, ActionSpot, Boolean, Nullable<Direction2>)
  nameWithType: Person.OccupyActionSpot(Furniture, ActionSpot, Boolean, Nullable<Direction2>)
  fullName: TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, System.Boolean, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OccupyActionSpot
    path: ../TinyLife/Objects/Person.cs
    startLine: 1248
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses the given action spot of the given furniture to be marked as occupied.\nOptionally, the <xref href=\"TinyLife.Objects.Person.VisualPosition\" data-throw-if-not-resolved=\"false\"></xref> can also be changed, causing this person to look as if they were sitting, standing or laying on the furniture.\nNote that the values set in this method are reset every <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> call.\n"
  example: []
  syntax:
    content: public void OccupyActionSpot(Furniture furniture, ActionSpot spot, bool enterSpot, Direction2? rotation = null)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture to occupy
    - id: spot
      type: TinyLife.Objects.ActionSpot
      description: The action spot to occupy on the furniture
    - id: enterSpot
      type: System.Boolean
      description: Whether or not the visual position should be updated to enter the spot
    - id: rotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: The rotation that this person should get, or null to use the spot&apos;s default rotation
    content.vb: Public Sub OccupyActionSpot(furniture As Furniture, spot As ActionSpot, enterSpot As Boolean, rotation As Direction2? = Nothing)
  overload: TinyLife.Objects.Person.OccupyActionSpot*
  nameWithType.vb: Person.OccupyActionSpot(Furniture, ActionSpot, Boolean, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot, System.Boolean, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: OccupyActionSpot(Furniture, ActionSpot, Boolean, Nullable(Of Direction2))
- uid: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OccupyFreeActionSpot(Furniture, ObjectCategory, Boolean, Nullable<Direction2>)
  nameWithType: Person.OccupyFreeActionSpot(Furniture, ObjectCategory, Boolean, Nullable<Direction2>)
  fullName: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OccupyFreeActionSpot
    path: ../TinyLife/Objects/Person.cs
    startLine: 1266
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis is a shorthand method for <xref href=\"TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person%2cTinyLife.Objects.ObjectCategory)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ActionSpot%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method needs to be called every update frame for the person to keep occupying the action spot.\n"
  example: []
  syntax:
    content: public bool OccupyFreeActionSpot(Furniture furniture, ObjectCategory context = null, bool enter = false, Direction2? rotation = null)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture whose object spot to occupy
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The category that the action spot should have
    - id: enter
      type: System.Boolean
      description: Whether or not the action spot should be entered
    - id: rotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: The rotation that the person should have, or the action spot&apos;s rotation by default
    return:
      type: System.Boolean
      description: Whether or not we were able to occupy a free action spot
    content.vb: Public Function OccupyFreeActionSpot(furniture As Furniture, context As ObjectCategory = Nothing, enter As Boolean = False, rotation As Direction2? = Nothing) As Boolean
  overload: TinyLife.Objects.Person.OccupyFreeActionSpot*
  nameWithType.vb: Person.OccupyFreeActionSpot(Furniture, ObjectCategory, Boolean, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture, TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: OccupyFreeActionSpot(Furniture, ObjectCategory, Boolean, Nullable(Of Direction2))
- uid: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  id: OccupyFreeActionSpot(TinyLife.Actions.ActionInfo,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: OccupyFreeActionSpot(ActionInfo, ObjectCategory, Boolean, Nullable<Direction2>)
  nameWithType: Person.OccupyFreeActionSpot(ActionInfo, ObjectCategory, Boolean, Nullable<Direction2>)
  fullName: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OccupyFreeActionSpot
    path: ../TinyLife/Objects/Person.cs
    startLine: 1283
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nThis is a shorthand method for <xref href=\"TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture%2cTinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Nullable%7bMLEM.Misc.Direction2%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nNote that this method needs to be called every update frame for the person to keep occupying the action spot.\n"
  example: []
  syntax:
    content: public bool OccupyFreeActionSpot(ActionInfo info, ObjectCategory context = null, bool enter = false, Direction2? rotation = null)
    parameters:
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info whose action object to occupy.
    - id: context
      type: TinyLife.Objects.ObjectCategory
      description: The category that the action spot should have
    - id: enter
      type: System.Boolean
      description: Whether or not the action spot should be entered
    - id: rotation
      type: System.Nullable{MLEM.Misc.Direction2}
      description: The rotation that the person should have, or the action spot&apos;s rotation by default
    return:
      type: System.Boolean
      description: Whether or not we were able to occupy a free action spot
    content.vb: Public Function OccupyFreeActionSpot(info As ActionInfo, context As ObjectCategory = Nothing, enter As Boolean = False, rotation As Direction2? = Nothing) As Boolean
  overload: TinyLife.Objects.Person.OccupyFreeActionSpot*
  nameWithType.vb: Person.OccupyFreeActionSpot(ActionInfo, ObjectCategory, Boolean, Nullable(Of Direction2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Actions.ActionInfo, TinyLife.Objects.ObjectCategory, System.Boolean, System.Nullable(Of MLEM.Misc.Direction2))
  name.vb: OccupyFreeActionSpot(ActionInfo, ObjectCategory, Boolean, Nullable(Of Direction2))
- uid: TinyLife.Objects.Person.IsCloseForTalking(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.Objects.Person.IsCloseForTalking(Microsoft.Xna.Framework.Vector2)
  id: IsCloseForTalking(Microsoft.Xna.Framework.Vector2)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsCloseForTalking(Vector2)
  nameWithType: Person.IsCloseForTalking(Vector2)
  fullName: TinyLife.Objects.Person.IsCloseForTalking(Microsoft.Xna.Framework.Vector2)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsCloseForTalking
    path: ../TinyLife/Objects/Person.cs
    startLine: 1294
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">pos</code> is considered close enough for talking.\nFor a person to be close enough for talking, they have to be at least 0.25 and at most 2.5 tiles away and in the same <xref href=\"TinyLife.World.Room\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsCloseForTalking(Vector2 pos)
    parameters:
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position of the person to query closeness for
    return:
      type: System.Boolean
      description: Whether the person is close enough to talk to
    content.vb: Public Function IsCloseForTalking(pos As Vector2) As Boolean
  overload: TinyLife.Objects.Person.IsCloseForTalking*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  id: GetNeed(TinyLife.NeedType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetNeed(NeedType)
  nameWithType: Person.GetNeed(NeedType)
  fullName: TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetNeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 1306
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Need.Value\" data-throw-if-not-resolved=\"false\"></xref> of the given type for this person\n"
  example: []
  syntax:
    content: public float GetNeed(NeedType type)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type of need that should be returned
    return:
      type: System.Single
      description: This person&apos;s need value
    content.vb: Public Function GetNeed(type As NeedType) As Single
  overload: TinyLife.Objects.Person.GetNeed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  id: GetNeedPercentage(TinyLife.NeedType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetNeedPercentage(NeedType)
  nameWithType: Person.GetNeedPercentage(NeedType)
  fullName: TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetNeedPercentage
    path: ../TinyLife/Objects/Person.cs
    startLine: 1315
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Need.Percentage\" data-throw-if-not-resolved=\"false\"></xref> of the given type for this person\n"
  example: []
  syntax:
    content: public float GetNeedPercentage(NeedType type)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type of need that should be returned
    return:
      type: System.Single
      description: This person&apos;s need percentage
    content.vb: Public Function GetNeedPercentage(type As NeedType) As Single
  overload: TinyLife.Objects.Person.GetNeedPercentage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  id: RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RestoreNeed(NeedType, Single, ActionInfo, Single)
  nameWithType: Person.RestoreNeed(NeedType, Single, ActionInfo, Single)
  fullName: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType, System.Single, TinyLife.Actions.ActionInfo, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RestoreNeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 1327
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRestores this person&apos;s <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> of the given type by the given amount.\nAlso invokes <xref href=\"TinyLife.Objects.Person.OnRestoreNeed\" data-throw-if-not-resolved=\"false\"></xref> and modifies the restored amount by the person&apos;s current <xref href=\"TinyLife.Objects.Person.Emotion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void RestoreNeed(NeedType type, float amount, ActionInfo info, float speedMultiplier)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type of need to restore
    - id: amount
      type: System.Single
      description: The amount to restore this need by
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info of the action that is causing the need to be restored. Can be null if the need is not being restored by an action.
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub RestoreNeed(type As NeedType, amount As Single, info As ActionInfo, speedMultiplier As Single)
  overload: TinyLife.Objects.Person.RestoreNeed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  id: RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RestoreNeed(NeedType, Single, ActionInfo, SkillType, Single)
  nameWithType: Person.RestoreNeed(NeedType, Single, ActionInfo, SkillType, Single)
  fullName: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType, System.Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RestoreNeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 1363
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRestores this person&apos;s <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> of the given type by the given amount, additionally taking into account the person&apos;s level at the given <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref>.\nThe higher the level of the given skill is, the higher the percentage of <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxAmount</code> that the <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> will be restored with.\nThis is useful for rewarding <xref href=\"TinyLife.NeedType.Entertainment\" data-throw-if-not-resolved=\"false\"></xref> based on the level in a skill that is currently being built.\n"
  example: []
  syntax:
    content: public void RestoreNeed(NeedType type, float maxAmount, ActionInfo info, SkillType requiredSkill, float speedMultiplier)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type of need to restore.
    - id: maxAmount
      type: System.Single
      description: The maximum amount to restore this need by.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info of the action that is causing the need to be restored. Can be null if the need is not being restored by an action.
    - id: requiredSkill
      type: TinyLife.Skills.SkillType
      description: The skill required to restore the given need.
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub RestoreNeed(type As NeedType, maxAmount As Single, info As ActionInfo, requiredSkill As SkillType, speedMultiplier As Single)
  overload: TinyLife.Objects.Person.RestoreNeed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetSkill(TinyLife.Skills.SkillType,System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetSkill(TinyLife.Skills.SkillType,System.Boolean)
  id: GetSkill(TinyLife.Skills.SkillType,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetSkill(SkillType, Boolean)
  nameWithType: Person.GetSkill(SkillType, Boolean)
  fullName: TinyLife.Objects.Person.GetSkill(TinyLife.Skills.SkillType, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSkill
    path: ../TinyLife/Objects/Person.cs
    startLine: 1375
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> instance that this person has for the given <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this person does not have the skill yet, and <code data-dev-comment-type=\"paramref\" class=\"paramref\">initialize</code> is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned.\n"
  example: []
  syntax:
    content: public Skill GetSkill(SkillType type, bool initialize)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to query.
    - id: initialize
      type: System.Boolean
      description: Whether the skill should be added if it doesn&apos;t exist already.
    return:
      type: TinyLife.Skills.Skill
      description: The skill instance, or <xref uid="langword_csharp_null" name="null" href=""></xref> if this person doesn&apos;t have the skill yet, and <code data-dev-comment-type="paramref" class="paramref">initialize</code> is <xref uid="langword_csharp_false" name="false" href=""></xref>.
    content.vb: Public Function GetSkill(type As SkillType, initialize As Boolean) As Skill
  overload: TinyLife.Objects.Person.GetSkill*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetSkillTotalPercentage(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetSkillTotalPercentage(TinyLife.Skills.SkillType)
  id: GetSkillTotalPercentage(TinyLife.Skills.SkillType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetSkillTotalPercentage(SkillType)
  nameWithType: Person.GetSkillTotalPercentage(SkillType)
  fullName: TinyLife.Objects.Person.GetSkillTotalPercentage(TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSkillTotalPercentage
    path: ../TinyLife/Objects/Person.cs
    startLine: 1394
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the total skill level percentage of the given skill for this person.\nThis is a shorthand for <xref href=\"TinyLife.Skills.Skill.TotalPercentage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetSkillTotalPercentage(SkillType type)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to query
    return:
      type: System.Single
      description: The person&apos;s total skill level percentage
    content.vb: Public Function GetSkillTotalPercentage(type As SkillType) As Single
  overload: TinyLife.Objects.Person.GetSkillTotalPercentage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetSkillPointPercentage(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetSkillPointPercentage(TinyLife.Skills.SkillType)
  id: GetSkillPointPercentage(TinyLife.Skills.SkillType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetSkillPointPercentage(SkillType)
  nameWithType: Person.GetSkillPointPercentage(SkillType)
  fullName: TinyLife.Objects.Person.GetSkillPointPercentage(TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSkillPointPercentage
    path: ../TinyLife/Objects/Person.cs
    startLine: 1404
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the percentage that this person has in the given skill&apos;s current level.\nThis is a shorthand for <xref href=\"TinyLife.Skills.Skill.PointPercentage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetSkillPointPercentage(SkillType type)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to query
    return:
      type: System.Single
      description: The person&apos;s skill point percentage
    content.vb: Public Function GetSkillPointPercentage(type As SkillType) As Single
  overload: TinyLife.Objects.Person.GetSkillPointPercentage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  id: GetSkillLevel(TinyLife.Skills.SkillType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetSkillLevel(SkillType)
  nameWithType: Person.GetSkillLevel(SkillType)
  fullName: TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetSkillLevel
    path: ../TinyLife/Objects/Person.cs
    startLine: 1414
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the level of the <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> of the given type that this person has.\nIf this person does not have the given skill, 0 is returned.\n"
  example: []
  syntax:
    content: public int GetSkillLevel(SkillType type)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to query
    return:
      type: System.Int32
      description: The person&apos;s skill level
    content.vb: Public Function GetSkillLevel(type As SkillType) As Integer
  overload: TinyLife.Objects.Person.GetSkillLevel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HasSkillLevel(TinyLife.Skills.SkillType,System.Int32)
  commentId: M:TinyLife.Objects.Person.HasSkillLevel(TinyLife.Skills.SkillType,System.Int32)
  id: HasSkillLevel(TinyLife.Skills.SkillType,System.Int32)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HasSkillLevel(SkillType, Int32)
  nameWithType: Person.HasSkillLevel(SkillType, Int32)
  fullName: TinyLife.Objects.Person.HasSkillLevel(TinyLife.Skills.SkillType, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasSkillLevel
    path: ../TinyLife/Objects/Person.cs
    startLine: 1424
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this person has a <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> of the given type and whether its value is high enough.\n"
  example: []
  syntax:
    content: public bool HasSkillLevel(SkillType type, int level)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to query
    - id: level
      type: System.Int32
      description: The level that the skill has to be
    return:
      type: System.Boolean
      description: true if the person has this skill level, false otherwise
    content.vb: Public Function HasSkillLevel(type As SkillType, level As Integer) As Boolean
  overload: TinyLife.Objects.Person.HasSkillLevel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  id: GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GainSkill(SkillType, Single, ActionInfo, Single)
  nameWithType: Person.GainSkill(SkillType, Single, ActionInfo, Single)
  fullName: TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType, System.Single, TinyLife.Actions.ActionInfo, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GainSkill
    path: ../TinyLife/Objects/Person.cs
    startLine: 1436
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to gain the skill with the given <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> and raises it by the given amount.\nNote that <xref href=\"TinyLife.Objects.Person.PersonalityTypes\" data-throw-if-not-resolved=\"false\"></xref> influence the skinn gain automatically.\n"
  example: []
  syntax:
    content: public void GainSkill(SkillType type, float amount, ActionInfo info, float speedMultiplier)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type of skill to gain
    - id: amount
      type: System.Single
      description: The amount of skill points to gain
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: An optional action info whose <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> can influence the efficiency
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub GainSkill(type As SkillType, amount As Single, info As ActionInfo, speedMultiplier As Single)
  overload: TinyLife.Objects.Person.GainSkill*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.DepleteNeed(TinyLife.NeedType,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.DepleteNeed(TinyLife.NeedType,System.Single,System.Single)
  id: DepleteNeed(TinyLife.NeedType,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: DepleteNeed(NeedType, Single, Single)
  nameWithType: Person.DepleteNeed(NeedType, Single, Single)
  fullName: TinyLife.Objects.Person.DepleteNeed(TinyLife.NeedType, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DepleteNeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 1452
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nDepletes this person&apos;s <xref href=\"TinyLife.Need\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"TinyLife.NeedType\" data-throw-if-not-resolved=\"false\"></xref> by the given amount\nNote that, when the &quot;NoNeed&quot; cheat is active, this method does nothing.\n"
  example: []
  syntax:
    content: public void DepleteNeed(NeedType type, float amount, float speedMultiplier)
    parameters:
    - id: type
      type: TinyLife.NeedType
      description: The type of need to deplete
    - id: amount
      type: System.Single
      description: The amount to deplete the need by
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub DepleteNeed(type As NeedType, amount As Single, speedMultiplier As Single)
  overload: TinyLife.Objects.Person.DepleteNeed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  commentId: M:TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  id: HasPersonality(TinyLife.PersonalityType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HasPersonality(PersonalityType)
  nameWithType: Person.HasPersonality(PersonalityType)
  fullName: TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasPersonality
    path: ../TinyLife/Objects/Person.cs
    startLine: 1463
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this person has the given <xref href=\"TinyLife.PersonalityType\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool HasPersonality(PersonalityType type)
    parameters:
    - id: type
      type: TinyLife.PersonalityType
      description: The personality type to query
    return:
      type: System.Boolean
      description: true if this person has this personality type, false otherwise
    content.vb: Public Function HasPersonality(type As PersonalityType) As Boolean
  overload: TinyLife.Objects.Person.HasPersonality*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  id: EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: EnqueueAction(ActionType, ActionInfo, Boolean, ActionVariety, Boolean, Boolean)
  nameWithType: Person.EnqueueAction(ActionType, ActionInfo, Boolean, ActionVariety, Boolean, Boolean)
  fullName: TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Actions.ActionVariety, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EnqueueAction
    path: ../TinyLife/Objects/Person.cs
    startLine: 1477
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nEnqueues the given action into <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> to be executed later.\n"
  example: []
  syntax:
    content: public Action EnqueueAction(ActionType type, ActionInfo info, bool automatic, ActionVariety variety = null, bool priority = false, bool force = false)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action to enqueue
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action information
    - id: automatic
      type: System.Boolean
      description: Whether this action is considered to have started automatically (or invoked by a player)
    - id: variety
      type: TinyLife.Actions.ActionVariety
      description: The variety of the action to start, or null if this action has no varieties or a random variety should be chosen
    - id: priority
      type: System.Boolean
      description: Whether to add this action to the start of the action queue rather than the end
    - id: force
      type: System.Boolean
      description: Whether to start the action even if <xref href="TinyLife.Actions.ActionType.TypeSettings.CanExecute" data-throw-if-not-resolved="false"></xref> returns false
    return:
      type: TinyLife.Actions.Action
      description: The created action, or null if the action cannot be executed
    content.vb: Public Function EnqueueAction(type As ActionType, info As ActionInfo, automatic As Boolean, variety As ActionVariety = Nothing, priority As Boolean = False, force As Boolean = False) As Action
  overload: TinyLife.Objects.Person.EnqueueAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  commentId: M:TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  id: CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: CancelAction(Action, Action, Boolean)
  nameWithType: Person.CancelAction(Action, Action, Boolean)
  fullName: TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action, TinyLife.Actions.Action, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CancelAction
    path: ../TinyLife/Objects/Person.cs
    startLine: 1514
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nTries to cancel the given action, removing it from <xref href=\"TinyLife.Objects.Person.CurrentActions\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Objects.Person.ActionQueue\" data-throw-if-not-resolved=\"false\"></xref> in the process.\nIf the action in question cannot be canceled, this method returns false.\n"
  example: []
  syntax:
    content: public bool CancelAction(Action action, Action cancelSource = null, bool force = false)
    parameters:
    - id: action
      type: TinyLife.Actions.Action
      description: The action to cancel
    - id: cancelSource
      type: TinyLife.Actions.Action
      description: The action that is responsible for this cancelation, or null by default
    - id: force
      type: System.Boolean
      description: Whether to cancel the action even if <xref href="TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)" data-throw-if-not-resolved="false"></xref> returns false
    return:
      type: System.Boolean
      description: Whether the action could be canceled successfully
    content.vb: Public Function CancelAction(action As Action, cancelSource As Action = Nothing, force As Boolean = False) As Boolean
  overload: TinyLife.Objects.Person.CancelAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.FindPathAsync(Microsoft.Xna.Framework.Point,System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point},MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost)
  commentId: M:TinyLife.Objects.Person.FindPathAsync(Microsoft.Xna.Framework.Point,System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point},MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost)
  id: FindPathAsync(Microsoft.Xna.Framework.Point,System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point},MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: FindPathAsync(Point, ICollection<Point>, AStar<Point>.GetCost)
  nameWithType: Person.FindPathAsync(Point, ICollection<Point>, AStar<Point>.GetCost)
  fullName: TinyLife.Objects.Person.FindPathAsync(Microsoft.Xna.Framework.Point, System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>, MLEM.Pathfinding.AStar<Microsoft.Xna.Framework.Point>.GetCost)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: FindPathAsync
    path: ../TinyLife/Objects/Person.cs
    startLine: 1533
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nFinds a path asynchronously using the A* pathfinding algorithm.\nNote that the found path is not automatically embarked on.\nUsually, this method should not be used, but <xref href=\"TinyLife.Actions.GoHereAction\" data-throw-if-not-resolved=\"false\"></xref> should be used instead.\n"
  example: []
  syntax:
    content: public Task<Stack<Point>> FindPathAsync(Point start, ICollection<Point> goals, AStar<Point>.GetCost costFunction = null)
    parameters:
    - id: start
      type: Microsoft.Xna.Framework.Point
      description: The start tile position
    - id: goals
      type: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
      description: The goal tile positions.
    - id: costFunction
      type: MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost
      description: The function to use for determining the cost of tiles
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
      description: A task that, when completed, returns the path found or an empty stack if there is none
    content.vb: Public Function FindPathAsync(start As Point, goals As ICollection(Of Point), costFunction As AStar(Of Point).GetCost = Nothing) As Task(Of Stack(Of Point))
  overload: TinyLife.Objects.Person.FindPathAsync*
  nameWithType.vb: Person.FindPathAsync(Point, ICollection(Of Point), AStar(Of Point).GetCost)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.FindPathAsync(Microsoft.Xna.Framework.Point, System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point), MLEM.Pathfinding.AStar(Of Microsoft.Xna.Framework.Point).GetCost)
  name.vb: FindPathAsync(Point, ICollection(Of Point), AStar(Of Point).GetCost)
- uid: TinyLife.Objects.Person.GetHeldObject``1(System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetHeldObject``1(System.Boolean)
  id: GetHeldObject``1(System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetHeldObject<T>(Boolean)
  nameWithType: Person.GetHeldObject<T>(Boolean)
  fullName: TinyLife.Objects.Person.GetHeldObject<T>(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHeldObject
    path: ../TinyLife/Objects/Person.cs
    startLine: 1546
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> that this person is currently holding in their hands.\nNote that, if the held object is not of the required type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>, null is returned.\n"
  example: []
  syntax:
    content: >-
      public T GetHeldObject<T>(bool alsoReturnFake = true)
          where T : Furniture
    parameters:
    - id: alsoReturnFake
      type: System.Boolean
    typeParameters:
    - id: T
      description: The type that the held furniture is expected to have
    return:
      type: '{T}'
      description: The held furniture
    content.vb: Public Function GetHeldObject(Of T As Furniture)(alsoReturnFake As Boolean = True) As T
  overload: TinyLife.Objects.Person.GetHeldObject*
  nameWithType.vb: Person.GetHeldObject(Of T)(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.GetHeldObject(Of T)(System.Boolean)
  name.vb: GetHeldObject(Of T)(Boolean)
- uid: TinyLife.Objects.Person.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  commentId: M:TinyLife.Objects.Person.SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  id: SetHeldObject``1(TinyLife.Objects.FurnitureType,System.Int32[],System.Nullable{System.Guid},System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetHeldObject<T>(FurnitureType, Int32[], Nullable<Guid>, Boolean)
  nameWithType: Person.SetHeldObject<T>(FurnitureType, Int32[], Nullable<Guid>, Boolean)
  fullName: TinyLife.Objects.Person.SetHeldObject<T>(TinyLife.Objects.FurnitureType, System.Int32[], System.Nullable<System.Guid>, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetHeldObject
    path: ../TinyLife/Objects/Person.cs
    startLine: 1561
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the person&apos;s held object to the given furniture type, with the given data, and returns the created instance.\n"
  example: []
  syntax:
    content: >-
      public T SetHeldObject<T>(FurnitureType type, int[] colors = null, Guid? id = null, bool fake = false)
          where T : Furniture
    parameters:
    - id: type
      type: TinyLife.Objects.FurnitureType
      description: The type of furniture to construct
    - id: colors
      type: System.Int32[]
      description: The colors that the constructed furniture should have, or null to use the defaults
    - id: id
      type: System.Nullable{System.Guid}
      description: The id that this furniture should have, or null to choose a random one
    - id: fake
      type: System.Boolean
      description: Whether the object set to be held is considered fake. A fake object will not be taken into account when a <xref href="TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> check occurs. Fake items are expected to be removed at the end of an <xref href="System.Action" data-throw-if-not-resolved="false"></xref> that adds them.
    typeParameters:
    - id: T
      description: The type that the created furniture is expected to have
    return:
      type: '{T}'
      description: The created furniture instance
    content.vb: Public Function SetHeldObject(Of T As Furniture)(type As FurnitureType, colors As Integer() = Nothing, id As Guid? = Nothing, fake As Boolean = False) As T
  overload: TinyLife.Objects.Person.SetHeldObject*
  nameWithType.vb: Person.SetHeldObject(Of T)(FurnitureType, Int32(), Nullable(Of Guid), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.SetHeldObject(Of T)(TinyLife.Objects.FurnitureType, System.Int32(), System.Nullable(Of System.Guid), System.Boolean)
  name.vb: SetHeldObject(Of T)(FurnitureType, Int32(), Nullable(Of Guid), Boolean)
- uid: TinyLife.Objects.Person.SetHeldObject(TinyLife.Objects.Furniture,System.Boolean)
  commentId: M:TinyLife.Objects.Person.SetHeldObject(TinyLife.Objects.Furniture,System.Boolean)
  id: SetHeldObject(TinyLife.Objects.Furniture,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetHeldObject(Furniture, Boolean)
  nameWithType: Person.SetHeldObject(Furniture, Boolean)
  fullName: TinyLife.Objects.Person.SetHeldObject(TinyLife.Objects.Furniture, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetHeldObject
    path: ../TinyLife/Objects/Person.cs
    startLine: 1573
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets this person&apos;s held object to the given instance.\nNote that this resets the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref>&apos;s position to -1, -1.\n"
  example: []
  syntax:
    content: public void SetHeldObject(Furniture furniture, bool fake = false)
    parameters:
    - id: furniture
      type: TinyLife.Objects.Furniture
      description: The furniture to hold
    - id: fake
      type: System.Boolean
      description: Whether the object set to be held is considered fake. A fake object will not be taken into account when a <xref href="TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> check occurs. Fake items are expected to be removed at the end of an <xref href="System.Action" data-throw-if-not-resolved="false"></xref> that adds them.
    content.vb: Public Sub SetHeldObject(furniture As Furniture, fake As Boolean = False)
  overload: TinyLife.Objects.Person.SetHeldObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetHeldActionInfo
  commentId: M:TinyLife.Objects.Person.GetHeldActionInfo
  id: GetHeldActionInfo
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetHeldActionInfo()
  nameWithType: Person.GetHeldActionInfo()
  fullName: TinyLife.Objects.Person.GetHeldActionInfo()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetHeldActionInfo
    path: ../TinyLife/Objects/Person.cs
    startLine: 1588
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"TinyLife.Objects.Person.GetHeldObject%60%601(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> if there is none.\nNote that, if the held object is marked as being fake, this method also returns <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.\n"
  example: []
  syntax:
    content: public ActionInfo GetHeldActionInfo()
    return:
      type: TinyLife.Actions.ActionInfo
      description: The held action info.
    content.vb: Public Function GetHeldActionInfo As ActionInfo
  overload: TinyLife.Objects.Person.GetHeldActionInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.ToCreatedByString
  commentId: M:TinyLife.Objects.Person.ToCreatedByString
  id: ToCreatedByString
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: ToCreatedByString()
  nameWithType: Person.ToCreatedByString()
  fullName: TinyLife.Objects.Person.ToCreatedByString()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToCreatedByString
    path: ../TinyLife/Objects/Person.cs
    startLine: 1596
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a string representation of this person using the localized &quot;Created by:&quot; prefix\n"
  example: []
  syntax:
    content: public string ToCreatedByString()
    return:
      type: System.String
      description: A &quot;created by&quot; string
    content.vb: Public Function ToCreatedByString As String
  overload: TinyLife.Objects.Person.ToCreatedByString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.Die(TinyLife.Objects.Person.DeathReason,System.Boolean)
  commentId: M:TinyLife.Objects.Person.Die(TinyLife.Objects.Person.DeathReason,System.Boolean)
  id: Die(TinyLife.Objects.Person.DeathReason,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Die(Person.DeathReason, Boolean)
  nameWithType: Person.Die(Person.DeathReason, Boolean)
  fullName: TinyLife.Objects.Person.Die(TinyLife.Objects.Person.DeathReason, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Die
    path: ../TinyLife/Objects/Person.cs
    startLine: 1606
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person to die, removing it from the world and optionally spawning a <xref href=\"TinyLife.Objects.FurnitureType.Gravestone\" data-throw-if-not-resolved=\"false\"></xref>.\nNote thta this method&apos;s content is executed at the end of the current <xref href=\"TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> frame, and not right away.\n"
  example: []
  syntax:
    content: public void Die(Person.DeathReason reason, bool createGravestone = true)
    parameters:
    - id: reason
      type: TinyLife.Objects.Person.DeathReason
      description: The reason for this person&apos;s death
    - id: createGravestone
      type: System.Boolean
      description: Whether or not to create a gravestone
    content.vb: Public Sub Die(reason As Person.DeathReason, createGravestone As Boolean = True)
  overload: TinyLife.Objects.Person.Die*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  commentId: M:TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  id: AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AddEmotion(EmotionModifier, Int32, TimeSpan, IEmotionSource, Boolean)
  nameWithType: Person.AddEmotion(EmotionModifier, Int32, TimeSpan, IEmotionSource, Boolean)
  fullName: TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier, System.Int32, System.TimeSpan, TinyLife.Emotions.IEmotionSource, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddEmotion
    path: ../TinyLife/Objects/Person.cs
    startLine: 1703
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds the given <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> with the given intensity and time\n"
  example: []
  syntax:
    content: public bool AddEmotion(EmotionModifier type, int amount, TimeSpan time, IEmotionSource source, bool increaseExisting = false)
    parameters:
    - id: type
      type: TinyLife.Emotions.EmotionModifier
      description: The type of emotion to add
    - id: amount
      type: System.Int32
      description: The intensity of the emotion to add
    - id: time
      type: System.TimeSpan
      description: The amount of in-game time the emotion should last for
    - id: source
      type: TinyLife.Emotions.IEmotionSource
      description: The emotion source that caused this emotion. Supported objects include <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.Actions.ActionType" data-throw-if-not-resolved="false"></xref>, <xref href="TinyLife.NeedType" data-throw-if-not-resolved="false"></xref> and more. May be <xref uid="langword_csharp_null" name="null" href=""></xref>.
    - id: increaseExisting
      type: System.Boolean
      description: Whether existing emotion modifiers of the same type should be increased by the given time and amount. If this is false, existing emotions get removed instead.
    return:
      type: System.Boolean
      description: Whether the emotion could be added or it was already applied. If <code data-dev-comment-type="paramref" class="paramref">increaseExisting</code> is true, this method always returns true.
    content.vb: Public Function AddEmotion(type As EmotionModifier, amount As Integer, time As TimeSpan, source As IEmotionSource, increaseExisting As Boolean = False) As Boolean
  overload: TinyLife.Objects.Person.AddEmotion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  commentId: M:TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  id: RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RemoveEmotion(EmotionModifier)
  nameWithType: Person.RemoveEmotion(EmotionModifier)
  fullName: TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveEmotion
    path: ../TinyLife/Objects/Person.cs
    startLine: 1726
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRemoves the given <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> from this person&apos;s <xref href=\"TinyLife.Objects.Person.EmotionModifiers\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public bool RemoveEmotion(EmotionModifier type)
    parameters:
    - id: type
      type: TinyLife.Emotions.EmotionModifier
      description: The type of emotion to remove
    return:
      type: System.Boolean
      description: Whether the emotion could be removed (or wasn&apos;t contained in the first place)
    content.vb: Public Function RemoveEmotion(type As EmotionModifier) As Boolean
  overload: TinyLife.Objects.Person.RemoveEmotion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  id: LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LowerEmotion(EmotionType, Single, Single)
  nameWithType: Person.LowerEmotion(EmotionType, Single, Single)
  fullName: TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LowerEmotion
    path: ../TinyLife/Objects/Person.cs
    startLine: 1747
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nLowers any <xref href=\"TinyLife.Objects.Person.EmotionModifiers\" data-throw-if-not-resolved=\"false\"></xref> of the given <xref href=\"TinyLife.Emotions.EmotionType\" data-throw-if-not-resolved=\"false\"></xref> by the given percentage.\nEach modifier&apos;s <xref href=\"TinyLife.Emotions.EmotionModifier.Instance.Time\" data-throw-if-not-resolved=\"false\"></xref> will be lowered by the percentage of their <xref href=\"TinyLife.Emotions.EmotionModifier.Instance.TotalTime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool LowerEmotion(EmotionType type, float percentage, float speedMultiplier = 1F)
    parameters:
    - id: type
      type: TinyLife.Emotions.EmotionType
      description: The type of emotion to lower
    - id: percentage
      type: System.Single
      description: The percentage to lower the emotion by
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
      description: Whether the emotion could be lowered, or this person had no emotion modifiers of the given type
    content.vb: Public Function LowerEmotion(type As EmotionType, percentage As Single, speedMultiplier As Single = 1F) As Boolean
  overload: TinyLife.Objects.Person.LowerEmotion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.LowerEmotionModifier(TinyLife.Emotions.EmotionModifier,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.LowerEmotionModifier(TinyLife.Emotions.EmotionModifier,System.Single,System.Single)
  id: LowerEmotionModifier(TinyLife.Emotions.EmotionModifier,System.Single,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: LowerEmotionModifier(EmotionModifier, Single, Single)
  nameWithType: Person.LowerEmotionModifier(EmotionModifier, Single, Single)
  fullName: TinyLife.Objects.Person.LowerEmotionModifier(TinyLife.Emotions.EmotionModifier, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LowerEmotionModifier
    path: ../TinyLife/Objects/Person.cs
    startLine: 1766
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nLowers the specified emotion modifier by the specified percentage.\nThis differs from <xref href=\"TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> in that only the specific modifier is lowered.\n"
  example: []
  syntax:
    content: public bool LowerEmotionModifier(EmotionModifier modifier, float percentage, float speedMultiplier = 1F)
    parameters:
    - id: modifier
      type: TinyLife.Emotions.EmotionModifier
      description: The emotion modifier to lower
    - id: percentage
      type: System.Single
      description: The percentage to lower the emotion by
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Boolean
      description: Whether the emotion could be lowered, or this person had no emotion modifiers of the given type
    content.vb: Public Function LowerEmotionModifier(modifier As EmotionModifier, percentage As Single, speedMultiplier As Single = 1F) As Boolean
  overload: TinyLife.Objects.Person.LowerEmotionModifier*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HasEmotionModifier(TinyLife.Emotions.EmotionModifier)
  commentId: M:TinyLife.Objects.Person.HasEmotionModifier(TinyLife.Emotions.EmotionModifier)
  id: HasEmotionModifier(TinyLife.Emotions.EmotionModifier)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HasEmotionModifier(EmotionModifier)
  nameWithType: Person.HasEmotionModifier(EmotionModifier)
  fullName: TinyLife.Objects.Person.HasEmotionModifier(TinyLife.Emotions.EmotionModifier)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasEmotionModifier
    path: ../TinyLife/Objects/Person.cs
    startLine: 1782
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this person has the given <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> in their <xref href=\"TinyLife.Objects.Person.EmotionModifiers\" data-throw-if-not-resolved=\"false\"></xref> list\n"
  example: []
  syntax:
    content: public bool HasEmotionModifier(EmotionModifier type)
    parameters:
    - id: type
      type: TinyLife.Emotions.EmotionModifier
      description: The type of emotion modifier to query
    return:
      type: System.Boolean
      description: Whether the emotion modifier is active
    content.vb: Public Function HasEmotionModifier(type As EmotionModifier) As Boolean
  overload: TinyLife.Objects.Person.HasEmotionModifier*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetWalkSpeed
  commentId: M:TinyLife.Objects.Person.GetWalkSpeed
  id: GetWalkSpeed
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetWalkSpeed()
  nameWithType: Person.GetWalkSpeed()
  fullName: TinyLife.Objects.Person.GetWalkSpeed()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetWalkSpeed
    path: ../TinyLife/Objects/Person.cs
    startLine: 1791
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns this person&apos;s current walk speed, per update frame.\nThe walk speed is influenced by their <xref href=\"TinyLife.Objects.Person.PersonalityTypes\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.Emotion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetWalkSpeed()
    return:
      type: System.Single
      description: The walk speed
    content.vb: Public Function GetWalkSpeed As Single
  overload: TinyLife.Objects.Person.GetWalkSpeed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  id: GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  nameWithType: Person.GetEfficiencyModifier(Single, ActionInfo, SkillType, Single)
  fullName: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single, TinyLife.Actions.ActionInfo, TinyLife.Skills.SkillType, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEfficiencyModifier
    path: ../TinyLife/Objects/Person.cs
    startLine: 1819
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a multiplier (which will be close to 1) of how &quot;efficiently&quot; this person currently works and moves.\nThis value is influenced by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">speedMultiplier</code>, the level of the passed <code data-dev-comment-type=\"paramref\" class=\"paramref\">skill</code> as well as this person&apos;s <xref href=\"TinyLife.Objects.Person.Emotion\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Objects.Person.PersonalityTypes\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetEfficiencyModifier(float speedMultiplier = 1F, ActionInfo info = null, SkillType skill = null, float levelModifier = 0.1F)
    parameters:
    - id: speedMultiplier
      type: System.Single
      description: The game speed multiplier, which represents how fast things should happen, which is usually determined by <xref href="TinyLife.GameImpl.Speed" data-throw-if-not-resolved="false"></xref>
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: An optional action info whose <xref href="TinyLife.Actions.ActionInfo.GetInvolvedObjects%60%601(TinyLife.Objects.ObjectCategory%2cSystem.Boolean%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> can influence the efficiency
    - id: skill
      type: TinyLife.Skills.SkillType
      description: A skill that optionally influences the efficiency
    - id: levelModifier
      type: System.Single
      description: The amount that each <code data-dev-comment-type="paramref" class="paramref">skill</code> level should influence the efficiency by. Defaults to 0.1.
    return:
      type: System.Single
      description: The person&apos;s efficiency, which is a value close to or equal to 1
    content.vb: Public Function GetEfficiencyModifier(speedMultiplier As Single = 1F, info As ActionInfo = Nothing, skill As SkillType = Nothing, levelModifier As Single = 0.1F) As Single
  overload: TinyLife.Objects.Person.GetEfficiencyModifier*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HasHouseholdMember(System.Guid)
  commentId: M:TinyLife.Objects.Person.HasHouseholdMember(System.Guid)
  id: HasHouseholdMember(System.Guid)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HasHouseholdMember(Guid)
  nameWithType: Person.HasHouseholdMember(Guid)
  fullName: TinyLife.Objects.Person.HasHouseholdMember(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasHouseholdMember
    path: ../TinyLife/Objects/Person.cs
    startLine: 1873
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the given person <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> is a part of this household\n"
  example: []
  syntax:
    content: public bool HasHouseholdMember(Guid person)
    parameters:
    - id: person
      type: System.Guid
      description: The unique id of the person to query
    return:
      type: System.Boolean
      description: true if the person is part of this household, false otherwise
    content.vb: Public Function HasHouseholdMember(person As Guid) As Boolean
  overload: TinyLife.Objects.Person.HasHouseholdMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.HasHouseholdMember(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Person.HasHouseholdMember(TinyLife.Objects.Person)
  id: HasHouseholdMember(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: HasHouseholdMember(Person)
  nameWithType: Person.HasHouseholdMember(Person)
  fullName: TinyLife.Objects.Person.HasHouseholdMember(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasHouseholdMember
    path: ../TinyLife/Objects/Person.cs
    startLine: 1878
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether the given person <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> is a part of this household\n"
  example: []
  syntax:
    content: public bool HasHouseholdMember(Person person)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
    return:
      type: System.Boolean
      description: true if the person is part of this household, false otherwise
    content.vb: Public Function HasHouseholdMember(person As Person) As Boolean
  overload: TinyLife.Objects.Person.HasHouseholdMember*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetProjects(System.String)
  commentId: M:TinyLife.Objects.Person.GetProjects(System.String)
  id: GetProjects(System.String)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetProjects(String)
  nameWithType: Person.GetProjects(String)
  fullName: TinyLife.Objects.Person.GetProjects(System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetProjects
    path: ../TinyLife/Objects/Person.cs
    startLine: 1888
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns all of the projects of the given <xref href=\"TinyLife.Goals.Project.Type\" data-throw-if-not-resolved=\"false\"></xref> that this person has.\nTo access all projects regardless of type, iterate the <xref href=\"TinyLife.Objects.Person.Projects\" data-throw-if-not-resolved=\"false\"></xref> list instead.\n"
  example: []
  syntax:
    content: public IEnumerable<Project> GetProjects(string type)
    parameters:
    - id: type
      type: System.String
      description: The <xref href="TinyLife.Goals.Project.Type" data-throw-if-not-resolved="false"></xref> of project to return
    return:
      type: System.Collections.Generic.IEnumerable{TinyLife.Goals.Project}
      description: A set of projects that match the given type
    content.vb: Public Function GetProjects(type As String) As IEnumerable(Of Project)
  overload: TinyLife.Objects.Person.GetProjects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetProject(System.String,System.String)
  commentId: M:TinyLife.Objects.Person.GetProject(System.String,System.String)
  id: GetProject(System.String,System.String)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetProject(String, String)
  nameWithType: Person.GetProject(String, String)
  fullName: TinyLife.Objects.Person.GetProject(System.String, System.String)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetProject
    path: ../TinyLife/Objects/Person.cs
    startLine: 1898
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a project of the given <xref href=\"TinyLife.Goals.Project.Type\" data-throw-if-not-resolved=\"false\"></xref> with the given <xref href=\"TinyLife.Goals.Project.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Project GetProject(string type, string name)
    parameters:
    - id: type
      type: System.String
      description: The <xref href="TinyLife.Goals.Project.Type" data-throw-if-not-resolved="false"></xref> of the project to return
    - id: name
      type: System.String
      description: The <xref href="TinyLife.Goals.Project.Name" data-throw-if-not-resolved="false"></xref> of the project to return
    return:
      type: TinyLife.Goals.Project
      description: The matching project, or null if there is none
    content.vb: Public Function GetProject(type As String, name As String) As Project
  overload: TinyLife.Objects.Person.GetProject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  commentId: M:TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  id: StartProject(TinyLife.Goals.Project)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: StartProject(Project)
  nameWithType: Person.StartProject(Project)
  fullName: TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: StartProject
    path: ../TinyLife/Objects/Person.cs
    startLine: 1907
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nStarts a new project, adding it to the <xref href=\"TinyLife.Objects.Person.Projects\" data-throw-if-not-resolved=\"false\"></xref> list of this person\n"
  example: []
  syntax:
    content: public Project StartProject(Project project)
    parameters:
    - id: project
      type: TinyLife.Goals.Project
      description: The project to start
    return:
      type: TinyLife.Goals.Project
      description: The project that was passed, for chaining
    content.vb: Public Function StartProject(project As Project) As Project
  overload: TinyLife.Objects.Person.StartProject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  id: GetPassiveActionPriority(TinyLife.Actions.ActionType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetPassiveActionPriority(ActionType)
  nameWithType: Person.GetPassiveActionPriority(ActionType)
  fullName: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPassiveActionPriority
    path: ../TinyLife/Objects/Person.cs
    startLine: 1919
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the passive priority for the given <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method evaluates the action&apos;s own <xref href=\"TinyLife.Actions.ActionType.AiSettings.PassivePriority\" data-throw-if-not-resolved=\"false\"></xref> and adds additional factors like <xref href=\"TinyLife.PersonalityType.Extroverted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.PersonalityType.Introverted\" data-throw-if-not-resolved=\"false\"></xref> modifiers for social actions.\nYou can use <xref href=\"TinyLife.Objects.Person.OnGetPassiveActionPriority\" data-throw-if-not-resolved=\"false\"></xref> to change the return value of this method.\n"
  example: []
  syntax:
    content: public float GetPassiveActionPriority(ActionType type)
    parameters:
    - id: type
      type: TinyLife.Actions.ActionType
      description: The type of action to get the passive priority for
    return:
      type: System.Single
      description: The action&apos;s passive priority
    content.vb: Public Function GetPassiveActionPriority(type As ActionType) As Single
  overload: TinyLife.Objects.Person.GetPassiveActionPriority*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  id: GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetRandomOutfit(ClothesIntention)
  nameWithType: Person.GetRandomOutfit(ClothesIntention)
  fullName: TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomOutfit
    path: ../TinyLife/Objects/Person.cs
    startLine: 1941
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the index of the <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref> collection that best matches the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int GetRandomOutfit(ClothesIntention intention)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to match the best outfit to.
    return:
      type: System.Int32
      description: The index in the <xref href="TinyLife.Objects.Person.Outfits" data-throw-if-not-resolved="false"></xref> collection that best matches the intention, or -1 there is no match.
    content.vb: Public Function GetRandomOutfit(intention As ClothesIntention) As Integer
  overload: TinyLife.Objects.Person.GetRandomOutfit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  id: SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetCurrentOutfit(ClothesIntention)
  nameWithType: Person.SetCurrentOutfit(ClothesIntention)
  fullName: TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCurrentOutfit
    path: ../TinyLife/Objects/Person.cs
    startLine: 1953
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets the current outfit to an outfit that matches the given <xref href=\"TinyLife.Objects.ClothesIntention\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method returns whether <xref href=\"TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)\" data-throw-if-not-resolved=\"false\"></xref> returned a valid outfit index or if no matching outfit could be found.\nNote that, if this person is already wearing an outfit that matches the intention, the outfit will not be changed, and this method returns true.\n"
  example: []
  syntax:
    content: public bool SetCurrentOutfit(ClothesIntention intention)
    parameters:
    - id: intention
      type: TinyLife.Objects.ClothesIntention
      description: The intention to match the best outfit to.
    return:
      type: System.Boolean
      description: True if an outfit could be found, or false if no matching outfit could be found.
    content.vb: Public Function SetCurrentOutfit(intention As ClothesIntention) As Boolean
  overload: TinyLife.Objects.Person.SetCurrentOutfit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  commentId: M:TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  id: SetCurrentOutfit(System.Int32)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetCurrentOutfit(Int32)
  nameWithType: Person.SetCurrentOutfit(Int32)
  fullName: TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetCurrentOutfit
    path: ../TinyLife/Objects/Person.cs
    startLine: 1969
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets this person&apos;s <xref href=\"TinyLife.Objects.Person.CurrentOutfitIndex\" data-throw-if-not-resolved=\"false\"></xref> to the given index.\nAdditionally, this method updates this person&apos;s animation and portrait to the new outfit.\n"
  example: []
  syntax:
    content: public void SetCurrentOutfit(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index to set
    content.vb: Public Sub SetCurrentOutfit(index As Integer)
  overload: TinyLife.Objects.Person.SetCurrentOutfit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  commentId: M:TinyLife.Objects.Person.SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  id: SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: SetNewId(Map, IEnumerable<Person>, IEnumerable<Furniture>)
  nameWithType: Person.SetNewId(Map, IEnumerable<Person>, IEnumerable<Furniture>)
  fullName: TinyLife.Objects.Person.SetNewId(TinyLife.World.Map, System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>, System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SetNewId
    path: ../TinyLife/Objects/Person.cs
    startLine: 1985
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nSets a new <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> for this person, and also updates any furniture and relationship references for them.\nOptionally, a set of additional people and furniture that might not currently be on the map can be passed.\n"
  example: []
  syntax:
    content: public void SetNewId(Map map, IEnumerable<Person> possibleAdditionalRelationships = null, IEnumerable<Furniture> possibleAdditionalFurniture = null)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map that the person will be added to
    - id: possibleAdditionalRelationships
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
      description: A set of people, in addition to the <code data-dev-comment-type="paramref" class="paramref">map</code>&apos;s people, that this person might have a relationship to
    - id: possibleAdditionalFurniture
      type: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
      description: A set of objects, in addition to the <code data-dev-comment-type="paramref" class="paramref">map</code>&apos;s objects, that this person might have created
    content.vb: Public Sub SetNewId(map As Map, possibleAdditionalRelationships As IEnumerable(Of Person) = Nothing, possibleAdditionalFurniture As IEnumerable(Of Furniture) = Nothing)
  overload: TinyLife.Objects.Person.SetNewId*
  nameWithType.vb: Person.SetNewId(Map, IEnumerable(Of Person), IEnumerable(Of Furniture))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.SetNewId(TinyLife.World.Map, System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person), System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture))
  name.vb: SetNewId(Map, IEnumerable(Of Person), IEnumerable(Of Furniture))
- uid: TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  id: IsIdMatch(TinyLife.Objects.Person)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsIdMatch(Person)
  nameWithType: Person.IsIdMatch(Person)
  fullName: TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsIdMatch
    path: ../TinyLife/Objects/Person.cs
    startLine: 2026
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this person and the other person have matching <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> values or whether their ID histories (<xref href=\"TinyLife.Objects.Person.SetNewId(TinyLife.World.Map%2cSystem.Collections.Generic.IEnumerable%7bTinyLife.Objects.Person%7d%2cSystem.Collections.Generic.IEnumerable%7bTinyLife.Objects.Furniture%7d)\" data-throw-if-not-resolved=\"false\"></xref>) overlap.\nIf this method returns two, this person and the other person can be considered the same person to a certain degree, as it means that they are copies of each other, or copies of the same person.\n"
  example: []
  syntax:
    content: public bool IsIdMatch(Person other)
    parameters:
    - id: other
      type: TinyLife.Objects.Person
      description: The person to compare this person to
    return:
      type: System.Boolean
      description: Whether this person and the passed person have matching ids
    content.vb: Public Function IsIdMatch(other As Person) As Boolean
  overload: TinyLife.Objects.Person.IsIdMatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.IsIdMatch(System.Guid)
  commentId: M:TinyLife.Objects.Person.IsIdMatch(System.Guid)
  id: IsIdMatch(System.Guid)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: IsIdMatch(Guid)
  nameWithType: Person.IsIdMatch(Guid)
  fullName: TinyLife.Objects.Person.IsIdMatch(System.Guid)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsIdMatch
    path: ../TinyLife/Objects/Person.cs
    startLine: 2036
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns whether this person&apos;s <xref href=\"TinyLife.Objects.MapObject.Id\" data-throw-if-not-resolved=\"false\"></xref> or any entry in their ID history (<xref href=\"TinyLife.Objects.Person.SetNewId(TinyLife.World.Map%2cSystem.Collections.Generic.IEnumerable%7bTinyLife.Objects.Person%7d%2cSystem.Collections.Generic.IEnumerable%7bTinyLife.Objects.Furniture%7d)\" data-throw-if-not-resolved=\"false\"></xref>) matches the <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> passed.\nTo compare whether two people are an ID match, use <xref href=\"TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsIdMatch(Guid id)
    parameters:
    - id: id
      type: System.Guid
      description: The id to compare this person&apos;s ids to
    return:
      type: System.Boolean
      description: Whether any of this person&apos;s id match
    content.vb: Public Function IsIdMatch(id As Guid) As Boolean
  overload: TinyLife.Objects.Person.IsIdMatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  id: GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetPersonalitySkillBoost(SkillType)
  nameWithType: Person.GetPersonalitySkillBoost(SkillType)
  fullName: TinyLife.Objects.Person.GetPersonalitySkillBoost(TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetPersonalitySkillBoost
    path: ../TinyLife/Objects/Person.cs
    startLine: 2046
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a modifier that skills with the given <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> should be boosted by, based on this person&apos;s <xref href=\"TinyLife.Objects.Person.PersonalityTypes\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method is used by <xref href=\"TinyLife.Objects.Person.GetEfficiencyModifier(System.Single%2cTinyLife.Actions.ActionInfo%2cTinyLife.Skills.SkillType%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public float GetPersonalitySkillBoost(SkillType skill)
    parameters:
    - id: skill
      type: TinyLife.Skills.SkillType
      description: The skill category whose personality skill boost to return
    return:
      type: System.Single
      description: A modifier that skills should be boosted by
    content.vb: Public Function GetPersonalitySkillBoost(skill As SkillType) As Single
  overload: TinyLife.Objects.Person.GetPersonalitySkillBoost*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetCurrentGoals
  commentId: M:TinyLife.Objects.Person.GetCurrentGoals
  id: GetCurrentGoals
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetCurrentGoals()
  nameWithType: Person.GetCurrentGoals()
  fullName: TinyLife.Objects.Person.GetCurrentGoals()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetCurrentGoals
    path: ../TinyLife/Objects/Person.cs
    startLine: 2066
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a set of <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> objects that this person is currently working on.\nTo add more current goals, use <xref href=\"TinyLife.Objects.Person.OnGetCurrentGoals\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public List<IGoalTriggerable> GetCurrentGoals()
    return:
      type: System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}
      description: This person&apos;s current goals
    content.vb: Public Function GetCurrentGoals As List(Of IGoalTriggerable)
  overload: TinyLife.Objects.Person.GetCurrentGoals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  commentId: M:TinyLife.Objects.Person.EarnMoney(System.Single,System.Object)
  id: EarnMoney(System.Single,System.Object)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: EarnMoney(Single, Object)
  nameWithType: Person.EarnMoney(Single, Object)
  fullName: TinyLife.Objects.Person.EarnMoney(System.Single, System.Object)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: EarnMoney
    path: ../TinyLife/Objects/Person.cs
    startLine: 2090
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCauses this person&apos;s <xref href=\"TinyLife.Objects.Person.Money\" data-throw-if-not-resolved=\"false\"></xref> to be increased, but additionally triggers the <xref href=\"TinyLife.Goals.GoalTrigger.EarnMoney\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nThis method should only be used if the money is earned in a &quot;manual&quot; way, like when selling a homemade painting or publishing a book.\n"
  example: []
  syntax:
    content: public void EarnMoney(float money, object triggerObject)
    parameters:
    - id: money
      type: System.Single
      description: The money to earn.
    - id: triggerObject
      type: System.Object
      description: The object that caused the money to be earned, which is passed to <xref href="TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable%2cSystem.Object%2cTinyLife.Goals.GoalTrigger%2cSystem.Object%5b%5d)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub EarnMoney(money As Single, triggerObject As Object)
  overload: TinyLife.Objects.Person.EarnMoney*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Objects.Person.AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  id: AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: AddMemory<T>(MemoryType, ActionInfo, Nullable<TimeSpan>)
  nameWithType: Person.AddMemory<T>(MemoryType, ActionInfo, Nullable<TimeSpan>)
  fullName: TinyLife.Objects.Person.AddMemory<T>(TinyLife.Goals.MemoryType, TinyLife.Actions.ActionInfo, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AddMemory
    path: ../TinyLife/Objects/Person.cs
    startLine: 2102
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nAdds a <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.Objects.Person.Memories\" data-throw-if-not-resolved=\"false\"></xref> list of this person.\n"
  example: []
  syntax:
    content: >-
      public T AddMemory<T>(MemoryType type, ActionInfo info, TimeSpan? timeOccured = null)
          where T : Memory
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The type of memory to add.
    - id: info
      type: TinyLife.Actions.ActionInfo
      description: The action info to attach to this memory, or <xref uid="langword_csharp_null" name="null" href=""></xref> to use <xref href="TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)" data-throw-if-not-resolved="false"></xref>.
    - id: timeOccured
      type: System.Nullable{System.TimeSpan}
      description: The time that this memory occured on, or <xref uid="langword_csharp_null" name="null" href=""></xref> to use <xref href="TinyLife.World.Map.Time" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: The added memory.
    content.vb: Public Function AddMemory(Of T As Memory)(type As MemoryType, info As ActionInfo, timeOccured As TimeSpan? = Nothing) As T
  overload: TinyLife.Objects.Person.AddMemory*
  nameWithType.vb: Person.AddMemory(Of T)(MemoryType, ActionInfo, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.AddMemory(Of T)(TinyLife.Goals.MemoryType, TinyLife.Actions.ActionInfo, System.Nullable(Of System.TimeSpan))
  name.vb: AddMemory(Of T)(MemoryType, ActionInfo, Nullable(Of TimeSpan))
- uid: TinyLife.Objects.Person.GetMemories``1(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Objects.Person.GetMemories``1(TinyLife.Goals.MemoryType)
  id: GetMemories``1(TinyLife.Goals.MemoryType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetMemories<T>(MemoryType)
  nameWithType: Person.GetMemories<T>(MemoryType)
  fullName: TinyLife.Objects.Person.GetMemories<T>(TinyLife.Goals.MemoryType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMemories
    path: ../TinyLife/Objects/Person.cs
    startLine: 2119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns all <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instances that this person currently tracks that match the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> GetMemories<T>(MemoryType type)
          where T : Memory
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to match.
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The memories of the given type.
    content.vb: Public Function GetMemories(Of T As Memory)(type As MemoryType) As IEnumerable(Of T)
  overload: TinyLife.Objects.Person.GetMemories*
  nameWithType.vb: Person.GetMemories(Of T)(MemoryType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.GetMemories(Of T)(TinyLife.Goals.MemoryType)
  name.vb: GetMemories(Of T)(MemoryType)
- uid: TinyLife.Objects.Person.RemoveMemory``1(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Objects.Person.RemoveMemory``1(TinyLife.Goals.MemoryType)
  id: RemoveMemory``1(TinyLife.Goals.MemoryType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: RemoveMemory<T>(MemoryType)
  nameWithType: Person.RemoveMemory<T>(MemoryType)
  fullName: TinyLife.Objects.Person.RemoveMemory<T>(TinyLife.Goals.MemoryType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RemoveMemory
    path: ../TinyLife/Objects/Person.cs
    startLine: 2128
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nRemoves all <xref href=\"TinyLife.Goals.Memory\" data-throw-if-not-resolved=\"false\"></xref> instances of the given type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> and <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> from this person&apos;s <xref href=\"TinyLife.Objects.Person.Memories\" data-throw-if-not-resolved=\"false\"></xref> collection, and returns the amount of memories removed.\n"
  example: []
  syntax:
    content: public int RemoveMemory<T>(MemoryType type)
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to match.
    typeParameters:
    - id: T
    return:
      type: System.Int32
      description: How many memories were removed.
    content.vb: Public Function RemoveMemory(Of T)(type As MemoryType) As Integer
  overload: TinyLife.Objects.Person.RemoveMemory*
  nameWithType.vb: Person.RemoveMemory(Of T)(MemoryType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.RemoveMemory(Of T)(TinyLife.Goals.MemoryType)
  name.vb: RemoveMemory(Of T)(MemoryType)
- uid: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  id: GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetTimeSinceMemory(MemoryType)
  nameWithType: Person.GetTimeSinceMemory(MemoryType)
  fullName: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTimeSinceMemory
    path: ../TinyLife/Objects/Person.cs
    startLine: 2138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the time since a memory of the given <xref href=\"TinyLife.Goals.MemoryType\" data-throw-if-not-resolved=\"false\"></xref> has occured.\nIf there are multiple memories of the given type, the minimum time is returned. If there is no memory of the given type, <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> is returned.\n"
  example: []
  syntax:
    content: public TimeSpan? GetTimeSinceMemory(MemoryType type)
    parameters:
    - id: type
      type: TinyLife.Goals.MemoryType
      description: The memory type to query.
    return:
      type: System.Nullable{System.TimeSpan}
      description: The time since the given memory type.
    content.vb: Public Function GetTimeSinceMemory(type As MemoryType) As TimeSpan?
  overload: TinyLife.Objects.Person.GetTimeSinceMemory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType[])
  commentId: M:TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType[])
  id: GetTimeSinceMemory(TinyLife.Goals.MemoryType[])
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetTimeSinceMemory(MemoryType[])
  nameWithType: Person.GetTimeSinceMemory(MemoryType[])
  fullName: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType[])
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetTimeSinceMemory
    path: ../TinyLife/Objects/Person.cs
    startLine: 2148
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  syntax:
    content: public TimeSpan? GetTimeSinceMemory(params MemoryType[] types)
    parameters:
    - id: types
      type: TinyLife.Goals.MemoryType[]
    return:
      type: System.Nullable{System.TimeSpan}
    content.vb: Public Function GetTimeSinceMemory(ParamArray types As MemoryType()) As TimeSpan?
  overload: TinyLife.Objects.Person.GetTimeSinceMemory*
  nameWithType.vb: Person.GetTimeSinceMemory(MemoryType())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType())
  name.vb: GetTimeSinceMemory(MemoryType())
- uid: TinyLife.Objects.Person.GetDaysBeforeAging
  commentId: M:TinyLife.Objects.Person.GetDaysBeforeAging
  id: GetDaysBeforeAging
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetDaysBeforeAging()
  nameWithType: Person.GetDaysBeforeAging()
  fullName: TinyLife.Objects.Person.GetDaysBeforeAging()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDaysBeforeAging
    path: ../TinyLife/Objects/Person.cs
    startLine: 2162
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns the amount of days that this person&apos;s current <xref href=\"TinyLife.Objects.Person.Age\" data-throw-if-not-resolved=\"false\"></xref> should last for in total, excluding the <xref href=\"TinyLife.Objects.Person.CurrentAgeDays\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int GetDaysBeforeAging()
    return:
      type: System.Int32
      description: The amount of days until this person should age up.
    content.vb: Public Function GetDaysBeforeAging As Integer
  overload: TinyLife.Objects.Person.GetDaysBeforeAging*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GoToExitRoad
  commentId: M:TinyLife.Objects.Person.GoToExitRoad
  id: GoToExitRoad
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GoToExitRoad()
  nameWithType: Person.GoToExitRoad()
  fullName: TinyLife.Objects.Person.GoToExitRoad()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GoToExitRoad
    path: ../TinyLife/Objects/Person.cs
    startLine: 2170
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nTeleports this person to the nearest exit road using <xref href=\"TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void GoToExitRoad()
    content.vb: Public Sub GoToExitRoad
  overload: TinyLife.Objects.Person.GoToExitRoad*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.UpdatePortraitIfDirty
  commentId: M:TinyLife.Objects.Person.UpdatePortraitIfDirty
  id: UpdatePortraitIfDirty
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: UpdatePortraitIfDirty()
  nameWithType: Person.UpdatePortraitIfDirty()
  fullName: TinyLife.Objects.Person.UpdatePortraitIfDirty()
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpdatePortraitIfDirty
    path: ../TinyLife/Objects/Person.cs
    startLine: 2180
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nUpdates this person&apos;s <xref href=\"TinyLife.Objects.Person.Portrait\" data-throw-if-not-resolved=\"false\"></xref> if it needs to be updated.\nNote that, since this method draws the portrait using a <xref href=\"Microsoft.Xna.Framework.Graphics.SpriteBatch\" data-throw-if-not-resolved=\"false\"></xref>, it needs to be called on the main thread.\n"
  example: []
  syntax:
    content: public void UpdatePortraitIfDirty()
    content.vb: Public Sub UpdatePortraitIfDirty
  overload: TinyLife.Objects.Person.UpdatePortraitIfDirty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  id: GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: GetRandomSpeakSound(VoiceStyle, SpeakStyle, List<SoundEffect>, Nullable<TimeSpan>)
  nameWithType: Person.GetRandomSpeakSound(VoiceStyle, SpeakStyle, List<SoundEffect>, Nullable<TimeSpan>)
  fullName: TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle, TinyLife.Objects.SpeakStyle, System.Collections.Generic.List<Microsoft.Xna.Framework.Audio.SoundEffect>, System.Nullable<System.TimeSpan>)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomSpeakSound
    path: ../TinyLife/Objects/Person.cs
    startLine: 2508
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nReturns a random sound effect which is a speak sound that matches any of the given <xref href=\"TinyLife.Objects.SpeakStyle\" data-throw-if-not-resolved=\"false\"></xref> flag values\n"
  example: []
  syntax:
    content: public static SoundEffect GetRandomSpeakSound(VoiceStyle voice, SpeakStyle style, List<SoundEffect> avoid = null, TimeSpan? maxLength = null)
    parameters:
    - id: voice
      type: TinyLife.Objects.VoiceStyle
      description: The <xref href="TinyLife.Objects.Person.VoiceStyle" data-throw-if-not-resolved="false"></xref> to use.
    - id: style
      type: TinyLife.Objects.SpeakStyle
      description: The styles to chooose sounds from, can be a combined flag
    - id: avoid
      type: System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}
      description: A list of sounds that will not be chosen from, even if they match the passed styles
    - id: maxLength
      type: System.Nullable{System.TimeSpan}
      description: The maximum length for the returned sound effect to have, or null to return sounds of any length
    return:
      type: Microsoft.Xna.Framework.Audio.SoundEffect
      description: A random sound effect that matches the given properties
    content.vb: Public Shared Function GetRandomSpeakSound(voice As VoiceStyle, style As SpeakStyle, avoid As List(Of SoundEffect) = Nothing, maxLength As TimeSpan? = Nothing) As SoundEffect
  overload: TinyLife.Objects.Person.GetRandomSpeakSound*
  nameWithType.vb: Person.GetRandomSpeakSound(VoiceStyle, SpeakStyle, List(Of SoundEffect), Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle, TinyLife.Objects.SpeakStyle, System.Collections.Generic.List(Of Microsoft.Xna.Framework.Audio.SoundEffect), System.Nullable(Of System.TimeSpan))
  name.vb: GetRandomSpeakSound(VoiceStyle, SpeakStyle, List(Of SoundEffect), Nullable(Of TimeSpan))
- uid: TinyLife.Objects.Person.Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Objects.Person.Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  id: Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  parent: TinyLife.Objects.Person
  langs:
  - csharp
  - vb
  name: Create(Map, Random, AgeGroup)
  nameWithType: Person.Create(Map, Random, AgeGroup)
  fullName: TinyLife.Objects.Person.Create(TinyLife.World.Map, System.Random, TinyLife.Objects.AgeGroup)
  type: Method
  source:
    remote:
      path: TinyLife/Objects/Person.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Create
    path: ../TinyLife/Objects/Person.cs
    startLine: 2531
  assemblies:
  - Tiny Life
  namespace: TinyLife.Objects
  summary: "\nCreates a new person with the given settings, optionally randomly generating the returned person&apos;s <xref href=\"TinyLife.Objects.Person.FirstName\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.LastName\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.Age\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Objects.Person.Outfits\" data-throw-if-not-resolved=\"false\"></xref> and more.\n"
  example: []
  syntax:
    content: public static Person Create(Map map, Random random = null, AgeGroup allowedAges = AgeGroup.Child | AgeGroup.Adult | (AgeGroup)-37)
    parameters:
    - id: map
      type: TinyLife.World.Map
      description: The map to create the person for.
    - id: random
      type: System.Random
      description: The random to use for generating the person&apos;s data. If this is <xref uid="langword_csharp_null" name="null" href=""></xref>, no random generation takes place.
    - id: allowedAges
      type: TinyLife.Objects.AgeGroup
      description: A set of ages that are allowed for random generation. If <code data-dev-comment-type="paramref" class="paramref">random</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>, this has no effect.
    return:
      type: TinyLife.Objects.Person
      description: The generated person.
    content.vb: Public Shared Function Create(map As Map, random As Random = Nothing, allowedAges As AgeGroup = AgeGroup.Child Or AgeGroup.Adult Or CType(-37, AgeGroup)) As Person
  overload: TinyLife.Objects.Person.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.MapObject
  commentId: T:TinyLife.Objects.MapObject
  parent: TinyLife.Objects
  name: MapObject
  nameWithType: MapObject
  fullName: TinyLife.Objects.MapObject
- uid: TinyLife.World.Map
  commentId: T:TinyLife.World.Map
  parent: TinyLife.World
  name: Map
  nameWithType: Map
  fullName: TinyLife.World.Map
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Objects.IUpdatingObject
  commentId: T:TinyLife.Objects.IUpdatingObject
  parent: TinyLife.Objects
  name: IUpdatingObject
  nameWithType: IUpdatingObject
  fullName: TinyLife.Objects.IUpdatingObject
- uid: TinyLife.Objects.MapObject.PersonRotationOrder
  commentId: F:TinyLife.Objects.MapObject.PersonRotationOrder
  parent: TinyLife.Objects.MapObject
  name: PersonRotationOrder
  nameWithType: MapObject.PersonRotationOrder
  fullName: TinyLife.Objects.MapObject.PersonRotationOrder
- uid: TinyLife.Objects.MapObject.OnCreated
  commentId: E:TinyLife.Objects.MapObject.OnCreated
  parent: TinyLife.Objects.MapObject
  name: OnCreated
  nameWithType: MapObject.OnCreated
  fullName: TinyLife.Objects.MapObject.OnCreated
- uid: TinyLife.Objects.MapObject.OnValidated
  commentId: E:TinyLife.Objects.MapObject.OnValidated
  parent: TinyLife.Objects.MapObject
  name: OnValidated
  nameWithType: MapObject.OnValidated
  fullName: TinyLife.Objects.MapObject.OnValidated
- uid: TinyLife.Objects.MapObject.OnEventsAttachable
  commentId: E:TinyLife.Objects.MapObject.OnEventsAttachable
  parent: TinyLife.Objects.MapObject
  name: OnEventsAttachable
  nameWithType: MapObject.OnEventsAttachable
  fullName: TinyLife.Objects.MapObject.OnEventsAttachable
- uid: TinyLife.Objects.MapObject.OnDraw
  commentId: E:TinyLife.Objects.MapObject.OnDraw
  parent: TinyLife.Objects.MapObject
  name: OnDraw
  nameWithType: MapObject.OnDraw
  fullName: TinyLife.Objects.MapObject.OnDraw
- uid: TinyLife.Objects.MapObject.OnUpdate
  commentId: E:TinyLife.Objects.MapObject.OnUpdate
  parent: TinyLife.Objects.MapObject
  name: OnUpdate
  nameWithType: MapObject.OnUpdate
  fullName: TinyLife.Objects.MapObject.OnUpdate
- uid: TinyLife.Objects.MapObject.OnGetHoverInfo
  commentId: E:TinyLife.Objects.MapObject.OnGetHoverInfo
  parent: TinyLife.Objects.MapObject
  name: OnGetHoverInfo
  nameWithType: MapObject.OnGetHoverInfo
  fullName: TinyLife.Objects.MapObject.OnGetHoverInfo
- uid: TinyLife.Objects.MapObject.Position
  commentId: P:TinyLife.Objects.MapObject.Position
  parent: TinyLife.Objects.MapObject
  name: Position
  nameWithType: MapObject.Position
  fullName: TinyLife.Objects.MapObject.Position
- uid: TinyLife.Objects.MapObject.Visibility
  commentId: P:TinyLife.Objects.MapObject.Visibility
  parent: TinyLife.Objects.MapObject
  name: Visibility
  nameWithType: MapObject.Visibility
  fullName: TinyLife.Objects.MapObject.Visibility
- uid: TinyLife.Objects.MapObject.Id
  commentId: P:TinyLife.Objects.MapObject.Id
  parent: TinyLife.Objects.MapObject
  name: Id
  nameWithType: MapObject.Id
  fullName: TinyLife.Objects.MapObject.Id
- uid: TinyLife.Objects.MapObject.Map
  commentId: P:TinyLife.Objects.MapObject.Map
  parent: TinyLife.Objects.MapObject
  name: Map
  nameWithType: MapObject.Map
  fullName: TinyLife.Objects.MapObject.Map
- uid: TinyLife.Objects.MapObject.CurrentLot
  commentId: P:TinyLife.Objects.MapObject.CurrentLot
  parent: TinyLife.Objects.MapObject
  name: CurrentLot
  nameWithType: MapObject.CurrentLot
  fullName: TinyLife.Objects.MapObject.CurrentLot
- uid: TinyLife.Objects.MapObject.CurrentRoom
  commentId: P:TinyLife.Objects.MapObject.CurrentRoom
  parent: TinyLife.Objects.MapObject
  name: CurrentRoom
  nameWithType: MapObject.CurrentRoom
  fullName: TinyLife.Objects.MapObject.CurrentRoom
- uid: TinyLife.Objects.MapObject.IsInWorld
  commentId: P:TinyLife.Objects.MapObject.IsInWorld
  parent: TinyLife.Objects.MapObject
  name: IsInWorld
  nameWithType: MapObject.IsInWorld
  fullName: TinyLife.Objects.MapObject.IsInWorld
- uid: TinyLife.Objects.MapObject.OnAdded
  commentId: M:TinyLife.Objects.MapObject.OnAdded
  parent: TinyLife.Objects.MapObject
  name: OnAdded()
  nameWithType: MapObject.OnAdded()
  fullName: TinyLife.Objects.MapObject.OnAdded()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
    nameWithType: MapObject.OnAdded
    fullName: TinyLife.Objects.MapObject.OnAdded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnAdded
    name: OnAdded
    nameWithType: MapObject.OnAdded
    fullName: TinyLife.Objects.MapObject.OnAdded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.OnRemoved
  commentId: M:TinyLife.Objects.MapObject.OnRemoved
  parent: TinyLife.Objects.MapObject
  name: OnRemoved()
  nameWithType: MapObject.OnRemoved()
  fullName: TinyLife.Objects.MapObject.OnRemoved()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnRemoved
    name: OnRemoved
    nameWithType: MapObject.OnRemoved
    fullName: TinyLife.Objects.MapObject.OnRemoved
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetAiPriority(Person, ObjectCategory)
  nameWithType: MapObject.GetAiPriority(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
    nameWithType: MapObject.GetAiPriority
    fullName: TinyLife.Objects.MapObject.GetAiPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetAiPriority(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetAiPriority
    nameWithType: MapObject.GetAiPriority
    fullName: TinyLife.Objects.MapObject.GetAiPriority
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  nameWithType: MapObject.CanExecuteAction(ActionType, ActionInfo, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
    name: CanExecuteAction
    nameWithType: MapObject.CanExecuteAction
    fullName: TinyLife.Objects.MapObject.CanExecuteAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.CanExecuteAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,System.Boolean)
    name: CanExecuteAction
    nameWithType: MapObject.CanExecuteAction
    fullName: TinyLife.Objects.MapObject.CanExecuteAction
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnActionCompleted(Action, CompletionType, Boolean)
  nameWithType: MapObject.OnActionCompleted(Action, CompletionType, Boolean)
  fullName: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action, TinyLife.Actions.CompletionType, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    nameWithType: MapObject.OnActionCompleted
    fullName: TinyLife.Objects.MapObject.OnActionCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnActionCompleted(TinyLife.Actions.Action,TinyLife.Actions.CompletionType,System.Boolean)
    name: OnActionCompleted
    nameWithType: MapObject.OnActionCompleted
    fullName: TinyLife.Objects.MapObject.OnActionCompleted
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  nameWithType: MapObject.ActionUpdate(Action, GameTime, TimeSpan, Single, Boolean)
  fullName: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action, Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single, System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ActionUpdate(TinyLife.Actions.Action,Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single,System.Boolean)
    name: ActionUpdate
    nameWithType: MapObject.ActionUpdate
    fullName: TinyLife.Objects.MapObject.ActionUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  commentId: M:TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  parent: TinyLife.Objects.MapObject
  name: SetMapAndValidate(Map)
  nameWithType: MapObject.SetMapAndValidate(Map)
  fullName: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
    nameWithType: MapObject.SetMapAndValidate
    fullName: TinyLife.Objects.MapObject.SetMapAndValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.SetMapAndValidate(TinyLife.World.Map)
    name: SetMapAndValidate
    nameWithType: MapObject.SetMapAndValidate
    fullName: TinyLife.Objects.MapObject.SetMapAndValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: HasCategory(Person, ObjectCategory)
  nameWithType: MapObject.HasCategory(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
    nameWithType: MapObject.HasCategory
    fullName: TinyLife.Objects.MapObject.HasCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.HasCategory(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: HasCategory
    nameWithType: MapObject.HasCategory
    fullName: TinyLife.Objects.MapObject.HasCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  nameWithType: MapObject.GetEfficiencyModifier(Person, ActionInfo, Boolean, SkillType, Single)
  fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.Skills.SkillType, System.Single)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: MapObject.GetEfficiencyModifier
    fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetEfficiencyModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Skills.SkillType,System.Single)
    name: GetEfficiencyModifier
    nameWithType: MapObject.GetEfficiencyModifier
    fullName: TinyLife.Objects.MapObject.GetEfficiencyModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  commentId: M:TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  nameWithType: MapObject.GetRestoreNeedModifier(Person, ActionInfo, Boolean, NeedType)
  fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person, TinyLife.Actions.ActionInfo, System.Boolean, TinyLife.NeedType)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
    nameWithType: MapObject.GetRestoreNeedModifier
    fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetRestoreNeedModifier(TinyLife.Objects.Person,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.NeedType)
    name: GetRestoreNeedModifier
    nameWithType: MapObject.GetRestoreNeedModifier
    fullName: TinyLife.Objects.MapObject.GetRestoreNeedModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
    nameWithType: ActionInfo
    fullName: TinyLife.Actions.ActionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.NeedType
    name: NeedType
    nameWithType: NeedType
    fullName: TinyLife.NeedType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: IsFreeSpot(Point)
  nameWithType: MapObject.IsFreeSpot(Point)
  fullName: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
    name: IsFreeSpot
    nameWithType: MapObject.IsFreeSpot
    fullName: TinyLife.Objects.MapObject.IsFreeSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.IsFreeSpot(Microsoft.Xna.Framework.Point)
    name: IsFreeSpot
    nameWithType: MapObject.IsFreeSpot
    fullName: TinyLife.Objects.MapObject.IsFreeSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  commentId: M:TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetPathCostModifier(Point)
  nameWithType: MapObject.GetPathCostModifier(Point)
  fullName: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
    name: GetPathCostModifier
    nameWithType: MapObject.GetPathCostModifier
    fullName: TinyLife.Objects.MapObject.GetPathCostModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetPathCostModifier(Microsoft.Xna.Framework.Point)
    name: GetPathCostModifier
    nameWithType: MapObject.GetPathCostModifier
    fullName: TinyLife.Objects.MapObject.GetPathCostModifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: DoDraw(GameTime, Object, Nullable<Color>, Boolean, List<StaticSpriteBatch.Item>)
  nameWithType: MapObject.DoDraw(GameTime, Object, Nullable<Color>, Boolean, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, System.Object, System.Nullable<Microsoft.Xna.Framework.Color>, System.Boolean, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.DoDraw(GameTime, Object, Nullable(Of Color), Boolean, List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime, System.Object, System.Nullable(Of Microsoft.Xna.Framework.Color), System.Boolean, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: DoDraw(GameTime, Object, Nullable(Of Color), Boolean, List(Of StaticSpriteBatch.Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
    nameWithType: MapObject.DoDraw
    fullName: TinyLife.Objects.MapObject.DoDraw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DoDraw(Microsoft.Xna.Framework.GameTime,System.Object,System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: DoDraw
    nameWithType: MapObject.DoDraw
    fullName: TinyLife.Objects.MapObject.DoDraw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: DoUpdate(GameTime, TimeSpan, Single)
  nameWithType: MapObject.DoUpdate(GameTime, TimeSpan, Single)
  fullName: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: DoUpdate
    nameWithType: MapObject.DoUpdate
    fullName: TinyLife.Objects.MapObject.DoUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DoUpdate(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: DoUpdate
    nameWithType: MapObject.DoUpdate
    fullName: TinyLife.Objects.MapObject.DoUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List<StaticSpriteBatch.Item>, Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  nameWithType: MapObject.DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List<StaticSpriteBatch.Item>, Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, System.Object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, System.Single, Microsoft.Xna.Framework.Point, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>, System.Boolean, TinyLife.Objects.ParentInfo, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Boolean, System.Boolean, System.Boolean)
  nameWithType.vb: MapObject.DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  fullName.vb: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map, Microsoft.Xna.Framework.Vector2, System.Object, Microsoft.Xna.Framework.Vector2, MLEM.Textures.TextureRegion, Microsoft.Xna.Framework.Color, System.Single, Microsoft.Xna.Framework.Point, System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item), System.Boolean, TinyLife.Objects.ParentInfo, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Boolean, System.Boolean, System.Boolean)
  name.vb: DrawColumns(Map, Vector2, Object, Vector2, TextureRegion, Color, Single, Point, List(Of StaticSpriteBatch.Item), Boolean, ParentInfo, Single, SpriteEffects, Boolean, Boolean, Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    nameWithType: ParentInfo
    fullName: TinyLife.Objects.ParentInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.DrawColumns(TinyLife.World.Map,Microsoft.Xna.Framework.Vector2,System.Object,Microsoft.Xna.Framework.Vector2,MLEM.Textures.TextureRegion,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Point,System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item},System.Boolean,TinyLife.Objects.ParentInfo,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Boolean,System.Boolean,System.Boolean)
    name: DrawColumns
    nameWithType: MapObject.DrawColumns
    fullName: TinyLife.Objects.MapObject.DrawColumns
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.World.Map
    name: Map
    nameWithType: Map
    fullName: TinyLife.World.Map
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ParentInfo
    name: ParentInfo
    nameWithType: ParentInfo
    fullName: TinyLife.Objects.ParentInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
  commentId: M:TinyLife.Objects.MapObject.GetModCategory(System.String)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetModCategory(String)
  nameWithType: MapObject.GetModCategory(String)
  fullName: TinyLife.Objects.MapObject.GetModCategory(System.String)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetModCategory(System.String)
    name: GetModCategory
    nameWithType: MapObject.GetModCategory
    fullName: TinyLife.Objects.MapObject.GetModCategory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  definition: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Person>()
  nameWithType: Extensions.JsonCopy<Person>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Person>()
  nameWithType.vb: Extensions.JsonCopy(Of Person)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Person)()
  name.vb: JsonCopy(Of Person)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Person>
    nameWithType: Extensions.JsonCopy<Person>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Objects.Person>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Person)
    nameWithType: Extensions.JsonCopy(Of Person)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Objects.Person)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  name: SetData<T>(String, T)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.SetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.SetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Objects.Person.RecentActions
  commentId: F:TinyLife.Objects.Person.RecentActions
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Objects.AgeGroup[]
  isExternal: true
  name: AgeGroup[]
  nameWithType: AgeGroup[]
  fullName: TinyLife.Objects.AgeGroup[]
  nameWithType.vb: AgeGroup()
  fullName.vb: TinyLife.Objects.AgeGroup()
  name.vb: AgeGroup()
  spec.csharp:
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.AgeGroup
    name: AgeGroup
    nameWithType: AgeGroup
    fullName: TinyLife.Objects.AgeGroup
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Xna.Framework.Audio.SoundEffect
  commentId: T:Microsoft.Xna.Framework.Audio.SoundEffect
  parent: Microsoft.Xna.Framework.Audio
  isExternal: true
  name: SoundEffect
  nameWithType: SoundEffect
  fullName: Microsoft.Xna.Framework.Audio.SoundEffect
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Objects.Person.GetRandomSpeakSound(TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle,System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect},System.Nullable{System.TimeSpan})
  isExternal: true
- uid: System.Collections.Generic.Dictionary{System.ValueTuple{TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle},System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}}
  commentId: T:System.Collections.Generic.Dictionary{System.ValueTuple{TinyLife.Objects.VoiceStyle,TinyLife.Objects.SpeakStyle},System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<(T1, T2)<VoiceStyle, SpeakStyle>, List<SoundEffect>>
  nameWithType: Dictionary<(T1, T2)<VoiceStyle, SpeakStyle>, List<SoundEffect>>
  fullName: System.Collections.Generic.Dictionary<System.ValueTuple<TinyLife.Objects.VoiceStyle, TinyLife.Objects.SpeakStyle>, System.Collections.Generic.List<Microsoft.Xna.Framework.Audio.SoundEffect>>
  nameWithType.vb: Dictionary(Of (T1, T2)(Of VoiceStyle, SpeakStyle), List(Of SoundEffect))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.ValueTuple(Of TinyLife.Objects.VoiceStyle, TinyLife.Objects.SpeakStyle), System.Collections.Generic.List(Of Microsoft.Xna.Framework.Audio.SoundEffect))
  name.vb: Dictionary(Of (T1, T2)(Of VoiceStyle, SpeakStyle), List(Of SoundEffect))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.VoiceStyle
    name: VoiceStyle
    nameWithType: VoiceStyle
    fullName: TinyLife.Objects.VoiceStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    nameWithType: SoundEffect
    fullName: Microsoft.Xna.Framework.Audio.SoundEffect
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.VoiceStyle
    name: VoiceStyle
    nameWithType: VoiceStyle
    fullName: TinyLife.Objects.VoiceStyle
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    nameWithType: SoundEffect
    fullName: Microsoft.Xna.Framework.Audio.SoundEffect
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.Audio
  commentId: N:Microsoft.Xna.Framework.Audio
  isExternal: true
  name: Microsoft.Xna.Framework.Audio
  nameWithType: Microsoft.Xna.Framework.Audio
  fullName: Microsoft.Xna.Framework.Audio
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Objects.SpeakStyle[]
  isExternal: true
  name: SpeakStyle[]
  nameWithType: SpeakStyle[]
  fullName: TinyLife.Objects.SpeakStyle[]
  nameWithType.vb: SpeakStyle()
  fullName.vb: TinyLife.Objects.SpeakStyle()
  name.vb: SpeakStyle()
  spec.csharp:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.VoiceStyle[]
  isExternal: true
  name: VoiceStyle[]
  nameWithType: VoiceStyle[]
  fullName: TinyLife.Objects.VoiceStyle[]
  nameWithType.vb: VoiceStyle()
  fullName.vb: TinyLife.Objects.VoiceStyle()
  name.vb: VoiceStyle()
  spec.csharp:
  - uid: TinyLife.Objects.VoiceStyle
    name: VoiceStyle
    nameWithType: VoiceStyle
    fullName: TinyLife.Objects.VoiceStyle
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Objects.VoiceStyle
    name: VoiceStyle
    nameWithType: VoiceStyle
    fullName: TinyLife.Objects.VoiceStyle
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.MapObject.ParentInfo
  commentId: P:TinyLife.Objects.MapObject.ParentInfo
  parent: TinyLife.Objects.MapObject
  name: ParentInfo
  nameWithType: MapObject.ParentInfo
  fullName: TinyLife.Objects.MapObject.ParentInfo
- uid: TinyLife.Objects.Person.ParentInfo*
  commentId: Overload:TinyLife.Objects.Person.ParentInfo
  name: ParentInfo
  nameWithType: Person.ParentInfo
  fullName: TinyLife.Objects.Person.ParentInfo
- uid: TinyLife.Objects.ParentInfo
  commentId: T:TinyLife.Objects.ParentInfo
  parent: TinyLife.Objects
  name: ParentInfo
  nameWithType: ParentInfo
  fullName: TinyLife.Objects.ParentInfo
- uid: TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Objects.Person.EnqueueAction(TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.ActionVariety,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  commentId: M:TinyLife.Objects.Person.CancelAction(TinyLife.Actions.Action,TinyLife.Actions.Action,System.Boolean)
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.List{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Action>
  nameWithType: List<Action>
  fullName: System.Collections.Generic.List<TinyLife.Actions.Action>
  nameWithType.vb: List(Of Action)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Actions.Action)
  name.vb: List(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.ValueTuple{TinyLife.Actions.Action,System.Boolean}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{TinyLife.Actions.Action,System.Boolean}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<(T1, T2)<Action, Boolean>>
  nameWithType: List<(T1, T2)<Action, Boolean>>
  fullName: System.Collections.Generic.List<System.ValueTuple<TinyLife.Actions.Action, System.Boolean>>
  nameWithType.vb: List(Of (T1, T2)(Of Action, Boolean))
  fullName.vb: System.Collections.Generic.List(Of System.ValueTuple(Of TinyLife.Actions.Action, System.Boolean))
  name.vb: List(Of (T1, T2)(Of Action, Boolean))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.CurrentActions
  commentId: F:TinyLife.Objects.Person.CurrentActions
  isExternal: true
- uid: TinyLife.Objects.Person.ActionQueue
  commentId: F:TinyLife.Objects.Person.ActionQueue
  isExternal: true
- uid: TinyLife.Objects.Person.AllActions*
  commentId: Overload:TinyLife.Objects.Person.AllActions
  name: AllActions
  nameWithType: Person.AllActions
  fullName: TinyLife.Objects.Person.AllActions
- uid: System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Actions.Action}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Action>
  nameWithType: IEnumerable<Action>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Actions.Action>
  nameWithType.vb: IEnumerable(Of Action)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Actions.Action)
  name.vb: IEnumerable(Of Action)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Need
  commentId: T:TinyLife.Need
  name: Need
  nameWithType: Need
  fullName: TinyLife.Need
- uid: TinyLife.NeedType.Types
  commentId: F:TinyLife.NeedType.Types
  isExternal: true
- uid: TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Person.GetNeed(TinyLife.NeedType)
  isExternal: true
- uid: TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  commentId: M:TinyLife.Objects.Person.GetNeedPercentage(TinyLife.NeedType)
  isExternal: true
- uid: System.Collections.Generic.Dictionary{System.String,TinyLife.Need}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TinyLife.Need}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Need>
  nameWithType: Dictionary<String, Need>
  fullName: System.Collections.Generic.Dictionary<System.String, TinyLife.Need>
  nameWithType.vb: Dictionary(Of String, Need)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TinyLife.Need)
  name.vb: Dictionary(Of String, Need)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Need
    name: Need
    nameWithType: Need
    fullName: TinyLife.Need
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Need
    name: Need
    nameWithType: Need
    fullName: TinyLife.Need
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.Skill
  commentId: T:TinyLife.Skills.Skill
  parent: TinyLife.Skills
  name: Skill
  nameWithType: Skill
  fullName: TinyLife.Skills.Skill
- uid: TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Objects.Person.GetSkillLevel(TinyLife.Skills.SkillType)
  isExternal: true
- uid: TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.GainSkill(TinyLife.Skills.SkillType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  isExternal: true
- uid: System.Collections.Generic.Dictionary{System.String,TinyLife.Skills.Skill}
  commentId: T:System.Collections.Generic.Dictionary{System.String,TinyLife.Skills.Skill}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Skill>
  nameWithType: Dictionary<String, Skill>
  fullName: System.Collections.Generic.Dictionary<System.String, TinyLife.Skills.Skill>
  nameWithType.vb: Dictionary(Of String, Skill)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, TinyLife.Skills.Skill)
  name.vb: Dictionary(Of String, Skill)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.Skill
    name: Skill
    nameWithType: Skill
    fullName: TinyLife.Skills.Skill
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.Skill
    name: Skill
    nameWithType: Skill
    fullName: TinyLife.Skills.Skill
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: TinyLife.Relationship
  commentId: T:TinyLife.Relationship
  parent: TinyLife
  name: Relationship
  nameWithType: Relationship
  fullName: TinyLife.Relationship
- uid: TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person,System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetRelationship(TinyLife.Objects.Person,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  commentId: M:TinyLife.Objects.Person.ChangeFriendship(TinyLife.Objects.Person,System.Single)
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Relationship}
  commentId: T:System.Collections.Generic.List{TinyLife.Relationship}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Relationship>
  nameWithType: List<Relationship>
  fullName: System.Collections.Generic.List<TinyLife.Relationship>
  nameWithType.vb: List(Of Relationship)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Relationship)
  name.vb: List(Of Relationship)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Relationship
    name: Relationship
    nameWithType: Relationship
    fullName: TinyLife.Relationship
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Relationship
    name: Relationship
    nameWithType: Relationship
    fullName: TinyLife.Relationship
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Uis.CharacterCreator
  commentId: T:TinyLife.Uis.CharacterCreator
  parent: TinyLife.Uis
  name: CharacterCreator
  nameWithType: CharacterCreator
  fullName: TinyLife.Uis.CharacterCreator
- uid: TinyLife.Objects.WornClothes
  commentId: T:TinyLife.Objects.WornClothes
  parent: TinyLife.Objects
  name: WornClothes
  nameWithType: WornClothes
  fullName: TinyLife.Objects.WornClothes
- uid: System.Collections.Generic.List{TinyLife.Objects.Outfit}
  commentId: T:System.Collections.Generic.List{TinyLife.Objects.Outfit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Outfit>
  nameWithType: List<Outfit>
  fullName: System.Collections.Generic.List<TinyLife.Objects.Outfit>
  nameWithType.vb: List(Of Outfit)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Objects.Outfit)
  name.vb: List(Of Outfit)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Outfit
    name: Outfit
    nameWithType: Outfit
    fullName: TinyLife.Objects.Outfit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Outfit
    name: Outfit
    nameWithType: Outfit
    fullName: TinyLife.Objects.Outfit
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Uis
  commentId: N:TinyLife.Uis
  name: TinyLife.Uis
  nameWithType: TinyLife.Uis
  fullName: TinyLife.Uis
- uid: TinyLife.PersonalityType
  commentId: T:TinyLife.PersonalityType
  parent: TinyLife
  name: PersonalityType
  nameWithType: PersonalityType
  fullName: TinyLife.PersonalityType
- uid: TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  commentId: M:TinyLife.Objects.Person.HasPersonality(TinyLife.PersonalityType)
  isExternal: true
- uid: System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  commentId: T:System.Collections.Generic.HashSet{TinyLife.PersonalityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<PersonalityType>
  nameWithType: HashSet<PersonalityType>
  fullName: System.Collections.Generic.HashSet<TinyLife.PersonalityType>
  nameWithType.vb: HashSet(Of PersonalityType)
  fullName.vb: System.Collections.Generic.HashSet(Of TinyLife.PersonalityType)
  name.vb: HashSet(Of PersonalityType)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.PersonalityType
    name: PersonalityType
    nameWithType: PersonalityType
    fullName: TinyLife.PersonalityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Emotions.EmotionModifier.Instance
  commentId: T:TinyLife.Emotions.EmotionModifier.Instance
  parent: TinyLife.Emotions
  name: EmotionModifier.Instance
  nameWithType: EmotionModifier.Instance
  fullName: TinyLife.Emotions.EmotionModifier.Instance
- uid: TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  commentId: M:TinyLife.Objects.Person.AddEmotion(TinyLife.Emotions.EmotionModifier,System.Int32,System.TimeSpan,TinyLife.Emotions.IEmotionSource,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  commentId: M:TinyLife.Objects.Person.RemoveEmotion(TinyLife.Emotions.EmotionModifier)
  isExternal: true
- uid: TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.LowerEmotion(TinyLife.Emotions.EmotionType,System.Single,System.Single)
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Emotions.EmotionModifier.Instance}
  commentId: T:System.Collections.Generic.List{TinyLife.Emotions.EmotionModifier.Instance}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<EmotionModifier.Instance>
  nameWithType: List<EmotionModifier.Instance>
  fullName: System.Collections.Generic.List<TinyLife.Emotions.EmotionModifier.Instance>
  nameWithType.vb: List(Of EmotionModifier.Instance)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Emotions.EmotionModifier.Instance)
  name.vb: List(Of EmotionModifier.Instance)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Emotions.EmotionModifier.Instance
    name: EmotionModifier.Instance
    nameWithType: EmotionModifier.Instance
    fullName: TinyLife.Emotions.EmotionModifier.Instance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Emotions.EmotionModifier.Instance
    name: EmotionModifier.Instance
    nameWithType: EmotionModifier.Instance
    fullName: TinyLife.Emotions.EmotionModifier.Instance
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Goals.Project
  commentId: T:TinyLife.Goals.Project
  parent: TinyLife.Goals
  name: Project
  nameWithType: Project
  fullName: TinyLife.Goals.Project
- uid: TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  commentId: M:TinyLife.Objects.Person.StartProject(TinyLife.Goals.Project)
  isExternal: true
- uid: TinyLife.Objects.Person.GetProject(System.String,System.String)
  commentId: M:TinyLife.Objects.Person.GetProject(System.String,System.String)
  isExternal: true
- uid: TinyLife.Objects.Person.GetProjects(System.String)
  commentId: M:TinyLife.Objects.Person.GetProjects(System.String)
  isExternal: true
- uid: TinyLife.Goals.Project.Remove
  commentId: M:TinyLife.Goals.Project.Remove
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Goals.Project}
  commentId: T:System.Collections.Generic.List{TinyLife.Goals.Project}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Project>
  nameWithType: List<Project>
  fullName: System.Collections.Generic.List<TinyLife.Goals.Project>
  nameWithType.vb: List(Of Project)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Goals.Project)
  name.vb: List(Of Project)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: Microsoft.Xna.Framework.Graphics.RenderTarget2D
  commentId: T:Microsoft.Xna.Framework.Graphics.RenderTarget2D
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: RenderTarget2D
  nameWithType: RenderTarget2D
  fullName: Microsoft.Xna.Framework.Graphics.RenderTarget2D
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Objects.Person.MaxRecentActionsAmount
  commentId: F:TinyLife.Objects.Person.MaxRecentActionsAmount
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Actions.ActionType}
  commentId: T:System.Collections.Generic.List{TinyLife.Actions.ActionType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ActionType>
  nameWithType: List<ActionType>
  fullName: System.Collections.Generic.List<TinyLife.Actions.ActionType>
  nameWithType.vb: List(Of ActionType)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Actions.ActionType)
  name.vb: List(Of ActionType)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: TinyLife.Actions.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Objects.ActionSpot
  commentId: T:TinyLife.Objects.ActionSpot
  parent: TinyLife.Objects
  name: ActionSpot
  nameWithType: ActionSpot
  fullName: TinyLife.Objects.ActionSpot
- uid: TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.Person.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: System.Collections.Generic.List{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}}
  commentId: T:System.Collections.Generic.List{System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<(T1, T2)<Furniture, ActionSpot>>
  nameWithType: List<(T1, T2)<Furniture, ActionSpot>>
  fullName: System.Collections.Generic.List<System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot>>
  nameWithType.vb: List(Of (T1, T2)(Of Furniture, ActionSpot))
  fullName.vb: System.Collections.Generic.List(Of System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot))
  name.vb: List(Of (T1, T2)(Of Furniture, ActionSpot))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Memory
  commentId: T:TinyLife.Goals.Memory
  name: Memory
  nameWithType: Memory
  fullName: TinyLife.Goals.Memory
- uid: TinyLife.Objects.Person.AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  commentId: M:TinyLife.Objects.Person.AddMemory``1(TinyLife.Goals.MemoryType,TinyLife.Actions.ActionInfo,System.Nullable{System.TimeSpan})
  isExternal: true
- uid: TinyLife.Objects.Person.GetMemories``1(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Objects.Person.GetMemories``1(TinyLife.Goals.MemoryType)
  isExternal: true
- uid: TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  commentId: M:TinyLife.Objects.Person.GetTimeSinceMemory(TinyLife.Goals.MemoryType)
  isExternal: true
- uid: System.Collections.Generic.List{TinyLife.Goals.Memory}
  commentId: T:System.Collections.Generic.List{TinyLife.Goals.Memory}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Memory>
  nameWithType: List<Memory>
  fullName: System.Collections.Generic.List<TinyLife.Goals.Memory>
  nameWithType.vb: List(Of Memory)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Goals.Memory)
  name.vb: List(Of Memory)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Memory
    name: Memory
    nameWithType: Memory
    fullName: TinyLife.Goals.Memory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Memory
    name: Memory
    nameWithType: Memory
    fullName: TinyLife.Goals.Memory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TinyLife.Objects.Person.FirstName
  commentId: F:TinyLife.Objects.Person.FirstName
  isExternal: true
- uid: TinyLife.Objects.Person.LastName
  commentId: F:TinyLife.Objects.Person.LastName
  isExternal: true
- uid: TinyLife.Objects.Person.FullName*
  commentId: Overload:TinyLife.Objects.Person.FullName
  name: FullName
  nameWithType: Person.FullName
  fullName: TinyLife.Objects.Person.FullName
- uid: TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.Speak(TinyLife.Objects.SpeakStyle,System.Single,System.Single)
  isExternal: true
- uid: TinyLife.Objects.AgeGroup.Child
  commentId: F:TinyLife.Objects.AgeGroup.Child
  isExternal: true
- uid: TinyLife.Objects.VoiceStyle.Child
  commentId: F:TinyLife.Objects.VoiceStyle.Child
  isExternal: true
- uid: TinyLife.Objects.VoiceStyle
  commentId: T:TinyLife.Objects.VoiceStyle
  parent: TinyLife.Objects
  name: VoiceStyle
  nameWithType: VoiceStyle
  fullName: TinyLife.Objects.VoiceStyle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  isExternal: true
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: TinyLife.Objects.Person.Rotation*
  commentId: Overload:TinyLife.Objects.Person.Rotation
  name: Rotation
  nameWithType: Person.Rotation
  fullName: TinyLife.Objects.Person.Rotation
- uid: TinyLife.Objects.Person.Household
  commentId: P:TinyLife.Objects.Person.Household
  isExternal: true
- uid: TinyLife.Objects.Person.Household*
  commentId: Overload:TinyLife.Objects.Person.Household
  name: Household
  nameWithType: Person.Household
  fullName: TinyLife.Objects.Person.Household
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: TinyLife.Actions.Emote
  commentId: T:TinyLife.Actions.Emote
  parent: TinyLife.Actions
  name: Emote
  nameWithType: Emote
  fullName: TinyLife.Actions.Emote
- uid: TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  commentId: M:TinyLife.Objects.Person.DisplayEmote(TinyLife.Actions.EmoteCategory,System.Single,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentEmote*
  commentId: Overload:TinyLife.Objects.Person.CurrentEmote
  name: CurrentEmote
  nameWithType: Person.CurrentEmote
  fullName: TinyLife.Objects.Person.CurrentEmote
- uid: TinyLife.Objects.Person.CurrentSpeakStyle*
  commentId: Overload:TinyLife.Objects.Person.CurrentSpeakStyle
  name: CurrentSpeakStyle
  nameWithType: Person.CurrentSpeakStyle
  fullName: TinyLife.Objects.Person.CurrentSpeakStyle
- uid: System.Nullable{TinyLife.Objects.SpeakStyle}
  commentId: T:System.Nullable{TinyLife.Objects.SpeakStyle}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SpeakStyle>
  nameWithType: Nullable<SpeakStyle>
  fullName: System.Nullable<TinyLife.Objects.SpeakStyle>
  nameWithType.vb: Nullable(Of SpeakStyle)
  fullName.vb: System.Nullable(Of TinyLife.Objects.SpeakStyle)
  name.vb: Nullable(Of SpeakStyle)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.SpeakStyle
    name: SpeakStyle
    nameWithType: SpeakStyle
    fullName: TinyLife.Objects.SpeakStyle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.ClothesLayer.Body
  commentId: F:TinyLife.Objects.ClothesLayer.Body
  isExternal: true
- uid: TinyLife.Objects.Person.DrawSize*
  commentId: Overload:TinyLife.Objects.Person.DrawSize
  name: DrawSize
  nameWithType: Person.DrawSize
  fullName: TinyLife.Objects.Person.DrawSize
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Actions.VisitLotAction
  commentId: T:TinyLife.Actions.VisitLotAction
  isExternal: true
- uid: TinyLife.Actions.GoHomeAction
  commentId: T:TinyLife.Actions.GoHomeAction
  isExternal: true
- uid: TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  commentId: M:TinyLife.Objects.Person.VisitLot(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.Objects.Person.LastVisitedLot*
  commentId: Overload:TinyLife.Objects.Person.LastVisitedLot
  name: LastVisitedLot
  nameWithType: Person.LastVisitedLot
  fullName: TinyLife.Objects.Person.LastVisitedLot
- uid: TinyLife.Objects.Person.LastVisitedLot
  commentId: P:TinyLife.Objects.Person.LastVisitedLot
  isExternal: true
- uid: TinyLife.Objects.Person.LotVisitCooldown*
  commentId: Overload:TinyLife.Objects.Person.LotVisitCooldown
  name: LotVisitCooldown
  nameWithType: Person.LotVisitCooldown
  fullName: TinyLife.Objects.Person.LotVisitCooldown
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Objects.Person.Job
  commentId: P:TinyLife.Objects.Person.Job
  isExternal: true
- uid: TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType,System.Int32)
  commentId: M:TinyLife.Objects.Person.SetJob(TinyLife.Goals.JobType,System.Int32)
  isExternal: true
- uid: TinyLife.Objects.Person.Job*
  commentId: Overload:TinyLife.Objects.Person.Job
  name: Job
  nameWithType: Person.Job
  fullName: TinyLife.Objects.Person.Job
- uid: TinyLife.Goals.Job
  commentId: T:TinyLife.Goals.Job
  parent: TinyLife.Goals
  name: Job
  nameWithType: Job
  fullName: TinyLife.Goals.Job
- uid: TinyLife.Emotions.EmotionType
  commentId: T:TinyLife.Emotions.EmotionType
  parent: TinyLife.Emotions
  name: EmotionType
  nameWithType: EmotionType
  fullName: TinyLife.Emotions.EmotionType
- uid: TinyLife.Objects.Person.EmotionModifiers
  commentId: F:TinyLife.Objects.Person.EmotionModifiers
  isExternal: true
- uid: TinyLife.Objects.Person.Emotion*
  commentId: Overload:TinyLife.Objects.Person.Emotion
  name: Emotion
  nameWithType: Person.Emotion
  fullName: TinyLife.Objects.Person.Emotion
- uid: TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  commentId: F:TinyLife.Objects.FurnitureType.TypeSettings.DecorativeRating
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentRoomDecorativeRating*
  commentId: Overload:TinyLife.Objects.Person.CurrentRoomDecorativeRating
  name: CurrentRoomDecorativeRating
  nameWithType: Person.CurrentRoomDecorativeRating
  fullName: TinyLife.Objects.Person.CurrentRoomDecorativeRating
- uid: System.Guid.Empty
  commentId: F:System.Guid.Empty
  isExternal: true
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: TinyLife.Objects.Person.IsMoving*
  commentId: Overload:TinyLife.Objects.Person.IsMoving
  name: IsMoving
  nameWithType: Person.IsMoving
  fullName: TinyLife.Objects.Person.IsMoving
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.World.LotEmployment.Instance
  commentId: T:TinyLife.World.LotEmployment.Instance
  parent: TinyLife.World
  name: LotEmployment.Instance
  nameWithType: LotEmployment.Instance
  fullName: TinyLife.World.LotEmployment.Instance
- uid: TinyLife.Objects.Person.HomeLot
  commentId: P:TinyLife.Objects.Person.HomeLot
  isExternal: true
- uid: TinyLife.Objects.Person.Outfits
  commentId: F:TinyLife.Objects.Person.Outfits
  isExternal: true
- uid: TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Person.SetCurrentOutfit(TinyLife.Objects.ClothesIntention)
  isExternal: true
- uid: TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  commentId: M:TinyLife.Objects.Person.SetCurrentOutfit(System.Int32)
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentOutfitIndex*
  commentId: Overload:TinyLife.Objects.Person.CurrentOutfitIndex
  name: CurrentOutfitIndex
  nameWithType: Person.CurrentOutfitIndex
  fullName: TinyLife.Objects.Person.CurrentOutfitIndex
- uid: TinyLife.Objects.Person.CurrentOutfitIndex
  commentId: P:TinyLife.Objects.Person.CurrentOutfitIndex
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentOutfit*
  commentId: Overload:TinyLife.Objects.Person.CurrentOutfit
  name: CurrentOutfit
  nameWithType: Person.CurrentOutfit
  fullName: TinyLife.Objects.Person.CurrentOutfit
- uid: TinyLife.Objects.Outfit
  commentId: T:TinyLife.Objects.Outfit
  parent: TinyLife.Objects
  name: Outfit
  nameWithType: Outfit
  fullName: TinyLife.Objects.Outfit
- uid: TinyLife.World.Household.IsCurrent
  commentId: P:TinyLife.World.Household.IsCurrent
  isExternal: true
- uid: TinyLife.Objects.Person.IsCurrentHousehold*
  commentId: Overload:TinyLife.Objects.Person.IsCurrentHousehold
  name: IsCurrentHousehold
  nameWithType: Person.IsCurrentHousehold
  fullName: TinyLife.Objects.Person.IsCurrentHousehold
- uid: TinyLife.World.Household.Lot
  commentId: P:TinyLife.World.Household.Lot
  isExternal: true
- uid: TinyLife.Objects.Person.HomeLot*
  commentId: Overload:TinyLife.Objects.Person.HomeLot
  name: HomeLot
  nameWithType: Person.HomeLot
  fullName: TinyLife.Objects.Person.HomeLot
- uid: TinyLife.World.Household.Money
  commentId: P:TinyLife.World.Household.Money
  isExternal: true
- uid: TinyLife.Objects.Person.Money*
  commentId: Overload:TinyLife.Objects.Person.Money
  name: Money
  nameWithType: Person.Money
  fullName: TinyLife.Objects.Person.Money
- uid: TinyLife.Objects.Person.LotEmployment
  commentId: F:TinyLife.Objects.Person.LotEmployment
  isExternal: true
- uid: TinyLife.Objects.Person.IsDead
  commentId: P:TinyLife.Objects.Person.IsDead
  isExternal: true
- uid: TinyLife.Objects.Person.IsRegularVisitor*
  commentId: Overload:TinyLife.Objects.Person.IsRegularVisitor
  name: IsRegularVisitor
  nameWithType: Person.IsRegularVisitor
  fullName: TinyLife.Objects.Person.IsRegularVisitor
- uid: TinyLife.Objects.Person.Age*
  commentId: Overload:TinyLife.Objects.Person.Age
  name: Age
  nameWithType: Person.Age
  fullName: TinyLife.Objects.Person.Age
- uid: TinyLife.Goals.LifeGoal.Instance
  commentId: T:TinyLife.Goals.LifeGoal.Instance
  parent: TinyLife.Goals
  name: LifeGoal.Instance
  nameWithType: LifeGoal.Instance
  fullName: TinyLife.Goals.LifeGoal.Instance
- uid: TinyLife.Objects.Person.LifeGoal*
  commentId: Overload:TinyLife.Objects.Person.LifeGoal
  name: LifeGoal
  nameWithType: Person.LifeGoal
  fullName: TinyLife.Objects.Person.LifeGoal
- uid: TinyLife.World.Map.DeadPeople
  commentId: F:TinyLife.World.Map.DeadPeople
  isExternal: true
- uid: TinyLife.Objects.Person.IsDead*
  commentId: Overload:TinyLife.Objects.Person.IsDead
  name: IsDead
  nameWithType: Person.IsDead
  fullName: TinyLife.Objects.Person.IsDead
- uid: TinyLife.Objects.Person.Age
  commentId: P:TinyLife.Objects.Person.Age
  isExternal: true
- uid: TinyLife.Objects.Person.DaysLived
  commentId: F:TinyLife.Objects.Person.DaysLived
  isExternal: true
- uid: TinyLife.Objects.Person.CurrentAgeDays
  commentId: F:TinyLife.Objects.Person.CurrentAgeDays
  isExternal: true
- uid: TinyLife.Objects.Person.Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Objects.Person.Create(TinyLife.World.Map,System.Random,TinyLife.Objects.AgeGroup)
  isExternal: true
- uid: TinyLife.Objects.Person.Random
  commentId: F:TinyLife.Objects.Person.Random
  isExternal: true
- uid: TinyLife.Objects.Person.RandomlyGenerated*
  commentId: Overload:TinyLife.Objects.Person.RandomlyGenerated
  name: RandomlyGenerated
  nameWithType: Person.RandomlyGenerated
  fullName: TinyLife.Objects.Person.RandomlyGenerated
- uid: TinyLife.Objects.Person.IsMinorUpdateNow*
  commentId: Overload:TinyLife.Objects.Person.IsMinorUpdateNow
  name: IsMinorUpdateNow
  nameWithType: Person.IsMinorUpdateNow
  fullName: TinyLife.Objects.Person.IsMinorUpdateNow
- uid: TinyLife.Objects.IUpdatingObject.IsMinorUpdateNow
  commentId: P:TinyLife.Objects.IUpdatingObject.IsMinorUpdateNow
  parent: TinyLife.Objects.IUpdatingObject
  name: IsMinorUpdateNow
  nameWithType: IUpdatingObject.IsMinorUpdateNow
  fullName: TinyLife.Objects.IUpdatingObject.IsMinorUpdateNow
- uid: TinyLife.Objects.Person.Pose
  commentId: T:TinyLife.Objects.Person.Pose
  parent: TinyLife.Objects
  name: Person.Pose
  nameWithType: Person.Pose
  fullName: TinyLife.Objects.Person.Pose
- uid: TinyLife.Objects.Person.Pose.Standing
  commentId: F:TinyLife.Objects.Person.Pose.Standing
  isExternal: true
- uid: TinyLife.Objects.ClothesLayer
  commentId: T:TinyLife.Objects.ClothesLayer
  parent: TinyLife.Objects
  name: ClothesLayer
  nameWithType: ClothesLayer
  fullName: TinyLife.Objects.ClothesLayer
- uid: TinyLife.Objects.Person.GetHeldObject``1(System.Boolean)
  commentId: M:TinyLife.Objects.Person.GetHeldObject``1(System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.Rotation
  commentId: P:TinyLife.Objects.Person.Rotation
  isExternal: true
- uid: System.Nullable{MLEM.Misc.Direction2}
  commentId: T:System.Nullable{MLEM.Misc.Direction2}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Direction2>
  nameWithType: Nullable<Direction2>
  fullName: System.Nullable<MLEM.Misc.Direction2>
  nameWithType.vb: Nullable(Of Direction2)
  fullName.vb: System.Nullable(Of MLEM.Misc.Direction2)
  name.vb: Nullable(Of Direction2)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.OccupiedFurniture
  commentId: F:TinyLife.Objects.Person.OccupiedFurniture
  isExternal: true
- uid: TinyLife.Objects.Person.VisuallyOccupiedSpot*
  commentId: Overload:TinyLife.Objects.Person.VisuallyOccupiedSpot
  name: VisuallyOccupiedSpot
  nameWithType: Person.VisuallyOccupiedSpot
  fullName: TinyLife.Objects.Person.VisuallyOccupiedSpot
- uid: System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}
  commentId: T:System.ValueTuple{TinyLife.Objects.Furniture,TinyLife.Objects.ActionSpot}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Furniture, ActionSpot>
  nameWithType: (T1, T2)<Furniture, ActionSpot>
  fullName: System.ValueTuple<TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot>
  nameWithType.vb: (T1, T2)(Of Furniture, ActionSpot)
  fullName.vb: System.ValueTuple(Of TinyLife.Objects.Furniture, TinyLife.Objects.ActionSpot)
  name.vb: (T1, T2)(Of Furniture, ActionSpot)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ActionSpot
    name: ActionSpot
    nameWithType: ActionSpot
    fullName: TinyLife.Objects.ActionSpot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.VisualPosition*
  commentId: Overload:TinyLife.Objects.Person.VisualPosition
  name: VisualPosition
  nameWithType: Person.VisualPosition
  fullName: TinyLife.Objects.Person.VisualPosition
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Action{TinyLife.Objects.Person}
  commentId: T:System.Action{TinyLife.Objects.Person}
  parent: System
  definition: System.Action`1
  name: Action<Person>
  nameWithType: Action<Person>
  fullName: System.Action<TinyLife.Objects.Person>
  nameWithType.vb: Action(Of Person)
  fullName.vb: System.Action(Of TinyLife.Objects.Person)
  name.vb: Action(Of Person)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Skills
  commentId: F:TinyLife.Objects.Person.Skills
  isExternal: true
- uid: TinyLife.Objects.Person.EmotionModifiersChangedDelegate
  commentId: T:TinyLife.Objects.Person.EmotionModifiersChangedDelegate
  parent: TinyLife.Objects
  name: Person.EmotionModifiersChangedDelegate
  nameWithType: Person.EmotionModifiersChangedDelegate
  fullName: TinyLife.Objects.Person.EmotionModifiersChangedDelegate
- uid: TinyLife.Objects.Person.Emotion
  commentId: P:TinyLife.Objects.Person.Emotion
  isExternal: true
- uid: TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  commentId: M:TinyLife.Objects.Person.GetEfficiencyModifier(System.Single,TinyLife.Actions.ActionInfo,TinyLife.Skills.SkillType,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Person.EfficiencyModifierDelegate
  commentId: T:TinyLife.Objects.Person.EfficiencyModifierDelegate
  parent: TinyLife.Objects
  name: Person.EfficiencyModifierDelegate
  nameWithType: Person.EfficiencyModifierDelegate
  fullName: TinyLife.Objects.Person.EfficiencyModifierDelegate
- uid: TinyLife.Objects.Person.GetWalkSpeed
  commentId: M:TinyLife.Objects.Person.GetWalkSpeed
  isExternal: true
- uid: TinyLife.Objects.Person.WalkSpeedDelegate
  commentId: T:TinyLife.Objects.Person.WalkSpeedDelegate
  parent: TinyLife.Objects
  name: Person.WalkSpeedDelegate
  nameWithType: Person.WalkSpeedDelegate
  fullName: TinyLife.Objects.Person.WalkSpeedDelegate
- uid: TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  commentId: M:TinyLife.Objects.Person.GetPassiveActionPriority(TinyLife.Actions.ActionType)
  isExternal: true
- uid: TinyLife.Objects.Person.PassiveActionPriorityDelegate
  commentId: T:TinyLife.Objects.Person.PassiveActionPriorityDelegate
  parent: TinyLife.Objects
  name: Person.PassiveActionPriorityDelegate
  nameWithType: Person.PassiveActionPriorityDelegate
  fullName: TinyLife.Objects.Person.PassiveActionPriorityDelegate
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Mods.EventPhase}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Mods.EventPhase}
  parent: System
  definition: System.Action`2
  name: Action<Action, EventPhase>
  nameWithType: Action<Action, EventPhase>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Mods.EventPhase>
  nameWithType.vb: Action(Of Action, EventPhase)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Mods.EventPhase)
  name.vb: Action(Of Action, EventPhase)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.CompletionType
  commentId: T:TinyLife.Actions.CompletionType
  parent: TinyLife.Actions
  name: CompletionType
  nameWithType: CompletionType
  fullName: TinyLife.Actions.CompletionType
- uid: System.Action{TinyLife.Actions.Action,TinyLife.Actions.CompletionType,TinyLife.Mods.EventPhase}
  commentId: T:System.Action{TinyLife.Actions.Action,TinyLife.Actions.CompletionType,TinyLife.Mods.EventPhase}
  parent: System
  definition: System.Action`3
  name: Action<Action, CompletionType, EventPhase>
  nameWithType: Action<Action, CompletionType, EventPhase>
  fullName: System.Action<TinyLife.Actions.Action, TinyLife.Actions.CompletionType, TinyLife.Mods.EventPhase>
  nameWithType.vb: Action(Of Action, CompletionType, EventPhase)
  fullName.vb: System.Action(Of TinyLife.Actions.Action, TinyLife.Actions.CompletionType, TinyLife.Mods.EventPhase)
  name.vb: Action(Of Action, CompletionType, EventPhase)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Actions.CompletionType
    name: CompletionType
    nameWithType: CompletionType
    fullName: TinyLife.Actions.CompletionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Mods.EventPhase
    name: EventPhase
    nameWithType: EventPhase
    fullName: TinyLife.Mods.EventPhase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Actions.Action
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Action.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: Action.Update
    fullName: TinyLife.Actions.Action.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.ActionUpdateDelegate
  commentId: T:TinyLife.Objects.Person.ActionUpdateDelegate
  parent: TinyLife.Objects
  name: Person.ActionUpdateDelegate
  nameWithType: Person.ActionUpdateDelegate
  fullName: TinyLife.Objects.Person.ActionUpdateDelegate
- uid: TinyLife.Actions.Action
  commentId: T:TinyLife.Actions.Action
  parent: TinyLife.Actions
  name: Action
  nameWithType: Action
  fullName: TinyLife.Actions.Action
- uid: TinyLife.Objects.Person.GetCurrentGoals
  commentId: M:TinyLife.Objects.Person.GetCurrentGoals
  isExternal: true
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: System.Action{System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}}
  commentId: T:System.Action{System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}}
  parent: System
  definition: System.Action`1
  name: Action<List<IGoalTriggerable>>
  nameWithType: Action<List<IGoalTriggerable>>
  fullName: System.Action<System.Collections.Generic.List<TinyLife.Goals.IGoalTriggerable>>
  nameWithType.vb: Action(Of List(Of IGoalTriggerable))
  fullName.vb: System.Action(Of System.Collections.Generic.List(Of TinyLife.Goals.IGoalTriggerable))
  name.vb: Action(Of List(Of IGoalTriggerable))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    nameWithType: IGoalTriggerable
    fullName: TinyLife.Goals.IGoalTriggerable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    nameWithType: IGoalTriggerable
    fullName: TinyLife.Goals.IGoalTriggerable
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.LifeGoal
  commentId: P:TinyLife.Objects.Person.LifeGoal
  isExternal: true
- uid: System.Action{TinyLife.Goals.LifeGoal.Instance}
  commentId: T:System.Action{TinyLife.Goals.LifeGoal.Instance}
  parent: System
  definition: System.Action`1
  name: Action<LifeGoal.Instance>
  nameWithType: Action<LifeGoal.Instance>
  fullName: System.Action<TinyLife.Goals.LifeGoal.Instance>
  nameWithType.vb: Action(Of LifeGoal.Instance)
  fullName.vb: System.Action(Of TinyLife.Goals.LifeGoal.Instance)
  name.vb: Action(Of LifeGoal.Instance)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.LifeGoal.Instance
    name: LifeGoal.Instance
    nameWithType: LifeGoal.Instance
    fullName: TinyLife.Goals.LifeGoal.Instance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.LifeGoal.Instance
    name: LifeGoal.Instance
    nameWithType: LifeGoal.Instance
    fullName: TinyLife.Goals.LifeGoal.Instance
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  commentId: M:TinyLife.Objects.Person.RestoreNeed(TinyLife.NeedType,System.Single,TinyLife.Actions.ActionInfo,System.Single)
  isExternal: true
- uid: TinyLife.Objects.Person.RestoreNeedDelegate
  commentId: T:TinyLife.Objects.Person.RestoreNeedDelegate
  parent: TinyLife.Objects
  name: Person.RestoreNeedDelegate
  nameWithType: Person.RestoreNeedDelegate
  fullName: TinyLife.Objects.Person.RestoreNeedDelegate
- uid: TinyLife.Objects.Person.#ctor*
  commentId: Overload:TinyLife.Objects.Person.#ctor
  name: Person
  nameWithType: Person.Person
  fullName: TinyLife.Objects.Person.Person
- uid: TinyLife.Objects.Person.Finalize*
  commentId: Overload:TinyLife.Objects.Person.Finalize
  name: Finalize
  nameWithType: Person.Finalize
  fullName: TinyLife.Objects.Person.Finalize
- uid: TinyLife.Objects.Person.Update*
  commentId: Overload:TinyLife.Objects.Person.Update
  name: Update
  nameWithType: Person.Update
  fullName: TinyLife.Objects.Person.Update
- uid: TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Objects.IUpdatingObject
  isExternal: true
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: IUpdatingObject.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  spec.csharp:
  - uid: TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: IUpdatingObject.Update
    fullName: TinyLife.Objects.IUpdatingObject.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.IUpdatingObject.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
    name: Update
    nameWithType: IUpdatingObject.Update
    fullName: TinyLife.Objects.IUpdatingObject.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  commentId: M:TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Draw(GameTime, Object, Vector2, Nullable<Color>, List<StaticSpriteBatch.Item>)
  nameWithType: MapObject.Draw(GameTime, Object, Vector2, Nullable<Color>, List<StaticSpriteBatch.Item>)
  fullName: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, System.Object, Microsoft.Xna.Framework.Vector2, System.Nullable<Microsoft.Xna.Framework.Color>, System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>)
  nameWithType.vb: MapObject.Draw(GameTime, Object, Vector2, Nullable(Of Color), List(Of StaticSpriteBatch.Item))
  fullName.vb: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime, System.Object, Microsoft.Xna.Framework.Vector2, System.Nullable(Of Microsoft.Xna.Framework.Color), System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item))
  name.vb: Draw(GameTime, Object, Vector2, Nullable(Of Color), List(Of StaticSpriteBatch.Item))
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Draw(Microsoft.Xna.Framework.GameTime,System.Object,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Color},System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item})
    name: Draw
    nameWithType: MapObject.Draw
    fullName: TinyLife.Objects.MapObject.Draw
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Draw*
  commentId: Overload:TinyLife.Objects.Person.Draw
  name: Draw
  nameWithType: Person.Draw
  fullName: TinyLife.Objects.Person.Draw
- uid: System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  commentId: T:System.Collections.Generic.List{MLEM.Graphics.StaticSpriteBatch.Item}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<StaticSpriteBatch.Item>
  nameWithType: List<StaticSpriteBatch.Item>
  fullName: System.Collections.Generic.List<MLEM.Graphics.StaticSpriteBatch.Item>
  nameWithType.vb: List(Of StaticSpriteBatch.Item)
  fullName.vb: System.Collections.Generic.List(Of MLEM.Graphics.StaticSpriteBatch.Item)
  name.vb: List(Of StaticSpriteBatch.Item)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Graphics.StaticSpriteBatch.Item
    name: StaticSpriteBatch.Item
    nameWithType: StaticSpriteBatch.Item
    fullName: MLEM.Graphics.StaticSpriteBatch.Item
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.MapObject.Validate
  commentId: M:TinyLife.Objects.MapObject.Validate
  parent: TinyLife.Objects.MapObject
  name: Validate()
  nameWithType: MapObject.Validate()
  fullName: TinyLife.Objects.MapObject.Validate()
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Validate
    name: Validate
    nameWithType: MapObject.Validate
    fullName: TinyLife.Objects.MapObject.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Validate*
  commentId: Overload:TinyLife.Objects.Person.Validate
  name: Validate
  nameWithType: Person.Validate
  fullName: TinyLife.Objects.Person.Validate
- uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  parent: TinyLife.Objects.MapObject
  name: GetCategories(Person)
  nameWithType: MapObject.GetCategories(Person)
  fullName: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetCategories(TinyLife.Objects.Person)
    name: GetCategories
    nameWithType: MapObject.GetCategories
    fullName: TinyLife.Objects.MapObject.GetCategories
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetCategories*
  commentId: Overload:TinyLife.Objects.Person.GetCategories
  name: GetCategories
  nameWithType: Person.GetCategories
  fullName: TinyLife.Objects.Person.GetCategories
- uid: TinyLife.Objects.ObjectCategory
  commentId: T:TinyLife.Objects.ObjectCategory
  parent: TinyLife.Objects
  name: ObjectCategory
  nameWithType: ObjectCategory
  fullName: TinyLife.Objects.ObjectCategory
- uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  commentId: M:TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: Intersects(RectangleF)
  nameWithType: MapObject.Intersects(RectangleF)
  fullName: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
    nameWithType: MapObject.Intersects
    fullName: TinyLife.Objects.MapObject.Intersects
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.Intersects(MLEM.Misc.RectangleF)
    name: Intersects
    nameWithType: MapObject.Intersects
    fullName: TinyLife.Objects.MapObject.Intersects
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Intersects*
  commentId: Overload:TinyLife.Objects.Person.Intersects
  name: Intersects
  nameWithType: Person.Intersects
  fullName: TinyLife.Objects.Person.Intersects
- uid: MLEM.Misc.RectangleF
  commentId: T:MLEM.Misc.RectangleF
  parent: MLEM.Misc
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MLEM.Misc.RectangleF
- uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  commentId: M:TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: GetHoverInfo(Tooltip)
  nameWithType: MapObject.GetHoverInfo(Tooltip)
  fullName: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
    nameWithType: MapObject.GetHoverInfo
    fullName: TinyLife.Objects.MapObject.GetHoverInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    nameWithType: Tooltip
    fullName: MLEM.Ui.Elements.Tooltip
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetHoverInfo(MLEM.Ui.Elements.Tooltip)
    name: GetHoverInfo
    nameWithType: MapObject.GetHoverInfo
    fullName: TinyLife.Objects.MapObject.GetHoverInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Ui.Elements.Tooltip
    name: Tooltip
    nameWithType: Tooltip
    fullName: MLEM.Ui.Elements.Tooltip
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetHoverInfo*
  commentId: Overload:TinyLife.Objects.Person.GetHoverInfo
  name: GetHoverInfo
  nameWithType: Person.GetHoverInfo
  fullName: TinyLife.Objects.Person.GetHoverInfo
- uid: MLEM.Ui.Elements.Tooltip
  commentId: T:MLEM.Ui.Elements.Tooltip
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Tooltip
  nameWithType: Tooltip
  fullName: MLEM.Ui.Elements.Tooltip
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.MapObject
  name: GetFreeActionSpotInfo(Person, ObjectCategory)
  nameWithType: MapObject.GetFreeActionSpotInfo(Person, ObjectCategory)
  fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: MapObject.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.GetFreeActionSpotInfo(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpotInfo
    nameWithType: MapObject.GetFreeActionSpotInfo
    fullName: TinyLife.Objects.MapObject.GetFreeActionSpotInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetFreeActionSpotInfo*
  commentId: Overload:TinyLife.Objects.Person.GetFreeActionSpotInfo
  name: GetFreeActionSpotInfo
  nameWithType: Person.GetFreeActionSpotInfo
  fullName: TinyLife.Objects.Person.GetFreeActionSpotInfo
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  commentId: M:TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: OnCameraRotationChanged(Direction2, Direction2)
  nameWithType: MapObject.OnCameraRotationChanged(Direction2, Direction2)
  fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2, MLEM.Misc.Direction2)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
    nameWithType: MapObject.OnCameraRotationChanged
    fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.OnCameraRotationChanged(MLEM.Misc.Direction2,MLEM.Misc.Direction2)
    name: OnCameraRotationChanged
    nameWithType: MapObject.OnCameraRotationChanged
    fullName: TinyLife.Objects.MapObject.OnCameraRotationChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.OnCameraRotationChanged*
  commentId: Overload:TinyLife.Objects.Person.OnCameraRotationChanged
  name: OnCameraRotationChanged
  nameWithType: Person.OnCameraRotationChanged
  fullName: TinyLife.Objects.Person.OnCameraRotationChanged
- uid: TinyLife.GameImpl.CurrentHousehold
  commentId: P:TinyLife.GameImpl.CurrentHousehold
  isExternal: true
- uid: TinyLife.Objects.Person.FocusCameraOnEvent*
  commentId: Overload:TinyLife.Objects.Person.FocusCameraOnEvent
  name: FocusCameraOnEvent
  nameWithType: Person.FocusCameraOnEvent
  fullName: TinyLife.Objects.Person.FocusCameraOnEvent
- uid: TinyLife.Objects.Person.SetJob*
  commentId: Overload:TinyLife.Objects.Person.SetJob
  name: SetJob
  nameWithType: Person.SetJob
  fullName: TinyLife.Objects.Person.SetJob
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  parent: TinyLife.Goals
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
- uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  commentId: M:TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  parent: TinyLife.Objects.MapObject
  isExternal: true
  name: ResetToStatic(Boolean)
  nameWithType: MapObject.ResetToStatic(Boolean)
  fullName: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
  spec.csharp:
  - uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
    name: ResetToStatic
    nameWithType: MapObject.ResetToStatic
    fullName: TinyLife.Objects.MapObject.ResetToStatic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.MapObject.ResetToStatic(System.Boolean)
    name: ResetToStatic
    nameWithType: MapObject.ResetToStatic
    fullName: TinyLife.Objects.MapObject.ResetToStatic
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.ResetToStatic*
  commentId: Overload:TinyLife.Objects.Person.ResetToStatic
  name: ResetToStatic
  nameWithType: Person.ResetToStatic
  fullName: TinyLife.Objects.Person.ResetToStatic
- uid: TinyLife.Objects.Person.Relationships
  commentId: F:TinyLife.Objects.Person.Relationships
  isExternal: true
- uid: TinyLife.Objects.Person.PrepareForPermanentRemoval*
  commentId: Overload:TinyLife.Objects.Person.PrepareForPermanentRemoval
  name: PrepareForPermanentRemoval
  nameWithType: Person.PrepareForPermanentRemoval
  fullName: TinyLife.Objects.Person.PrepareForPermanentRemoval
- uid: TinyLife.Objects.Person.LotVisitCooldown
  commentId: P:TinyLife.Objects.Person.LotVisitCooldown
  isExternal: true
- uid: TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  commentId: M:TinyLife.World.Household.MarkLotVisible(TinyLife.World.Lot)
  isExternal: true
- uid: TinyLife.Objects.Person.VisitLot*
  commentId: Overload:TinyLife.Objects.Person.VisitLot
  name: VisitLot
  nameWithType: Person.VisitLot
  fullName: TinyLife.Objects.Person.VisitLot
- uid: MLEM.Misc.Direction2.Right
  commentId: F:MLEM.Misc.Direction2.Right
  isExternal: true
- uid: TinyLife.Objects.Person.DrawUi*
  commentId: Overload:TinyLife.Objects.Person.DrawUi
  name: DrawUi
  nameWithType: Person.DrawUi
  fullName: TinyLife.Objects.Person.DrawUi
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  commentId: M:TinyLife.World.Lot.GetHomeLocation(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Objects.Person.GetHomeLocation*
  commentId: Overload:TinyLife.Objects.Person.GetHomeLocation
  name: GetHomeLocation
  nameWithType: Person.GetHomeLocation
  fullName: TinyLife.Objects.Person.GetHomeLocation
- uid: TinyLife.Objects.Person.GetRelationship*
  commentId: Overload:TinyLife.Objects.Person.GetRelationship
  name: GetRelationship
  nameWithType: Person.GetRelationship
  fullName: TinyLife.Objects.Person.GetRelationship
- uid: TinyLife.Relationship.FriendLevel
  commentId: P:TinyLife.Relationship.FriendLevel
  isExternal: true
- uid: TinyLife.Objects.Particle
  commentId: T:TinyLife.Objects.Particle
  name: Particle
  nameWithType: Particle
  fullName: TinyLife.Objects.Particle
- uid: TinyLife.Uis.Notifications
  commentId: T:TinyLife.Uis.Notifications
  name: Notifications
  nameWithType: Notifications
  fullName: TinyLife.Uis.Notifications
- uid: TinyLife.Objects.Person.ChangeFriendship*
  commentId: Overload:TinyLife.Objects.Person.ChangeFriendship
  name: ChangeFriendship
  nameWithType: Person.ChangeFriendship
  fullName: TinyLife.Objects.Person.ChangeFriendship
- uid: TinyLife.Relationship.RomanceLevel
  commentId: P:TinyLife.Relationship.RomanceLevel
  isExternal: true
- uid: TinyLife.Objects.Person.ChangeRomance*
  commentId: Overload:TinyLife.Objects.Person.ChangeRomance
  name: ChangeRomance
  nameWithType: Person.ChangeRomance
  fullName: TinyLife.Objects.Person.ChangeRomance
- uid: TinyLife.Objects.Person.DisplayEmote*
  commentId: Overload:TinyLife.Objects.Person.DisplayEmote
  name: DisplayEmote
  nameWithType: Person.DisplayEmote
  fullName: TinyLife.Objects.Person.DisplayEmote
- uid: TinyLife.Actions.EmoteCategory
  commentId: T:TinyLife.Actions.EmoteCategory
  parent: TinyLife.Actions
  name: EmoteCategory
  nameWithType: EmoteCategory
  fullName: TinyLife.Actions.EmoteCategory
- uid: TinyLife.Objects.Person.StopEmoting*
  commentId: Overload:TinyLife.Objects.Person.StopEmoting
  name: StopEmoting
  nameWithType: Person.StopEmoting
  fullName: TinyLife.Objects.Person.StopEmoting
- uid: TinyLife.Objects.Person.VoicePitch
  commentId: F:TinyLife.Objects.Person.VoicePitch
  isExternal: true
- uid: TinyLife.Objects.Person.Speak*
  commentId: Overload:TinyLife.Objects.Person.Speak
  name: Speak
  nameWithType: Person.Speak
  fullName: TinyLife.Objects.Person.Speak
- uid: TinyLife.Objects.SpeakStyle
  commentId: T:TinyLife.Objects.SpeakStyle
  parent: TinyLife.Objects
  name: SpeakStyle
  nameWithType: SpeakStyle
  fullName: TinyLife.Objects.SpeakStyle
- uid: TinyLife.Objects.Person.CurrentSpeakStyle
  commentId: P:TinyLife.Objects.Person.CurrentSpeakStyle
  isExternal: true
- uid: TinyLife.Objects.Person.StopSpeaking*
  commentId: Overload:TinyLife.Objects.Person.StopSpeaking
  name: StopSpeaking
  nameWithType: Person.StopSpeaking
  fullName: TinyLife.Objects.Person.StopSpeaking
- uid: TinyLife.Objects.Person.DisplayEmoteAndSpeak*
  commentId: Overload:TinyLife.Objects.Person.DisplayEmoteAndSpeak
  name: DisplayEmoteAndSpeak
  nameWithType: Person.DisplayEmoteAndSpeak
  fullName: TinyLife.Objects.Person.DisplayEmoteAndSpeak
- uid: TinyLife.Objects.Person.GetFreeTalkingSpots*
  commentId: Overload:TinyLife.Objects.Person.GetFreeTalkingSpots
  name: GetFreeTalkingSpots
  nameWithType: Person.GetFreeTalkingSpots
  fullName: TinyLife.Objects.Person.GetFreeTalkingSpots
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector2>
  nameWithType: IEnumerable<Vector2>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Vector2>
  nameWithType.vb: IEnumerable(Of Vector2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Vector2)
  name.vb: IEnumerable(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.VisualPosition
  commentId: P:TinyLife.Objects.Person.VisualPosition
  isExternal: true
- uid: TinyLife.Objects.Person.OccupyActionSpot*
  commentId: Overload:TinyLife.Objects.Person.OccupyActionSpot
  name: OccupyActionSpot
  nameWithType: Person.OccupyActionSpot
  fullName: TinyLife.Objects.Person.OccupyActionSpot
- uid: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  commentId: M:TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
  parent: TinyLife.Objects.Furniture
  name: GetFreeActionSpot(Person, ObjectCategory)
  nameWithType: Furniture.GetFreeActionSpot(Person, ObjectCategory)
  fullName: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person, TinyLife.Objects.ObjectCategory)
  spec.csharp:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpot
    nameWithType: Furniture.GetFreeActionSpot
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Objects.Furniture.GetFreeActionSpot(TinyLife.Objects.Person,TinyLife.Objects.ObjectCategory)
    name: GetFreeActionSpot
    nameWithType: Furniture.GetFreeActionSpot
    fullName: TinyLife.Objects.Furniture.GetFreeActionSpot
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.ObjectCategory
    name: ObjectCategory
    nameWithType: ObjectCategory
    fullName: TinyLife.Objects.ObjectCategory
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.OccupyFreeActionSpot*
  commentId: Overload:TinyLife.Objects.Person.OccupyFreeActionSpot
  name: OccupyFreeActionSpot
  nameWithType: Person.OccupyFreeActionSpot
  fullName: TinyLife.Objects.Person.OccupyFreeActionSpot
- uid: TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  commentId: M:TinyLife.Objects.Person.OccupyFreeActionSpot(TinyLife.Objects.Furniture,TinyLife.Objects.ObjectCategory,System.Boolean,System.Nullable{MLEM.Misc.Direction2})
  isExternal: true
- uid: TinyLife.World.Room
  commentId: T:TinyLife.World.Room
  parent: TinyLife.World
  name: Room
  nameWithType: Room
  fullName: TinyLife.World.Room
- uid: TinyLife.Objects.Person.IsCloseForTalking*
  commentId: Overload:TinyLife.Objects.Person.IsCloseForTalking
  name: IsCloseForTalking
  nameWithType: Person.IsCloseForTalking
  fullName: TinyLife.Objects.Person.IsCloseForTalking
- uid: TinyLife.Need.Value
  commentId: P:TinyLife.Need.Value
  isExternal: true
- uid: TinyLife.Objects.Person.GetNeed*
  commentId: Overload:TinyLife.Objects.Person.GetNeed
  name: GetNeed
  nameWithType: Person.GetNeed
  fullName: TinyLife.Objects.Person.GetNeed
- uid: TinyLife.NeedType
  commentId: T:TinyLife.NeedType
  parent: TinyLife
  name: NeedType
  nameWithType: NeedType
  fullName: TinyLife.NeedType
- uid: TinyLife.Need.Percentage
  commentId: P:TinyLife.Need.Percentage
  isExternal: true
- uid: TinyLife.Objects.Person.GetNeedPercentage*
  commentId: Overload:TinyLife.Objects.Person.GetNeedPercentage
  name: GetNeedPercentage
  nameWithType: Person.GetNeedPercentage
  fullName: TinyLife.Objects.Person.GetNeedPercentage
- uid: TinyLife.Objects.Person.OnRestoreNeed
  commentId: E:TinyLife.Objects.Person.OnRestoreNeed
  isExternal: true
- uid: TinyLife.GameImpl.Speed
  commentId: P:TinyLife.GameImpl.Speed
  isExternal: true
- uid: TinyLife.Objects.Person.RestoreNeed*
  commentId: Overload:TinyLife.Objects.Person.RestoreNeed
  name: RestoreNeed
  nameWithType: Person.RestoreNeed
  fullName: TinyLife.Objects.Person.RestoreNeed
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: TinyLife.NeedType.Entertainment
  commentId: F:TinyLife.NeedType.Entertainment
  isExternal: true
- uid: TinyLife.Objects.Person.GetSkill*
  commentId: Overload:TinyLife.Objects.Person.GetSkill
  name: GetSkill
  nameWithType: Person.GetSkill
  fullName: TinyLife.Objects.Person.GetSkill
- uid: TinyLife.Skills.Skill.TotalPercentage
  commentId: P:TinyLife.Skills.Skill.TotalPercentage
  isExternal: true
- uid: TinyLife.Objects.Person.GetSkillTotalPercentage*
  commentId: Overload:TinyLife.Objects.Person.GetSkillTotalPercentage
  name: GetSkillTotalPercentage
  nameWithType: Person.GetSkillTotalPercentage
  fullName: TinyLife.Objects.Person.GetSkillTotalPercentage
- uid: TinyLife.Skills.Skill.PointPercentage
  commentId: P:TinyLife.Skills.Skill.PointPercentage
  isExternal: true
- uid: TinyLife.Objects.Person.GetSkillPointPercentage*
  commentId: Overload:TinyLife.Objects.Person.GetSkillPointPercentage
  name: GetSkillPointPercentage
  nameWithType: Person.GetSkillPointPercentage
  fullName: TinyLife.Objects.Person.GetSkillPointPercentage
- uid: TinyLife.Objects.Person.GetSkillLevel*
  commentId: Overload:TinyLife.Objects.Person.GetSkillLevel
  name: GetSkillLevel
  nameWithType: Person.GetSkillLevel
  fullName: TinyLife.Objects.Person.GetSkillLevel
- uid: TinyLife.Objects.Person.HasSkillLevel*
  commentId: Overload:TinyLife.Objects.Person.HasSkillLevel
  name: HasSkillLevel
  nameWithType: Person.HasSkillLevel
  fullName: TinyLife.Objects.Person.HasSkillLevel
- uid: TinyLife.Objects.Person.PersonalityTypes
  commentId: F:TinyLife.Objects.Person.PersonalityTypes
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  commentId: M:TinyLife.Actions.ActionInfo.GetInvolvedObjects``1(TinyLife.Objects.ObjectCategory,System.Boolean,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.GainSkill*
  commentId: Overload:TinyLife.Objects.Person.GainSkill
  name: GainSkill
  nameWithType: Person.GainSkill
  fullName: TinyLife.Objects.Person.GainSkill
- uid: TinyLife.Objects.Person.DepleteNeed*
  commentId: Overload:TinyLife.Objects.Person.DepleteNeed
  name: DepleteNeed
  nameWithType: Person.DepleteNeed
  fullName: TinyLife.Objects.Person.DepleteNeed
- uid: TinyLife.Objects.Person.HasPersonality*
  commentId: Overload:TinyLife.Objects.Person.HasPersonality
  name: HasPersonality
  nameWithType: Person.HasPersonality
  fullName: TinyLife.Objects.Person.HasPersonality
- uid: TinyLife.Actions.ActionType.TypeSettings.CanExecute
  commentId: F:TinyLife.Actions.ActionType.TypeSettings.CanExecute
  isExternal: true
- uid: TinyLife.Objects.Person.EnqueueAction*
  commentId: Overload:TinyLife.Objects.Person.EnqueueAction
  name: EnqueueAction
  nameWithType: Person.EnqueueAction
  fullName: TinyLife.Objects.Person.EnqueueAction
- uid: TinyLife.Actions.ActionVariety
  commentId: T:TinyLife.Actions.ActionVariety
  parent: TinyLife.Actions
  name: ActionVariety
  nameWithType: ActionVariety
  fullName: TinyLife.Actions.ActionVariety
- uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  commentId: M:TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  parent: TinyLife.Actions.Action
  name: CanCancel(Action)
  nameWithType: Action.CanCancel(Action)
  fullName: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
  spec.csharp:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: Action.CanCancel
    fullName: TinyLife.Actions.Action.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Actions.Action.CanCancel(TinyLife.Actions.Action)
    name: CanCancel
    nameWithType: Action.CanCancel
    fullName: TinyLife.Actions.Action.CanCancel
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Actions.Action
    name: Action
    nameWithType: Action
    fullName: TinyLife.Actions.Action
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.CancelAction*
  commentId: Overload:TinyLife.Objects.Person.CancelAction
  name: CancelAction
  nameWithType: Person.CancelAction
  fullName: TinyLife.Objects.Person.CancelAction
- uid: TinyLife.Actions.GoHereAction
  commentId: T:TinyLife.Actions.GoHereAction
  name: GoHereAction
  nameWithType: GoHereAction
  fullName: TinyLife.Actions.GoHereAction
- uid: TinyLife.Objects.Person.FindPathAsync*
  commentId: Overload:TinyLife.Objects.Person.FindPathAsync
  name: FindPathAsync
  nameWithType: Person.FindPathAsync
  fullName: TinyLife.Objects.Person.FindPathAsync
- uid: System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Point>
  nameWithType: ICollection<Point>
  fullName: System.Collections.Generic.ICollection<Microsoft.Xna.Framework.Point>
  nameWithType.vb: ICollection(Of Point)
  fullName.vb: System.Collections.Generic.ICollection(Of Microsoft.Xna.Framework.Point)
  name.vb: ICollection(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost
  commentId: T:MLEM.Pathfinding.AStar{Microsoft.Xna.Framework.Point}.GetCost
  parent: MLEM.Pathfinding
  definition: MLEM.Pathfinding.AStar`1.GetCost
  name: AStar.GetCost<>
  nameWithType: AStar.GetCost<>
  fullName: MLEM.Pathfinding.AStar.GetCost<>
  nameWithType.vb: AStar.GetCost(Of )
  fullName.vb: MLEM.Pathfinding.AStar.GetCost(Of )
  name.vb: AStar.GetCost(Of )
  spec.csharp:
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: AStar.GetCost
    nameWithType: AStar.GetCost
    fullName: MLEM.Pathfinding.AStar.GetCost
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: AStar.GetCost
    nameWithType: AStar.GetCost
    fullName: MLEM.Pathfinding.AStar.GetCost
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Stack{Microsoft.Xna.Framework.Point}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stack<Point>>
  nameWithType: Task<Stack<Point>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Stack<Microsoft.Xna.Framework.Point>>
  nameWithType.vb: Task(Of Stack(Of Point))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Stack(Of Microsoft.Xna.Framework.Point))
  name.vb: Task(Of Stack(Of Point))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    nameWithType: Stack
    fullName: System.Collections.Generic.Stack
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Pathfinding.AStar`1.GetCost
  commentId: T:MLEM.Pathfinding.AStar`1.GetCost
  isExternal: true
  name: AStar.GetCost<>
  nameWithType: AStar.GetCost<>
  fullName: MLEM.Pathfinding.AStar.GetCost<>
  nameWithType.vb: AStar.GetCost(Of )
  fullName.vb: MLEM.Pathfinding.AStar.GetCost(Of )
  name.vb: AStar.GetCost(Of )
  spec.csharp:
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: AStar.GetCost
    nameWithType: AStar.GetCost
    fullName: MLEM.Pathfinding.AStar.GetCost
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MLEM.Pathfinding.AStar`1.GetCost
    name: AStar.GetCost
    nameWithType: AStar.GetCost
    fullName: MLEM.Pathfinding.AStar.GetCost
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Pathfinding
  commentId: N:MLEM.Pathfinding
  isExternal: true
  name: MLEM.Pathfinding
  nameWithType: MLEM.Pathfinding
  fullName: MLEM.Pathfinding
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TinyLife.Objects.Person.GetHeldObject*
  commentId: Overload:TinyLife.Objects.Person.GetHeldObject
  name: GetHeldObject
  nameWithType: Person.GetHeldObject
  fullName: TinyLife.Objects.Person.GetHeldObject
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  commentId: M:TinyLife.Actions.ActionType.IsEmptyHanded(TinyLife.Actions.ActionInfo,System.Boolean)
  isExternal: true
- uid: TinyLife.Objects.Person.SetHeldObject*
  commentId: Overload:TinyLife.Objects.Person.SetHeldObject
  name: SetHeldObject
  nameWithType: Person.SetHeldObject
  fullName: TinyLife.Objects.Person.SetHeldObject
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Nullable{System.Guid}
  commentId: T:System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  nameWithType: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  nameWithType.vb: Nullable(Of Guid)
  fullName.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetHeldActionInfo*
  commentId: Overload:TinyLife.Objects.Person.GetHeldActionInfo
  name: GetHeldActionInfo
  nameWithType: Person.GetHeldActionInfo
  fullName: TinyLife.Objects.Person.GetHeldActionInfo
- uid: TinyLife.Objects.Person.ToCreatedByString*
  commentId: Overload:TinyLife.Objects.Person.ToCreatedByString
  name: ToCreatedByString
  nameWithType: Person.ToCreatedByString
  fullName: TinyLife.Objects.Person.ToCreatedByString
- uid: TinyLife.Objects.FurnitureType.Gravestone
  commentId: F:TinyLife.Objects.FurnitureType.Gravestone
  isExternal: true
- uid: TinyLife.Objects.Person.Die*
  commentId: Overload:TinyLife.Objects.Person.Die
  name: Die
  nameWithType: Person.Die
  fullName: TinyLife.Objects.Person.Die
- uid: TinyLife.Objects.Person.DeathReason
  commentId: T:TinyLife.Objects.Person.DeathReason
  parent: TinyLife.Objects
  name: Person.DeathReason
  nameWithType: Person.DeathReason
  fullName: TinyLife.Objects.Person.DeathReason
- uid: TinyLife.Emotions.EmotionModifier
  commentId: T:TinyLife.Emotions.EmotionModifier
  parent: TinyLife.Emotions
  name: EmotionModifier
  nameWithType: EmotionModifier
  fullName: TinyLife.Emotions.EmotionModifier
- uid: TinyLife.Objects.Person.AddEmotion*
  commentId: Overload:TinyLife.Objects.Person.AddEmotion
  name: AddEmotion
  nameWithType: Person.AddEmotion
  fullName: TinyLife.Objects.Person.AddEmotion
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: TinyLife.Objects.Person.RemoveEmotion*
  commentId: Overload:TinyLife.Objects.Person.RemoveEmotion
  name: RemoveEmotion
  nameWithType: Person.RemoveEmotion
  fullName: TinyLife.Objects.Person.RemoveEmotion
- uid: TinyLife.Emotions.EmotionModifier.Instance.Time
  commentId: P:TinyLife.Emotions.EmotionModifier.Instance.Time
  isExternal: true
- uid: TinyLife.Emotions.EmotionModifier.Instance.TotalTime
  commentId: F:TinyLife.Emotions.EmotionModifier.Instance.TotalTime
  isExternal: true
- uid: TinyLife.Objects.Person.LowerEmotion*
  commentId: Overload:TinyLife.Objects.Person.LowerEmotion
  name: LowerEmotion
  nameWithType: Person.LowerEmotion
  fullName: TinyLife.Objects.Person.LowerEmotion
- uid: TinyLife.Objects.Person.LowerEmotionModifier*
  commentId: Overload:TinyLife.Objects.Person.LowerEmotionModifier
  name: LowerEmotionModifier
  nameWithType: Person.LowerEmotionModifier
  fullName: TinyLife.Objects.Person.LowerEmotionModifier
- uid: TinyLife.Objects.Person.HasEmotionModifier*
  commentId: Overload:TinyLife.Objects.Person.HasEmotionModifier
  name: HasEmotionModifier
  nameWithType: Person.HasEmotionModifier
  fullName: TinyLife.Objects.Person.HasEmotionModifier
- uid: TinyLife.Objects.Person.GetWalkSpeed*
  commentId: Overload:TinyLife.Objects.Person.GetWalkSpeed
  name: GetWalkSpeed
  nameWithType: Person.GetWalkSpeed
  fullName: TinyLife.Objects.Person.GetWalkSpeed
- uid: TinyLife.Objects.Person.GetEfficiencyModifier*
  commentId: Overload:TinyLife.Objects.Person.GetEfficiencyModifier
  name: GetEfficiencyModifier
  nameWithType: Person.GetEfficiencyModifier
  fullName: TinyLife.Objects.Person.GetEfficiencyModifier
- uid: TinyLife.World.Household.HasMember(System.Guid)
  commentId: M:TinyLife.World.Household.HasMember(System.Guid)
  isExternal: true
- uid: TinyLife.Objects.Person.HasHouseholdMember*
  commentId: Overload:TinyLife.Objects.Person.HasHouseholdMember
  name: HasHouseholdMember
  nameWithType: Person.HasHouseholdMember
  fullName: TinyLife.Objects.Person.HasHouseholdMember
- uid: TinyLife.Goals.Project.Type
  commentId: F:TinyLife.Goals.Project.Type
  isExternal: true
- uid: TinyLife.Objects.Person.Projects
  commentId: F:TinyLife.Objects.Person.Projects
  isExternal: true
- uid: TinyLife.Objects.Person.GetProjects*
  commentId: Overload:TinyLife.Objects.Person.GetProjects
  name: GetProjects
  nameWithType: Person.GetProjects
  fullName: TinyLife.Objects.Person.GetProjects
- uid: System.Collections.Generic.IEnumerable{TinyLife.Goals.Project}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Goals.Project}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Project>
  nameWithType: IEnumerable<Project>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Goals.Project>
  nameWithType.vb: IEnumerable(Of Project)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Goals.Project)
  name.vb: IEnumerable(Of Project)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.Project
    name: Project
    nameWithType: Project
    fullName: TinyLife.Goals.Project
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Project.Name
  commentId: F:TinyLife.Goals.Project.Name
  isExternal: true
- uid: TinyLife.Objects.Person.GetProject*
  commentId: Overload:TinyLife.Objects.Person.GetProject
  name: GetProject
  nameWithType: Person.GetProject
  fullName: TinyLife.Objects.Person.GetProject
- uid: TinyLife.Objects.Person.StartProject*
  commentId: Overload:TinyLife.Objects.Person.StartProject
  name: StartProject
  nameWithType: Person.StartProject
  fullName: TinyLife.Objects.Person.StartProject
- uid: TinyLife.Actions.ActionType.AiSettings.PassivePriority
  commentId: F:TinyLife.Actions.ActionType.AiSettings.PassivePriority
  isExternal: true
- uid: TinyLife.PersonalityType.Extroverted
  commentId: F:TinyLife.PersonalityType.Extroverted
  isExternal: true
- uid: TinyLife.PersonalityType.Introverted
  commentId: F:TinyLife.PersonalityType.Introverted
  isExternal: true
- uid: TinyLife.Objects.Person.OnGetPassiveActionPriority
  commentId: E:TinyLife.Objects.Person.OnGetPassiveActionPriority
  isExternal: true
- uid: TinyLife.Objects.Person.GetPassiveActionPriority*
  commentId: Overload:TinyLife.Objects.Person.GetPassiveActionPriority
  name: GetPassiveActionPriority
  nameWithType: Person.GetPassiveActionPriority
  fullName: TinyLife.Objects.Person.GetPassiveActionPriority
- uid: TinyLife.Objects.ClothesIntention
  commentId: T:TinyLife.Objects.ClothesIntention
  parent: TinyLife.Objects
  name: ClothesIntention
  nameWithType: ClothesIntention
  fullName: TinyLife.Objects.ClothesIntention
- uid: TinyLife.Objects.Person.GetRandomOutfit*
  commentId: Overload:TinyLife.Objects.Person.GetRandomOutfit
  name: GetRandomOutfit
  nameWithType: Person.GetRandomOutfit
  fullName: TinyLife.Objects.Person.GetRandomOutfit
- uid: TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  commentId: M:TinyLife.Objects.Person.GetRandomOutfit(TinyLife.Objects.ClothesIntention)
  isExternal: true
- uid: TinyLife.Objects.Person.SetCurrentOutfit*
  commentId: Overload:TinyLife.Objects.Person.SetCurrentOutfit
  name: SetCurrentOutfit
  nameWithType: Person.SetCurrentOutfit
  fullName: TinyLife.Objects.Person.SetCurrentOutfit
- uid: TinyLife.Objects.Person.SetNewId*
  commentId: Overload:TinyLife.Objects.Person.SetNewId
  name: SetNewId
  nameWithType: Person.SetNewId
  fullName: TinyLife.Objects.Person.SetNewId
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Person}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Person>
  nameWithType: IEnumerable<Person>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Person>
  nameWithType.vb: IEnumerable(Of Person)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Person)
  name.vb: IEnumerable(Of Person)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  commentId: T:System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Furniture>
  nameWithType: IEnumerable<Furniture>
  fullName: System.Collections.Generic.IEnumerable<TinyLife.Objects.Furniture>
  nameWithType.vb: IEnumerable(Of Furniture)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TinyLife.Objects.Furniture)
  name.vb: IEnumerable(Of Furniture)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Furniture
    name: Furniture
    nameWithType: Furniture
    fullName: TinyLife.Objects.Furniture
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  commentId: M:TinyLife.Objects.Person.SetNewId(TinyLife.World.Map,System.Collections.Generic.IEnumerable{TinyLife.Objects.Person},System.Collections.Generic.IEnumerable{TinyLife.Objects.Furniture})
  isExternal: true
- uid: TinyLife.Objects.Person.IsIdMatch*
  commentId: Overload:TinyLife.Objects.Person.IsIdMatch
  name: IsIdMatch
  nameWithType: Person.IsIdMatch
  fullName: TinyLife.Objects.Person.IsIdMatch
- uid: TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  commentId: M:TinyLife.Objects.Person.IsIdMatch(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.Objects.Person.GetPersonalitySkillBoost*
  commentId: Overload:TinyLife.Objects.Person.GetPersonalitySkillBoost
  name: GetPersonalitySkillBoost
  nameWithType: Person.GetPersonalitySkillBoost
  fullName: TinyLife.Objects.Person.GetPersonalitySkillBoost
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.Objects.Person.OnGetCurrentGoals
  commentId: E:TinyLife.Objects.Person.OnGetCurrentGoals
  isExternal: true
- uid: TinyLife.Objects.Person.GetCurrentGoals*
  commentId: Overload:TinyLife.Objects.Person.GetCurrentGoals
  name: GetCurrentGoals
  nameWithType: Person.GetCurrentGoals
  fullName: TinyLife.Objects.Person.GetCurrentGoals
- uid: System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}
  commentId: T:System.Collections.Generic.List{TinyLife.Goals.IGoalTriggerable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IGoalTriggerable>
  nameWithType: List<IGoalTriggerable>
  fullName: System.Collections.Generic.List<TinyLife.Goals.IGoalTriggerable>
  nameWithType.vb: List(Of IGoalTriggerable)
  fullName.vb: System.Collections.Generic.List(Of TinyLife.Goals.IGoalTriggerable)
  name.vb: List(Of IGoalTriggerable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    nameWithType: IGoalTriggerable
    fullName: TinyLife.Goals.IGoalTriggerable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Goals.IGoalTriggerable
    name: IGoalTriggerable
    nameWithType: IGoalTriggerable
    fullName: TinyLife.Goals.IGoalTriggerable
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Money
  commentId: P:TinyLife.Objects.Person.Money
  isExternal: true
- uid: TinyLife.Goals.GoalTrigger.EarnMoney
  commentId: F:TinyLife.Goals.GoalTrigger.EarnMoney
  isExternal: true
- uid: TinyLife.Goals.AmountGoal
  commentId: T:TinyLife.Goals.AmountGoal
  name: AmountGoal
  nameWithType: AmountGoal
  fullName: TinyLife.Goals.AmountGoal
- uid: TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  commentId: M:TinyLife.Goals.IGoalTriggerable.Trigger(TinyLife.Goals.IGoalTriggerable,System.Object,TinyLife.Goals.GoalTrigger,System.Object[])
  isExternal: true
- uid: TinyLife.Objects.Person.EarnMoney*
  commentId: Overload:TinyLife.Objects.Person.EarnMoney
  name: EarnMoney
  nameWithType: Person.EarnMoney
  fullName: TinyLife.Objects.Person.EarnMoney
- uid: TinyLife.Objects.Person.Memories
  commentId: F:TinyLife.Objects.Person.Memories
  isExternal: true
- uid: TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  commentId: M:TinyLife.Actions.ActionInfo.FromSelf(TinyLife.Objects.Person)
  isExternal: true
- uid: TinyLife.World.Map.Time
  commentId: P:TinyLife.World.Map.Time
  isExternal: true
- uid: TinyLife.Objects.Person.AddMemory*
  commentId: Overload:TinyLife.Objects.Person.AddMemory
  name: AddMemory
  nameWithType: Person.AddMemory
  fullName: TinyLife.Objects.Person.AddMemory
- uid: TinyLife.Goals.MemoryType
  commentId: T:TinyLife.Goals.MemoryType
  parent: TinyLife.Goals
  name: MemoryType
  nameWithType: MemoryType
  fullName: TinyLife.Goals.MemoryType
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.GetMemories*
  commentId: Overload:TinyLife.Objects.Person.GetMemories
  name: GetMemories
  nameWithType: Person.GetMemories
  fullName: TinyLife.Objects.Person.GetMemories
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.RemoveMemory*
  commentId: Overload:TinyLife.Objects.Person.RemoveMemory
  name: RemoveMemory
  nameWithType: Person.RemoveMemory
  fullName: TinyLife.Objects.Person.RemoveMemory
- uid: TinyLife.Objects.Person.GetTimeSinceMemory*
  commentId: Overload:TinyLife.Objects.Person.GetTimeSinceMemory
  name: GetTimeSinceMemory
  nameWithType: Person.GetTimeSinceMemory
  fullName: TinyLife.Objects.Person.GetTimeSinceMemory
- uid: TinyLife.Goals.MemoryType[]
  isExternal: true
  name: MemoryType[]
  nameWithType: MemoryType[]
  fullName: TinyLife.Goals.MemoryType[]
  nameWithType.vb: MemoryType()
  fullName.vb: TinyLife.Goals.MemoryType()
  name.vb: MemoryType()
  spec.csharp:
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.Goals.MemoryType
    name: MemoryType
    nameWithType: MemoryType
    fullName: TinyLife.Goals.MemoryType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Objects.Person.GetDaysBeforeAging*
  commentId: Overload:TinyLife.Objects.Person.GetDaysBeforeAging
  name: GetDaysBeforeAging
  nameWithType: Person.GetDaysBeforeAging
  fullName: TinyLife.Objects.Person.GetDaysBeforeAging
- uid: TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  commentId: M:TinyLife.World.Map.GetClosestExitRoad(Microsoft.Xna.Framework.Vector2)
  isExternal: true
- uid: TinyLife.Objects.Person.GoToExitRoad*
  commentId: Overload:TinyLife.Objects.Person.GoToExitRoad
  name: GoToExitRoad
  nameWithType: Person.GoToExitRoad
  fullName: TinyLife.Objects.Person.GoToExitRoad
- uid: TinyLife.Objects.Person.Portrait
  commentId: F:TinyLife.Objects.Person.Portrait
  isExternal: true
- uid: TinyLife.Objects.Person.UpdatePortraitIfDirty*
  commentId: Overload:TinyLife.Objects.Person.UpdatePortraitIfDirty
  name: UpdatePortraitIfDirty
  nameWithType: Person.UpdatePortraitIfDirty
  fullName: TinyLife.Objects.Person.UpdatePortraitIfDirty
- uid: TinyLife.Objects.Person.VoiceStyle
  commentId: F:TinyLife.Objects.Person.VoiceStyle
  isExternal: true
- uid: TinyLife.Objects.Person.GetRandomSpeakSound*
  commentId: Overload:TinyLife.Objects.Person.GetRandomSpeakSound
  name: GetRandomSpeakSound
  nameWithType: Person.GetRandomSpeakSound
  fullName: TinyLife.Objects.Person.GetRandomSpeakSound
- uid: System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}
  commentId: T:System.Collections.Generic.List{Microsoft.Xna.Framework.Audio.SoundEffect}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SoundEffect>
  nameWithType: List<SoundEffect>
  fullName: System.Collections.Generic.List<Microsoft.Xna.Framework.Audio.SoundEffect>
  nameWithType.vb: List(Of SoundEffect)
  fullName.vb: System.Collections.Generic.List(Of Microsoft.Xna.Framework.Audio.SoundEffect)
  name.vb: List(Of SoundEffect)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    nameWithType: SoundEffect
    fullName: Microsoft.Xna.Framework.Audio.SoundEffect
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Audio.SoundEffect
    name: SoundEffect
    nameWithType: SoundEffect
    fullName: Microsoft.Xna.Framework.Audio.SoundEffect
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects.Person.Create*
  commentId: Overload:TinyLife.Objects.Person.Create
  name: Create
  nameWithType: Person.Create
  fullName: TinyLife.Objects.Person.Create
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random

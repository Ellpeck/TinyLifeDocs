### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  id: JobType
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.JobType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Single,System.ValueTuple{System.Int32,System.Int32},System.DayOfWeek[])
  - TinyLife.Goals.JobType.Businessperson
  - TinyLife.Goals.JobType.CanQuitOrBeFired
  - TinyLife.Goals.JobType.ChoicePrompts
  - TinyLife.Goals.JobType.Construct(TinyLife.Objects.Person,System.Int32)
  - TinyLife.Goals.JobType.DailyTaskImportance
  - TinyLife.Goals.JobType.DailyTasks
  - TinyLife.Goals.JobType.Doctor
  - TinyLife.Goals.JobType.Firefighter
  - TinyLife.Goals.JobType.GetDisplayName(System.Nullable{System.Int32})
  - TinyLife.Goals.JobType.GetRequiredPromotionSkills(TinyLife.Goals.Job)
  - TinyLife.Goals.JobType.HasSpecialLocalization
  - TinyLife.Goals.JobType.HourlyPay
  - TinyLife.Goals.JobType.Icon
  - TinyLife.Goals.JobType.IsTimeToWork(System.TimeSpan)
  - TinyLife.Goals.JobType.MaxLevel
  - TinyLife.Goals.JobType.Name
  - TinyLife.Goals.JobType.OffWorkDays
  - TinyLife.Goals.JobType.OnLevelChanged(TinyLife.Goals.Job,System.Int32)
  - TinyLife.Goals.JobType.OnRaiseReceived(TinyLife.Goals.Job)
  - TinyLife.Goals.JobType.OnWorkFinished(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  - TinyLife.Goals.JobType.OnWorkHoursOver(TinyLife.Goals.Job)
  - TinyLife.Goals.JobType.OnWorkStarted(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  - TinyLife.Goals.JobType.OnWorkStartsInAnHour(TinyLife.Goals.Job)
  - TinyLife.Goals.JobType.PrimarySchoolStudent
  - TinyLife.Goals.JobType.Programmer
  - TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  - TinyLife.Goals.JobType.RequiredAges
  - TinyLife.Goals.JobType.RequiredPromotionSkills
  - TinyLife.Goals.JobType.RetailWorker
  - TinyLife.Goals.JobType.Scientist
  - TinyLife.Goals.JobType.SourceString
  - TinyLife.Goals.JobType.Teacher
  - TinyLife.Goals.JobType.ToScheduleString(System.DayOfWeek)
  - TinyLife.Goals.JobType.Types
  - TinyLife.Goals.JobType.UpdateWorking(TinyLife.Goals.Job,TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  - TinyLife.Goals.JobType.WorkHours
  langs:
  - csharp
  - vb
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
  type: Class
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: JobType
    path: ../TinyLife/Goals/JobType.cs
    startLine: 28
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA job type is a singleton containing various kinds of data for a <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> instance.\nNew jobs can be registered using <xref href=\"TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<JobType>), new object[]{typeof(JobType), "PrivateTypes"})]

      public class JobType : GenericDataHolder, IGenericDataHolder, IEmotionSource
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of JobType)), New Object() {GetType(JobType), "PrivateTypes"})>

      Public Class JobType
          Inherits GenericDataHolder
          Implements IGenericDataHolder, IEmotionSource
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  derivedClasses:
  - TinyLife.Goals.StudentJobType
  implements:
  - MLEM.Misc.IGenericDataHolder
  - TinyLife.Emotions.IEmotionSource
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.JobType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.JobType.Types
  commentId: F:TinyLife.Goals.JobType.Types
  id: Types
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: JobType.Types
  fullName: TinyLife.Goals.JobType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Goals/JobType.cs
    startLine: 36
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA registry of all <xref href=\"TinyLife.Goals.JobType\" data-throw-if-not-resolved=\"false\"></xref> instances in the game and mods.\nRegister new jobs using <xref href=\"TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, JobType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.JobType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, JobType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.PrimarySchoolStudent
  commentId: F:TinyLife.Goals.JobType.PrimarySchoolStudent
  id: PrimarySchoolStudent
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: PrimarySchoolStudent
  nameWithType: JobType.PrimarySchoolStudent
  fullName: TinyLife.Goals.JobType.PrimarySchoolStudent
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: PrimarySchoolStudent
    path: ../TinyLife/Goals/JobType.cs
    startLine: 39
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType PrimarySchoolStudent
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly PrimarySchoolStudent As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Businessperson
  commentId: F:TinyLife.Goals.JobType.Businessperson
  id: Businessperson
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Businessperson
  nameWithType: JobType.Businessperson
  fullName: TinyLife.Goals.JobType.Businessperson
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Businessperson
    path: ../TinyLife/Goals/JobType.cs
    startLine: 51
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Businessperson
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Businessperson As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Firefighter
  commentId: F:TinyLife.Goals.JobType.Firefighter
  id: Firefighter
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Firefighter
  nameWithType: JobType.Firefighter
  fullName: TinyLife.Goals.JobType.Firefighter
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Firefighter
    path: ../TinyLife/Goals/JobType.cs
    startLine: 60
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Firefighter
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Firefighter As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Doctor
  commentId: F:TinyLife.Goals.JobType.Doctor
  id: Doctor
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Doctor
  nameWithType: JobType.Doctor
  fullName: TinyLife.Goals.JobType.Doctor
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Doctor
    path: ../TinyLife/Goals/JobType.cs
    startLine: 69
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Doctor
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Doctor As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Programmer
  commentId: F:TinyLife.Goals.JobType.Programmer
  id: Programmer
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Programmer
  nameWithType: JobType.Programmer
  fullName: TinyLife.Goals.JobType.Programmer
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Programmer
    path: ../TinyLife/Goals/JobType.cs
    startLine: 78
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Programmer
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Programmer As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.RetailWorker
  commentId: F:TinyLife.Goals.JobType.RetailWorker
  id: RetailWorker
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: RetailWorker
  nameWithType: JobType.RetailWorker
  fullName: TinyLife.Goals.JobType.RetailWorker
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RetailWorker
    path: ../TinyLife/Goals/JobType.cs
    startLine: 87
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType RetailWorker
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly RetailWorker As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Teacher
  commentId: F:TinyLife.Goals.JobType.Teacher
  id: Teacher
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Teacher
  nameWithType: JobType.Teacher
  fullName: TinyLife.Goals.JobType.Teacher
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Teacher
    path: ../TinyLife/Goals/JobType.cs
    startLine: 96
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Teacher
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Teacher As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Scientist
  commentId: F:TinyLife.Goals.JobType.Scientist
  id: Scientist
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Scientist
  nameWithType: JobType.Scientist
  fullName: TinyLife.Goals.JobType.Scientist
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Scientist
    path: ../TinyLife/Goals/JobType.cs
    startLine: 105
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  syntax:
    content: public static readonly JobType Scientist
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared ReadOnly Scientist As JobType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Goals.JobType.Name
  commentId: F:TinyLife.Goals.JobType.Name
  id: Name
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: JobType.Name
  fullName: TinyLife.Goals.JobType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Goals/JobType.cs
    startLine: 119
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe name of this job type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.Icon
  commentId: F:TinyLife.Goals.JobType.Icon
  id: Icon
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: JobType.Icon
  fullName: TinyLife.Goals.JobType.Icon
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/Goals/JobType.cs
    startLine: 123
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis job type&apos;s icon.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.HourlyPay
  commentId: F:TinyLife.Goals.JobType.HourlyPay
  id: HourlyPay
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: HourlyPay
  nameWithType: JobType.HourlyPay
  fullName: TinyLife.Goals.JobType.HourlyPay
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HourlyPay
    path: ../TinyLife/Goals/JobType.cs
    startLine: 128
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe amount of tiny bucks that being at the job for an hour pays.\nIn <xref href=\"TinyLife.Actions.WorkAction\" data-throw-if-not-resolved=\"false\"></xref>, this is automatically added to the household funds.\n"
  example: []
  syntax:
    content: public readonly float HourlyPay
    return:
      type: System.Single
    content.vb: Public ReadOnly HourlyPay As Single
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.WorkHours
  commentId: F:TinyLife.Goals.JobType.WorkHours
  id: WorkHours
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: WorkHours
  nameWithType: JobType.WorkHours
  fullName: TinyLife.Goals.JobType.WorkHours
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: WorkHours
    path: ../TinyLife/Goals/JobType.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA <xref href=\"System.Range\" data-throw-if-not-resolved=\"false\"></xref> of hours that this job requires each day.\nNote that the minimum (Start) value is inclusive, but the maximum (End) value is exclusive.\n"
  example: []
  syntax:
    content: public readonly (int Start, int End) WorkHours
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public ReadOnly WorkHours As(Start As Integer, End As Integer)(Of Integer , Integer)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.OffWorkDays
  commentId: F:TinyLife.Goals.JobType.OffWorkDays
  id: OffWorkDays
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OffWorkDays
  nameWithType: JobType.OffWorkDays
  fullName: TinyLife.Goals.JobType.OffWorkDays
  type: Field
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OffWorkDays
    path: ../TinyLife/Goals/JobType.cs
    startLine: 138
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA set of <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> values which are days off of this job.\nOn days contained in this list, the <xref href=\"TinyLife.Goals.JobType.WorkHours\" data-throw-if-not-resolved=\"false\"></xref> don&apos;t apply.\n"
  example: []
  syntax:
    content: public readonly DayOfWeek[] OffWorkDays
    return:
      type: System.DayOfWeek[]
    content.vb: Public ReadOnly OffWorkDays As DayOfWeek()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.RequiredPromotionSkills
  commentId: P:TinyLife.Goals.JobType.RequiredPromotionSkills
  id: RequiredPromotionSkills
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: RequiredPromotionSkills
  nameWithType: JobType.RequiredPromotionSkills
  fullName: TinyLife.Goals.JobType.RequiredPromotionSkills
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredPromotionSkills
    path: ../TinyLife/Goals/JobType.cs
    startLine: 143
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA set of skills and their level curves that are required for promotion to the next <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref> of this job type.\nThe level curve is a multiplier for the job&apos;s current <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref> that yields the required skill level. Specifically, the required skill level for any given job level is calculated as <code>(curve * (jobLevel + 1)).Floor()</code>.\n"
  example: []
  syntax:
    content: public (SkillType Type, float LevelCurve)[] RequiredPromotionSkills { get; set; }
    parameters: []
    return:
      type: System.ValueTuple{TinyLife.Skills.SkillType,System.Single}[]
    content.vb: Public Property RequiredPromotionSkills As(Type As SkillType, LevelCurve As Single)(Of SkillType , Single)()
  overload: TinyLife.Goals.JobType.RequiredPromotionSkills*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.MaxLevel
  commentId: P:TinyLife.Goals.JobType.MaxLevel
  id: MaxLevel
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: MaxLevel
  nameWithType: JobType.MaxLevel
  fullName: TinyLife.Goals.JobType.MaxLevel
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxLevel
    path: ../TinyLife/Goals/JobType.cs
    startLine: 147
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe maximum level of this job, which defaults to 9\n"
  example: []
  syntax:
    content: public int MaxLevel { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxLevel As Integer
  overload: TinyLife.Goals.JobType.MaxLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.HasSpecialLocalization
  commentId: P:TinyLife.Goals.JobType.HasSpecialLocalization
  id: HasSpecialLocalization
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: HasSpecialLocalization
  nameWithType: JobType.HasSpecialLocalization
  fullName: TinyLife.Goals.JobType.HasSpecialLocalization
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: HasSpecialLocalization
    path: ../TinyLife/Goals/JobType.cs
    startLine: 152
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nWhether this job has special localization info for promotion, demotion, going to work and getting home from work.\nThis value defaults to false.\n"
  example: []
  syntax:
    content: public bool HasSpecialLocalization { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasSpecialLocalization As Boolean
  overload: TinyLife.Goals.JobType.HasSpecialLocalization*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.RequiredAges
  commentId: P:TinyLife.Goals.JobType.RequiredAges
  id: RequiredAges
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: RequiredAges
  nameWithType: JobType.RequiredAges
  fullName: TinyLife.Goals.JobType.RequiredAges
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredAges
    path: ../TinyLife/Goals/JobType.cs
    startLine: 157
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe set of ages that a person can have to be able to do this job.\nThis value defaults to ~Child, which is all age groups except for <xref href=\"TinyLife.Objects.AgeGroup.Child\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AgeGroup RequiredAges { get; set; }
    parameters: []
    return:
      type: TinyLife.Objects.AgeGroup
    content.vb: Public Property RequiredAges As AgeGroup
  overload: TinyLife.Goals.JobType.RequiredAges*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.CanQuitOrBeFired
  commentId: P:TinyLife.Goals.JobType.CanQuitOrBeFired
  id: CanQuitOrBeFired
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: CanQuitOrBeFired
  nameWithType: JobType.CanQuitOrBeFired
  fullName: TinyLife.Goals.JobType.CanQuitOrBeFired
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanQuitOrBeFired
    path: ../TinyLife/Goals/JobType.cs
    startLine: 162
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nWhether a person can quit this job or be fired from it.\nThis value defaults to true.\n"
  example: []
  syntax:
    content: public bool CanQuitOrBeFired { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanQuitOrBeFired As Boolean
  overload: TinyLife.Goals.JobType.CanQuitOrBeFired*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.DailyTasks
  commentId: P:TinyLife.Goals.JobType.DailyTasks
  id: DailyTasks
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: DailyTasks
  nameWithType: JobType.DailyTasks
  fullName: TinyLife.Goals.JobType.DailyTasks
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DailyTasks
    path: ../TinyLife/Goals/JobType.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA <xref href=\"TinyLife.Goals.GoalSetInfo\" data-throw-if-not-resolved=\"false\"></xref> that determines the daily tasks for this job type.\nThis value defaults to null, meaning the job will have no daily tasks.\n"
  example: []
  syntax:
    content: public GoalSetInfo DailyTasks { get; set; }
    parameters: []
    return:
      type: TinyLife.Goals.GoalSetInfo
    content.vb: Public Property DailyTasks As GoalSetInfo
  overload: TinyLife.Goals.JobType.DailyTasks*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.DailyTaskImportance
  commentId: P:TinyLife.Goals.JobType.DailyTaskImportance
  id: DailyTaskImportance
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: DailyTaskImportance
  nameWithType: JobType.DailyTaskImportance
  fullName: TinyLife.Goals.JobType.DailyTaskImportance
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DailyTaskImportance
    path: ../TinyLife/Goals/JobType.cs
    startLine: 172
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe importance of the <xref href=\"TinyLife.Goals.JobType.DailyTasks\" data-throw-if-not-resolved=\"false\"></xref> for job progress.\nThis value defaults to 0.2, meaning the completion of this job&apos;s daily tasks make up 20% of the performance gained the next day.\n"
  example: []
  syntax:
    content: public float DailyTaskImportance { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property DailyTaskImportance As Single
  overload: TinyLife.Goals.JobType.DailyTaskImportance*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.ChoicePrompts
  commentId: P:TinyLife.Goals.JobType.ChoicePrompts
  id: ChoicePrompts
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: ChoicePrompts
  nameWithType: JobType.ChoicePrompts
  fullName: TinyLife.Goals.JobType.ChoicePrompts
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChoicePrompts
    path: ../TinyLife/Goals/JobType.cs
    startLine: 176
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA set of <xref href=\"TinyLife.ChoicePromptInfo\" data-throw-if-not-resolved=\"false\"></xref> instances that will randomly be displayed throughout this job type&apos;s work day.\n"
  example: []
  syntax:
    content: public ChoicePromptInfo[] ChoicePrompts { get; set; }
    parameters: []
    return:
      type: TinyLife.ChoicePromptInfo[]
    content.vb: Public Property ChoicePrompts As ChoicePromptInfo()
  overload: TinyLife.Goals.JobType.ChoicePrompts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.SourceString
  commentId: P:TinyLife.Goals.JobType.SourceString
  id: SourceString
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: SourceString
  nameWithType: JobType.SourceString
  fullName: TinyLife.Goals.JobType.SourceString
  type: Property
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SourceString
    path: ../TinyLife/Goals/JobType.cs
    startLine: 178
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA (localized) string that is displayed when hovering over an <xref href=\"TinyLife.Emotions.EmotionModifier\" data-throw-if-not-resolved=\"false\"></xref> that has this source\n"
  example: []
  syntax:
    content: public string SourceString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SourceString As String
  overload: TinyLife.Goals.JobType.SourceString*
  implements:
  - TinyLife.Emotions.IEmotionSource.SourceString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.JobType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Single,System.ValueTuple{System.Int32,System.Int32},System.DayOfWeek[])
  commentId: M:TinyLife.Goals.JobType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Single,System.ValueTuple{System.Int32,System.Int32},System.DayOfWeek[])
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,System.Single,System.ValueTuple{System.Int32,System.Int32},System.DayOfWeek[])'
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: JobType(String, TextureRegion, Single, (Int32 Start, Int32 End), DayOfWeek[])
  nameWithType: JobType.JobType(String, TextureRegion, Single, (Int32 Start, Int32 End), DayOfWeek[])
  fullName: TinyLife.Goals.JobType.JobType(System.String, MLEM.Textures.TextureRegion, System.Single, System.ValueTuple<System.Int32, System.Int32>, System.DayOfWeek[])
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/JobType.cs
    startLine: 188
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new job type with the given settings\n"
  example: []
  syntax:
    content: public JobType(string name, TextureRegion icon, float hourlyPay, (int Start, int End) workHours, params DayOfWeek[] offWorkDays)
    parameters:
    - id: name
      type: System.String
      description: The name of the job
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: This job type&apos;s icon.
    - id: hourlyPay
      type: System.Single
      description: The hourly wage that this job yields
    - id: workHours
      type: System.ValueTuple{System.Int32,System.Int32}
      description: A range of hours to work each day
    - id: offWorkDays
      type: System.DayOfWeek[]
      description: The days of the week that are off work
    content.vb: Public Sub New(name As String, icon As TextureRegion, hourlyPay As Single, workHours As(Start As Integer, End As Integer)(Of Integer , Integer), ParamArray offWorkDays As DayOfWeek())
  overload: TinyLife.Goals.JobType.#ctor*
  nameWithType.vb: JobType.JobType(String, TextureRegion, Single, (Start As Int32, End As Int32)(Of Int32, Int32), DayOfWeek())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.JobType.JobType(System.String, MLEM.Textures.TextureRegion, System.Single, System.ValueTuple(Of System.Int32, System.Int32), System.DayOfWeek())
  name.vb: JobType(String, TextureRegion, Single, (Start As Int32, End As Int32)(Of Int32, Int32), DayOfWeek())
- uid: TinyLife.Goals.JobType.Construct(TinyLife.Objects.Person,System.Int32)
  commentId: M:TinyLife.Goals.JobType.Construct(TinyLife.Objects.Person,System.Int32)
  id: Construct(TinyLife.Objects.Person,System.Int32)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Construct(Person, Int32)
  nameWithType: JobType.Construct(Person, Int32)
  fullName: TinyLife.Goals.JobType.Construct(TinyLife.Objects.Person, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Construct
    path: ../TinyLife/Goals/JobType.cs
    startLine: 202
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> from this type&apos;s information\n"
  example: []
  syntax:
    content: public Job Construct(Person person, int level = 0)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that should have the job
    - id: level
      type: System.Int32
      description: The level to start this job with, defaults to 0
    return:
      type: TinyLife.Goals.Job
      description: A new job instance
    content.vb: Public Function Construct(person As Person, level As Integer = 0) As Job
  overload: TinyLife.Goals.JobType.Construct*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.JobType.IsTimeToWork(System.TimeSpan)
  commentId: M:TinyLife.Goals.JobType.IsTimeToWork(System.TimeSpan)
  id: IsTimeToWork(System.TimeSpan)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: IsTimeToWork(TimeSpan)
  nameWithType: JobType.IsTimeToWork(TimeSpan)
  fullName: TinyLife.Goals.JobType.IsTimeToWork(System.TimeSpan)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsTimeToWork
    path: ../TinyLife/Goals/JobType.cs
    startLine: 212
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns whether the given time (or the game&apos;s current time) is in the bounds of <xref href=\"TinyLife.Goals.JobType.WorkHours\" data-throw-if-not-resolved=\"false\"></xref> and outside of the bounds of <xref href=\"TinyLife.Goals.JobType.OffWorkDays\" data-throw-if-not-resolved=\"false\"></xref>.\nIf this method returns true, <xref href=\"TinyLife.Actions.WorkAction\" data-throw-if-not-resolved=\"false\"></xref> can be started.\n"
  example: []
  syntax:
    content: public virtual bool IsTimeToWork(TimeSpan time)
    parameters:
    - id: time
      type: System.TimeSpan
      description: The current time.
    return:
      type: System.Boolean
      description: true if it is time to work, false otherwise
    content.vb: Public Overridable Function IsTimeToWork(time As TimeSpan) As Boolean
  overload: TinyLife.Goals.JobType.IsTimeToWork*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.ToScheduleString(System.DayOfWeek)
  commentId: M:TinyLife.Goals.JobType.ToScheduleString(System.DayOfWeek)
  id: ToScheduleString(System.DayOfWeek)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: ToScheduleString(DayOfWeek)
  nameWithType: JobType.ToScheduleString(DayOfWeek)
  fullName: TinyLife.Goals.JobType.ToScheduleString(System.DayOfWeek)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ToScheduleString
    path: ../TinyLife/Goals/JobType.cs
    startLine: 221
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns a string representation of the schedule.\nThe string includes a line that states the <xref href=\"TinyLife.Goals.JobType.WorkHours\" data-throw-if-not-resolved=\"false\"></xref> and a line that states the <xref href=\"TinyLife.Goals.JobType.OffWorkDays\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string ToScheduleString(DayOfWeek weekday)
    parameters:
    - id: weekday
      type: System.DayOfWeek
    return:
      type: System.String
      description: A string representation of this job&apos;s schedule
    content.vb: Public Overridable Function ToScheduleString(weekday As DayOfWeek) As String
  overload: TinyLife.Goals.JobType.ToScheduleString*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.GetDisplayName(System.Nullable{System.Int32})
  commentId: M:TinyLife.Goals.JobType.GetDisplayName(System.Nullable{System.Int32})
  id: GetDisplayName(System.Nullable{System.Int32})
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: GetDisplayName(Nullable<Int32>)
  nameWithType: JobType.GetDisplayName(Nullable<Int32>)
  fullName: TinyLife.Goals.JobType.GetDisplayName(System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDisplayName
    path: ../TinyLife/Goals/JobType.cs
    startLine: 235
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the display name of this <xref href=\"TinyLife.Goals.JobType\" data-throw-if-not-resolved=\"false\"></xref>, based on the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">level</code>.\nIf no level is given, the job&apos;s regular name, without the level-based suffix, is returned.\n"
  example: []
  syntax:
    content: public virtual string GetDisplayName(int? level = null)
    parameters:
    - id: level
      type: System.Nullable{System.Int32}
      description: The level
    return:
      type: System.String
      description: A localized string representing this job&apos;s name
    content.vb: Public Overridable Function GetDisplayName(level As Integer? = Nothing) As String
  overload: TinyLife.Goals.JobType.GetDisplayName*
  nameWithType.vb: JobType.GetDisplayName(Nullable(Of Int32))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TinyLife.Goals.JobType.GetDisplayName(System.Nullable(Of System.Int32))
  name.vb: GetDisplayName(Nullable(Of Int32))
- uid: TinyLife.Goals.JobType.GetRequiredPromotionSkills(TinyLife.Goals.Job)
  commentId: M:TinyLife.Goals.JobType.GetRequiredPromotionSkills(TinyLife.Goals.Job)
  id: GetRequiredPromotionSkills(TinyLife.Goals.Job)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: GetRequiredPromotionSkills(Job)
  nameWithType: JobType.GetRequiredPromotionSkills(Job)
  fullName: TinyLife.Goals.JobType.GetRequiredPromotionSkills(TinyLife.Goals.Job)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRequiredPromotionSkills
    path: ../TinyLife/Goals/JobType.cs
    startLine: 247
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nReturns the set of skills and levels that are required to promote from the given <code data-dev-comment-type=\"paramref\" class=\"paramref\">job</code>&apos;s <xref href=\"TinyLife.Goals.Job.Level\" data-throw-if-not-resolved=\"false\"></xref> to the next level\n"
  example: []
  syntax:
    content: public virtual IEnumerable<(SkillType Type, int Level)> GetRequiredPromotionSkills(Job job)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The current job
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}}
      description: A set of skill types and their required levels for promotion
    content.vb: Public Overridable Function GetRequiredPromotionSkills(job As Job) As IEnumerable(Of(Type As SkillType, Level As Integer)(Of SkillType , Integer))
  overload: TinyLife.Goals.JobType.GetRequiredPromotionSkills*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnWorkStartsInAnHour(TinyLife.Goals.Job)
  commentId: M:TinyLife.Goals.JobType.OnWorkStartsInAnHour(TinyLife.Goals.Job)
  id: OnWorkStartsInAnHour(TinyLife.Goals.Job)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnWorkStartsInAnHour(Job)
  nameWithType: JobType.OnWorkStartsInAnHour(Job)
  fullName: TinyLife.Goals.JobType.OnWorkStartsInAnHour(TinyLife.Goals.Job)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnWorkStartsInAnHour
    path: ../TinyLife/Goals/JobType.cs
    startLine: 262
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when the given <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> instance starts work in an hour for this job.\nBy default, a notification is displayed that instructs the person to head to work soon.\n"
  example: []
  syntax:
    content: public virtual void OnWorkStartsInAnHour(Job job)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    content.vb: Public Overridable Sub OnWorkStartsInAnHour(job As Job)
  overload: TinyLife.Goals.JobType.OnWorkStartsInAnHour*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnWorkHoursOver(TinyLife.Goals.Job)
  commentId: M:TinyLife.Goals.JobType.OnWorkHoursOver(TinyLife.Goals.Job)
  id: OnWorkHoursOver(TinyLife.Goals.Job)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnWorkHoursOver(Job)
  nameWithType: JobType.OnWorkHoursOver(Job)
  fullName: TinyLife.Goals.JobType.OnWorkHoursOver(TinyLife.Goals.Job)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnWorkHoursOver
    path: ../TinyLife/Goals/JobType.cs
    startLine: 273
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when the work hours for the given <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> instance are over for this job.\nNote that this method is also called if the person didn&apos;t go to work, or left early.\nBy default, the <xref href=\"TinyLife.Goals.JobType.DailyTasks\" data-throw-if-not-resolved=\"false\"></xref> are reset.\n"
  example: []
  syntax:
    content: public virtual void OnWorkHoursOver(Job job)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    content.vb: Public Overridable Sub OnWorkHoursOver(job As Job)
  overload: TinyLife.Goals.JobType.OnWorkHoursOver*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnWorkFinished(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  commentId: M:TinyLife.Goals.JobType.OnWorkFinished(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  id: OnWorkFinished(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnWorkFinished(Job, WorkAction)
  nameWithType: JobType.OnWorkFinished(Job, WorkAction)
  fullName: TinyLife.Goals.JobType.OnWorkFinished(TinyLife.Goals.Job, TinyLife.Actions.WorkAction)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnWorkFinished
    path: ../TinyLife/Goals/JobType.cs
    startLine: 283
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> finishes a <xref href=\"TinyLife.Actions.WorkAction\" data-throw-if-not-resolved=\"false\"></xref> for this job.\nBy default, some emotion modifiers are randomly applied.\n"
  example: []
  syntax:
    content: public virtual void OnWorkFinished(Job job, WorkAction action)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    - id: action
      type: TinyLife.Actions.WorkAction
      description: The work action that was completed
    content.vb: Public Overridable Sub OnWorkFinished(job As Job, action As WorkAction)
  overload: TinyLife.Goals.JobType.OnWorkFinished*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnWorkStarted(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  commentId: M:TinyLife.Goals.JobType.OnWorkStarted(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  id: OnWorkStarted(TinyLife.Goals.Job,TinyLife.Actions.WorkAction)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnWorkStarted(Job, WorkAction)
  nameWithType: JobType.OnWorkStarted(Job, WorkAction)
  fullName: TinyLife.Goals.JobType.OnWorkStarted(TinyLife.Goals.Job, TinyLife.Actions.WorkAction)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnWorkStarted
    path: ../TinyLife/Goals/JobType.cs
    startLine: 294
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> starts a <xref href=\"TinyLife.Actions.WorkAction\" data-throw-if-not-resolved=\"false\"></xref> for this job.\nBy default, this method does nothing.\n"
  example: []
  syntax:
    content: public virtual void OnWorkStarted(Job job, WorkAction action)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    - id: action
      type: TinyLife.Actions.WorkAction
      description: The work action that was started
    content.vb: Public Overridable Sub OnWorkStarted(job As Job, action As WorkAction)
  overload: TinyLife.Goals.JobType.OnWorkStarted*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnLevelChanged(TinyLife.Goals.Job,System.Int32)
  commentId: M:TinyLife.Goals.JobType.OnLevelChanged(TinyLife.Goals.Job,System.Int32)
  id: OnLevelChanged(TinyLife.Goals.Job,System.Int32)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnLevelChanged(Job, Int32)
  nameWithType: JobType.OnLevelChanged(Job, Int32)
  fullName: TinyLife.Goals.JobType.OnLevelChanged(TinyLife.Goals.Job, System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnLevelChanged
    path: ../TinyLife/Goals/JobType.cs
    startLine: 302
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> is promoted or demoted for this job.\nBy default, some emotion modifiers are applied.\n"
  example: []
  syntax:
    content: public virtual void OnLevelChanged(Job job, int levelDifference)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    - id: levelDifference
      type: System.Int32
      description: The level difference that was applied. If the person was demoted, this value is -1, else it is 1.
    content.vb: Public Overridable Sub OnLevelChanged(job As Job, levelDifference As Integer)
  overload: TinyLife.Goals.JobType.OnLevelChanged*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.OnRaiseReceived(TinyLife.Goals.Job)
  commentId: M:TinyLife.Goals.JobType.OnRaiseReceived(TinyLife.Goals.Job)
  id: OnRaiseReceived(TinyLife.Goals.Job)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: OnRaiseReceived(Job)
  nameWithType: JobType.OnRaiseReceived(Job)
  fullName: TinyLife.Goals.JobType.OnRaiseReceived(TinyLife.Goals.Job)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: OnRaiseReceived
    path: ../TinyLife/Goals/JobType.cs
    startLine: 312
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA method that is called when a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> receives a raise using <xref href=\"TinyLife.Goals.Job.GetRaise\" data-throw-if-not-resolved=\"false\"></xref>.\nBy default, some emotion modifiers are applied.\n"
  example: []
  syntax:
    content: public virtual void OnRaiseReceived(Job job)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance
    content.vb: Public Overridable Sub OnRaiseReceived(job As Job)
  overload: TinyLife.Goals.JobType.OnRaiseReceived*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.UpdateWorking(TinyLife.Goals.Job,TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Goals.JobType.UpdateWorking(TinyLife.Goals.Job,TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  id: UpdateWorking(TinyLife.Goals.Job,TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: UpdateWorking(Job, WorkAction, TimeSpan, Single)
  nameWithType: JobType.UpdateWorking(Job, WorkAction, TimeSpan, Single)
  fullName: TinyLife.Goals.JobType.UpdateWorking(TinyLife.Goals.Job, TinyLife.Actions.WorkAction, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: UpdateWorking
    path: ../TinyLife/Goals/JobType.cs
    startLine: 324
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nUpdates this job type&apos;s <xref href=\"TinyLife.Goals.Job\" data-throw-if-not-resolved=\"false\"></xref> instance. By default, this method causes students to gain skills in <xref href=\"TinyLife.Goals.StudentJobType\" data-throw-if-not-resolved=\"false\"></xref>.\nThis is called in <xref href=\"TinyLife.Goals.Job.UpdateWorking(TinyLife.Actions.WorkAction%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void UpdateWorking(Job job, WorkAction action, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: job
      type: TinyLife.Goals.Job
      description: The job instance.
    - id: action
      type: TinyLife.Actions.WorkAction
      description: The action that is currently being executed.
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed in game since the last update.
    - id: speedMultiplier
      type: System.Single
      description: The game&apos;s current speed multiplier.
    content.vb: Public Overridable Sub UpdateWorking(job As Job, action As WorkAction, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Goals.JobType.UpdateWorking*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  commentId: M:TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  id: Register(TinyLife.Goals.JobType)
  parent: TinyLife.Goals.JobType
  langs:
  - csharp
  - vb
  name: Register(JobType)
  nameWithType: JobType.Register(JobType)
  fullName: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/JobType.cs
      branch: 0.29.3-dev
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Goals/JobType.cs
    startLine: 334
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nRegisters the given job type to the <xref href=\"TinyLife.Goals.JobType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static JobType Register(JobType type)
    parameters:
    - id: type
      type: TinyLife.Goals.JobType
      description: The type to register
    return:
      type: TinyLife.Goals.JobType
    content.vb: Public Shared Function Register(type As JobType) As JobType
  overload: TinyLife.Goals.JobType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Goals.Job
  commentId: T:TinyLife.Goals.Job
  parent: TinyLife.Goals
  name: Job
  nameWithType: Job
  fullName: TinyLife.Goals.Job
- uid: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  commentId: M:TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  parent: TinyLife.Goals.JobType
  name: Register(JobType)
  nameWithType: JobType.Register(JobType)
  fullName: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
  spec.csharp:
  - uid: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
    name: Register
    nameWithType: JobType.Register
    fullName: TinyLife.Goals.JobType.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.JobType
    name: JobType
    nameWithType: JobType
    fullName: TinyLife.Goals.JobType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.JobType.Register(TinyLife.Goals.JobType)
    name: Register
    nameWithType: JobType.Register
    fullName: TinyLife.Goals.JobType.Register
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.JobType
    name: JobType
    nameWithType: JobType
    fullName: TinyLife.Goals.JobType
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,{T})
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  parent: MLEM.Misc.GenericDataHolder
  definition: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  name: SetData<T>(String, T)
  nameWithType: GenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: GenericDataHolder.SetData<T>
    fullName: MLEM.Misc.GenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: GenericDataHolder.SetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.JobType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<JobType>()
  nameWithType: Extensions.JsonCopy<JobType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.JobType>()
  nameWithType.vb: Extensions.JsonCopy(Of JobType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.JobType)()
  name.vb: JsonCopy(Of JobType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<JobType>
    nameWithType: Extensions.JsonCopy<JobType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.JobType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of JobType)
    nameWithType: Extensions.JsonCopy(Of JobType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.JobType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.JobType
  commentId: T:TinyLife.Goals.JobType
  parent: TinyLife.Goals
  name: JobType
  nameWithType: JobType
  fullName: TinyLife.Goals.JobType
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
  isExternal: true
  name: SetData<T>(String, T)
  nameWithType: GenericDataHolder.SetData<T>(String, T)
  fullName: MLEM.Misc.GenericDataHolder.SetData<T>(System.String, T)
  nameWithType.vb: GenericDataHolder.SetData(Of T)(String, T)
  fullName.vb: MLEM.Misc.GenericDataHolder.SetData(Of T)(System.String, T)
  name.vb: SetData(Of T)(String, T)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData<T>
    nameWithType: GenericDataHolder.SetData<T>
    fullName: MLEM.Misc.GenericDataHolder.SetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData``1(System.String,``0)
    name: SetData(Of T)
    nameWithType: GenericDataHolder.SetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.SetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.JobType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Goals.JobType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, JobType>
  nameWithType: ReadOnlyDictionary<String, JobType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Goals.JobType>
  nameWithType.vb: ReadOnlyDictionary(Of String, JobType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Goals.JobType)
  name.vb: ReadOnlyDictionary(Of String, JobType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.JobType
    name: JobType
    nameWithType: JobType
    fullName: TinyLife.Goals.JobType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Goals.JobType
    name: JobType
    nameWithType: JobType
    fullName: TinyLife.Goals.JobType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: TinyLife.Actions.WorkAction
  commentId: T:TinyLife.Actions.WorkAction
  parent: TinyLife.Actions
  name: WorkAction
  nameWithType: WorkAction
  fullName: TinyLife.Actions.WorkAction
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
- uid: System.Range
  commentId: T:System.Range
  isExternal: true
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Int32, Int32>
  nameWithType: (T1, T2)<Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32>
  nameWithType.vb: (T1, T2)(Of Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32)
  name.vb: (T1, T2)(Of Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DayOfWeek
  commentId: T:System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: TinyLife.Goals.JobType.WorkHours
  commentId: F:TinyLife.Goals.JobType.WorkHours
  parent: TinyLife.Goals.JobType
  name: WorkHours
  nameWithType: JobType.WorkHours
  fullName: TinyLife.Goals.JobType.WorkHours
- uid: System.DayOfWeek[]
  isExternal: true
  name: DayOfWeek[]
  nameWithType: DayOfWeek[]
  fullName: System.DayOfWeek[]
  nameWithType.vb: DayOfWeek()
  fullName.vb: System.DayOfWeek()
  name.vb: DayOfWeek()
  spec.csharp:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Goals.Job.Level
  commentId: P:TinyLife.Goals.Job.Level
  isExternal: true
- uid: TinyLife.Goals.JobType.RequiredPromotionSkills*
  commentId: Overload:TinyLife.Goals.JobType.RequiredPromotionSkills
  name: RequiredPromotionSkills
  nameWithType: JobType.RequiredPromotionSkills
  fullName: TinyLife.Goals.JobType.RequiredPromotionSkills
- uid: System.ValueTuple{TinyLife.Skills.SkillType,System.Single}[]
  isExternal: true
  name: (T1, T2)<SkillType, Single>[]
  nameWithType: (T1, T2)<SkillType, Single>[]
  fullName: System.ValueTuple<TinyLife.Skills.SkillType, System.Single>[]
  nameWithType.vb: (T1, T2)(Of SkillType, Single)()
  fullName.vb: System.ValueTuple(Of TinyLife.Skills.SkillType, System.Single)()
  name.vb: (T1, T2)(Of SkillType, Single)()
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife.Goals.JobType.MaxLevel*
  commentId: Overload:TinyLife.Goals.JobType.MaxLevel
  name: MaxLevel
  nameWithType: JobType.MaxLevel
  fullName: TinyLife.Goals.JobType.MaxLevel
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Goals.JobType.HasSpecialLocalization*
  commentId: Overload:TinyLife.Goals.JobType.HasSpecialLocalization
  name: HasSpecialLocalization
  nameWithType: JobType.HasSpecialLocalization
  fullName: TinyLife.Goals.JobType.HasSpecialLocalization
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.AgeGroup.Child
  commentId: F:TinyLife.Objects.AgeGroup.Child
  isExternal: true
- uid: TinyLife.Goals.JobType.RequiredAges*
  commentId: Overload:TinyLife.Goals.JobType.RequiredAges
  name: RequiredAges
  nameWithType: JobType.RequiredAges
  fullName: TinyLife.Goals.JobType.RequiredAges
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: TinyLife.Goals.JobType.CanQuitOrBeFired*
  commentId: Overload:TinyLife.Goals.JobType.CanQuitOrBeFired
  name: CanQuitOrBeFired
  nameWithType: JobType.CanQuitOrBeFired
  fullName: TinyLife.Goals.JobType.CanQuitOrBeFired
- uid: TinyLife.Goals.GoalSetInfo
  commentId: T:TinyLife.Goals.GoalSetInfo
  parent: TinyLife.Goals
  name: GoalSetInfo
  nameWithType: GoalSetInfo
  fullName: TinyLife.Goals.GoalSetInfo
- uid: TinyLife.Goals.JobType.DailyTasks*
  commentId: Overload:TinyLife.Goals.JobType.DailyTasks
  name: DailyTasks
  nameWithType: JobType.DailyTasks
  fullName: TinyLife.Goals.JobType.DailyTasks
- uid: TinyLife.Goals.JobType.DailyTasks
  commentId: P:TinyLife.Goals.JobType.DailyTasks
  parent: TinyLife.Goals.JobType
  name: DailyTasks
  nameWithType: JobType.DailyTasks
  fullName: TinyLife.Goals.JobType.DailyTasks
- uid: TinyLife.Goals.JobType.DailyTaskImportance*
  commentId: Overload:TinyLife.Goals.JobType.DailyTaskImportance
  name: DailyTaskImportance
  nameWithType: JobType.DailyTaskImportance
  fullName: TinyLife.Goals.JobType.DailyTaskImportance
- uid: TinyLife.ChoicePromptInfo
  commentId: T:TinyLife.ChoicePromptInfo
  parent: TinyLife
  name: ChoicePromptInfo
  nameWithType: ChoicePromptInfo
  fullName: TinyLife.ChoicePromptInfo
- uid: TinyLife.Goals.JobType.ChoicePrompts*
  commentId: Overload:TinyLife.Goals.JobType.ChoicePrompts
  name: ChoicePrompts
  nameWithType: JobType.ChoicePrompts
  fullName: TinyLife.Goals.JobType.ChoicePrompts
- uid: TinyLife.ChoicePromptInfo[]
  isExternal: true
  name: ChoicePromptInfo[]
  nameWithType: ChoicePromptInfo[]
  fullName: TinyLife.ChoicePromptInfo[]
  nameWithType.vb: ChoicePromptInfo()
  fullName.vb: TinyLife.ChoicePromptInfo()
  name.vb: ChoicePromptInfo()
  spec.csharp:
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: TinyLife.ChoicePromptInfo
    name: ChoicePromptInfo
    nameWithType: ChoicePromptInfo
    fullName: TinyLife.ChoicePromptInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: TinyLife
  commentId: N:TinyLife
  name: TinyLife
  nameWithType: TinyLife
  fullName: TinyLife
- uid: TinyLife.Goals.JobType.SourceString*
  commentId: Overload:TinyLife.Goals.JobType.SourceString
  name: SourceString
  nameWithType: JobType.SourceString
  fullName: TinyLife.Goals.JobType.SourceString
- uid: TinyLife.Emotions.IEmotionSource.SourceString
  commentId: P:TinyLife.Emotions.IEmotionSource.SourceString
  parent: TinyLife.Emotions.IEmotionSource
  name: SourceString
  nameWithType: IEmotionSource.SourceString
  fullName: TinyLife.Emotions.IEmotionSource.SourceString
- uid: TinyLife.Goals.JobType.#ctor*
  commentId: Overload:TinyLife.Goals.JobType.#ctor
  name: JobType
  nameWithType: JobType.JobType
  fullName: TinyLife.Goals.JobType.JobType
- uid: TinyLife.Goals.JobType.Construct*
  commentId: Overload:TinyLife.Goals.JobType.Construct
  name: Construct
  nameWithType: JobType.Construct
  fullName: TinyLife.Goals.JobType.Construct
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Goals.JobType.OffWorkDays
  commentId: F:TinyLife.Goals.JobType.OffWorkDays
  parent: TinyLife.Goals.JobType
  name: OffWorkDays
  nameWithType: JobType.OffWorkDays
  fullName: TinyLife.Goals.JobType.OffWorkDays
- uid: TinyLife.Goals.JobType.IsTimeToWork*
  commentId: Overload:TinyLife.Goals.JobType.IsTimeToWork
  name: IsTimeToWork
  nameWithType: JobType.IsTimeToWork
  fullName: TinyLife.Goals.JobType.IsTimeToWork
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: TinyLife.Goals.JobType.ToScheduleString*
  commentId: Overload:TinyLife.Goals.JobType.ToScheduleString
  name: ToScheduleString
  nameWithType: JobType.ToScheduleString
  fullName: TinyLife.Goals.JobType.ToScheduleString
- uid: TinyLife.Goals.JobType.GetDisplayName*
  commentId: Overload:TinyLife.Goals.JobType.GetDisplayName
  name: GetDisplayName
  nameWithType: JobType.GetDisplayName
  fullName: TinyLife.Goals.JobType.GetDisplayName
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.JobType.GetRequiredPromotionSkills*
  commentId: Overload:TinyLife.Goals.JobType.GetRequiredPromotionSkills
  name: GetRequiredPromotionSkills
  nameWithType: JobType.GetRequiredPromotionSkills
  fullName: TinyLife.Goals.JobType.GetRequiredPromotionSkills
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{TinyLife.Skills.SkillType,System.Int32}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<(T1, T2)<SkillType, Int32>>
  nameWithType: IEnumerable<(T1, T2)<SkillType, Int32>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<TinyLife.Skills.SkillType, System.Int32>>
  nameWithType.vb: IEnumerable(Of (T1, T2)(Of SkillType, Int32))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of TinyLife.Skills.SkillType, System.Int32))
  name.vb: IEnumerable(Of (T1, T2)(Of SkillType, Int32))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TinyLife.Goals.JobType.OnWorkStartsInAnHour*
  commentId: Overload:TinyLife.Goals.JobType.OnWorkStartsInAnHour
  name: OnWorkStartsInAnHour
  nameWithType: JobType.OnWorkStartsInAnHour
  fullName: TinyLife.Goals.JobType.OnWorkStartsInAnHour
- uid: TinyLife.Goals.JobType.OnWorkHoursOver*
  commentId: Overload:TinyLife.Goals.JobType.OnWorkHoursOver
  name: OnWorkHoursOver
  nameWithType: JobType.OnWorkHoursOver
  fullName: TinyLife.Goals.JobType.OnWorkHoursOver
- uid: TinyLife.Goals.JobType.OnWorkFinished*
  commentId: Overload:TinyLife.Goals.JobType.OnWorkFinished
  name: OnWorkFinished
  nameWithType: JobType.OnWorkFinished
  fullName: TinyLife.Goals.JobType.OnWorkFinished
- uid: TinyLife.Goals.JobType.OnWorkStarted*
  commentId: Overload:TinyLife.Goals.JobType.OnWorkStarted
  name: OnWorkStarted
  nameWithType: JobType.OnWorkStarted
  fullName: TinyLife.Goals.JobType.OnWorkStarted
- uid: TinyLife.Goals.JobType.OnLevelChanged*
  commentId: Overload:TinyLife.Goals.JobType.OnLevelChanged
  name: OnLevelChanged
  nameWithType: JobType.OnLevelChanged
  fullName: TinyLife.Goals.JobType.OnLevelChanged
- uid: TinyLife.Goals.Job.GetRaise
  commentId: M:TinyLife.Goals.Job.GetRaise
  isExternal: true
- uid: TinyLife.Goals.JobType.OnRaiseReceived*
  commentId: Overload:TinyLife.Goals.JobType.OnRaiseReceived
  name: OnRaiseReceived
  nameWithType: JobType.OnRaiseReceived
  fullName: TinyLife.Goals.JobType.OnRaiseReceived
- uid: TinyLife.Goals.StudentJobType
  commentId: T:TinyLife.Goals.StudentJobType
  name: StudentJobType
  nameWithType: StudentJobType
  fullName: TinyLife.Goals.StudentJobType
- uid: TinyLife.Goals.Job.UpdateWorking(TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Goals.Job.UpdateWorking(TinyLife.Actions.WorkAction,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Goals.JobType.UpdateWorking*
  commentId: Overload:TinyLife.Goals.JobType.UpdateWorking
  name: UpdateWorking
  nameWithType: JobType.UpdateWorking
  fullName: TinyLife.Goals.JobType.UpdateWorking
- uid: TinyLife.Goals.JobType.Types
  commentId: F:TinyLife.Goals.JobType.Types
  parent: TinyLife.Goals.JobType
  name: Types
  nameWithType: JobType.Types
  fullName: TinyLife.Goals.JobType.Types
- uid: TinyLife.Goals.JobType.Register*
  commentId: Overload:TinyLife.Goals.JobType.Register
  name: Register
  nameWithType: JobType.Register
  fullName: TinyLife.Goals.JobType.Register

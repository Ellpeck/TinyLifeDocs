### YamlMime:ManagedReference
items:
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  id: LotType
  parent: TinyLife.World
  children:
  - TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  - TinyLife.World.LotType.Cafe
  - TinyLife.World.LotType.CanExecuteAction
  - TinyLife.World.LotType.DisplayName
  - TinyLife.World.LotType.Employments
  - TinyLife.World.LotType.GenericPublicLot
  - TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  - TinyLife.World.LotType.GetVisitPriority
  - TinyLife.World.LotType.Gym
  - TinyLife.World.LotType.Icon
  - TinyLife.World.LotType.IsResidential
  - TinyLife.World.LotType.KidsPlayground
  - TinyLife.World.LotType.Library
  - TinyLife.World.LotType.Name
  - TinyLife.World.LotType.Park
  - TinyLife.World.LotType.Register(TinyLife.World.LotType)
  - TinyLife.World.LotType.RequiredFurniture
  - TinyLife.World.LotType.Residential
  - TinyLife.World.LotType.Types
  langs:
  - csharp
  - vb
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
  type: Class
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: LotType
    path: ../TinyLife/World/Lot.cs
    startLine: 470
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA lot type is data for a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> that determines the required furniture on the lot as well as whether the lot is residential or not.\nAdditionally, custom lot types can define different reasons and interactions for <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> objects to visit lots of the type.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<LotType>), new object[] { typeof(LotType), "PrivateTypes" })]

      public class LotType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of LotType)), New Object() { GetType(LotType), "PrivateTypes" })>

      Public Class LotType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  id: Types
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: LotType.Types
  fullName: TinyLife.World.LotType.Types
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/World/Lot.cs
    startLine: 477
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA registry for all <xref href=\"TinyLife.World.LotType\" data-throw-if-not-resolved=\"false\"></xref> objects that the game and mods define\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, LotType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, LotType)
- uid: TinyLife.World.LotType.Residential
  commentId: F:TinyLife.World.LotType.Residential
  id: Residential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Residential
  nameWithType: LotType.Residential
  fullName: TinyLife.World.LotType.Residential
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Residential
    path: ../TinyLife/World/Lot.cs
    startLine: 480
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Residential
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Residential As LotType
- uid: TinyLife.World.LotType.Park
  commentId: F:TinyLife.World.LotType.Park
  id: Park
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Park
  nameWithType: LotType.Park
  fullName: TinyLife.World.LotType.Park
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Park
    path: ../TinyLife/World/Lot.cs
    startLine: 484
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Park
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Park As LotType
- uid: TinyLife.World.LotType.Cafe
  commentId: F:TinyLife.World.LotType.Cafe
  id: Cafe
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Cafe
  nameWithType: LotType.Cafe
  fullName: TinyLife.World.LotType.Cafe
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Cafe
    path: ../TinyLife/World/Lot.cs
    startLine: 487
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Cafe
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Cafe As LotType
- uid: TinyLife.World.LotType.KidsPlayground
  commentId: F:TinyLife.World.LotType.KidsPlayground
  id: KidsPlayground
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: KidsPlayground
  nameWithType: LotType.KidsPlayground
  fullName: TinyLife.World.LotType.KidsPlayground
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: KidsPlayground
    path: ../TinyLife/World/Lot.cs
    startLine: 502
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType KidsPlayground
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly KidsPlayground As LotType
- uid: TinyLife.World.LotType.Library
  commentId: F:TinyLife.World.LotType.Library
  id: Library
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Library
  nameWithType: LotType.Library
  fullName: TinyLife.World.LotType.Library
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Library
    path: ../TinyLife/World/Lot.cs
    startLine: 507
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Library
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Library As LotType
- uid: TinyLife.World.LotType.Gym
  commentId: F:TinyLife.World.LotType.Gym
  id: Gym
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Gym
  nameWithType: LotType.Gym
  fullName: TinyLife.World.LotType.Gym
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Gym
    path: ../TinyLife/World/Lot.cs
    startLine: 521
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType Gym
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly Gym As LotType
- uid: TinyLife.World.LotType.GenericPublicLot
  commentId: F:TinyLife.World.LotType.GenericPublicLot
  id: GenericPublicLot
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GenericPublicLot
  nameWithType: LotType.GenericPublicLot
  fullName: TinyLife.World.LotType.GenericPublicLot
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GenericPublicLot
    path: ../TinyLife/World/Lot.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  syntax:
    content: public static readonly LotType GenericPublicLot
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared ReadOnly GenericPublicLot As LotType
- uid: TinyLife.World.LotType.Name
  commentId: F:TinyLife.World.LotType.Name
  id: Name
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LotType.Name
  fullName: TinyLife.World.LotType.Name
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/World/Lot.cs
    startLine: 540
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe name of this lot type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
- uid: TinyLife.World.LotType.Icon
  commentId: F:TinyLife.World.LotType.Icon
  id: Icon
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: LotType.Icon
  fullName: TinyLife.World.LotType.Icon
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Icon
    path: ../TinyLife/World/Lot.cs
    startLine: 544
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nThe icon that this lot type should display.\n"
  example: []
  syntax:
    content: public readonly TextureRegion Icon
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Icon As TextureRegion
- uid: TinyLife.World.LotType.IsResidential
  commentId: F:TinyLife.World.LotType.IsResidential
  id: IsResidential
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: IsResidential
  nameWithType: LotType.IsResidential
  fullName: TinyLife.World.LotType.IsResidential
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsResidential
    path: ../TinyLife/World/Lot.cs
    startLine: 549
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nWhether this lot is residential.\nA residential lot is one that <xref href=\"TinyLife.World.Household\" data-throw-if-not-resolved=\"false\"></xref>s can move into.\n"
  example: []
  syntax:
    content: public readonly bool IsResidential
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsResidential As Boolean
- uid: TinyLife.World.LotType.RequiredFurniture
  commentId: F:TinyLife.World.LotType.RequiredFurniture
  id: RequiredFurniture
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: RequiredFurniture
  nameWithType: LotType.RequiredFurniture
  fullName: TinyLife.World.LotType.RequiredFurniture
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: RequiredFurniture
    path: ../TinyLife/World/Lot.cs
    startLine: 554
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of furniture that is required on the lot.\nEach entry determines the <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> required, as well as the amount of that item that is required on the lot and an unlocalized display name for the requirement.\n"
  example: []
  syntax:
    content: public readonly (Predicate<Furniture> Predicate, int Amount, string Name)[] RequiredFurniture
    return:
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
    content.vb: Public ReadOnly RequiredFurniture As (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  id: GetVisitPriority
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetVisitPriority
  nameWithType: LotType.GetVisitPriority
  fullName: TinyLife.World.LotType.GetVisitPriority
  type: Field
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetVisitPriority
    path: ../TinyLife/World/Lot.cs
    startLine: 560
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA function that returns, for a <xref href=\"TinyLife.World.Lot\" data-throw-if-not-resolved=\"false\"></xref> with this lot type, and a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> trying ot visit the lot, how likely it is for the lot to be chosen.\nThe higher the return value is, the more likely it is for this lot to be chosen.\nFor reference, the &quot;Park&quot; lot type always returns 200.\n"
  example: []
  syntax:
    content: public readonly Func<Lot, Person, int> GetVisitPriority
    return:
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
    content.vb: Public ReadOnly GetVisitPriority As Func(Of Lot, Person, Integer)
- uid: TinyLife.World.LotType.Employments
  commentId: P:TinyLife.World.LotType.Employments
  id: Employments
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Employments
    path: ../TinyLife/World/Lot.cs
    startLine: 565
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA set of <xref href=\"TinyLife.World.LotEmployment\" data-throw-if-not-resolved=\"false\"></xref> instances that this lot requires to keep running.\nPlayers have the ability to add people from their exported households to work in a lot employment position.\n"
  example: []
  syntax:
    content: public LotEmployment[] Employments { get; init; }
    parameters: []
    return:
      type: TinyLife.World.LotEmployment[]
    content.vb: Public Property Employments As LotEmployment()
  overload: TinyLife.World.LotType.Employments*
- uid: TinyLife.World.LotType.CanExecuteAction
  commentId: P:TinyLife.World.LotType.CanExecuteAction
  id: CanExecuteAction
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: CanExecuteAction
  nameWithType: LotType.CanExecuteAction
  fullName: TinyLife.World.LotType.CanExecuteAction
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CanExecuteAction
    path: ../TinyLife/World/Lot.cs
    startLine: 570
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA function that optionally determines whether a certain <xref href=\"TinyLife.Actions.ActionType\" data-throw-if-not-resolved=\"false\"></xref> can be executed on this lot. This function also receives a <xref href=\"TinyLife.Actions.ActionInfo\" data-throw-if-not-resolved=\"false\"></xref>, and a <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool\">bool</a> that indicates whether the action is started automatically.\nThis function is useful for lots like <xref href=\"TinyLife.World.LotType.Cafe\" data-throw-if-not-resolved=\"false\"></xref>, where using a coffee machine is disallowed if the person is not a lot employee.\n"
  example: []
  syntax:
    content: public Func<ActionType, ActionInfo, bool, CanExecuteResult> CanExecuteAction { get; init; }
    parameters: []
    return:
      type: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
    content.vb: Public Property CanExecuteAction As Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  overload: TinyLife.World.LotType.CanExecuteAction*
- uid: TinyLife.World.LotType.DisplayName
  commentId: P:TinyLife.World.LotType.DisplayName
  id: DisplayName
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: LotType.DisplayName
  fullName: TinyLife.World.LotType.DisplayName
  type: Property
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: DisplayName
    path: ../TinyLife/World/Lot.cs
    startLine: 575
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nReturns the display name of this lot, which is the <xref href=\"TinyLife.World.LotType.Icon\" data-throw-if-not-resolved=\"false\"></xref> followed by a localized version of the <xref href=\"TinyLife.World.LotType.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: TinyLife.World.LotType.DisplayName*
- uid: TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  commentId: M:TinyLife.World.LotType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,System.Boolean,System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32},System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[])'
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: LotType(string, TextureRegion, bool, Func<Lot, Person, int>, params (Predicate<Furniture>, int, string)[])
  nameWithType: LotType.LotType(string, TextureRegion, bool, Func<Lot, Person, int>, params (Predicate<Furniture>, int, string)[])
  fullName: TinyLife.World.LotType.LotType(string, MLEM.Textures.TextureRegion, bool, System.Func<TinyLife.World.Lot, TinyLife.Objects.Person, int>, params (System.Predicate<TinyLife.Objects.Furniture>, int, string)[])
  type: Constructor
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/World/Lot.cs
    startLine: 585
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nCreates a new lot type with the given settings\n"
  example: []
  syntax:
    content: public LotType(string name, TextureRegion icon, bool isResidential, Func<Lot, Person, int> getVisitPriority, params (Predicate<Furniture>, int, string)[] requiredFurniture)
    parameters:
    - id: name
      type: System.String
      description: The name of this lot type
    - id: icon
      type: MLEM.Textures.TextureRegion
      description: The icon that this lot type should display.
    - id: isResidential
      type: System.Boolean
      description: Whether lots of this type should be considered residential
    - id: getVisitPriority
      type: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
      description: A function that returns this lot type&apos;s visitation priority
    - id: requiredFurniture
      type: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
      description: A set of furniture and amounts that have to be present on lots of this type, as well as an unlocalized name for the requirement
    content.vb: Public Sub New(name As String, icon As TextureRegion, isResidential As Boolean, getVisitPriority As Func(Of Lot, Person, Integer), ParamArray requiredFurniture As (Predicate(Of Furniture), Integer, String)())
  overload: TinyLife.World.LotType.#ctor*
  nameWithType.vb: LotType.New(String, TextureRegion, Boolean, Func(Of Lot, Person, Integer), ParamArray (Predicate(Of Furniture), Integer, String)())
  fullName.vb: TinyLife.World.LotType.New(String, MLEM.Textures.TextureRegion, Boolean, System.Func(Of TinyLife.World.Lot, TinyLife.Objects.Person, Integer), ParamArray (System.Predicate(Of TinyLife.Objects.Furniture), Integer, String)())
  name.vb: New(String, TextureRegion, Boolean, Func(Of Lot, Person, Integer), ParamArray (Predicate(Of Furniture), Integer, String)())
- uid: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  commentId: M:TinyLife.World.LotType.Register(TinyLife.World.LotType)
  id: Register(TinyLife.World.LotType)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: Register(LotType)
  nameWithType: LotType.Register(LotType)
  fullName: TinyLife.World.LotType.Register(TinyLife.World.LotType)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/World/Lot.cs
    startLine: 597
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nRegisters a new lot type to the <xref href=\"TinyLife.World.LotType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static LotType Register(LotType type)
    parameters:
    - id: type
      type: TinyLife.World.LotType
      description: The lot type to register
    return:
      type: TinyLife.World.LotType
    content.vb: Public Shared Function Register(type As LotType) As LotType
  overload: TinyLife.World.LotType.Register*
- uid: TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  commentId: M:TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  id: GetGroupVisitPriority(TinyLife.World.Lot,System.Int32)
  parent: TinyLife.World.LotType
  langs:
  - csharp
  - vb
  name: GetGroupVisitPriority(Lot, int)
  nameWithType: LotType.GetGroupVisitPriority(Lot, int)
  fullName: TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot, int)
  type: Method
  source:
    remote:
      path: TinyLife/World/Lot.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetGroupVisitPriority
    path: ../TinyLife/World/Lot.cs
    startLine: 610
  assemblies:
  - Tiny Life
  namespace: TinyLife.World
  summary: "\nA helper method intended to be used with <xref href=\"TinyLife.World.LotType.GetVisitPriority\" data-throw-if-not-resolved=\"false\"></xref> that increases the passed visit priority if there are already other people on the lot.\nThis method should be used for public lots to increase the likelihood of additional people visiting if the player visits the lot.\n"
  example: []
  syntax:
    content: public static int GetGroupVisitPriority(Lot lot, int basePriority)
    parameters:
    - id: lot
      type: TinyLife.World.Lot
      description: The lot whose visit priority to query
    - id: basePriority
      type: System.Int32
      description: The base visit priority that the lot should have if no one is there already
    return:
      type: System.Int32
      description: A visit priority affected by the amount of people on the lot
    content.vb: Public Shared Function GetGroupVisitPriority(lot As Lot, basePriority As Integer) As Integer
  overload: TinyLife.World.LotType.GetGroupVisitPriority*
  nameWithType.vb: LotType.GetGroupVisitPriority(Lot, Integer)
  fullName.vb: TinyLife.World.LotType.GetGroupVisitPriority(TinyLife.World.Lot, Integer)
  name.vb: GetGroupVisitPriority(Lot, Integer)
references:
- uid: TinyLife.World.Lot
  commentId: T:TinyLife.World.Lot
  parent: TinyLife.World
  name: Lot
  nameWithType: Lot
  fullName: TinyLife.World.Lot
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.World
  commentId: N:TinyLife.World
  name: TinyLife.World
  nameWithType: TinyLife.World
  fullName: TinyLife.World
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.World
    name: World
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TinyLife.World.LotType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<LotType>(LotType)
  nameWithType: Extensions.JsonCopy<LotType>(LotType)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.World.LotType>(TinyLife.World.LotType)
  nameWithType.vb: Extensions.JsonCopy(Of LotType)(LotType)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.World.LotType)(TinyLife.World.LotType)
  name.vb: JsonCopy(Of LotType)(LotType)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotType)
    name: JsonCopy
  - name: <
  - uid: TinyLife.World.LotType
    name: LotType
  - name: '>'
  - name: (
  - uid: TinyLife.World.LotType
    name: LotType
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(TinyLife.World.LotType)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
  - name: )
  - name: (
  - uid: TinyLife.World.LotType
    name: LotType
  - name: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Objects
    name: Objects
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Utilities
    name: Utilities
- uid: TinyLife.World.LotType
  commentId: T:TinyLife.World.LotType
  parent: TinyLife.World
  name: LotType
  nameWithType: LotType
  fullName: TinyLife.World.LotType
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.World.LotType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<string, LotType>
  nameWithType: ReadOnlyDictionary<string, LotType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<string, TinyLife.World.LotType>
  nameWithType.vb: ReadOnlyDictionary(Of String, LotType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of String, TinyLife.World.LotType)
  name.vb: ReadOnlyDictionary(Of String, LotType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: TinyLife.World.LotType
    name: LotType
  - name: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel.readonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.objectmodel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
  spec.csharp:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
  spec.vb:
  - uid: MLEM
    name: MLEM
    isExternal: true
  - name: .
  - uid: MLEM.Textures
    name: Textures
    isExternal: true
- uid: TinyLife.World.Household
  commentId: T:TinyLife.World.Household
  parent: TinyLife.World
  name: Household
  nameWithType: Household
  fullName: TinyLife.World.Household
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: (Predicate<Furniture> Predicate, int Amount, string Name)[]
  nameWithType: (Predicate<Furniture> Predicate, int Amount, string Name)[]
  fullName: (System.Predicate<TinyLife.Objects.Furniture> Predicate, int Amount, string Name)[]
  nameWithType.vb: (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
  fullName.vb: (Predicate As System.Predicate(Of TinyLife.Objects.Furniture), Amount As Integer, Name As String)()
  name.vb: (Predicate As Predicate(Of Furniture), Amount As Integer, Name As String)()
  spec.csharp:
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Predicate
    name: Predicate
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.predicate
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Amount
    name: Amount
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.amount
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Name
    name: Name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.name
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Predicate
    name: Predicate
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.predicate
  - name: " "
  - name: As
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Objects.Furniture
    name: Furniture
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Amount
    name: Amount
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.amount
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Predicate{TinyLife.Objects.Furniture},System.Int32,System.String}.Name
    name: Name
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.predicate-tinylife.objects.furniture-,system.int32,system.string-.name
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
- uid: System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
  commentId: T:System.Func{TinyLife.World.Lot,TinyLife.Objects.Person,System.Int32}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<Lot, Person, int>
  nameWithType: Func<Lot, Person, int>
  fullName: System.Func<TinyLife.World.Lot, TinyLife.Objects.Person, int>
  nameWithType.vb: Func(Of Lot, Person, Integer)
  fullName.vb: System.Func(Of TinyLife.World.Lot, TinyLife.Objects.Person, Integer)
  name.vb: Func(Of Lot, Person, Integer)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: TinyLife.World.Lot
    name: Lot
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.World.Lot
    name: Lot
  - name: ','
  - name: " "
  - uid: TinyLife.Objects.Person
    name: Person
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotEmployment
  commentId: T:TinyLife.World.LotEmployment
  parent: TinyLife.World
  name: LotEmployment
  nameWithType: LotEmployment
  fullName: TinyLife.World.LotEmployment
- uid: TinyLife.World.LotType.Employments*
  commentId: Overload:TinyLife.World.LotType.Employments
  name: Employments
  nameWithType: LotType.Employments
  fullName: TinyLife.World.LotType.Employments
- uid: TinyLife.World.LotEmployment[]
  isExternal: true
  name: LotEmployment[]
  nameWithType: LotEmployment[]
  fullName: TinyLife.World.LotEmployment[]
  nameWithType.vb: LotEmployment()
  fullName.vb: TinyLife.World.LotEmployment()
  name.vb: LotEmployment()
  spec.csharp:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: '['
  - name: ']'
  spec.vb:
  - uid: TinyLife.World.LotEmployment
    name: LotEmployment
  - name: (
  - name: )
- uid: TinyLife.Actions.ActionType
  commentId: T:TinyLife.Actions.ActionType
  parent: TinyLife.Actions
  name: ActionType
  nameWithType: ActionType
  fullName: TinyLife.Actions.ActionType
- uid: TinyLife.Actions.ActionInfo
  commentId: T:TinyLife.Actions.ActionInfo
  parent: TinyLife.Actions
  name: ActionInfo
  nameWithType: ActionInfo
  fullName: TinyLife.Actions.ActionInfo
- uid: TinyLife.World.LotType.Cafe
  commentId: F:TinyLife.World.LotType.Cafe
  name: Cafe
  nameWithType: LotType.Cafe
  fullName: TinyLife.World.LotType.Cafe
- uid: TinyLife.World.LotType.CanExecuteAction*
  commentId: Overload:TinyLife.World.LotType.CanExecuteAction
  name: CanExecuteAction
  nameWithType: LotType.CanExecuteAction
  fullName: TinyLife.World.LotType.CanExecuteAction
- uid: System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
  commentId: T:System.Func{TinyLife.Actions.ActionType,TinyLife.Actions.ActionInfo,System.Boolean,TinyLife.Actions.CanExecuteResult}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<ActionType, ActionInfo, bool, CanExecuteResult>
  nameWithType: Func<ActionType, ActionInfo, bool, CanExecuteResult>
  fullName: System.Func<TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, bool, TinyLife.Actions.CanExecuteResult>
  nameWithType.vb: Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  fullName.vb: System.Func(Of TinyLife.Actions.ActionType, TinyLife.Actions.ActionInfo, Boolean, TinyLife.Actions.CanExecuteResult)
  name.vb: Func(Of ActionType, ActionInfo, Boolean, CanExecuteResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: TinyLife.Actions.ActionType
    name: ActionType
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.ActionInfo
    name: ActionInfo
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: TinyLife.Actions.CanExecuteResult
    name: CanExecuteResult
  - name: )
- uid: TinyLife.Actions
  commentId: N:TinyLife.Actions
  name: TinyLife.Actions
  nameWithType: TinyLife.Actions
  fullName: TinyLife.Actions
  spec.csharp:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
  spec.vb:
  - uid: TinyLife
    name: TinyLife
  - name: .
  - uid: TinyLife.Actions
    name: Actions
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: TinyLife.World.LotType.Icon
  commentId: F:TinyLife.World.LotType.Icon
  name: Icon
  nameWithType: LotType.Icon
  fullName: TinyLife.World.LotType.Icon
- uid: TinyLife.World.LotType.Name
  commentId: F:TinyLife.World.LotType.Name
  name: Name
  nameWithType: LotType.Name
  fullName: TinyLife.World.LotType.Name
- uid: TinyLife.World.LotType.DisplayName*
  commentId: Overload:TinyLife.World.LotType.DisplayName
  name: DisplayName
  nameWithType: LotType.DisplayName
  fullName: TinyLife.World.LotType.DisplayName
- uid: TinyLife.World.LotType.#ctor*
  commentId: Overload:TinyLife.World.LotType.#ctor
  name: LotType
  nameWithType: LotType.LotType
  fullName: TinyLife.World.LotType.LotType
  nameWithType.vb: LotType.New
  fullName.vb: TinyLife.World.LotType.New
  name.vb: New
- uid: TinyLife.World.LotType.Types
  commentId: F:TinyLife.World.LotType.Types
  name: Types
  nameWithType: LotType.Types
  fullName: TinyLife.World.LotType.Types
- uid: TinyLife.World.LotType.Register*
  commentId: Overload:TinyLife.World.LotType.Register
  name: Register
  nameWithType: LotType.Register
  fullName: TinyLife.World.LotType.Register
- uid: TinyLife.World.LotType.GetVisitPriority
  commentId: F:TinyLife.World.LotType.GetVisitPriority
  name: GetVisitPriority
  nameWithType: LotType.GetVisitPriority
  fullName: TinyLife.World.LotType.GetVisitPriority
- uid: TinyLife.World.LotType.GetGroupVisitPriority*
  commentId: Overload:TinyLife.World.LotType.GetGroupVisitPriority
  name: GetGroupVisitPriority
  nameWithType: LotType.GetGroupVisitPriority
  fullName: TinyLife.World.LotType.GetGroupVisitPriority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer

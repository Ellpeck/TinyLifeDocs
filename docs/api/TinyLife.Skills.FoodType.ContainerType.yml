### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.FoodType.ContainerType
  commentId: T:TinyLife.Skills.FoodType.ContainerType
  id: FoodType.ContainerType
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.FoodType.ContainerType.#ctor(System.String,System.Boolean,System.Func{System.Int32,TinyLife.Objects.FurnitureType},System.Func{System.Boolean,TinyLife.Objects.FurnitureType},System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion})
  - TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  - TinyLife.Skills.FoodType.ContainerType.GetEmpty(System.Boolean)
  - TinyLife.Skills.FoodType.ContainerType.GetFilled(System.Int32)
  - TinyLife.Skills.FoodType.ContainerType.Glass
  - TinyLife.Skills.FoodType.ContainerType.IsDrink
  - TinyLife.Skills.FoodType.ContainerType.Mug
  - TinyLife.Skills.FoodType.ContainerType.Name
  - TinyLife.Skills.FoodType.ContainerType.Plate
  langs:
  - csharp
  - vb
  name: FoodType.ContainerType
  nameWithType: FoodType.ContainerType
  fullName: TinyLife.Skills.FoodType.ContainerType
  type: Class
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ContainerType
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 502
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA container type is a set of information for a <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref> that determines what <xref href=\"TinyLife.Objects.Furniture\" data-throw-if-not-resolved=\"false\"></xref> is constructed to hold the food type.\n"
  example: []
  syntax:
    content: public class ContainerType
    content.vb: Public Class ContainerType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.FoodType.ContainerType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.FoodType.ContainerType.Plate
  commentId: F:TinyLife.Skills.FoodType.ContainerType.Plate
  id: Plate
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: Plate
  nameWithType: FoodType.ContainerType.Plate
  fullName: TinyLife.Skills.FoodType.ContainerType.Plate
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Plate
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 507
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA plate, which additionally functions as a platter if the serving size is more than 1.\n"
  example: []
  syntax:
    content: public static readonly FoodType.ContainerType Plate
    return:
      type: TinyLife.Skills.FoodType.ContainerType
    content.vb: Public Shared ReadOnly Plate As FoodType.ContainerType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.ContainerType.Glass
  commentId: F:TinyLife.Skills.FoodType.ContainerType.Glass
  id: Glass
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: Glass
  nameWithType: FoodType.ContainerType.Glass
  fullName: TinyLife.Skills.FoodType.ContainerType.Glass
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Glass
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 514
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA glass, for protein shakes and water.\n"
  example: []
  syntax:
    content: public static readonly FoodType.ContainerType Glass
    return:
      type: TinyLife.Skills.FoodType.ContainerType
    content.vb: Public Shared ReadOnly Glass As FoodType.ContainerType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.ContainerType.Mug
  commentId: F:TinyLife.Skills.FoodType.ContainerType.Mug
  id: Mug
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: Mug
  nameWithType: FoodType.ContainerType.Mug
  fullName: TinyLife.Skills.FoodType.ContainerType.Mug
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Mug
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 521
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA mug, for drinks like coffee.\n"
  example: []
  syntax:
    content: public static readonly FoodType.ContainerType Mug
    return:
      type: TinyLife.Skills.FoodType.ContainerType
    content.vb: Public Shared ReadOnly Mug As FoodType.ContainerType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.FoodType.ContainerType.Name
  commentId: F:TinyLife.Skills.FoodType.ContainerType.Name
  id: Name
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FoodType.ContainerType.Name
  fullName: TinyLife.Skills.FoodType.ContainerType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 529
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe name of this container type.\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.ContainerType.IsDrink
  commentId: F:TinyLife.Skills.FoodType.ContainerType.IsDrink
  id: IsDrink
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: IsDrink
  nameWithType: FoodType.ContainerType.IsDrink
  fullName: TinyLife.Skills.FoodType.ContainerType.IsDrink
  type: Field
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: IsDrink
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 533
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nWhether the container type contains a drink (and should play a drinking sound rather than an eating sound).\n"
  example: []
  syntax:
    content: public readonly bool IsDrink
    return:
      type: System.Boolean
    content.vb: Public ReadOnly IsDrink As Boolean
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.FoodType.ContainerType.#ctor(System.String,System.Boolean,System.Func{System.Int32,TinyLife.Objects.FurnitureType},System.Func{System.Boolean,TinyLife.Objects.FurnitureType},System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion})
  commentId: M:TinyLife.Skills.FoodType.ContainerType.#ctor(System.String,System.Boolean,System.Func{System.Int32,TinyLife.Objects.FurnitureType},System.Func{System.Boolean,TinyLife.Objects.FurnitureType},System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion})
  id: '#ctor(System.String,System.Boolean,System.Func{System.Int32,TinyLife.Objects.FurnitureType},System.Func{System.Boolean,TinyLife.Objects.FurnitureType},System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion})'
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: ContainerType(String, Boolean, Func<Int32, FurnitureType>, Func<Boolean, FurnitureType>, Func<FoodType, TextureRegion>)
  nameWithType: FoodType.ContainerType.ContainerType(String, Boolean, Func<Int32, FurnitureType>, Func<Boolean, FurnitureType>, Func<FoodType, TextureRegion>)
  fullName: TinyLife.Skills.FoodType.ContainerType.ContainerType(System.String, System.Boolean, System.Func<System.Int32, TinyLife.Objects.FurnitureType>, System.Func<System.Boolean, TinyLife.Objects.FurnitureType>, System.Func<TinyLife.Skills.FoodType, MLEM.Textures.TextureRegion>)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 547
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new container type with the given settings.\n"
  example: []
  syntax:
    content: public ContainerType(string name, bool isDrink, Func<int, FurnitureType> filled, Func<bool, FurnitureType> empty, Func<FoodType, TextureRegion> texture)
    parameters:
    - id: name
      type: System.String
      description: The name of this container type.
    - id: isDrink
      type: System.Boolean
      description: Whether the container type contains a drink (and should play a drinking sound rather than an eating sound).
    - id: filled
      type: System.Func{System.Int32,TinyLife.Objects.FurnitureType}
      description: A function that returns the <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> for this container type, based on the serving size.
    - id: empty
      type: System.Func{System.Boolean,TinyLife.Objects.FurnitureType}
      description: A function that returns the <xref href="TinyLife.Objects.FurnitureType" data-throw-if-not-resolved="false"></xref> that should be used when this container is empty, based on whether the original container held multiple servings or not.
    - id: texture
      type: System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion}
      description: A function that returns the texture to use for a <xref href="TinyLife.Skills.FoodType" data-throw-if-not-resolved="false"></xref> that is stored in this container.
    content.vb: Public Sub New(name As String, isDrink As Boolean, filled As Func(Of Integer, FurnitureType), empty As Func(Of Boolean, FurnitureType), texture As Func(Of FoodType, TextureRegion))
  overload: TinyLife.Skills.FoodType.ContainerType.#ctor*
  nameWithType.vb: FoodType.ContainerType.ContainerType(String, Boolean, Func(Of Int32, FurnitureType), Func(Of Boolean, FurnitureType), Func(Of FoodType, TextureRegion))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Skills.FoodType.ContainerType.ContainerType(System.String, System.Boolean, System.Func(Of System.Int32, TinyLife.Objects.FurnitureType), System.Func(Of System.Boolean, TinyLife.Objects.FurnitureType), System.Func(Of TinyLife.Skills.FoodType, MLEM.Textures.TextureRegion))
  name.vb: ContainerType(String, Boolean, Func(Of Int32, FurnitureType), Func(Of Boolean, FurnitureType), Func(Of FoodType, TextureRegion))
- uid: TinyLife.Skills.FoodType.ContainerType.GetFilled(System.Int32)
  commentId: M:TinyLife.Skills.FoodType.ContainerType.GetFilled(System.Int32)
  id: GetFilled(System.Int32)
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: GetFilled(Int32)
  nameWithType: FoodType.ContainerType.GetFilled(Int32)
  fullName: TinyLife.Skills.FoodType.ContainerType.GetFilled(System.Int32)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetFilled
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 560
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> for this container type, based on the serving size.\n"
  example: []
  syntax:
    content: public virtual FurnitureType GetFilled(int servingSize)
    parameters:
    - id: servingSize
      type: System.Int32
      description: The serving size to use.
    return:
      type: TinyLife.Objects.FurnitureType
      description: The furniture for this container type.
    content.vb: Public Overridable Function GetFilled(servingSize As Integer) As FurnitureType
  overload: TinyLife.Skills.FoodType.ContainerType.GetFilled*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Skills.FoodType.ContainerType.GetEmpty(System.Boolean)
  commentId: M:TinyLife.Skills.FoodType.ContainerType.GetEmpty(System.Boolean)
  id: GetEmpty(System.Boolean)
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: GetEmpty(Boolean)
  nameWithType: FoodType.ContainerType.GetEmpty(Boolean)
  fullName: TinyLife.Skills.FoodType.ContainerType.GetEmpty(System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetEmpty
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 569
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the <xref href=\"TinyLife.Objects.FurnitureType\" data-throw-if-not-resolved=\"false\"></xref> that should be used when this container is empty.\n"
  example: []
  syntax:
    content: public virtual FurnitureType GetEmpty(bool heldMultiple)
    parameters:
    - id: heldMultiple
      type: System.Boolean
      description: Whether the original container held multiple servings, or just one.
    return:
      type: TinyLife.Objects.FurnitureType
      description: The furniture to use when this container is empty.
    content.vb: Public Overridable Function GetEmpty(heldMultiple As Boolean) As FurnitureType
  overload: TinyLife.Skills.FoodType.ContainerType.GetEmpty*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  commentId: M:TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  id: GetDefaultTexture(TinyLife.Skills.FoodType)
  parent: TinyLife.Skills.FoodType.ContainerType
  langs:
  - csharp
  - vb
  name: GetDefaultTexture(FoodType)
  nameWithType: FoodType.ContainerType.GetDefaultTexture(FoodType)
  fullName: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture(TinyLife.Skills.FoodType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/FoodType.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetDefaultTexture
    path: ../TinyLife/Skills/FoodType.cs
    startLine: 578
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the texture to use for the given <xref href=\"TinyLife.Skills.FoodType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual TextureRegion GetDefaultTexture(FoodType type)
    parameters:
    - id: type
      type: TinyLife.Skills.FoodType
      description: The food type whose texture to return.
    return:
      type: MLEM.Textures.TextureRegion
      description: The texture that the given food type should be drawn with.
    content.vb: Public Overridable Function GetDefaultTexture(type As FoodType) As TextureRegion
  overload: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Skills.FoodType
  commentId: T:TinyLife.Skills.FoodType
  parent: TinyLife.Skills
  name: FoodType
  nameWithType: FoodType
  fullName: TinyLife.Skills.FoodType
- uid: TinyLife.Objects.Furniture
  commentId: T:TinyLife.Objects.Furniture
  parent: TinyLife.Objects
  name: Furniture
  nameWithType: Furniture
  fullName: TinyLife.Objects.Furniture
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.ContainerType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<FoodType.ContainerType>()
  nameWithType: Extensions.JsonCopy<FoodType.ContainerType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType.ContainerType>()
  nameWithType.vb: Extensions.JsonCopy(Of FoodType.ContainerType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType.ContainerType)()
  name.vb: JsonCopy(Of FoodType.ContainerType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<FoodType.ContainerType>
    nameWithType: Extensions.JsonCopy<FoodType.ContainerType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.FoodType.ContainerType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of FoodType.ContainerType)
    nameWithType: Extensions.JsonCopy(Of FoodType.ContainerType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.FoodType.ContainerType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.FoodType.ContainerType
  commentId: T:TinyLife.Skills.FoodType.ContainerType
  parent: TinyLife.Skills
  name: FoodType.ContainerType
  nameWithType: FoodType.ContainerType
  fullName: TinyLife.Skills.FoodType.ContainerType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Objects.FurnitureType
  commentId: T:TinyLife.Objects.FurnitureType
  parent: TinyLife.Objects
  name: FurnitureType
  nameWithType: FurnitureType
  fullName: TinyLife.Objects.FurnitureType
- uid: TinyLife.Skills.FoodType.ContainerType.#ctor*
  commentId: Overload:TinyLife.Skills.FoodType.ContainerType.#ctor
  name: ContainerType
  nameWithType: FoodType.ContainerType.ContainerType
  fullName: TinyLife.Skills.FoodType.ContainerType.ContainerType
- uid: System.Func{System.Int32,TinyLife.Objects.FurnitureType}
  commentId: T:System.Func{System.Int32,TinyLife.Objects.FurnitureType}
  parent: System
  definition: System.Func`2
  name: Func<Int32, FurnitureType>
  nameWithType: Func<Int32, FurnitureType>
  fullName: System.Func<System.Int32, TinyLife.Objects.FurnitureType>
  nameWithType.vb: Func(Of Int32, FurnitureType)
  fullName.vb: System.Func(Of System.Int32, TinyLife.Objects.FurnitureType)
  name.vb: Func(Of Int32, FurnitureType)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Boolean,TinyLife.Objects.FurnitureType}
  commentId: T:System.Func{System.Boolean,TinyLife.Objects.FurnitureType}
  parent: System
  definition: System.Func`2
  name: Func<Boolean, FurnitureType>
  nameWithType: Func<Boolean, FurnitureType>
  fullName: System.Func<System.Boolean, TinyLife.Objects.FurnitureType>
  nameWithType.vb: Func(Of Boolean, FurnitureType)
  fullName.vb: System.Func(Of System.Boolean, TinyLife.Objects.FurnitureType)
  name.vb: Func(Of Boolean, FurnitureType)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Objects.FurnitureType
    name: FurnitureType
    nameWithType: FurnitureType
    fullName: TinyLife.Objects.FurnitureType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion}
  commentId: T:System.Func{TinyLife.Skills.FoodType,MLEM.Textures.TextureRegion}
  parent: System
  definition: System.Func`2
  name: Func<FoodType, TextureRegion>
  nameWithType: Func<FoodType, TextureRegion>
  fullName: System.Func<TinyLife.Skills.FoodType, MLEM.Textures.TextureRegion>
  nameWithType.vb: Func(Of FoodType, TextureRegion)
  fullName.vb: System.Func(Of TinyLife.Skills.FoodType, MLEM.Textures.TextureRegion)
  name.vb: Func(Of FoodType, TextureRegion)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Skills.FoodType
    name: FoodType
    nameWithType: FoodType
    fullName: TinyLife.Skills.FoodType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MLEM.Textures.TextureRegion
    name: TextureRegion
    nameWithType: TextureRegion
    fullName: MLEM.Textures.TextureRegion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.FoodType.ContainerType.GetFilled*
  commentId: Overload:TinyLife.Skills.FoodType.ContainerType.GetFilled
  name: GetFilled
  nameWithType: FoodType.ContainerType.GetFilled
  fullName: TinyLife.Skills.FoodType.ContainerType.GetFilled
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Skills.FoodType.ContainerType.GetEmpty*
  commentId: Overload:TinyLife.Skills.FoodType.ContainerType.GetEmpty
  name: GetEmpty
  nameWithType: FoodType.ContainerType.GetEmpty
  fullName: TinyLife.Skills.FoodType.ContainerType.GetEmpty
- uid: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture*
  commentId: Overload:TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture
  name: GetDefaultTexture
  nameWithType: FoodType.ContainerType.GetDefaultTexture
  fullName: TinyLife.Skills.FoodType.ContainerType.GetDefaultTexture
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures

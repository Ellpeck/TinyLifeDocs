### YamlMime:ManagedReference
items:
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  id: SkillType
  parent: TinyLife.Skills
  children:
  - TinyLife.Skills.SkillType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Int32,TinyLife.Skills.SkillCategory)
  - TinyLife.Skills.SkillType.AdditionalEarnedActions
  - TinyLife.Skills.SkillType.Baking
  - TinyLife.Skills.SkillType.Categories
  - TinyLife.Skills.SkillType.Charisma
  - TinyLife.Skills.SkillType.ChildhoodMaxLevel
  - TinyLife.Skills.SkillType.Cleaning
  - TinyLife.Skills.SkillType.Cooking
  - TinyLife.Skills.SkillType.Fitness
  - TinyLife.Skills.SkillType.Gaming
  - TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  - TinyLife.Skills.SkillType.GetRandomQuality(TinyLife.Objects.Person,System.Random,System.Boolean,TinyLife.Emotions.IEmotionSource,System.Boolean)
  - TinyLife.Skills.SkillType.Humor
  - TinyLife.Skills.SkillType.MaxLevel
  - TinyLife.Skills.SkillType.Name
  - TinyLife.Skills.SkillType.Painting
  - TinyLife.Skills.SkillType.Programming
  - TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  - TinyLife.Skills.SkillType.Repair
  - TinyLife.Skills.SkillType.Texture
  - TinyLife.Skills.SkillType.Types
  - TinyLife.Skills.SkillType.Woodworking
  - TinyLife.Skills.SkillType.Writing
  langs:
  - csharp
  - vb
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
  type: Class
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: SkillType
    path: ../TinyLife/Skills/Skill.cs
    startLine: 112
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA skill is an ability that a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> can have which influences their behavior in some way.\nThe SkillType class contains underlying data for a <xref href=\"TinyLife.Skills.Skill\" data-throw-if-not-resolved=\"false\"></xref> instance, like its name and maximum level.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StaticJsonConverter<SkillType>), new object[]{typeof(SkillType), "PrivateTypes"})]

      public class SkillType
    content.vb: >-
      <JsonConverter(GetType(StaticJsonConverter(Of SkillType)), New Object() {GetType(SkillType), "PrivateTypes"})>

      Public Class SkillType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Skills.SkillType.TinyLife.Utilities.Extensions.JsonCopy``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Skills.SkillType.Types
  commentId: F:TinyLife.Skills.SkillType.Types
  id: Types
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: SkillType.Types
  fullName: TinyLife.Skills.SkillType.Types
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Types
    path: ../TinyLife/Skills/Skill.cs
    startLine: 120
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA registry of all skill types that exist in the game and mods.\nUse <xref href=\"TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)\" data-throw-if-not-resolved=\"false\"></xref> to register custom skill types.\n"
  example: []
  syntax:
    content: public static readonly ReadOnlyDictionary<string, SkillType> Types
    return:
      type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.SkillType}
    content.vb: Public Shared ReadOnly Types As ReadOnlyDictionary(Of String, SkillType)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Cooking
  commentId: F:TinyLife.Skills.SkillType.Cooking
  id: Cooking
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Cooking
  nameWithType: SkillType.Cooking
  fullName: TinyLife.Skills.SkillType.Cooking
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Cooking
    path: ../TinyLife/Skills/Skill.cs
    startLine: 123
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Cooking
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Cooking As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Painting
  commentId: F:TinyLife.Skills.SkillType.Painting
  id: Painting
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Painting
  nameWithType: SkillType.Painting
  fullName: TinyLife.Skills.SkillType.Painting
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Painting
    path: ../TinyLife/Skills/Skill.cs
    startLine: 128
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Painting
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Painting As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Charisma
  commentId: F:TinyLife.Skills.SkillType.Charisma
  id: Charisma
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Charisma
  nameWithType: SkillType.Charisma
  fullName: TinyLife.Skills.SkillType.Charisma
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Charisma
    path: ../TinyLife/Skills/Skill.cs
    startLine: 129
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Charisma
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Charisma As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Humor
  commentId: F:TinyLife.Skills.SkillType.Humor
  id: Humor
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Humor
  nameWithType: SkillType.Humor
  fullName: TinyLife.Skills.SkillType.Humor
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Humor
    path: ../TinyLife/Skills/Skill.cs
    startLine: 130
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Humor
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Humor As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Programming
  commentId: F:TinyLife.Skills.SkillType.Programming
  id: Programming
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Programming
  nameWithType: SkillType.Programming
  fullName: TinyLife.Skills.SkillType.Programming
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Programming
    path: ../TinyLife/Skills/Skill.cs
    startLine: 131
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Programming
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Programming As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Repair
  commentId: F:TinyLife.Skills.SkillType.Repair
  id: Repair
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Repair
  nameWithType: SkillType.Repair
  fullName: TinyLife.Skills.SkillType.Repair
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Repair
    path: ../TinyLife/Skills/Skill.cs
    startLine: 132
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Repair
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Repair As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Writing
  commentId: F:TinyLife.Skills.SkillType.Writing
  id: Writing
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Writing
  nameWithType: SkillType.Writing
  fullName: TinyLife.Skills.SkillType.Writing
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Writing
    path: ../TinyLife/Skills/Skill.cs
    startLine: 133
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Writing
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Writing As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Gaming
  commentId: F:TinyLife.Skills.SkillType.Gaming
  id: Gaming
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Gaming
  nameWithType: SkillType.Gaming
  fullName: TinyLife.Skills.SkillType.Gaming
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Gaming
    path: ../TinyLife/Skills/Skill.cs
    startLine: 134
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Gaming
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Gaming As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Fitness
  commentId: F:TinyLife.Skills.SkillType.Fitness
  id: Fitness
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Fitness
  nameWithType: SkillType.Fitness
  fullName: TinyLife.Skills.SkillType.Fitness
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Fitness
    path: ../TinyLife/Skills/Skill.cs
    startLine: 135
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Fitness
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Fitness As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Cleaning
  commentId: F:TinyLife.Skills.SkillType.Cleaning
  id: Cleaning
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Cleaning
  nameWithType: SkillType.Cleaning
  fullName: TinyLife.Skills.SkillType.Cleaning
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Cleaning
    path: ../TinyLife/Skills/Skill.cs
    startLine: 136
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Cleaning
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Cleaning As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Woodworking
  commentId: F:TinyLife.Skills.SkillType.Woodworking
  id: Woodworking
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Woodworking
  nameWithType: SkillType.Woodworking
  fullName: TinyLife.Skills.SkillType.Woodworking
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Woodworking
    path: ../TinyLife/Skills/Skill.cs
    startLine: 137
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Woodworking
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Woodworking As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Baking
  commentId: F:TinyLife.Skills.SkillType.Baking
  id: Baking
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Baking
  nameWithType: SkillType.Baking
  fullName: TinyLife.Skills.SkillType.Baking
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Baking
    path: ../TinyLife/Skills/Skill.cs
    startLine: 141
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  syntax:
    content: public static readonly SkillType Baking
    return:
      type: TinyLife.Skills.SkillType
    content.vb: Public Shared ReadOnly Baking As SkillType
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Name
  commentId: F:TinyLife.Skills.SkillType.Name
  id: Name
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SkillType.Name
  fullName: TinyLife.Skills.SkillType.Name
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Name
    path: ../TinyLife/Skills/Skill.cs
    startLine: 151
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe name of this skill type\n"
  example: []
  syntax:
    content: public readonly string Name
    return:
      type: System.String
    content.vb: Public ReadOnly Name As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Texture
  commentId: F:TinyLife.Skills.SkillType.Texture
  id: Texture
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Texture
  nameWithType: SkillType.Texture
  fullName: TinyLife.Skills.SkillType.Texture
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Texture
    path: ../TinyLife/Skills/Skill.cs
    startLine: 155
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe texture region of this skill type&apos;s icon\n"
  example: []
  syntax:
    content: public readonly TextureRegion Texture
    return:
      type: MLEM.Textures.TextureRegion
    content.vb: Public ReadOnly Texture As TextureRegion
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.SkillType.MaxLevel
  commentId: F:TinyLife.Skills.SkillType.MaxLevel
  id: MaxLevel
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: MaxLevel
  nameWithType: SkillType.MaxLevel
  fullName: TinyLife.Skills.SkillType.MaxLevel
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: MaxLevel
    path: ../TinyLife/Skills/Skill.cs
    startLine: 160
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe maximum level that this skill can reach.\nMost skills should default to 5 or 10 for consistency.\n"
  example: []
  syntax:
    content: public readonly int MaxLevel
    return:
      type: System.Int32
    content.vb: Public ReadOnly MaxLevel As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.SkillType.Categories
  commentId: F:TinyLife.Skills.SkillType.Categories
  id: Categories
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Categories
  nameWithType: SkillType.Categories
  fullName: TinyLife.Skills.SkillType.Categories
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Categories
    path: ../TinyLife/Skills/Skill.cs
    startLine: 165
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe <xref href=\"TinyLife.Skills.SkillCategory\" data-throw-if-not-resolved=\"false\"></xref> combined flag that this skill type has.\nThe skill categories it has are used to determine skill gain from things like the <xref href=\"TinyLife.PersonalityType.Creative\" data-throw-if-not-resolved=\"false\"></xref> personality type.\n"
  example: []
  syntax:
    content: public readonly SkillCategory Categories
    return:
      type: TinyLife.Skills.SkillCategory
    content.vb: Public ReadOnly Categories As SkillCategory
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Skills.SkillType.ChildhoodMaxLevel
  commentId: P:TinyLife.Skills.SkillType.ChildhoodMaxLevel
  id: ChildhoodMaxLevel
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: ChildhoodMaxLevel
  nameWithType: SkillType.ChildhoodMaxLevel
  fullName: TinyLife.Skills.SkillType.ChildhoodMaxLevel
  type: Property
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: ChildhoodMaxLevel
    path: ../TinyLife/Skills/Skill.cs
    startLine: 170
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nThe maximum level that a <xref href=\"TinyLife.Objects.AgeGroup.Child\" data-throw-if-not-resolved=\"false\"></xref> can have for this skill.\nThis value defaults to the <xref href=\"TinyLife.Skills.SkillType.MaxLevel\" data-throw-if-not-resolved=\"false\"></xref> divided by 3, and floored.\n"
  example: []
  syntax:
    content: public int ChildhoodMaxLevel { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ChildhoodMaxLevel As Integer
  overload: TinyLife.Skills.SkillType.ChildhoodMaxLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.SkillType.AdditionalEarnedActions
  commentId: F:TinyLife.Skills.SkillType.AdditionalEarnedActions
  id: AdditionalEarnedActions
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: AdditionalEarnedActions
  nameWithType: SkillType.AdditionalEarnedActions
  fullName: TinyLife.Skills.SkillType.AdditionalEarnedActions
  type: Field
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AdditionalEarnedActions
    path: ../TinyLife/Skills/Skill.cs
    startLine: 175
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nA function that can optionally be used to return a set of action information that is displayed when this skill&apos;s level is raised to the given levels.\nThis function is used by skills like <xref href=\"TinyLife.Skills.SkillType.Cooking\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"TinyLife.Skills.SkillType.Woodworking\" data-throw-if-not-resolved=\"false\"></xref> to display what additional items can now be cooked or crafted.\n"
  example: []
  syntax:
    content: public Func<Person, Skill, IEnumerable<(int Level, string DisplayName)>> AdditionalEarnedActions
    return:
      type: System.Func{TinyLife.Objects.Person,TinyLife.Skills.Skill,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.String}}}
    content.vb: Public AdditionalEarnedActions As Func(Of Person, Skill, IEnumerable(Of(Level As Integer, DisplayName As String)(Of Integer , String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.SkillType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Int32,TinyLife.Skills.SkillCategory)
  commentId: M:TinyLife.Skills.SkillType.#ctor(System.String,MLEM.Textures.TextureRegion,System.Int32,TinyLife.Skills.SkillCategory)
  id: '#ctor(System.String,MLEM.Textures.TextureRegion,System.Int32,TinyLife.Skills.SkillCategory)'
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: SkillType(String, TextureRegion, Int32, SkillCategory)
  nameWithType: SkillType.SkillType(String, TextureRegion, Int32, SkillCategory)
  fullName: TinyLife.Skills.SkillType.SkillType(System.String, MLEM.Textures.TextureRegion, System.Int32, TinyLife.Skills.SkillCategory)
  type: Constructor
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Skills/Skill.cs
    startLine: 184
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nCreates a new skill type with the given settings\n"
  example: []
  syntax:
    content: public SkillType(string name, TextureRegion texture, int maxLevel, SkillCategory categories)
    parameters:
    - id: name
      type: System.String
      description: The skill&apos;s name
    - id: texture
      type: MLEM.Textures.TextureRegion
      description: The skill&apos;s icon
    - id: maxLevel
      type: System.Int32
      description: The skill&apos;s maximum level. Should be 5 or 10 for consistency.
    - id: categories
      type: TinyLife.Skills.SkillCategory
      description: A combined flag of categories that this skill has
    content.vb: Public Sub New(name As String, texture As TextureRegion, maxLevel As Integer, categories As SkillCategory)
  overload: TinyLife.Skills.SkillType.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.SkillType.GetRandomQuality(TinyLife.Objects.Person,System.Random,System.Boolean,TinyLife.Emotions.IEmotionSource,System.Boolean)
  commentId: M:TinyLife.Skills.SkillType.GetRandomQuality(TinyLife.Objects.Person,System.Random,System.Boolean,TinyLife.Emotions.IEmotionSource,System.Boolean)
  id: GetRandomQuality(TinyLife.Objects.Person,System.Random,System.Boolean,TinyLife.Emotions.IEmotionSource,System.Boolean)
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: GetRandomQuality(Person, Random, Boolean, IEmotionSource, Boolean)
  nameWithType: SkillType.GetRandomQuality(Person, Random, Boolean, IEmotionSource, Boolean)
  fullName: TinyLife.Skills.SkillType.GetRandomQuality(TinyLife.Objects.Person, System.Random, System.Boolean, TinyLife.Emotions.IEmotionSource, System.Boolean)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetRandomQuality
    path: ../TinyLife/Skills/Skill.cs
    startLine: 202
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns a semi-randomly generated <xref href=\"TinyLife.Skills.Quality\" data-throw-if-not-resolved=\"false\"></xref> for the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref> based on their level of this skill.\nThe higher the skill level is, the more likely it is for higher qualities to be returned.\n"
  example: []
  syntax:
    content: public Quality GetRandomQuality(Person person, Random random, bool modifyEmotions = true, IEmotionSource source = null, bool alwaysAllowAverage = false)
    parameters:
    - id: person
      type: TinyLife.Objects.Person
      description: The person that has this skill
    - id: random
      type: System.Random
      description: The random that should be used for calculation
    - id: modifyEmotions
      type: System.Boolean
      description: Whether the given person should receive emotions based on the quality, defaults to true
    - id: source
      type: TinyLife.Emotions.IEmotionSource
      description: The emotion source that modified emotions come from
    - id: alwaysAllowAverage
      type: System.Boolean
      description: Whether or not <xref href="TinyLife.Skills.Quality.Average" data-throw-if-not-resolved="false"></xref> should always be part of the random choice, defaults to false
    return:
      type: TinyLife.Skills.Quality
      description: A random quality based on the person&apos;s skill level
    content.vb: Public Function GetRandomQuality(person As Person, random As Random, modifyEmotions As Boolean = True, source As IEmotionSource = Nothing, alwaysAllowAverage As Boolean = False) As Quality
  overload: TinyLife.Skills.SkillType.GetRandomQuality*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  commentId: M:TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  id: GetMaxLevel(TinyLife.Objects.AgeGroup)
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: GetMaxLevel(AgeGroup)
  nameWithType: SkillType.GetMaxLevel(AgeGroup)
  fullName: TinyLife.Skills.SkillType.GetMaxLevel(TinyLife.Objects.AgeGroup)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: GetMaxLevel
    path: ../TinyLife/Skills/Skill.cs
    startLine: 235
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nReturns the maximum level for the given <xref href=\"TinyLife.Objects.AgeGroup\" data-throw-if-not-resolved=\"false\"></xref>, which is either <xref href=\"TinyLife.Skills.SkillType.MaxLevel\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Skills.SkillType.ChildhoodMaxLevel\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int GetMaxLevel(AgeGroup age)
    parameters:
    - id: age
      type: TinyLife.Objects.AgeGroup
      description: The age group
    return:
      type: System.Int32
      description: The maximum level
    content.vb: Public Function GetMaxLevel(age As AgeGroup) As Integer
  overload: TinyLife.Skills.SkillType.GetMaxLevel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  id: Register(TinyLife.Skills.SkillType)
  parent: TinyLife.Skills.SkillType
  langs:
  - csharp
  - vb
  name: Register(SkillType)
  nameWithType: SkillType.Register(SkillType)
  fullName: TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  type: Method
  source:
    remote:
      path: TinyLife/Skills/Skill.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Register
    path: ../TinyLife/Skills/Skill.cs
    startLine: 244
  assemblies:
  - Tiny Life
  namespace: TinyLife.Skills
  summary: "\nRegisters a new <xref href=\"TinyLife.Skills.SkillType\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"TinyLife.Skills.SkillType.Types\" data-throw-if-not-resolved=\"false\"></xref> registry\n"
  example: []
  syntax:
    content: public static SkillType Register(SkillType type)
    parameters:
    - id: type
      type: TinyLife.Skills.SkillType
      description: The type to register
    return:
      type: TinyLife.Skills.SkillType
      description: The registered type, for chaining
    content.vb: Public Shared Function Register(type As SkillType) As SkillType
  overload: TinyLife.Skills.SkillType.Register*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Skills.Skill
  commentId: T:TinyLife.Skills.Skill
  name: Skill
  nameWithType: Skill
  fullName: TinyLife.Skills.Skill
- uid: TinyLife.Skills
  commentId: N:TinyLife.Skills
  name: TinyLife.Skills
  nameWithType: TinyLife.Skills
  fullName: TinyLife.Skills
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.SkillType.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<SkillType>()
  nameWithType: Extensions.JsonCopy<SkillType>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.SkillType>()
  nameWithType.vb: Extensions.JsonCopy(Of SkillType)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.SkillType)()
  name.vb: JsonCopy(Of SkillType)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<SkillType>
    nameWithType: Extensions.JsonCopy<SkillType>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Skills.SkillType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of SkillType)
    nameWithType: Extensions.JsonCopy(Of SkillType)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Skills.SkillType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  commentId: M:TinyLife.Skills.SkillType.Register(TinyLife.Skills.SkillType)
  isExternal: true
- uid: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.SkillType}
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,TinyLife.Skills.SkillType}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
  name: ReadOnlyDictionary<String, SkillType>
  nameWithType: ReadOnlyDictionary<String, SkillType>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<System.String, TinyLife.Skills.SkillType>
  nameWithType.vb: ReadOnlyDictionary(Of String, SkillType)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of System.String, TinyLife.Skills.SkillType)
  name.vb: ReadOnlyDictionary(Of String, SkillType)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.SkillType
    name: SkillType
    nameWithType: SkillType
    fullName: TinyLife.Skills.SkillType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
  commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  isExternal: true
  name: ReadOnlyDictionary<TKey, TValue>
  nameWithType: ReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: ReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyDictionary(Of TKey, TValue)
  name.vb: ReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyDictionary`2
    name: ReadOnlyDictionary
    nameWithType: ReadOnlyDictionary
    fullName: System.Collections.ObjectModel.ReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: TinyLife.Skills.SkillType
  commentId: T:TinyLife.Skills.SkillType
  parent: TinyLife.Skills
  name: SkillType
  nameWithType: SkillType
  fullName: TinyLife.Skills.SkillType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Textures.TextureRegion
  commentId: T:MLEM.Textures.TextureRegion
  parent: MLEM.Textures
  isExternal: true
  name: TextureRegion
  nameWithType: TextureRegion
  fullName: MLEM.Textures.TextureRegion
- uid: MLEM.Textures
  commentId: N:MLEM.Textures
  isExternal: true
  name: MLEM.Textures
  nameWithType: MLEM.Textures
  fullName: MLEM.Textures
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TinyLife.Skills.SkillCategory
  commentId: T:TinyLife.Skills.SkillCategory
  parent: TinyLife.Skills
  name: SkillCategory
  nameWithType: SkillCategory
  fullName: TinyLife.Skills.SkillCategory
- uid: TinyLife.PersonalityType.Creative
  commentId: F:TinyLife.PersonalityType.Creative
  isExternal: true
- uid: TinyLife.Objects.AgeGroup.Child
  commentId: F:TinyLife.Objects.AgeGroup.Child
  isExternal: true
- uid: TinyLife.Skills.SkillType.MaxLevel
  commentId: F:TinyLife.Skills.SkillType.MaxLevel
  isExternal: true
- uid: TinyLife.Skills.SkillType.ChildhoodMaxLevel*
  commentId: Overload:TinyLife.Skills.SkillType.ChildhoodMaxLevel
  name: ChildhoodMaxLevel
  nameWithType: SkillType.ChildhoodMaxLevel
  fullName: TinyLife.Skills.SkillType.ChildhoodMaxLevel
- uid: TinyLife.Skills.SkillType.Cooking
  commentId: F:TinyLife.Skills.SkillType.Cooking
  isExternal: true
- uid: TinyLife.Skills.SkillType.Woodworking
  commentId: F:TinyLife.Skills.SkillType.Woodworking
  isExternal: true
- uid: System.Func{TinyLife.Objects.Person,TinyLife.Skills.Skill,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.String}}}
  commentId: T:System.Func{TinyLife.Objects.Person,TinyLife.Skills.Skill,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.String}}}
  parent: System
  definition: System.Func`3
  name: Func<Person, Skill, IEnumerable<(T1, T2)<Int32, String>>>
  nameWithType: Func<Person, Skill, IEnumerable<(T1, T2)<Int32, String>>>
  fullName: System.Func<TinyLife.Objects.Person, TinyLife.Skills.Skill, System.Collections.Generic.IEnumerable<System.ValueTuple<System.Int32, System.String>>>
  nameWithType.vb: Func(Of Person, Skill, IEnumerable(Of (T1, T2)(Of Int32, String)))
  fullName.vb: System.Func(Of TinyLife.Objects.Person, TinyLife.Skills.Skill, System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of System.Int32, System.String)))
  name.vb: Func(Of Person, Skill, IEnumerable(Of (T1, T2)(Of Int32, String)))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.Skill
    name: Skill
    nameWithType: Skill
    fullName: TinyLife.Skills.Skill
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TinyLife.Objects.Person
    name: Person
    nameWithType: Person
    fullName: TinyLife.Objects.Person
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: TinyLife.Skills.Skill
    name: Skill
    nameWithType: Skill
    fullName: TinyLife.Skills.Skill
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Skills.SkillType.#ctor*
  commentId: Overload:TinyLife.Skills.SkillType.#ctor
  name: SkillType
  nameWithType: SkillType.SkillType
  fullName: TinyLife.Skills.SkillType.SkillType
- uid: TinyLife.Skills.Quality
  commentId: T:TinyLife.Skills.Quality
  parent: TinyLife.Skills
  name: Quality
  nameWithType: Quality
  fullName: TinyLife.Skills.Quality
- uid: TinyLife.Skills.Quality.Average
  commentId: F:TinyLife.Skills.Quality.Average
  isExternal: true
- uid: TinyLife.Skills.SkillType.GetRandomQuality*
  commentId: Overload:TinyLife.Skills.SkillType.GetRandomQuality
  name: GetRandomQuality
  nameWithType: SkillType.GetRandomQuality
  fullName: TinyLife.Skills.SkillType.GetRandomQuality
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Emotions.IEmotionSource
  commentId: T:TinyLife.Emotions.IEmotionSource
  parent: TinyLife.Emotions
  name: IEmotionSource
  nameWithType: IEmotionSource
  fullName: TinyLife.Emotions.IEmotionSource
- uid: TinyLife.Emotions
  commentId: N:TinyLife.Emotions
  name: TinyLife.Emotions
  nameWithType: TinyLife.Emotions
  fullName: TinyLife.Emotions
- uid: TinyLife.Objects.AgeGroup
  commentId: T:TinyLife.Objects.AgeGroup
  parent: TinyLife.Objects
  name: AgeGroup
  nameWithType: AgeGroup
  fullName: TinyLife.Objects.AgeGroup
- uid: TinyLife.Skills.SkillType.ChildhoodMaxLevel
  commentId: P:TinyLife.Skills.SkillType.ChildhoodMaxLevel
  isExternal: true
- uid: TinyLife.Skills.SkillType.GetMaxLevel*
  commentId: Overload:TinyLife.Skills.SkillType.GetMaxLevel
  name: GetMaxLevel
  nameWithType: SkillType.GetMaxLevel
  fullName: TinyLife.Skills.SkillType.GetMaxLevel
- uid: TinyLife.Skills.SkillType.Types
  commentId: F:TinyLife.Skills.SkillType.Types
  isExternal: true
- uid: TinyLife.Skills.SkillType.Register*
  commentId: Overload:TinyLife.Skills.SkillType.Register
  name: Register
  nameWithType: SkillType.Register
  fullName: TinyLife.Skills.SkillType.Register

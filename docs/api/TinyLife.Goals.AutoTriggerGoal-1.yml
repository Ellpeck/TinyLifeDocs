### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.AutoTriggerGoal`1
  commentId: T:TinyLife.Goals.AutoTriggerGoal`1
  id: AutoTriggerGoal`1
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.AutoTriggerGoal`1.#ctor(TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo)
  - TinyLife.Goals.AutoTriggerGoal`1.AutoInfo
  - TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  - TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalSet,System.Object,`0)
  - TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Objects.Person,System.Object,`0)
  - TinyLife.Goals.AutoTriggerGoal`1.Validate(TinyLife.Goals.GoalSet)
  langs:
  - csharp
  - vb
  name: AutoTriggerGoal<T>
  nameWithType: AutoTriggerGoal<T>
  fullName: TinyLife.Goals.AutoTriggerGoal<T>
  type: Class
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AutoTriggerGoal
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 9
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nAn auto-triggered goal is intended to be used with <xref href=\"TinyLife.Goals.AutoGoalInfo\" data-throw-if-not-resolved=\"false\"></xref>. This is the base class for all auto-triggered goals.\nAuto-triggered goals do not need to be called, triggered or referenced manually, since they get triggered automatically based on a <xref href=\"TinyLife.Goals.GoalTrigger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public abstract class AutoTriggerGoal<T> : Goal, IGenericDataHolder'
    typeParameters:
    - id: T
      description: The type of value that the auto-triggered goal consumes
    content.vb: >-
      Public MustInherit Class AutoTriggerGoal(Of T)
          Inherits Goal
          Implements IGenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  - TinyLife.Goals.Goal
  derivedClasses:
  - TinyLife.Goals.AmountGoal
  - TinyLife.Goals.ConditionedGoal
  - TinyLife.Goals.DistinctGoal
  - TinyLife.Goals.TimedGoal
  implements:
  - MLEM.Misc.IGenericDataHolder
  inheritedMembers:
  - TinyLife.Goals.Goal.Name
  - TinyLife.Goals.Goal.Set
  - TinyLife.Goals.Goal.Info
  - TinyLife.Goals.Goal.GetProgress
  - TinyLife.Goals.Goal.Reset
  - TinyLife.Goals.Goal.GetDisplayedProgress
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  - MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.AutoTriggerGoal`1.TinyLife.Utilities.Extensions.JsonCopy``1
  nameWithType.vb: AutoTriggerGoal(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T)
  name.vb: AutoTriggerGoal(Of T)
- uid: TinyLife.Goals.AutoTriggerGoal`1.AutoInfo
  commentId: F:TinyLife.Goals.AutoTriggerGoal`1.AutoInfo
  id: AutoInfo
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: AutoInfo
  nameWithType: AutoTriggerGoal<T>.AutoInfo
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.AutoInfo
  type: Field
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: AutoInfo
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 14
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe underlying <xref href=\"TinyLife.Goals.GoalInfo\" data-throw-if-not-resolved=\"false\"></xref>, but cast to an <xref href=\"TinyLife.Goals.AutoGoalInfo\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: protected AutoGoalInfo AutoInfo
    return:
      type: TinyLife.Goals.AutoGoalInfo
    content.vb: Protected AutoInfo As AutoGoalInfo
  nameWithType.vb: AutoTriggerGoal(Of T).AutoInfo
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).AutoInfo
- uid: TinyLife.Goals.AutoTriggerGoal`1.#ctor(TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.#ctor(TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo)
  id: '#ctor(TinyLife.Goals.GoalSet,TinyLife.Goals.AutoGoalInfo)'
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: AutoTriggerGoal(GoalSet, AutoGoalInfo)
  nameWithType: AutoTriggerGoal<T>.AutoTriggerGoal(GoalSet, AutoGoalInfo)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.AutoTriggerGoal(TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 17
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  example: []
  syntax:
    content: public AutoTriggerGoal(GoalSet set, AutoGoalInfo info)
    parameters:
    - id: set
      type: TinyLife.Goals.GoalSet
    - id: info
      type: TinyLife.Goals.AutoGoalInfo
    content.vb: Public Sub New(set As GoalSet, info As AutoGoalInfo)
  overload: TinyLife.Goals.AutoTriggerGoal`1.#ctor*
  nameWithType.vb: AutoTriggerGoal(Of T).AutoTriggerGoal(GoalSet, AutoGoalInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).AutoTriggerGoal(TinyLife.Goals.GoalSet, TinyLife.Goals.AutoGoalInfo)
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  id: Trigger(`0)
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: Trigger(T)
  nameWithType: AutoTriggerGoal<T>.Trigger(T)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger(T)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Trigger
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 26
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCauses this auto-triggered goal to be triggered.\nThis method is only called if the <xref href=\"TinyLife.Goals.AutoGoalInfo.Condition\" data-throw-if-not-resolved=\"false\"></xref> is met.\n"
  example: []
  syntax:
    content: protected abstract void Trigger(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to trigger
    content.vb: Protected MustOverride Sub Trigger(value As T)
  overload: TinyLife.Goals.AutoTriggerGoal`1.Trigger*
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger(T)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger(T)
- uid: TinyLife.Goals.AutoTriggerGoal`1.Validate(TinyLife.Goals.GoalSet)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Validate(TinyLife.Goals.GoalSet)
  id: Validate(TinyLife.Goals.GoalSet)
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: Validate(GoalSet)
  nameWithType: AutoTriggerGoal<T>.Validate(GoalSet)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Validate(TinyLife.Goals.GoalSet)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 29
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nValidates this goal when loading the underlying <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> from disk\n"
  example: []
  syntax:
    content: public override bool Validate(GoalSet set)
    parameters:
    - id: set
      type: TinyLife.Goals.GoalSet
      description: The underlying goal set
    return:
      type: System.Boolean
      description: Whether this goal is considered to be valid
    content.vb: Public Overrides Function Validate(set As GoalSet) As Boolean
  overridden: TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
  overload: TinyLife.Goals.AutoTriggerGoal`1.Validate*
  nameWithType.vb: AutoTriggerGoal(Of T).Validate(GoalSet)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Validate(TinyLife.Goals.GoalSet)
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalSet,System.Object,`0)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalSet,System.Object,`0)
  id: Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Goals.GoalSet,System.Object,`0)
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: Trigger(GoalTrigger, GoalSet, Object, T)
  nameWithType: AutoTriggerGoal<T>.Trigger(GoalTrigger, GoalSet, Object, T)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger(TinyLife.Goals.GoalTrigger, TinyLife.Goals.GoalSet, System.Object, T)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Trigger
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 45
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nTriggers all auto-triggered goals with the specified type constraint in the given <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method, it should ideally be called on a specific subclass like <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method for a <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>, their <xref href=\"TinyLife.Objects.Person.GetCurrentGoals\" data-throw-if-not-resolved=\"false\"></xref> should be used.\n"
  example: []
  syntax:
    content: public static void Trigger(GoalTrigger trigger, GoalSet set, object obj, T value)
    parameters:
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this goal
    - id: set
      type: TinyLife.Goals.GoalSet
      description: The goal set to search for auto-triggered goals
    - id: obj
      type: System.Object
      description: The object that should be passed to the <xref href="TinyLife.Goals.AutoGoalInfo.Condition" data-throw-if-not-resolved="false"></xref>
    - id: value
      type: '{T}'
      description: The value that should be passed to <xref href="TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Sub Trigger(trigger As GoalTrigger, set As GoalSet, obj As Object, value As T)
  overload: TinyLife.Goals.AutoTriggerGoal`1.Trigger*
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger(GoalTrigger, GoalSet, Object, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger(TinyLife.Goals.GoalTrigger, TinyLife.Goals.GoalSet, System.Object, T)
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Objects.Person,System.Object,`0)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Objects.Person,System.Object,`0)
  id: Trigger(TinyLife.Goals.GoalTrigger,TinyLife.Objects.Person,System.Object,`0)
  parent: TinyLife.Goals.AutoTriggerGoal`1
  langs:
  - csharp
  - vb
  name: Trigger(GoalTrigger, Person, Object, T)
  nameWithType: AutoTriggerGoal<T>.Trigger(GoalTrigger, Person, Object, T)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger(TinyLife.Goals.GoalTrigger, TinyLife.Objects.Person, System.Object, T)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/AutoTriggerGoal.cs
      branch: 0.20.1
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Trigger
    path: ../TinyLife/Goals/AutoTriggerGoal.cs
    startLine: 62
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nTriggers all auto-triggered goals with the specified type constraint for the given <xref href=\"TinyLife.Objects.Person\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen calling this method, it should ideally be called on a specific subclass like <xref href=\"TinyLife.Goals.AmountGoal\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"TinyLife.Goals.ConditionedGoal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"TinyLife.Goals.DistinctGoal\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static void Trigger(GoalTrigger trigger, Person person, object obj, T value)
    parameters:
    - id: trigger
      type: TinyLife.Goals.GoalTrigger
      description: The goal trigger that is triggering this goal
    - id: person
      type: TinyLife.Objects.Person
      description: The person that should be searched for goal sets using <xref href="TinyLife.Objects.Person.GetCurrentGoals" data-throw-if-not-resolved="false"></xref>
    - id: obj
      type: System.Object
      description: The object that should be passed to the <xref href="TinyLife.Goals.AutoGoalInfo.Condition" data-throw-if-not-resolved="false"></xref>
    - id: value
      type: '{T}'
      description: The value that should be passed to <xref href="TinyLife.Goals.AutoTriggerGoal%601.Trigger(%600)" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Shared Sub Trigger(trigger As GoalTrigger, person As Person, obj As Object, value As T)
  overload: TinyLife.Goals.AutoTriggerGoal`1.Trigger*
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger(GoalTrigger, Person, Object, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger(TinyLife.Goals.GoalTrigger, TinyLife.Objects.Person, System.Object, T)
references:
- uid: TinyLife.Goals.AutoGoalInfo
  commentId: T:TinyLife.Goals.AutoGoalInfo
  parent: TinyLife.Goals
  name: AutoGoalInfo
  nameWithType: AutoGoalInfo
  fullName: TinyLife.Goals.AutoGoalInfo
- uid: TinyLife.Goals.GoalTrigger
  commentId: T:TinyLife.Goals.GoalTrigger
  parent: TinyLife.Goals
  name: GoalTrigger
  nameWithType: GoalTrigger
  fullName: TinyLife.Goals.GoalTrigger
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  commentId: T:MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  parent: MLEM.Data.Json
  isExternal: true
  name: JsonTypeSafeGenericDataHolder
  nameWithType: JsonTypeSafeGenericDataHolder
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
- uid: TinyLife.Goals.Goal
  commentId: T:TinyLife.Goals.Goal
  parent: TinyLife.Goals
  name: Goal
  nameWithType: Goal
  fullName: TinyLife.Goals.Goal
- uid: MLEM.Misc.IGenericDataHolder
  commentId: T:MLEM.Misc.IGenericDataHolder
  parent: MLEM.Misc
  isExternal: true
  name: IGenericDataHolder
  nameWithType: IGenericDataHolder
  fullName: MLEM.Misc.IGenericDataHolder
- uid: TinyLife.Goals.Goal.Name
  commentId: F:TinyLife.Goals.Goal.Name
  parent: TinyLife.Goals.Goal
  name: Name
  nameWithType: Goal.Name
  fullName: TinyLife.Goals.Goal.Name
- uid: TinyLife.Goals.Goal.Set
  commentId: P:TinyLife.Goals.Goal.Set
  parent: TinyLife.Goals.Goal
  name: Set
  nameWithType: Goal.Set
  fullName: TinyLife.Goals.Goal.Set
- uid: TinyLife.Goals.Goal.Info
  commentId: P:TinyLife.Goals.Goal.Info
  parent: TinyLife.Goals.Goal
  name: Info
  nameWithType: Goal.Info
  fullName: TinyLife.Goals.Goal.Info
- uid: TinyLife.Goals.Goal.GetProgress
  commentId: M:TinyLife.Goals.Goal.GetProgress
  parent: TinyLife.Goals.Goal
  name: GetProgress()
  nameWithType: Goal.GetProgress()
  fullName: TinyLife.Goals.Goal.GetProgress()
  spec.csharp:
  - uid: TinyLife.Goals.Goal.GetProgress
    name: GetProgress
    nameWithType: Goal.GetProgress
    fullName: TinyLife.Goals.Goal.GetProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.GetProgress
    name: GetProgress
    nameWithType: Goal.GetProgress
    fullName: TinyLife.Goals.Goal.GetProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Goal.Reset
  commentId: M:TinyLife.Goals.Goal.Reset
  parent: TinyLife.Goals.Goal
  name: Reset()
  nameWithType: Goal.Reset()
  fullName: TinyLife.Goals.Goal.Reset()
  spec.csharp:
  - uid: TinyLife.Goals.Goal.Reset
    name: Reset
    nameWithType: Goal.Reset
    fullName: TinyLife.Goals.Goal.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.Reset
    name: Reset
    nameWithType: Goal.Reset
    fullName: TinyLife.Goals.Goal.Reset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Goal.GetDisplayedProgress
  commentId: M:TinyLife.Goals.Goal.GetDisplayedProgress
  parent: TinyLife.Goals.Goal
  name: GetDisplayedProgress()
  nameWithType: Goal.GetDisplayedProgress()
  fullName: TinyLife.Goals.Goal.GetDisplayedProgress()
  spec.csharp:
  - uid: TinyLife.Goals.Goal.GetDisplayedProgress
    name: GetDisplayedProgress
    nameWithType: Goal.GetDisplayedProgress
    fullName: TinyLife.Goals.Goal.GetDisplayedProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.GetDisplayedProgress
    name: GetDisplayedProgress
    nameWithType: Goal.GetDisplayedProgress
    fullName: TinyLife.Goals.Goal.GetDisplayedProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: JsonTypeSafeGenericDataHolder.SetData(String, Object)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: JsonTypeSafeGenericDataHolder.SetData
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.SetData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>(String)
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: JsonTypeSafeGenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: JsonTypeSafeGenericDataHolder.GetData<T>
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: JsonTypeSafeGenericDataHolder.GetData(Of T)
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetData(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  commentId: M:MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
  parent: MLEM.Data.Json.JsonTypeSafeGenericDataHolder
  isExternal: true
  name: GetDataKeys()
  nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys()
  fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: JsonTypeSafeGenericDataHolder.GetDataKeys
    fullName: MLEM.Data.Json.JsonTypeSafeGenericDataHolder.GetDataKeys
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AutoTriggerGoal`1.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<AutoTriggerGoal<T>>()
  nameWithType: Extensions.JsonCopy<AutoTriggerGoal<T>>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AutoTriggerGoal<T>>()
  nameWithType.vb: Extensions.JsonCopy(Of AutoTriggerGoal(Of T))()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AutoTriggerGoal(Of T))()
  name.vb: JsonCopy(Of AutoTriggerGoal(Of T))()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<AutoTriggerGoal<T>>
    nameWithType: Extensions.JsonCopy<AutoTriggerGoal<T>>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.AutoTriggerGoal<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of AutoTriggerGoal(Of T))
    nameWithType: Extensions.JsonCopy(Of AutoTriggerGoal(Of T))
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.AutoTriggerGoal(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.Json
  commentId: N:MLEM.Data.Json
  isExternal: true
  name: MLEM.Data.Json
  nameWithType: MLEM.Data.Json
  fullName: MLEM.Data.Json
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  isExternal: true
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.GoalInfo
  commentId: T:TinyLife.Goals.GoalInfo
  parent: TinyLife.Goals
  name: GoalInfo
  nameWithType: GoalInfo
  fullName: TinyLife.Goals.GoalInfo
- uid: TinyLife.Goals.AutoTriggerGoal`1.#ctor*
  commentId: Overload:TinyLife.Goals.AutoTriggerGoal`1.#ctor
  name: AutoTriggerGoal
  nameWithType: AutoTriggerGoal<T>.AutoTriggerGoal
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.AutoTriggerGoal
  nameWithType.vb: AutoTriggerGoal(Of T).AutoTriggerGoal
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).AutoTriggerGoal
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.Goals.AutoGoalInfo.Condition
  commentId: F:TinyLife.Goals.AutoGoalInfo.Condition
  isExternal: true
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger*
  commentId: Overload:TinyLife.Goals.AutoTriggerGoal`1.Trigger
  name: Trigger
  nameWithType: AutoTriggerGoal<T>.Trigger
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
  commentId: M:TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
  parent: TinyLife.Goals.Goal
  name: Validate(GoalSet)
  nameWithType: Goal.Validate(GoalSet)
  fullName: TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
  spec.csharp:
  - uid: TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
    name: Validate
    nameWithType: Goal.Validate
    fullName: TinyLife.Goals.Goal.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.Goal.Validate(TinyLife.Goals.GoalSet)
    name: Validate
    nameWithType: Goal.Validate
    fullName: TinyLife.Goals.Goal.Validate
  - name: (
    nameWithType: (
    fullName: (
  - uid: TinyLife.Goals.GoalSet
    name: GoalSet
    nameWithType: GoalSet
    fullName: TinyLife.Goals.GoalSet
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.AutoTriggerGoal`1.Validate*
  commentId: Overload:TinyLife.Goals.AutoTriggerGoal`1.Validate
  name: Validate
  nameWithType: AutoTriggerGoal<T>.Validate
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Validate
  nameWithType.vb: AutoTriggerGoal(Of T).Validate
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Validate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.AmountGoal
  commentId: T:TinyLife.Goals.AmountGoal
  name: AmountGoal
  nameWithType: AmountGoal
  fullName: TinyLife.Goals.AmountGoal
- uid: TinyLife.Goals.ConditionedGoal
  commentId: T:TinyLife.Goals.ConditionedGoal
  name: ConditionedGoal
  nameWithType: ConditionedGoal
  fullName: TinyLife.Goals.ConditionedGoal
- uid: TinyLife.Goals.DistinctGoal
  commentId: T:TinyLife.Goals.DistinctGoal
  name: DistinctGoal
  nameWithType: DistinctGoal
  fullName: TinyLife.Goals.DistinctGoal
- uid: TinyLife.Objects.Person
  commentId: T:TinyLife.Objects.Person
  parent: TinyLife.Objects
  name: Person
  nameWithType: Person
  fullName: TinyLife.Objects.Person
- uid: TinyLife.Objects.Person.GetCurrentGoals
  commentId: M:TinyLife.Objects.Person.GetCurrentGoals
  isExternal: true
- uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  commentId: M:TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
  name: Trigger(T)
  nameWithType: AutoTriggerGoal<T>.Trigger(T)
  fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger(T)
  nameWithType.vb: AutoTriggerGoal(Of T).Trigger(T)
  fullName.vb: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger(T)
  spec.csharp:
  - uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
    name: Trigger
    nameWithType: AutoTriggerGoal<T>.Trigger
    fullName: TinyLife.Goals.AutoTriggerGoal<T>.Trigger
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Goals.AutoTriggerGoal`1.Trigger(`0)
    name: Trigger
    nameWithType: AutoTriggerGoal(Of T).Trigger
    fullName: TinyLife.Goals.AutoTriggerGoal(Of T).Trigger
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Objects
  commentId: N:TinyLife.Objects
  name: TinyLife.Objects
  nameWithType: TinyLife.Objects
  fullName: TinyLife.Objects

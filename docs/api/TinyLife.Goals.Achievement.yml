### YamlMime:ManagedReference
items:
- uid: TinyLife.Goals.Achievement
  commentId: T:TinyLife.Goals.Achievement
  id: Achievement
  parent: TinyLife.Goals
  children:
  - TinyLife.Goals.Achievement.#ctor(TinyLife.Goals.AchievementType,TinyLife.Goals.GoalSet)
  - TinyLife.Goals.Achievement.Complete
  - TinyLife.Goals.Achievement.Completed
  - TinyLife.Goals.Achievement.CreateElement
  - TinyLife.Goals.Achievement.Goals
  - TinyLife.Goals.Achievement.Type
  - TinyLife.Goals.Achievement.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  - TinyLife.Goals.Achievement.Validate
  langs:
  - csharp
  - vb
  name: Achievement
  nameWithType: Achievement
  fullName: TinyLife.Goals.Achievement
  type: Class
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Achievement
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 156
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nA class that contains a <xref href=\"TinyLife.Goals.AchievementType\" data-throw-if-not-resolved=\"false\"></xref> and represents an achievement that can be gained by the player, either through a <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> or through <xref href=\"TinyLife.World.Map.CompleteAchievement(TinyLife.Goals.AchievementType)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe game&apos;s default achievements are also available on Steam and other platforms, and get completed automatically when their in-game counterparts are completed.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Achievement
    content.vb: >-
      <DataContract>

      Public Class Achievement
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - TinyLife.Goals.Achievement.TinyLife.Utilities.Extensions.JsonCopy``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TinyLife.Goals.Achievement.Type
  commentId: F:TinyLife.Goals.Achievement.Type
  id: Type
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Achievement.Type
  fullName: TinyLife.Goals.Achievement.Type
  type: Field
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Type
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 163
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThis achievement instance&apos;s underlying <xref href=\"TinyLife.Goals.AchievementType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public readonly AchievementType Type
    return:
      type: TinyLife.Goals.AchievementType
    content.vb: >-
      <DataMember>

      Public ReadOnly Type As AchievementType
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TinyLife.Goals.Achievement.Goals
  commentId: P:TinyLife.Goals.Achievement.Goals
  id: Goals
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Goals
  nameWithType: Achievement.Goals
  fullName: TinyLife.Goals.Achievement.Goals
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Goals
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 167
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nThe <xref href=\"TinyLife.Goals.GoalSet\" data-throw-if-not-resolved=\"false\"></xref> that this achievement is trying to complete, or null if the underlying <xref href=\"TinyLife.Goals.Achievement.Type\" data-throw-if-not-resolved=\"false\"></xref> does not contain a set of <xref href=\"TinyLife.Goals.AchievementType.Goals\" data-throw-if-not-resolved=\"false\"></xref> or this achievement is <xref href=\"TinyLife.Goals.Achievement.Completed\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public GoalSet Goals { get; protected set; }
    parameters: []
    return:
      type: TinyLife.Goals.GoalSet
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property Goals As GoalSet
  overload: TinyLife.Goals.Achievement.Goals*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Achievement.Completed
  commentId: P:TinyLife.Goals.Achievement.Completed
  id: Completed
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Completed
  nameWithType: Achievement.Completed
  fullName: TinyLife.Goals.Achievement.Completed
  type: Property
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Completed
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 173
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nStores whether this achievement has already been completed in the current save file.\nBy default, when this is set to <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref>, <xref href=\"TinyLife.Goals.Achievement.Goals\" data-throw-if-not-resolved=\"false\"></xref> is also set to null.\n"
  example: []
  syntax:
    content: >-
      [DataMember(EmitDefaultValue = false)]

      public bool Completed { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember(EmitDefaultValue:=False)>

      Public Property Completed As Boolean
  overload: TinyLife.Goals.Achievement.Completed*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: EmitDefaultValue
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: TinyLife.Goals.Achievement.#ctor(TinyLife.Goals.AchievementType,TinyLife.Goals.GoalSet)
  commentId: M:TinyLife.Goals.Achievement.#ctor(TinyLife.Goals.AchievementType,TinyLife.Goals.GoalSet)
  id: '#ctor(TinyLife.Goals.AchievementType,TinyLife.Goals.GoalSet)'
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Achievement(AchievementType, GoalSet)
  nameWithType: Achievement.Achievement(AchievementType, GoalSet)
  fullName: TinyLife.Goals.Achievement.Achievement(TinyLife.Goals.AchievementType, TinyLife.Goals.GoalSet)
  type: Constructor
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: .ctor
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 182
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates a new achievement with the given settings.\nThis constructor is called by <xref href=\"TinyLife.Goals.AchievementType.Construct\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Achievement(AchievementType type, GoalSet goals = null)
    parameters:
    - id: type
      type: TinyLife.Goals.AchievementType
      description: This achievement instance&apos;s underlying <xref href="TinyLife.Goals.AchievementType" data-throw-if-not-resolved="false"></xref>.
    - id: goals
      type: TinyLife.Goals.GoalSet
      description: The <xref href="TinyLife.Goals.GoalSet" data-throw-if-not-resolved="false"></xref> that this achievement is trying to complete.
    content.vb: Public Sub New(type As AchievementType, goals As GoalSet = Nothing)
  overload: TinyLife.Goals.Achievement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TinyLife.Goals.Achievement.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.Goals.Achievement.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  id: Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Update(GameTime, TimeSpan, Single)
  nameWithType: Achievement.Update(GameTime, TimeSpan, Single)
  fullName: TinyLife.Goals.Achievement.Update(Microsoft.Xna.Framework.GameTime, System.TimeSpan, System.Single)
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Update
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 194
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nUpdates this achievement, querying its <xref href=\"TinyLife.Goals.Achievement.Goals\" data-throw-if-not-resolved=\"false\"></xref> and completing it if necessary.\nThis method is called every update frame in <xref href=\"TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime%2cSystem.TimeSpan%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Update(GameTime time, TimeSpan passedInGame, float speedMultiplier)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time.
    - id: passedInGame
      type: System.TimeSpan
      description: The amount of time that has passed since the last update, in in-game time.
    - id: speedMultiplier
      type: System.Single
      description: The speed multiplier that time is currently passing with.
    content.vb: Public Overridable Sub Update(time As GameTime, passedInGame As TimeSpan, speedMultiplier As Single)
  overload: TinyLife.Goals.Achievement.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Achievement.CreateElement
  commentId: M:TinyLife.Goals.Achievement.CreateElement
  id: CreateElement
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: CreateElement()
  nameWithType: Achievement.CreateElement()
  fullName: TinyLife.Goals.Achievement.CreateElement()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: CreateElement
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 204
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCreates the <xref href=\"MLEM.Ui.Elements.Element\" data-throw-if-not-resolved=\"false\"></xref> that is used to display this achievement.\nCustom implementations can display custom progress or other custom information.\n"
  example: []
  syntax:
    content: public virtual Element CreateElement()
    return:
      type: MLEM.Ui.Elements.Element
      description: The element used to display this achievement.
    content.vb: Public Overridable Function CreateElement As Element
  overload: TinyLife.Goals.Achievement.CreateElement*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Achievement.Validate
  commentId: M:TinyLife.Goals.Achievement.Validate
  id: Validate
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Achievement.Validate()
  fullName: TinyLife.Goals.Achievement.Validate()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Validate
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 223
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nValidates this achievement when loading from disk, validating its <xref href=\"TinyLife.Goals.Achievement.Goals\" data-throw-if-not-resolved=\"false\"></xref> and returning whether the validation was successful.\n"
  example: []
  syntax:
    content: public virtual bool Validate()
    return:
      type: System.Boolean
      description: Whether this achievement is valid.
    content.vb: Public Overridable Function Validate As Boolean
  overload: TinyLife.Goals.Achievement.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TinyLife.Goals.Achievement.Complete
  commentId: M:TinyLife.Goals.Achievement.Complete
  id: Complete
  parent: TinyLife.Goals.Achievement
  langs:
  - csharp
  - vb
  name: Complete()
  nameWithType: Achievement.Complete()
  fullName: TinyLife.Goals.Achievement.Complete()
  type: Method
  source:
    remote:
      path: TinyLife/Goals/Achievement.cs
      branch: main
      repo: https://git.ellpeck.de/Ellpeck/TinyLife
    id: Complete
    path: ../TinyLife/Goals/Achievement.cs
    startLine: 231
  assemblies:
  - Tiny Life
  namespace: TinyLife.Goals
  summary: "\nCompletes this achievement. If <xref href=\"TinyLife.Goals.Achievement.Completed\" data-throw-if-not-resolved=\"false\"></xref> is already true, this method should do nothing.\nNote that this method completes an achievement even if its <xref href=\"TinyLife.Goals.Achievement.Goals\" data-throw-if-not-resolved=\"false\"></xref> are not met yet.\n"
  example: []
  syntax:
    content: public virtual void Complete()
    content.vb: Public Overridable Sub Complete
  overload: TinyLife.Goals.Achievement.Complete*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TinyLife.Goals.AchievementType
  commentId: T:TinyLife.Goals.AchievementType
  parent: TinyLife.Goals
  name: AchievementType
  nameWithType: AchievementType
  fullName: TinyLife.Goals.AchievementType
- uid: TinyLife.Goals.GoalSet
  commentId: T:TinyLife.Goals.GoalSet
  parent: TinyLife.Goals
  name: GoalSet
  nameWithType: GoalSet
  fullName: TinyLife.Goals.GoalSet
- uid: TinyLife.World.Map.CompleteAchievement(TinyLife.Goals.AchievementType)
  commentId: M:TinyLife.World.Map.CompleteAchievement(TinyLife.Goals.AchievementType)
  isExternal: true
- uid: TinyLife.Goals
  commentId: N:TinyLife.Goals
  name: TinyLife.Goals
  nameWithType: TinyLife.Goals
  fullName: TinyLife.Goals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Goals.Achievement.TinyLife.Utilities.Extensions.JsonCopy``1
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  parent: TinyLife.Utilities.Extensions
  definition: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<Achievement>()
  nameWithType: Extensions.JsonCopy<Achievement>()
  fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Achievement>()
  nameWithType.vb: Extensions.JsonCopy(Of Achievement)()
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Achievement)()
  name.vb: JsonCopy(Of Achievement)()
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy<Achievement>
    nameWithType: Extensions.JsonCopy<Achievement>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<TinyLife.Goals.Achievement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1
    name: JsonCopy(Of Achievement)
    nameWithType: Extensions.JsonCopy(Of Achievement)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of TinyLife.Goals.Achievement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  commentId: M:TinyLife.Utilities.Extensions.JsonCopy``1(``0)
  name: JsonCopy<T>(T)
  nameWithType: Extensions.JsonCopy<T>(T)
  fullName: TinyLife.Utilities.Extensions.JsonCopy<T>(T)
  nameWithType.vb: Extensions.JsonCopy(Of T)(T)
  fullName.vb: TinyLife.Utilities.Extensions.JsonCopy(Of T)(T)
  name.vb: JsonCopy(Of T)(T)
  spec.csharp:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy<T>
    nameWithType: Extensions.JsonCopy<T>
    fullName: TinyLife.Utilities.Extensions.JsonCopy<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TinyLife.Utilities.Extensions.JsonCopy``1(``0)
    name: JsonCopy(Of T)
    nameWithType: Extensions.JsonCopy(Of T)
    fullName: TinyLife.Utilities.Extensions.JsonCopy(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TinyLife.Utilities.Extensions
  commentId: T:TinyLife.Utilities.Extensions
  parent: TinyLife.Utilities
  name: Extensions
  nameWithType: Extensions
  fullName: TinyLife.Utilities.Extensions
- uid: TinyLife.Utilities
  commentId: N:TinyLife.Utilities
  name: TinyLife.Utilities
  nameWithType: TinyLife.Utilities
  fullName: TinyLife.Utilities
- uid: TinyLife.Goals.Achievement.Type
  commentId: F:TinyLife.Goals.Achievement.Type
  isExternal: true
- uid: TinyLife.Goals.AchievementType.Goals
  commentId: F:TinyLife.Goals.AchievementType.Goals
  isExternal: true
- uid: TinyLife.Goals.Achievement.Completed
  commentId: P:TinyLife.Goals.Achievement.Completed
  isExternal: true
- uid: TinyLife.Goals.Achievement.Goals*
  commentId: Overload:TinyLife.Goals.Achievement.Goals
  name: Goals
  nameWithType: Achievement.Goals
  fullName: TinyLife.Goals.Achievement.Goals
- uid: TinyLife.Goals.Achievement.Goals
  commentId: P:TinyLife.Goals.Achievement.Goals
  isExternal: true
- uid: TinyLife.Goals.Achievement.Completed*
  commentId: Overload:TinyLife.Goals.Achievement.Completed
  name: Completed
  nameWithType: Achievement.Completed
  fullName: TinyLife.Goals.Achievement.Completed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TinyLife.Goals.AchievementType.Construct
  commentId: M:TinyLife.Goals.AchievementType.Construct
  isExternal: true
- uid: TinyLife.Goals.Achievement.#ctor*
  commentId: Overload:TinyLife.Goals.Achievement.#ctor
  name: Achievement
  nameWithType: Achievement.Achievement
  fullName: TinyLife.Goals.Achievement.Achievement
- uid: TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  commentId: M:TinyLife.World.Map.Update(Microsoft.Xna.Framework.GameTime,System.TimeSpan,System.Single)
  isExternal: true
- uid: TinyLife.Goals.Achievement.Update*
  commentId: Overload:TinyLife.Goals.Achievement.Update
  name: Update
  nameWithType: Achievement.Update
  fullName: TinyLife.Goals.Achievement.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: MLEM.Ui.Elements.Element
  commentId: T:MLEM.Ui.Elements.Element
  parent: MLEM.Ui.Elements
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: MLEM.Ui.Elements.Element
- uid: TinyLife.Goals.Achievement.CreateElement*
  commentId: Overload:TinyLife.Goals.Achievement.CreateElement
  name: CreateElement
  nameWithType: Achievement.CreateElement
  fullName: TinyLife.Goals.Achievement.CreateElement
- uid: MLEM.Ui.Elements
  commentId: N:MLEM.Ui.Elements
  isExternal: true
  name: MLEM.Ui.Elements
  nameWithType: MLEM.Ui.Elements
  fullName: MLEM.Ui.Elements
- uid: TinyLife.Goals.Achievement.Validate*
  commentId: Overload:TinyLife.Goals.Achievement.Validate
  name: Validate
  nameWithType: Achievement.Validate
  fullName: TinyLife.Goals.Achievement.Validate
- uid: TinyLife.Goals.Achievement.Complete*
  commentId: Overload:TinyLife.Goals.Achievement.Complete
  name: Complete
  nameWithType: Achievement.Complete
  fullName: TinyLife.Goals.Achievement.Complete
